---
project:
  name: The Ember API
  description: ! 'The Ember API: a framework for building ambitious web applications'
  version: 1.0.0
  url: http://emberjs.com/
  sha: v1.0.0
files:
  ../packages/ember-application/lib/ext/controller.js:
    name: ../packages/ember-application/lib/ext/controller.js
    modules:
      ember-application: 1
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-application/lib/system/application.js:
    name: ../packages/ember-application/lib/system/application.js
    modules: {}
    classes:
      Ember.Application: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-application/lib/system/resolver.js:
    name: ../packages/ember-application/lib/system/resolver.js
    modules: {}
    classes:
      Ember.DefaultResolver: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-application/lib/main.js:
    name: ../packages/ember-application/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-debug/lib/main.js:
    name: ../packages/ember-debug/lib/main.js
    modules:
      ember-debug: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars-compiler/lib/main.js:
    name: ../packages/ember-handlebars-compiler/lib/main.js
    modules:
      ember-handlebars-compiler: 1
    classes:
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors:
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
  ../packages/ember-handlebars/lib/controls/checkbox.js:
    name: ../packages/ember-handlebars/lib/controls/checkbox.js
    modules:
      ember-handlebars: 1
    classes:
      Ember.Checkbox: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/select.js:
    name: ../packages/ember-handlebars/lib/controls/select.js
    modules: {}
    classes:
      Ember.Select: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_area.js:
    name: ../packages/ember-handlebars/lib/controls/text_area.js
    modules: {}
    classes:
      Ember.TextArea: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_field.js:
    name: ../packages/ember-handlebars/lib/controls/text_field.js
    modules: {}
    classes:
      Ember.TextField: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_support.js:
    name: ../packages/ember-handlebars/lib/controls/text_support.js
    modules: {}
    classes:
      Ember.TextSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/helpers/binding.js:
    name: ../packages/ember-handlebars/lib/helpers/binding.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/collection.js:
    name: ../packages/ember-handlebars/lib/helpers/collection.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/debug.js:
    name: ../packages/ember-handlebars/lib/helpers/debug.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/each.js:
    name: ../packages/ember-handlebars/lib/helpers/each.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/loc.js:
    name: ../packages/ember-handlebars/lib/helpers/loc.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/partial.js:
    name: ../packages/ember-handlebars/lib/helpers/partial.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/template.js:
    name: ../packages/ember-handlebars/lib/helpers/template.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/unbound.js:
    name: ../packages/ember-handlebars/lib/helpers/unbound.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/view.js:
    name: ../packages/ember-handlebars/lib/helpers/view.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/yield.js:
    name: ../packages/ember-handlebars/lib/helpers/yield.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/views/handlebars_bound_view.js:
    name: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    modules: {}
    classes:
      Ember._HandlebarsBoundView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/views/metamorph_view.js:
    name: ../packages/ember-handlebars/lib/views/metamorph_view.js
    modules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls.js:
    name: ../packages/ember-handlebars/lib/controls.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/ext.js:
    name: ../packages/ember-handlebars/lib/ext.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/loader.js:
    name: ../packages/ember-handlebars/lib/loader.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/main.js:
    name: ../packages/ember-handlebars/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars/lib/string.js:
    name: ../packages/ember-handlebars/lib/string.js
    modules: {}
    classes: {}
    fors:
      Ember.String: 1
      String: 1
    namespaces: {}
  ../packages/ember-metal/lib/array.js:
    name: ../packages/ember-metal/lib/array.js
    modules: {}
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/binding.js:
    name: ../packages/ember-metal/lib/binding.js
    modules: {}
    classes:
      Ember.Binding: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/computed.js:
    name: ../packages/ember-metal/lib/computed.js
    modules: {}
    classes:
      Ember.ComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/core.js:
    name: ../packages/ember-metal/lib/core.js
    modules: {}
    classes:
      Ember: 1
      Ember.Logger: 1
    fors:
      Ember.Logger: 1
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/events.js:
    name: ../packages/ember-metal/lib/events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/get_properties.js:
    name: ../packages/ember-metal/lib/get_properties.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/instrumentation.js:
    name: ../packages/ember-metal/lib/instrumentation.js
    modules: {}
    classes:
      Ember.Instrumentation: 1
    fors: {}
    namespaces:
      Ember: 1
      Ember.Instrumentation: 1
  ../packages/ember-metal/lib/main.js:
    name: ../packages/ember-metal/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/map.js:
    name: ../packages/ember-metal/lib/map.js
    modules: {}
    classes:
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/mixin.js:
    name: ../packages/ember-metal/lib/mixin.js
    modules: {}
    classes:
      Ember.Mixin: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/observer.js:
    name: ../packages/ember-metal/lib/observer.js
    modules:
      ember-metal: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/platform.js:
    name: ../packages/ember-metal/lib/platform.js
    modules: {}
    classes:
      Ember.platform: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/properties.js:
    name: ../packages/ember-metal/lib/properties.js
    modules: {}
    classes:
      Ember.Descriptor: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/property_events.js:
    name: ../packages/ember-metal/lib/property_events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/property_get.js:
    name: ../packages/ember-metal/lib/property_get.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/property_set.js:
    name: ../packages/ember-metal/lib/property_set.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/run_loop.js:
    name: ../packages/ember-metal/lib/run_loop.js
    modules: {}
    classes:
      Ember.run: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/set_properties.js:
    name: ../packages/ember-metal/lib/set_properties.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/utils.js:
    name: ../packages/ember-metal/lib/utils.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/watching.js:
    name: ../packages/ember-metal/lib/watching.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-routing/lib/ext/controller.js:
    name: ../packages/ember-routing/lib/ext/controller.js
    modules:
      ember-routing: 1
    classes: {}
    fors:
      Ember.ControllerMixin: 1
    namespaces: {}
  ../packages/ember-routing/lib/ext/view.js:
    name: ../packages/ember-routing/lib/ext/view.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/helpers/action.js:
    name: ../packages/ember-routing/lib/helpers/action.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/control.js:
    name: ../packages/ember-routing/lib/helpers/control.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/link_to.js:
    name: ../packages/ember-routing/lib/helpers/link_to.js
    modules: {}
    classes:
      Ember.LinkView: 1
    fors:
      Ember.Handlebars.helpers: 1
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/helpers/outlet.js:
    name: ../packages/ember-routing/lib/helpers/outlet.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/render.js:
    name: ../packages/ember-routing/lib/helpers/render.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/location/api.js:
    name: ../packages/ember-routing/lib/location/api.js
    modules: {}
    classes:
      Ember.Location: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/hash_location.js:
    name: ../packages/ember-routing/lib/location/hash_location.js
    modules: {}
    classes:
      Ember.HashLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/history_location.js:
    name: ../packages/ember-routing/lib/location/history_location.js
    modules: {}
    classes:
      Ember.HistoryLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/none_location.js:
    name: ../packages/ember-routing/lib/location/none_location.js
    modules: {}
    classes:
      Ember.NoneLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/system/controller_for.js:
    name: ../packages/ember-routing/lib/system/controller_for.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-routing/lib/system/dsl.js:
    name: ../packages/ember-routing/lib/system/dsl.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/system/route.js:
    name: ../packages/ember-routing/lib/system/route.js
    modules: {}
    classes:
      Ember.Route: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/system/router.js:
    name: ../packages/ember-routing/lib/system/router.js
    modules: {}
    classes:
      Ember.Router: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/ext.js:
    name: ../packages/ember-routing/lib/ext.js
    modules:
      ember-views: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/main.js:
    name: ../packages/ember-routing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-runtime/lib/computed/array_computed.js:
    name: ../packages/ember-runtime/lib/computed/array_computed.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-runtime/lib/computed/reduce_computed.js:
    name: ../packages/ember-runtime/lib/computed/reduce_computed.js
    modules: {}
    classes:
      Ember.ReduceComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/computed/reduce_computed_macros.js:
    name: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
    modules:
      ember-runtime: 1
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-runtime/lib/controllers/array_controller.js:
    name: ../packages/ember-runtime/lib/controllers/array_controller.js
    modules: {}
    classes:
      Ember.ArrayController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/controller.js:
    name: ../packages/ember-runtime/lib/controllers/controller.js
    modules: {}
    classes:
      Ember.Controller: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/object_controller.js:
    name: ../packages/ember-runtime/lib/controllers/object_controller.js
    modules: {}
    classes:
      Ember.ObjectController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/ext/ember.js:
    name: ../packages/ember-runtime/lib/ext/ember.js
    modules: {}
    classes:
      Ember.RSVP: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/ext/function.js:
    name: ../packages/ember-runtime/lib/ext/function.js
    modules: {}
    classes: {}
    fors:
      Function: 1
    namespaces: {}
  ../packages/ember-runtime/lib/ext/string.js:
    name: ../packages/ember-runtime/lib/ext/string.js
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  ../packages/ember-runtime/lib/mixins/action_handler.js:
    name: ../packages/ember-runtime/lib/mixins/action_handler.js
    modules: {}
    classes:
      Ember.ActionHandler: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/array.js:
    name: ../packages/ember-runtime/lib/mixins/array.js
    modules: {}
    classes:
      Ember.Array: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/comparable.js:
    name: ../packages/ember-runtime/lib/mixins/comparable.js
    modules: {}
    classes:
      Ember.Comparable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/copyable.js:
    name: ../packages/ember-runtime/lib/mixins/copyable.js
    modules: {}
    classes:
      Ember.Copyable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/deferred.js:
    name: ../packages/ember-runtime/lib/mixins/deferred.js
    modules: {}
    classes:
      Ember.Deferred: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/enumerable.js
    modules: {}
    classes:
      Ember.Enumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/evented.js:
    name: ../packages/ember-runtime/lib/mixins/evented.js
    modules: {}
    classes:
      Ember.Evented: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/freezable.js:
    name: ../packages/ember-runtime/lib/mixins/freezable.js
    modules: {}
    classes:
      Ember.Freezable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_array.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_array.js
    modules: {}
    classes:
      Ember.MutableArray: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    modules: {}
    classes:
      Ember.MutableEnumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/observable.js:
    name: ../packages/ember-runtime/lib/mixins/observable.js
    modules: {}
    classes:
      Ember.Observable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/promise_proxy.js:
    name: ../packages/ember-runtime/lib/mixins/promise_proxy.js
    modules: {}
    classes:
      Ember.PromiseProxyMixin: 1
    fors: {}
    namespaces: {}
  ../packages/ember-runtime/lib/mixins/sortable.js:
    name: ../packages/ember-runtime/lib/mixins/sortable.js
    modules: {}
    classes:
      Ember.SortableMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/target_action_support.js:
    name: ../packages/ember-runtime/lib/mixins/target_action_support.js
    modules: {}
    classes:
      Ember.TargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/array_proxy.js:
    name: ../packages/ember-runtime/lib/system/array_proxy.js
    modules: {}
    classes:
      Ember.ArrayProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/core_object.js:
    name: ../packages/ember-runtime/lib/system/core_object.js
    modules: {}
    classes:
      Ember.CoreObject: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/each_proxy.js:
    name: ../packages/ember-runtime/lib/system/each_proxy.js
    modules: {}
    classes:
      Ember.EachProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/lazy_load.js:
    name: ../packages/ember-runtime/lib/system/lazy_load.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-runtime/lib/system/namespace.js:
    name: ../packages/ember-runtime/lib/system/namespace.js
    modules: {}
    classes:
      Ember.Namespace: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/native_array.js:
    name: ../packages/ember-runtime/lib/system/native_array.js
    modules: {}
    classes:
      Ember.NativeArray: 1
    fors:
      Ember: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object.js:
    name: ../packages/ember-runtime/lib/system/object.js
    modules: {}
    classes:
      Ember.Object: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object_proxy.js:
    name: ../packages/ember-runtime/lib/system/object_proxy.js
    modules: {}
    classes:
      Ember.ObjectProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/set.js:
    name: ../packages/ember-runtime/lib/system/set.js
    modules: {}
    classes:
      Ember.Set: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/string.js:
    name: ../packages/ember-runtime/lib/system/string.js
    modules: {}
    classes:
      Ember.String: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/subarray.js:
    name: ../packages/ember-runtime/lib/system/subarray.js
    modules: {}
    classes:
      Ember.SubArray: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/tracked_array.js:
    name: ../packages/ember-runtime/lib/system/tracked_array.js
    modules: {}
    classes:
      Ember.TrackedArray: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/core.js:
    name: ../packages/ember-runtime/lib/core.js
    modules: {}
    classes:
      Ember.Error: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/main.js:
    name: ../packages/ember-runtime/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-testing/lib/adapters.js:
    name: ../packages/ember-testing/lib/adapters.js
    modules:
      ember-testing: 1
    classes:
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
    fors: {}
    namespaces:
      Ember.Test: 1
  ../packages/ember-testing/lib/helpers.js:
    name: ../packages/ember-testing/lib/helpers.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-testing/lib/main.js:
    name: ../packages/ember-testing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-testing/lib/support.js:
    name: ../packages/ember-testing/lib/support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-testing/lib/test.js:
    name: ../packages/ember-testing/lib/test.js
    modules: {}
    classes:
      Ember.Test: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/mixins/view_target_action_support.js:
    name: ../packages/ember-views/lib/mixins/view_target_action_support.js
    modules: {}
    classes:
      Ember.ViewTargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/controller.js:
    name: ../packages/ember-views/lib/system/controller.js
    modules: {}
    classes:
      Ember.ControllerMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/event_dispatcher.js:
    name: ../packages/ember-views/lib/system/event_dispatcher.js
    modules: {}
    classes:
      Ember.EventDispatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/ext.js:
    name: ../packages/ember-views/lib/system/ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/jquery_ext.js:
    name: ../packages/ember-views/lib/system/jquery_ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/render_buffer.js:
    name: ../packages/ember-views/lib/system/render_buffer.js
    modules: {}
    classes:
      Ember.RenderBuffer: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/utils.js:
    name: ../packages/ember-views/lib/system/utils.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/default.js:
    name: ../packages/ember-views/lib/views/states/default.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/destroying.js:
    name: ../packages/ember-views/lib/views/states/destroying.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_buffer.js:
    name: ../packages/ember-views/lib/views/states/in_buffer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_dom.js:
    name: ../packages/ember-views/lib/views/states/in_dom.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/pre_render.js:
    name: ../packages/ember-views/lib/views/states/pre_render.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/collection_view.js:
    name: ../packages/ember-views/lib/views/collection_view.js
    modules: {}
    classes:
      Ember.CollectionView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/component.js:
    name: ../packages/ember-views/lib/views/component.js
    modules: {}
    classes:
      Ember.Component: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/container_view.js:
    name: ../packages/ember-views/lib/views/container_view.js
    modules: {}
    classes:
      Ember.ContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/view.js:
    name: ../packages/ember-views/lib/views/view.js
    modules: {}
    classes:
      Ember.CoreView: 1
      Ember.View: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/core.js:
    name: ../packages/ember-views/lib/core.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-views/lib/main.js:
    name: ../packages/ember-views/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember/lib/main.js:
    name: ../packages/ember/lib/main.js
    modules:
      ember: 1
    classes: {}
    fors: {}
    namespaces: {}
modules:
  ember:
    name: ember
    submodules:
      ember-application: 1
      ember-debug: 1
      ember-handlebars-compiler: 1
      ember-handlebars: 1
      ember-routing: 1
      ember-views: 1
      ember-runtime: 1
      ember-testing: 1
    classes:
      Ember.ControllerMixin: 1
      Ember.Application: 1
      Ember.DefaultResolver: 1
      Ember: 1
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
      Ember.String: 1
      String: 1
      Ember.Logger: 1
      Ember.Mixin: 1
      Ember.LinkView: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
      Ember.ReduceComputedProperty: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Ember.RSVP: 1
      Function: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.SubArray: 1
      Ember.TrackedArray: 1
      Ember.Error: 1
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
      Ember.Test: 1
      Ember.ViewTargetActionSupport: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.Component: 1
      Ember.ContainerView: 1
      Ember.CoreView: 1
      Ember.View: 1
    fors:
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.helpers: 1
      Ember: 1
      Ember.String: 1
      String: 1
      Ember.Logger: 1
      Ember.ControllerMixin: 1
      Function: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
      Ember.Test: 1
    tag: module
    file: ../packages/ember-views/lib/views/view.js
    line: 287
    description: Ember
  ember-application:
    name: ember-application
    submodules: {}
    classes:
      Ember.Application: 1
      Ember.DefaultResolver: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-application/lib/system/resolver.js
    line: 11
    description: Ember Application
    requires:
    - name: ember-views
    - name: ember-routing
  ember-debug:
    name: ember-debug
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: ../packages/ember-debug/lib/main.js
    line: 3
    description: Ember Debug
  ember-handlebars-compiler:
    name: ember-handlebars-compiler
    submodules: {}
    classes:
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
    module: ember
    namespace: ''
    file: ../packages/ember-handlebars-compiler/lib/main.js
    line: 141
    description: ! 'Prepares the Handlebars templating library for use inside Ember''s
      view

      system.


      The `Ember.Handlebars` object is the standard Handlebars library, extended to

      use Ember''s `get()` method instead of direct property access, which allows

      computed properties to be used inside templates.


      To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.

      This will return a function that can be used by `Ember.View` for rendering.'
  ember-handlebars:
    name: ember-handlebars
    submodules: {}
    classes:
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 123
    description: Ember Handlebars
    requires:
    - name: ember-views
  ember-metal:
    name: ember-metal
    submodules: {}
    classes:
      Ember: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.Logger: 1
      Ember.Instrumentation: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Ember.platform: 1
      Ember.Descriptor: 1
      Ember.run: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
      Ember.Instrumentation: 1
    tag: module
    file: ../packages/ember-metal/lib/run_loop.js
    line: 27
    description: ! 'All Ember methods and functions are defined inside of this namespace.
      You

      generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand `Em` instead of `Ember`.


      Ember-Runtime is a framework that provides core functions for Ember including

      cross-platform functions, support for property observing and objects. Its

      focus is on small size and performance. You can use this in place of or

      along-side other cross-platform libraries such as jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    module: ember
  ember-routing:
    name: ember-routing
    submodules: {}
    classes:
      Ember.LinkView: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-routing/lib/system/router.js
    line: 14
    description: Ember Routing
    requires:
    - name: ember-views
  ember-views:
    name: ember-views
    submodules: {}
    classes:
      Ember.ControllerMixin: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.Component: 1
      Ember.ContainerView: 1
      Ember.CoreView: 1
      Ember.View: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-views/lib/views/view.js
    line: 287
    description: Ember Views
    requires:
    - name: ember-runtime
    tag: main
    itemtype: main
  ember-runtime:
    name: ember-runtime
    submodules: {}
    classes:
      Ember.String: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.Error: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-runtime/lib/core.js
    line: 291
    description: Ember Runtime
    requires:
    - name: ember-metal
  ember-testing:
    name: ember-testing
    submodules: {}
    classes:
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
      Ember.Test: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember.Test: 1
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-testing/lib/test.js
    line: 10
    description: Ember Testing
    requires:
    - name: ember-application
classes:
  Ember.ControllerMixin:
    name: Ember.ControllerMixin
    shortname: Ember.ControllerMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    - Ember.Controller
    - Ember.ObjectController
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/controller.js
    line: 11
    description: Additional methods for the ControllerMixin
  Ember.Application:
    name: Ember.Application
    shortname: Ember.Application
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: ../packages/ember-application/lib/system/application.js
    line: 28
    description: ! "An instance of `Ember.Application` is the starting point for every
      Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects
      that make up your app.\n\nEach Ember app has one and only one `Ember.Application`
      object. In fact, the\nvery first thing you should do in your application is
      create the instance:\n\n```javascript\nwindow.App = Ember.Application.create();\n```\n\nTypically,
      the application object is the only global variable. All other\nclasses in your
      app should be properties on the `Ember.Application` instance,\nwhich highlights
      its first role: a global namespace.\n\nFor example, if you define a view class,
      it might look like this:\n\n```javascript\nApp.MyView = Ember.View.extend();\n```\n\nBy
      default, calling `Ember.Application.create()` will automatically initialize\nyour
      application by calling the `Ember.Application.initialize()` method. If\nyou
      need to delay initialization, you can call your app's `deferReadiness()`\nmethod.
      When you are ready for your app to be initialized, call its\n`advanceReadiness()`
      method.\n\nYou can define a `ready` method on the `Ember.Application` instance,
      which\nwill be run by Ember when the application is initialized.\n\nBecause
      `Ember.Application` inherits from `Ember.Namespace`, any classes\nyou create
      will have useful string representations when calling `toString()`.\nSee the
      `Ember.Namespace` documentation for more information.\n\nWhile you can think
      of your `Ember.Application` as a container that holds the\nother classes in
      your application, there are several other responsibilities\ngoing on under-the-hood
      that you may want to understand.\n\n### Event Delegation\n\nEmber uses a technique
      called _event delegation_. This allows the framework\nto set up a global, shared
      event listener instead of requiring each view to\ndo it manually. For example,
      instead of each view registering its own\n`mousedown` listener on its associated
      element, Ember sets up a `mousedown`\nlistener on the `body`.\n\nIf a `mousedown`
      event occurs, Ember will look at the target of the event and\nstart walking
      up the DOM node tree, finding corresponding views and invoking\ntheir `mouseDown`
      method as it goes.\n\n`Ember.Application` has a number of default events that
      it listens for, as\nwell as a mapping from lowercase events to camel-cased view
      method names. For\nexample, the `keypress` event causes the `keyPress` method
      on the view to be\ncalled, the `dblclick` event causes `doubleClick` to be called,
      and so on.\n\nIf there is a browser event that Ember does not listen for by
      default, you\ncan specify custom events and their corresponding view method
      names by\nsetting the application's `customEvents` property:\n\n```javascript\nApp
      = Ember.Application.create({\n  customEvents: {\n    // add support for the
      loadedmetadata media\n    // player event\n    'loadedmetadata': \"loadedMetadata\"\n
      \ }\n});\n```\n\nBy default, the application sets up these event listeners on
      the document\nbody. However, in cases where you are embedding an Ember application
      inside\nan existing page, you may want it to set up the listeners on an element\ninside
      the body.\n\nFor example, if only events inside a DOM element with the ID of
      `ember-app`\nshould be delegated, set your application's `rootElement` property:\n\n```javascript\nwindow.App
      = Ember.Application.create({\n  rootElement: '#ember-app'\n});\n```\n\nThe `rootElement`
      can be either a DOM element or a jQuery-compatible selector\nstring. Note that
      *views appended to the DOM outside the root element will\nnot receive events.*
      If you specify a custom root element, make sure you only\nappend views inside
      it!\n\nTo learn more about the advantages of event delegation and the Ember
      view\nlayer, and a list of the event listeners that are setup by default, visit
      the\n[Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).\n\n###
      Initializers\n\nLibraries on top of Ember can register additional initializers,
      like so:\n\n```javascript\nEmber.Application.initializer({\n  name: \"store\",\n\n
      \ initialize: function(container, application) {\n    container.register('store:main',
      application.Store);\n  }\n});\n```\n\n### Routing\n\nIn addition to creating
      your application's router, `Ember.Application` is\nalso responsible for telling
      the router when to start routing. Transitions\nbetween routes can be logged
      with the `LOG_TRANSITIONS` flag, and more\ndetailed intra-transition logging
      can be logged with\nthe `LOG_TRANSITIONS_INTERNAL` flag:\n\n```javascript\nwindow.App
      = Ember.Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful
      transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing
      steps\n});\n```\n\nBy default, the router will begin trying to translate the
      current URL into\napplication state once the browser emits the `DOMContentReady`
      event. If you\nneed to defer routing, you can call the application's `deferReadiness()`\nmethod.
      Once routing can begin, call the `advanceReadiness()` method.\n\nIf there is
      any setup required before routing begins, you can implement a\n`ready()` method
      on your app that will be invoked immediately before routing\nbegins.\n```"
    extends: Ember.Namespace
  Ember.DefaultResolver:
    name: Ember.DefaultResolver
    shortname: Ember.DefaultResolver
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: ../packages/ember-application/lib/system/resolver.js
    line: 11
    description: ! "The DefaultResolver defines the default lookup rules to resolve\ncontainer
      lookups before consulting the container for registered\nitems:\n\n* templates
      are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application
      after converting\n  the name. For example, `controller:post` looks up\n  `App.PostController`
      by default.\n* there are some nuances (see examples below)\n\n### How Resolving
      Works\n\nThe container calls this object's `resolve` method with the\n`fullName`
      argument.\n\nIt first parses the fullName into an object using `parseName`.\n\nThen
      it checks for the presence of a type-specific instance\nmethod of the form `resolve[Type]`
      and calls it if it exists.\nFor example if it was resolving 'template:post',
      it would call\nthe `resolveTemplate` method.\n\nIts last resort is to call the
      `resolveOther` method.\n\nThe methods of this object are designed to be easy
      to override\nin a subclass. For example, you could enhance how a template\nis
      resolved like so:\n\n```javascript\nApp = Ember.Application.create({\n  Resolver:
      Ember.DefaultResolver.extend({\n    resolveTemplate: function(parsedName) {\n
      \     var resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate)
      { return resolvedTemplate; }\n      return Ember.TEMPLATES['not_found'];\n    }\n
      \ })\n});\n```\n\nSome examples of how names are resolved:\n\n```\n'template:post'
      //=> Ember.TEMPLATES['post']\n'template:posts/byline' //=> Ember.TEMPLATES['posts/byline']\n'template:posts.byline'
      //=> Ember.TEMPLATES['posts/byline']\n'template:blogPost' //=> Ember.TEMPLATES['blogPost']\n
      \                   //   OR\n                    //   Ember.TEMPLATES['blog_post']\n'controller:post'
      //=> App.PostController\n'controller:posts.index' //=> App.PostsIndexController\n'controller:blog/post'
      //=> Blog.PostController\n'controller:basic' //=> Ember.Controller\n'route:post'
      //=> App.PostRoute\n'route:posts.index' //=> App.PostsIndexRoute\n'route:blog/post'
      //=> Blog.PostRoute\n'route:basic' //=> Ember.Route\n'view:post' //=> App.PostView\n'view:posts.index'
      //=> App.PostsIndexView\n'view:blog/post' //=> Blog.PostView\n'view:basic' //=>
      Ember.View\n'foo:post' //=> App.PostFoo\n'model:post' //=> App.Post\n```"
    extends: Ember.Object
  Ember:
    name: Ember
    shortname: Ember
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: ../packages/ember-metal/lib/core.js
    line: 8
    description: ! 'All Ember methods and functions are defined inside of this namespace.
      You

      generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand `Em` instead of `Ember`.


      Ember-Runtime is a framework that provides core functions for Ember including

      cross-platform functions, support for property observing and objects. Its

      focus is on small size and performance. You can use this in place of or

      along-side other cross-platform libraries such as jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    static: 1
    version: 1.0.0
  Ember.Handlebars:
    name: Ember.Handlebars
    shortname: Ember.Handlebars
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember
    file: ../packages/ember-handlebars-compiler/lib/main.js
    line: 21
    description: ! 'Prepares the Handlebars templating library for use inside Ember''s
      view

      system.


      The `Ember.Handlebars` object is the standard Handlebars library, extended to

      use Ember''s `get()` method instead of direct property access, which allows

      computed properties to be used inside templates.


      To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.

      This will return a function that can be used by `Ember.View` for rendering.'
  Ember.Handlebars.helpers:
    name: Ember.Handlebars.helpers
    shortname: Ember.Handlebars.helpers
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars-compiler/lib/main.js
    line: 118
  Ember.Handlebars.Compiler:
    name: Ember.Handlebars.Compiler
    shortname: Ember.Handlebars.Compiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars-compiler/lib/main.js
    line: 124
    description: Override the the opcode compiler and JavaScript compiler for Handlebars.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.Handlebars.JavaScriptCompiler:
    name: Ember.Handlebars.JavaScriptCompiler
    shortname: Ember.Handlebars.JavaScriptCompiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars-compiler/lib/main.js
    line: 141
    access: private
    tagname: ''
    is_constructor: 1
  Ember.Checkbox:
    name: Ember.Checkbox
    shortname: Ember.Checkbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/checkbox.js
    line: 11
    description: ! 'The internal class used to create text inputs when the `{{input}}`

      helper is used with `type` of `checkbox`.


      See Handlebars.helpers.input for usage details.


      ## Direct manipulation of `checked`


      The `checked` attribute of an `Ember.Checkbox` object should always be set

      through the Ember object or by interacting with its rendered element

      representation via the mouse, keyboard, or touch. Updating the value of the

      checkbox via jQuery will result in the checked value of the object and its

      element losing synchronization.


      ## Layout and LayoutName properties


      Because HTML `input` elements are self closing `layout` and `layoutName`

      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)''s

      layout section for more information.'
    extends: Ember.View
  Ember.Select:
    name: Ember.Select
    shortname: Ember.Select
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/select.js
    line: 78
    description: ! "The `Ember.Select` view class renders a\n[select](https://developer.mozilla.org/en/HTML/Element/select)
      HTML element,\nallowing the user to choose from a list of options.\n\nThe text
      and `value` property of each `<option>` element within the\n`<select>` element
      are populated from the objects in the `Element.Select`'s\n`content` property.
      The underlying data object of the selected `<option>` is\nstored in the `Element.Select`'s
      `value` property.\n\n### `content` as an array of Strings\n\nThe simplest version
      of an `Ember.Select` takes an array of strings as its\n`content` property. The
      string will be used as both the `value` property and\nthe inner text of each
      `<option>` element inside the rendered `<select>`.\n\nExample:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view
      Ember.Select contentBinding=\"names\"}}\n```\n\nWould result in the following
      HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n
      \ <option value=\"Tom\">Tom</option>\n</select>\n```\n\nYou can control which
      `<option>` is selected through the `Ember.Select`'s\n`value` property directly
      or as a binding:\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n
      \ selectedName: 'Tom',\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view
      Ember.Select\n       contentBinding=\"names\"\n       valueBinding=\"selectedName\"\n}}\n```\n\nWould
      result in the following HTML with the `<option>` for 'Tom' selected:\n\n```html\n<select
      class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option
      value=\"Tom\" selected=\"selected\">Tom</option>\n</select>\n```\n\nA user interacting
      with the rendered `<select>` to choose \"Yehuda\" would\nupdate the value of
      `selectedName` to \"Yehuda\".\n\n### `content` as an Array of Objects\n\nAn
      `Ember.Select` can also take an array of JavaScript or Ember objects as\nits
      `content` property.\n\nWhen using objects you need to tell the `Ember.Select`
      which property should\nbe accessed on each object to supply the `value` attribute
      of the `<option>`\nand which property should be used to supply the element text.\n\nThe
      `optionValuePath` option is used to specify the path on each object to\nthe
      desired property for the `value` attribute. The `optionLabelPath`\nspecifies
      the path on each object to the desired property for the\nelement's text. Both
      paths must reference each object itself as `content`:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id:
      1},\n    {firstName: \"Tom\",    id: 2}\n  ]\n});\n```\n\n```handlebars\n{{view
      Ember.Select\n       contentBinding=\"programmers\"\n       optionValuePath=\"content.id\"\n
      \      optionLabelPath=\"content.firstName\"}}\n```\n\nWould result in the following
      HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\">Tom</option>\n</select>\n```\n\nThe `value` attribute
      of the selected `<option>` within an `Ember.Select`\ncan be bound to a property
      on another object by providing a\n`valueBinding` option:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id:
      1},\n    {firstName: \"Tom\",    id: 2}\n  ],\n  currentProgrammer: {\n    id:
      2\n  }\n});\n```\n\n```handlebars\n{{view Ember.Select\n       contentBinding=\"programmers\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n
      \      valueBinding=\"currentProgrammer.id\"}}\n```\n\nWould result in the following
      HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n  <option
      value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `id` of `currentProgrammer`\nto match the `value` property of the newly
      selected `<option>`.\n\nAlternatively, you can control selection through the
      underlying objects\nused to render each object providing a `selectionBinding`.
      When the selected\n`<option>` is changed, the property path provided to `selectionBinding`\nwill
      be updated to match the content object of the rendered `<option>`\nelement:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  selectedPerson: null,\n  programmers: [\n    {firstName:
      \"Yehuda\", id: 1},\n    {firstName: \"Tom\",    id: 2}\n  ]\n});\n```\n\n```handlebars\n{{view
      Ember.Select\n       contentBinding=\"programmers\"\n       optionValuePath=\"content.id\"\n
      \      optionLabelPath=\"content.firstName\"\n       selectionBinding=\"selectedPerson\"}}\n```\n\nWould
      result in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `selectedPerson` to match the object of \nthe newly selected `<option>`.
      In this case it is the first object\nin the `programmers`\n\n### Supplying a
      Prompt\n\nA `null` value for the `Ember.Select`'s `value` or `selection` property\nresults
      in there being no `<option>` with a `selected` attribute:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  selectedProgrammer: null,\n  programmers: [\n
      \   \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n``` handlebars\n{{view Ember.Select\n
      \      contentBinding=\"programmers\"\n       valueBinding=\"selectedProgrammer\"\n}}\n```\n\nWould
      result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nAlthough
      `selectedProgrammer` is `null` and no `<option>`\nhas a `selected` attribute
      the rendered HTML will display the\nfirst item as though it were selected. You
      can supply a string\nvalue for the `Ember.Select` to display when there is no
      selection\nwith the `prompt` option:\n\n```javascript\nApp.ApplicationController
      = Ember.Controller.extend({\n  selectedProgrammer: null,\n  programmers: [\n
      \   \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```handlebars\n{{view Ember.Select\n
      \      contentBinding=\"programmers\"\n       valueBinding=\"selectedProgrammer\"\n
      \      prompt=\"Please select a name\"\n}}\n```\n\nWould result in the following
      HTML:\n\n```html\n<select class=\"ember-select\">\n  <option>Please select a
      name</option>\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```"
    extends: Ember.View
  Ember.TextArea:
    name: Ember.TextArea
    shortname: Ember.TextArea
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_area.js
    line: 12
    description: ! 'The internal class used to create textarea element when the `{{textarea}}`

      helper is used.


      See handlebars.helpers.textarea for usage details.


      ## Layout and LayoutName properties


      Because HTML `textarea` elements do not contain inner HTML the `layout` and

      `layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)''s

      layout section for more information.'
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextField:
    name: Ember.TextField
    shortname: Ember.TextField
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_field.js
    line: 12
    description: ! "The internal class used to create text inputs when the `{{input}}`\n
      \ helper is used with `type` of `text`.\nSee Handlebars.helpers.input for usage
      details.\n## Layout and LayoutName properties\nBecause HTML `input` elements
      are self closing `layout` and `layoutName`\n  properties will not be applied.
      See [Ember.View](/api/classes/Ember.View.html)'s\n  layout section for more
      information."
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextSupport:
    name: Ember.TextSupport
    shortname: Ember.TextSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextArea
    - Ember.TextField
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_support.js
    line: 11
    description: Shared mixin used by `Ember.TextField` and `Ember.TextArea`.
    access: private
    tagname: ''
  Ember._HandlebarsBoundView:
    name: Ember._HandlebarsBoundView
    shortname: Ember._HandlebarsBoundView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    line: 137
    description: ! '`Ember._HandlebarsBoundView` is a private view created by the
      Handlebars

      `{{bind}}` helpers that is used to keep track of bound properties.


      Every time a property is bound using a `{{mustache}}`, an anonymous subclass

      of `Ember._HandlebarsBoundView` is created with the appropriate sub-template

      and context set up. When the associated property changes, just the template

      for this view will re-render.'
    extends: Ember._MetamorphView
    access: private
    tagname: ''
  Ember._Metamorph:
    name: Ember._Metamorph
    shortname: Ember._Metamorph
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember._MetamorphView
    - Ember._SimpleMetamorphView
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 78
    access: private
    tagname: ''
  Ember._MetamorphView:
    name: Ember._MetamorphView
    shortname: Ember._MetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 114
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember._SimpleMetamorphView:
    name: Ember._SimpleMetamorphView
    shortname: Ember._SimpleMetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 123
    extends: Ember.CoreView
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember.String:
    name: Ember.String
    shortname: Ember.String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/string.js
    line: 24
    description: ! 'Defines string helper methods including string formatting and
      localization.

      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be

      added to the `String.prototype` as well.'
    submodule: ember-runtime
    static: 1
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: ''
  Ember.Binding:
    name: Ember.Binding
    shortname: Ember.Binding
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/binding.js
    line: 326
    description: ! "An `Ember.Binding` connects the properties of two objects so that
      whenever\nthe value of one property changes, the other property will be changed
      also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties\n\nYou
      do not usually create Binding objects directly but instead describe\nbindings
      in your class or object definition using automatic binding\ndetection.\n\nProperties
      ending in a `Binding` suffix will be converted to `Ember.Binding`\ninstances.
      The value of this property should be a string representing a path\nto another
      object or a custom binding instanced created using Binding helpers\n(see \"One
      Way Bindings\"):\n\n```\nvalueBinding: \"MyApp.someController.title\"\n```\n\nThis
      will create a binding from `MyApp.someController.title` to the `value`\nproperty
      of your object instance automatically. Now the two values will be\nkept in sync.\n\n##
      One Way Bindings\n\nOne especially useful binding customization you can use
      is the `oneWay()`\nhelper. This helper tells Ember that you are only interested
      in\nreceiving changes on the object you are binding from. For example, if you\nare
      binding to a preference and you want to be notified if the preference\nhas changed,
      but your object will not be changing the preference itself, you\ncould do:\n\n```\nbigTitlesBinding:
      Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n```\n\nThis
      way if the value of `MyApp.preferencesController.bigTitles` changes the\n`bigTitles`
      property of your object will change also. However, if you\nchange the value
      of your `bigTitles` property, it will not update the\n`preferencesController`.\n\nOne
      way bindings are almost twice as fast to setup and twice as fast to\nexecute
      because the binding only has to worry about changes to one side.\n\nYou should
      consider using one way bindings anytime you have an object that\nmay be created
      frequently and you do not intend to change a property; only\nto monitor it for
      changes (such as in the example above).\n\n## Adding Bindings Manually\n\nAll
      of the examples above show you how to configure a custom binding, but the\nresult
      of these customizations will be a binding template, not a fully active\nBinding
      instance. The binding will actually become active only when you\ninstantiate
      the object the binding belongs to. It is useful however, to\nunderstand what
      actually happens when the binding is activated.\n\nFor a binding to function
      it must have at least a `from` property and a `to`\nproperty. The `from` property
      path points to the object/key that you want to\nbind from while the `to` path
      points to the object/key you want to bind to.\n\nWhen you define a custom binding,
      you are usually describing the property\nyou want to bind from (such as `MyApp.someController.value`
      in the examples\nabove). When your object is created, it will automatically
      assign the value\nyou want to bind `to` based on the name of your binding key.
      In the\nexamples above, during init, Ember objects will effectively call\nsomething
      like this on your binding:\n\n```javascript\nbinding = Ember.Binding.from(this.valueBinding).to(\"value\");\n```\n\nThis
      creates a new binding instance based on the template you provide, and\nsets
      the to path to the `value` property of the new object. Now that the\nbinding
      is fully configured with a `from` and a `to`, it simply needs to be\nconnected
      to become active. This is done through the `connect()` method:\n\n```javascript\nbinding.connect(this);\n```\n\nNote
      that when you connect a binding you pass the object you want it to be\nconnected
      to. This object will be used as the root for both the from and\nto side of the
      binding when inspecting relative paths. This allows the\nbinding to be automatically
      inherited by subclassed objects as well.\n\nNow that the binding is connected,
      it will observe both the from and to side\nand relay changes.\n\nIf you ever
      needed to do so (you almost never will, but it is useful to\nunderstand this
      anyway), you could manually create an active binding by\nusing the `Ember.bind()`
      helper method. (This is the same method used by\nto setup your bindings on objects):\n\n```javascript\nEmber.bind(MyApp.anotherObject,
      \"value\", \"MyApp.someController.value\");\n```\n\nBoth of these code fragments
      have the same effect as doing the most friendly\nform of binding creation like
      so:\n\n```javascript\nMyApp.anotherObject = Ember.Object.create({\n  valueBinding:
      \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n```\n\nEmber's
      built in binding creation method makes it easy to automatically\ncreate bindings
      for you. You should always use the highest-level APIs\navailable, even if you
      understand how it works underneath."
    since: Ember 0.9
  Ember.ComputedProperty:
    name: Ember.ComputedProperty
    shortname: Ember.ComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/computed.js
    line: 101
    description: ! "A computed property transforms an objects function into a property.\n\nBy
      default the function backing the computed property will only be called\nonce
      and the result will be cached. You can specify various properties\nthat your
      computed property is dependent on. This will force the cached\nresult to be
      recomputed if the dependencies are modified.\n\nIn the following example we
      declare a computed property (by calling\n`.property()` on the fullName function)
      and setup the properties\ndependencies (depending on firstName and lastName).
      The fullName function\nwill be called once (regardless of how many times it
      is accessed) as long\nas it's dependencies have not been changed. Once firstName
      or lastName are updated\nany future calls (or anything bound) to fullName will
      incorporate the new\nvalues.\n\n```javascript\nPerson = Ember.Object.extend({\n
      \ // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n
      \ fullName: function() {\n    var firstName = this.get('firstName');\n    var
      lastName = this.get('lastName');\n\n   return firstName + ' ' + lastName;\n
      \ }.property('firstName', 'lastName')\n});\n\nvar tom = Person.create({\n  firstName:
      \"Tom\",\n  lastName: \"Dale\"\n});\n\ntom.get('fullName') // \"Tom Dale\"\n```\n\nYou
      can also define what Ember should do when setting a computed property.\nIf you
      try to set a computed property, it will be invoked with the key and\nvalue you
      want to set it to. You can also accept the previous value as the\nthird parameter.\n\n```javascript\n\n
      Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName:
      null,\n  lastName: null,\n\n  fullName: function(key, value, oldValue) {\n    //
      getter\n    if (arguments.length === 1) {\n      var firstName = this.get('firstName');\n
      \     var lastName = this.get('lastName');\n\n      return firstName + ' ' +
      lastName;\n\n    // setter\n    } else {\n      var name = value.split(\" \");\n\n
      \     this.set('firstName', name[0]);\n      this.set('lastName', name[1]);\n\n
      \     return value;\n    }\n  }.property('firstName', 'lastName')\n});\n\nvar
      person = Person.create();\nperson.set('fullName', \"Peter Wagenet\");\nperson.get('firstName')
      // Peter\nperson.get('lastName') // Wagenet\n```"
    extends: Ember.Descriptor
    is_constructor: 1
  Ember.Logger:
    name: Ember.Logger
    shortname: Ember.Logger
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/core.js
    line: 203
    description: ! 'Inside Ember-Metal, simply uses the methods from `imports.console`.

      Override this to provide more robust logging functionality.'
  Ember.Instrumentation:
    name: Ember.Instrumentation
    shortname: Ember.Instrumentation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.Instrumentation
    file: ../packages/ember-metal/lib/instrumentation.js
    line: 3
    description: ! "The purpose of the Ember Instrumentation module is\nto provide
      efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener
      by using `Ember.subscribe`:\n\n```javascript\nEmber.subscribe(\"render\", {\n
      \ before: function(name, timestamp, payload) {\n\n  },\n\n  after: function(name,
      timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before`
      callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument
      a block of code by using `Ember.instrument`:\n\n```javascript\nEmber.instrument(\"render.handlebars\",
      payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names
      passed to `Ember.instrument` are namespaced\nby periods, from more general to
      more specific. Subscribers\ncan listen for events by whatever level of granularity
      they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand
      the subscriber listened for all events beginning with\n`render`. It would receive
      callbacks for events named\n`render`, `render.handlebars`, `render.container`,
      or\neven `render.handlebars.layout`."
    static: 1
  Ember.OrderedSet:
    name: Ember.OrderedSet
    shortname: Ember.OrderedSet
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 55
    description: ! 'This class is used internally by Ember and Ember Data.

      Please do not use it at this time. We plan to clean it up

      and add many tests soon.'
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Map:
    name: Ember.Map
    shortname: Ember.Map
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 176
    description: ! 'A Map stores values indexed by keys. Unlike JavaScript''s

      default Objects, the keys of a Map can be any JavaScript

      object.


      Internally, a Map has two data structures:


      1. `keys`: an OrderedSet of all of the existing keys

      2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`


      When a key/value pair is added for the first time, we

      add the key to the `keys` OrderedSet, and create or

      replace an entry in `values`. When an entry is deleted,

      we delete its entry in `keys` and `values`.'
    access: private
    tagname: ''
    is_constructor: 1
  Ember.MapWithDefault:
    name: Ember.MapWithDefault
    shortname: Ember.MapWithDefault
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 320
    extends: Ember.Map
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: options
      description: ''
      optional: true
      props:
      - name: defaultValue
        description: ''
        type: ! '*'
        optional: true
  Ember.Mixin:
    name: Ember.Mixin
    shortname: Ember.Mixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/mixin.js
    line: 369
    description: ! "The `Ember.Mixin` class allows you to create mixins, whose properties
      can be\nadded to other classes. For instance,\n\n```javascript\nApp.Editable
      = Ember.Mixin.create({\n  edit: function() {\n    console.log('starting to edit');\n
      \   this.set('isEditing', true);\n  },\n  isEditing: false\n});\n\n// Mix mixins
      into classes by passing them as the first arguments to\n// .extend.\nApp.CommentView
      = Ember.View.extend(App.Editable, {\n  template: Ember.Handlebars.compile('{{#if
      view.isEditing}}...{{else}}...{{/if}}')\n});\n\ncommentView = App.CommentView.create();\ncommentView.edit();
      // outputs 'starting to edit'\n```\n\nNote that Mixins are created with `Ember.Mixin.create`,
      not\n`Ember.Mixin.extend`.\n\nNote that mixins extend a constructor's prototype
      so arrays and object literals\ndefined as properties will be shared amongst
      objects that implement the mixin.\nIf you want to define an property in a mixin
      that is not shared, you can define\nit either as a computed property or have
      it be created on initialization of the object.\n\n```javascript\n//filters array
      will be shared amongst any object implementing mixin\nApp.Filterable = Ember.Mixin.create({\n
      \ filters: Ember.A()\n});\n\n//filters will be a separate  array for every object
      implementing the mixin\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.computed(function(){return
      Ember.A();})\n});\n\n//filters will be created as a separate array during the
      object's initialization\nApp.Filterable = Ember.Mixin.create({\n  init: function()
      {\n    this._super();\n    this.set(\"filters\", Ember.A());\n  }\n});\n```"
  Ember.platform:
    name: Ember.platform
    shortname: Ember.platform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/platform.js
    line: 125
    description: Platform specific methods and feature detectors needed by the framework.
    static: 1
  Ember.Descriptor:
    name: Ember.Descriptor
    shortname: Ember.Descriptor
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/properties.js
    line: 20
    description: ! 'Objects of this type can implement an interface to respond to
      requests to

      get and set. The default implementation handles simple properties.


      You generally won''t need to create or subclass this directly.'
    access: private
    tagname: ''
    is_constructor: 1
  Ember.run:
    name: Ember.run
    shortname: Ember.run
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/run_loop.js
    line: 27
    description: ! "Runs the passed target and method inside of a RunLoop, ensuring
      any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally
      you should not need to invoke this method yourself. However if\nyou are implementing
      raw event handlers when interfacing with other\nlibraries or plugins, you should
      probably wrap all of your code inside this\ncall.\n\n```javascript\nEmber.run(function()
      {\n  // code to be execute within a RunLoop\n});\n```"
    static: 1
    is_constructor: 1
    params:
    - name: target
      description: target of method to call
      type: Object
      optional: true
    - name: method
      description: ! "Method to invoke.\n  May be a function or a string. If you pass
        a string\n  then it will be looked up on the passed target."
      type: Function|String
    - name: args*
      description: Any additional arguments you wish to pass to the method.
      type: Object
      optional: true
    return:
      description: return value from invoking the passed function.
      type: Object
  Ember.LinkView:
    name: Ember.LinkView
    shortname: Ember.LinkView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/helpers/link_to.js
    line: 32
    description: ! '`Ember.LinkView` renders an element whose `click` event triggers
      a

      transition of the application''s instance of `Ember.Router` to

      a supplied route by name.


      Instances of `LinkView` will most likely be created through

      the `link-to` Handlebars helper, but properties of this class

      can be overridden to customize application-wide behavior.'
    extends: Ember.View
    see:
    - ! '{Handlebars.helpers.link-to}'
  Ember.Location:
    name: Ember.Location
    shortname: Ember.Location
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/api.js
    line: 24
    description: ! 'Ember.Location returns an instance of the correct implementation
      of

      the `location` API.


      You can pass it a `implementation` (''hash'', ''history'', ''none'') to force
      a

      particular implementation.'
    static: 1
  Ember.HashLocation:
    name: Ember.HashLocation
    shortname: Ember.HashLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/hash_location.js
    line: 8
    description: ! 'Ember.HashLocation implements the location API using the browser''s

      hash. At present, it relies on a hashchange event existing in the

      browser.'
    extends: Ember.Object
  Ember.HistoryLocation:
    name: Ember.HistoryLocation
    shortname: Ember.HistoryLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/history_location.js
    line: 10
    description: ! 'Ember.HistoryLocation implements the location API using the browser''s

      history.pushState API.'
    extends: Ember.Object
  Ember.NoneLocation:
    name: Ember.NoneLocation
    shortname: Ember.NoneLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/none_location.js
    line: 8
    description: ! 'Ember.NoneLocation does not interact with the browser. It is useful
      for

      testing, or when you need to manage state with your Router, but temporarily

      don''t want it to muck with the URL (for example when you embed your

      application in a larger page).'
    extends: Ember.Object
  Ember.Route:
    name: Ember.Route
    shortname: Ember.Route
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/system/route.js
    line: 13
    description: ! 'The `Ember.Route` class is used to define individual routes. Refer
      to

      the [routing guide](http://emberjs.com/guides/routing/) for documentation.'
    extends: Ember.Object
  Ember.Router:
    name: Ember.Router
    shortname: Ember.Router
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/system/router.js
    line: 14
    description: ! 'The `Ember.Router` class manages the application state and URLs.
      Refer to

      the [routing guide](http://emberjs.com/guides/routing/) for documentation.'
    extends: Ember.Object
  Ember.ReduceComputedProperty:
    name: Ember.ReduceComputedProperty
    shortname: Ember.ReduceComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/computed/reduce_computed.js
    line: 367
    description: ! 'A computed property whose dependent keys are arrays and which
      is updated with

      "one at a time" semantics.'
    extends: Ember.ComputedProperty
    is_constructor: 1
  Ember.ArrayController:
    name: Ember.ArrayController
    shortname: Ember.ArrayController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/array_controller.js
    line: 13
    description: ! "`Ember.ArrayController` provides a way for you to publish a collection
      of\nobjects so that you can easily bind to the collection from a Handlebars\n`#each`
      helper, an `Ember.CollectionView`, or other controllers.\n\nThe advantage of
      using an `ArrayController` is that you only have to set up\nyour view bindings
      once; to change what's displayed, simply swap out the\n`content` property on
      the controller.\n\nFor example, imagine you wanted to display a list of items
      fetched via an XHR\nrequest. Create an `Ember.ArrayController` and set its `content`
      property:\n\n```javascript\nMyApp.listController = Ember.ArrayController.create();\n\n$.get('people.json',
      function(data) {\n  MyApp.listController.set('content', data);\n});\n```\n\nThen,
      create a view that binds to your new controller:\n\n```handlebars\n{{#each MyApp.listController}}\n
      \ {{firstName}} {{lastName}}\n{{/each}}\n```\n\nAlthough you are binding to
      the controller, the behavior of this controller\nis to pass through any methods
      or properties to the underlying array. This\ncapability comes from `Ember.ArrayProxy`,
      which this class inherits from.\n\nSometimes you want to display computed properties
      within the body of an\n`#each` helper that depend on the underlying items in
      `content`, but are not\npresent on those items.   To do this, set `itemController`
      to the name of a\ncontroller (probably an `ObjectController`) that will wrap
      each individual item.\n\nFor example:\n\n```handlebars\n  {{#each post in controller}}\n
      \   <li>{{title}} ({{titleLength}} characters)</li>\n  {{/each}}\n```\n\n```javascript\nApp.PostsController
      = Ember.ArrayController.extend({\n  itemController: 'post'\n});\n\nApp.PostController
      = Ember.ObjectController.extend({\n  // the `title` property will be proxied
      to the underlying post.\n\n  titleLength: function() {\n    return this.get('title').length;\n
      \ }.property('title')\n});\n```\n\nIn some cases it is helpful to return a different
      `itemController` depending\non the particular item.  Subclasses can do this
      by overriding\n`lookupItemController`.\n\nFor example:\n\n```javascript\nApp.MyArrayController
      = Ember.ArrayController.extend({\n  lookupItemController: function( object )
      {\n    if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n
      \   } else {\n      return \"regular\"; // use App.RegularController\n    }\n
      \ }\n});\n```\n\nThe itemController instances will have a `parentController`
      property set to\neither the the `parentController` property of the `ArrayController`\nor
      to the `ArrayController` instance itself."
    extends: Ember.ArrayProxy
    uses:
    - Ember.SortableMixin
    - Ember.ControllerMixin
  Ember.Controller:
    name: Ember.Controller
    shortname: Ember.Controller
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/controller.js
    line: 58
    extends: Ember.Object
    uses:
    - Ember.ControllerMixin
  Ember.ObjectController:
    name: Ember.ObjectController
    shortname: Ember.ObjectController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/object_controller.js
    line: 9
    description: ! '`Ember.ObjectController` is part of Ember''s Controller layer.
      It is intended

      to wrap a single object, proxying unhandled attempts to `get` and `set` to the
      underlying

      content object, and to forward unhandled action attempts to its `target`.


      `Ember.ObjectController` derives this functionality from its superclass

      `Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.'
    extends: Ember.ObjectProxy
    uses:
    - Ember.ControllerMixin
  Ember.RSVP:
    name: Ember.RSVP
    shortname: Ember.RSVP
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/ext/ember.js
    line: 1
    description: ! 'Expose RSVP implementation


      Documentation can be found here: https://github.com/tildeio/rsvp.js/blob/master/README.md'
    is_constructor: 1
  Function:
    name: Function
    shortname: Function
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  Ember.ActionHandler:
    name: Ember.ActionHandler
    shortname: Ember.ActionHandler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/action_handler.js
    line: 8
    description: ! 'The `Ember.ActionHandler` mixin implements support for moving
      an `actions`

      property to an `_actions` property at extend time, and adding `_actions`

      to the object''s mergedProperties list.


      `Ember.ActionHandler` is used internally by Ember in  `Ember.View`,

      `Ember.Controller`, and `Ember.Route`.'
  Ember.Array:
    name: Ember.Array
    shortname: Ember.Array
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/array.js
    line: 17
    description: ! 'This module implements Observer-friendly Array-like behavior.
      This mixin is

      picked up by the Array class as well as other controllers, etc. that want to

      appear to be arrays.


      Unlike `Ember.Enumerable,` this mixin defines methods specifically for

      collections that provide index-ordered access to their contents. When you

      are designing code that needs to accept any kind of Array-like object, you

      should use these methods instead of Array primitives because these will

      properly notify observers of changes to the array.


      Although these methods are efficient, they do add a layer of indirection to

      your application so it is a good idea to use them only when you need the

      flexibility of using both true JavaScript arrays and "virtual" arrays such

      as controllers and collections.


      You can use the methods defined in this module to access and modify array

      contents in a KVO-friendly way. You can also be notified whenever the

      membership of an array changes by changing the syntax of the property to

      `.observes(''*myProperty.[]'')`.


      To support `Ember.Array` in your own class, you must override two

      primitives to use it: `replace()` and `objectAt()`.


      Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`

      mixin. All `Ember.Array`-like objects are also enumerable.'
    uses:
    - Ember.Enumerable
    since: Ember 0.9.0
  Ember.Comparable:
    name: Ember.Comparable
    shortname: Ember.Comparable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/comparable.js
    line: 9
    description: ! 'Implements some standard methods for comparing objects. Add this
      mixin to

      any class you create that can compare its instances.


      You should implement the `compare()` method.'
    since: Ember 0.9
  Ember.Copyable:
    name: Ember.Copyable
    shortname: Ember.Copyable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/copyable.js
    line: 12
    description: ! 'Implements some standard methods for copying an object. Add this
      mixin to

      any object you create that can create a copy of itself. This mixin is

      added automatically to the built-in array.


      You should generally implement the `copy()` method to return a copy of the

      receiver.


      Note that `frozenCopy()` will only work if you also implement

      `Ember.Freezable`.'
    since: Ember 0.9
  Ember.Deferred:
    name: Ember.Deferred
    shortname: Ember.Deferred
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/deferred.js
    line: 14
  Ember.Enumerable:
    name: Ember.Enumerable
    shortname: Ember.Enumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Array
    - Ember.MutableEnumerable
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/enumerable.js
    line: 35
    description: ! "This mixin defines the common interface implemented by enumerable
      objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI
      defined up to JavaScript 1.8 (excluding language-specific features that\ncannot
      be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically
      to the Array class on page load, so you\ncan use any of these methods on simple
      arrays. If Array already implements\none of these methods, the mixin will not
      override them.\n\n## Writing Your Own Enumerable\n\nTo make your own custom
      class enumerable, you need two items:\n\n1. You must have a length property.
      This property should change whenever\n   the number of items in your enumerable
      object changes. If you using this\n   with an `Ember.Object` subclass, you should
      be sure to change the length\n   property using `set().`\n\n2. If you must implement
      `nextObject().` See documentation.\n\nOnce you have these two methods implement,
      apply the `Ember.Enumerable` mixin\nto your class and you will be able to enumerate
      the contents of your object\nlike any other collection.\n\n## Using Ember Enumeration
      with Other Libraries\n\nMany other libraries provide some kind of iterator or
      enumeration like\nfacility. This is often where the most common API conflicts
      occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries
      by implementing only methods that mostly correspond to the\nJavaScript 1.8 API."
    since: Ember 0.9
  Ember.Evented:
    name: Ember.Evented
    shortname: Ember.Evented
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.CoreView
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/evented.js
    line: 6
    description: ! "This mixin allows for Ember objects to subscribe to and emit events.\n\n```javascript\nApp.Person
      = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n
      \   this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet',
      function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n//
      outputs: 'Our person has greeted'\n```\n\nYou can also chain multiple event
      subscriptions:\n\n```javascript\nperson.on('greet', function() {\n  console.log('Our
      person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time
      special');\n}).off('event', this, forgetThis);\n```"
  Ember.Freezable:
    name: Ember.Freezable
    shortname: Ember.Freezable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/freezable.js
    line: 9
    description: ! "The `Ember.Freezable` mixin implements some basic methods for
      marking an\nobject as frozen. Once an object is frozen it should be read only.
      No changes\nmay be made the internal state of the object.\n\n## Enforcement\n\nTo
      fully support freezing in your subclass, you must include this mixin and\noverride
      any method that might alter any property on the object to instead\nraise an
      exception. You can check the state of an object by checking the\n`isFrozen`
      property.\n\nAlthough future versions of JavaScript may support language-level
      freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit
      is still technically possible to modify the object, even though it could\nbreak
      other parts of your application that do not expect a frozen object to\nchange.
      It is, therefore, very important that you always respect the\n`isFrozen` property
      on all freezable objects.\n\n## Example Usage\n\nThe example below shows a simple
      object that implement the `Ember.Freezable`\nprotocol.\n\n```javascript\nContact
      = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n
      \ // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen'))
      throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName',
      this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc
      = Context.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();
      \ // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n```\n\n## Copying\n\nUsually
      the `Ember.Freezable` protocol is implemented in cooperation with the\n`Ember.Copyable`
      protocol, which defines a `frozenCopy()` method that will\nreturn a frozen object,
      if the object implements this method as well."
    since: Ember 0.9
  Ember.MutableArray:
    name: Ember.MutableArray
    shortname: Ember.MutableArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayProxy
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_array.js
    line: 23
    description: ! 'This mixin defines the API for modifying array-like objects. These
      methods

      can be applied only to a collection that keeps its items in an ordered set.


      Note that an Array can change even if it does not implement this mixin.

      For example, one might implement a SparseArray that cannot be directly

      modified, but if its underlying enumerable changes, it will change also.'
    uses:
    - Ember.Array
    - Ember.MutableEnumerable
  Ember.MutableEnumerable:
    name: Ember.MutableEnumerable
    shortname: Ember.MutableEnumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    - Ember.SortableMixin
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    line: 10
    description: ! 'This mixin defines the API for modifying generic enumerables.
      These methods

      can be applied to an object regardless of whether it is ordered or

      unordered.


      Note that an Enumerable can change even if it does not implement this mixin.

      For example, a MappedEnumerable cannot be directly modified but if its

      underlying enumerable changes, it will change also.


      ## Adding Objects


      To add an object to an enumerable, use the `addObject()` method. This

      method will only add the object to the enumerable if the object is not

      already present and is of a type supported by the enumerable.


      ```javascript

      set.addObject(contact);

      ```


      ## Removing Objects


      To remove an object from an enumerable, use the `removeObject()` method. This

      will only remove the object if it is present in the enumerable, otherwise

      this method has no effect.


      ```javascript

      set.removeObject(contact);

      ```


      ## Implementing In Your Own Code


      If you are implementing an object and want to support this API, just include

      this mixin in your class and implement the required methods. In your unit

      tests, be sure to apply the Ember.MutableEnumerableTests to your object.'
    uses:
    - Ember.Enumerable
  Ember.Observable:
    name: Ember.Observable
    shortname: Ember.Observable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Object
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/observable.js
    line: 11
    description: ! "## Overview\n\nThis mixin provides properties and property observing
      functionality, core\nfeatures of the Ember object model.\n\nProperties and observers
      allow one object to observe changes to a\nproperty on another object. This is
      one of the fundamental ways that\nmodels, controllers and views communicate
      with each other in an Ember\napplication.\n\nAny object that has this mixin
      applied can be used in observer\noperations. That includes `Ember.Object` and
      most objects you will\ninteract with as you write your Ember application.\n\nNote
      that you will not generally apply this mixin to classes yourself,\nbut you will
      use the features provided by this module frequently, so it\nis important to
      understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's
      support for bindings and observers, you will always\naccess properties using
      the get method, and set properties using the\nset method. This allows the observing
      objects to be notified and\ncomputed properties to be handled properly.\n\nMore
      documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou
      typically observe property changes simply by adding the `observes`\ncall to
      the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n
      \ valueObserver: function() {\n    // Executes whenever the \"value\" property
      changes\n  }.observes('value')\n});\n```\n\nAlthough this is the most common
      way to add an observer, this capability\nis actually built into the `Ember.Object`
      class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`.
      You can use\nthese two methods to add and remove observers yourself if you need
      to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey',
      targetObject, targetAction)\n```\n\nThis will call the `targetAction` method
      on the `targetObject` whenever\nthe value of the `propertyKey` changes.\n\nNote
      that if `propertyKey` is a computed property, the observer will be\ncalled when
      any of the property dependencies are changed, even if the\nresulting value of
      the computed property is unchanged. This is necessary\nbecause computed properties
      are not computed until `get` is called."
  Ember.PromiseProxyMixin:
    name: Ember.PromiseProxyMixin
    shortname: Ember.PromiseProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
    file: ../packages/ember-runtime/lib/mixins/promise_proxy.js
    line: 24
    description: ! "A low level mixin making ObjectProxy, ObjectController or ArrayController's
      promise aware.\n\n```javascript\nvar ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\nvar
      controller = ObjectPromiseController.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\ncontroller.then(function(json){\n
      \  // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n```\n\nthe
      controller has bindable attributes which\ntrack the promises life cycle\n\n```javascript\ncontroller.get('isPending')
      \  //=> true\ncontroller.get('isSettled')  //=> false\ncontroller.get('isRejected')
      \ //=> false\ncontroller.get('isFulfilled') //=> false\n```\n\nWhen the the
      $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle
      attributes will update accordingly.\n\n```javascript\ncontroller.get('isPending')
      \  //=> false\ncontroller.get('isSettled')   //=> true\ncontroller.get('isRejected')
      \ //=> false\ncontroller.get('isFulfilled') //=> true\n```\n\nAs the controller
      is an ObjectController, and the json now its content,\nall the json properties
      will be available directly from the controller.\n\n```javascript\n// Assuming
      the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n//
      both properties will accessible on the controller\ncontroller.get('firstName')
      //=> 'Stefan'\ncontroller.get('lastName')  //=> 'Penner'\n```\n\nIf the controller
      is backing a template, the attributes are \nbindable from within that template\n```handlebars\n{{#if
      isPending}}\n  loading...\n{{else}}\n  firstName: {{firstName}}\n  lastName:
      {{lastName}}\n{{/if}}\n```"
  Ember.SortableMixin:
    name: Ember.SortableMixin
    shortname: Ember.SortableMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/sortable.js
    line: 8
    description: ! "`Ember.SortableMixin` provides a standard interface for array
      proxies\nto specify a sort order and maintain this sorting when objects are
      added,\nremoved, or updated without changing the implicit order of their underlying\ncontent
      array:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n
      \ {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title:
      'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  content:
      songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');
      \ // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber:
      1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber:
      1, title: 'Dear Prudence'}\n```\n\nIf you add or remove the properties to sort
      by or change the sort direction the content\nsort order will be automatically
      updated.\n\n```javascript\nsongsController.set('sortProperties', ['title']);\nsongsController.get('firstObject');
      // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.toggleProperty('sortAscending');\nsongsController.get('firstObject');
      // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n```\n\nSortableMixin works
      by sorting the arrangedContent array, which is the array that\narrayProxy displays.
      Due to the fact that the underlying 'content' array is not changed, that\narray
      will not display the sorted list:\n\n ```javascript\nsongsController.get('content').get('firstObject');
      // Returns the unsorted original content\nsongsController.get('firstObject');
      // Returns the sorted content.\n``` \n\nAlthough the sorted content can also
      be accessed through the arrangedContent property,\nit is preferable to use the
      proxied class and not the arrangedContent array directly."
    uses:
    - Ember.MutableEnumerable
  Ember.TargetActionSupport:
    name: Ember.TargetActionSupport
    shortname: Ember.TargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/target_action_support.js
    line: 8
    description: ! '`Ember.TargetActionSupport` is a mixin that can be included in
      a class

      to add a `triggerAction` method with semantics similar to the Handlebars

      `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is

      usually the best choice. This mixin is most often useful when you are

      doing more complex event handling in View objects.


      See also `Ember.ViewTargetActionSupport`, which has

      view-aware defaults for target and actionContext.'
    extends: Ember.Mixin
  Ember.ArrayProxy:
    name: Ember.ArrayProxy
    shortname: Ember.ArrayProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/array_proxy.js
    line: 14
    description: ! "An ArrayProxy wraps any other object that implements `Ember.Array`
      and/or\n`Ember.MutableArray,` forwarding all requests. This makes it very useful
      for\na number of binding use cases or other cases where being able to swap\nout
      the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nvar
      pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({ content:
      Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content',
      ['amoeba', 'paramecium']);\nap.get('firstObject');                        //
      'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents
      of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nvar
      pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({\n    content:
      Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n
      \   }\n});\n\nap.get('firstObject'); // . 'DOG'\n```"
    extends: Ember.Object
    uses:
    - Ember.MutableArray
  Ember.CoreObject:
    name: Ember.CoreObject
    shortname: Ember.CoreObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/core_object.js
    line: 158
  Ember.EachProxy:
    name: Ember.EachProxy
    shortname: Ember.EachProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/each_proxy.js
    line: 75
    description: ! 'This is the object instance returned when you get the `@each`
      property on an

      array. It uses the unknownProperty handler to automatically create

      EachArray instances for property names.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Namespace:
    name: Ember.Namespace
    shortname: Ember.Namespace
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/namespace.js
    line: 10
    description: ! "A Namespace is an object usually used to contain other objects
      or methods\nsuch as an application or framework. Create a namespace anytime
      you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework
      = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```"
    extends: Ember.Object
  Ember.NativeArray:
    name: Ember.NativeArray
    shortname: Ember.NativeArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/native_array.js
    line: 109
    description: ! 'The NativeArray mixin contains the properties needed to to make
      the native

      Array support Ember.MutableArray and all of its dependent APIs. Unless you

      have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to

      false, this will be applied automatically. Otherwise you can apply the mixin

      at anytime by calling `Ember.NativeArray.activate`.'
    uses:
    - Ember.MutableArray
    - Ember.Observable
    - Ember.Copyable
  Ember.Object:
    name: Ember.Object
    shortname: Ember.Object
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object.js
    line: 9
    description: ! '`Ember.Object` is the main base class for all Ember objects. It
      is a subclass

      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,

      see the documentation for each of these.'
    extends: Ember.CoreObject
    uses:
    - Ember.Observable
  Ember.ObjectProxy:
    name: Ember.ObjectProxy
    shortname: Ember.ObjectProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object_proxy.js
    line: 32
    description: ! "`Ember.ObjectProxy` forwards all properties not defined by the
      proxy itself\nto a proxied `content` object.\n\n```javascript\nobject = Ember.Object.create({\n
      \ name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n//
      Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name',
      'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description'
      property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')
      \ // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property
      to be delegated will throw an\nError.\n\n```javascript\nproxy = Ember.ObjectProxy.create({\n
      \ content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');
      \        // true\nproxy.get('foo');          // undefined\nproxy.set('foo',
      'data');  // throws Error\n```\n\nDelegated properties can be bound to and will
      change when content is updated.\n\nComputed properties on the proxy itself can
      depend on delegated properties.\n\n```javascript\nProxyWithComputedProperty
      = Ember.ObjectProxy.extend({\n  fullName: function () {\n    var firstName =
      this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName
      && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return
      firstName || lastName;\n  }.property('firstName', 'lastName')\n});\n\nproxy
      = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content',
      {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for
      fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n```"
    extends: Ember.Object
  Ember.Set:
    name: Ember.Set
    shortname: Ember.Set
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/set.js
    line: 14
    description: ! 'An unordered collection of objects.


      A Set works a bit like an array except that its items are not ordered. You

      can create a set to efficiently test for membership for an object. You can

      also iterate through a set just like an array, even accessing objects by

      index, however there is no guarantee as to their order.


      All Sets are observable via the Enumerable Observer API - which works

      on any enumerable object including both Sets and Arrays.


      ## Creating a Set


      You can create a set like you would most objects using

      `new Ember.Set()`. Most new sets you create will be empty, but you can

      also initialize the set with some content by passing an array or other

      enumerable of objects to the constructor.


      Finally, you can pass in an existing set and the set will be copied. You

      can also create a copy of a set by calling `Ember.Set#copy()`.


      ```javascript

      // creates a new empty set

      var foundNames = new Ember.Set();


      // creates a set with four names in it.

      var names = new Ember.Set(["Charles", "Tom", "Juan", "Alex"]); // :P


      // creates a copy of the names set.

      var namesCopy = new Ember.Set(names);


      // same as above.

      var anotherNamesCopy = names.copy();

      ```


      ## Adding/Removing Objects


      You generally add or remove objects from a set using `add()` or

      `remove()`. You can add any type of object including primitives such as

      numbers, strings, and booleans.


      Unlike arrays, objects can only exist one time in a set. If you call `add()`

      on a set with the same object multiple times, the object will only be added

      once. Likewise, calling `remove()` with the same object multiple times will

      remove the object the first time and have no effect on future calls until

      you add the object to the set again.


      NOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do

      so will be ignored.


      In addition to add/remove you can also call `push()`/`pop()`. Push behaves

      just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary

      object, remove it and return it. This is a good way to use a set as a job

      queue when you don''t care which order the jobs are executed in.


      ## Testing for an Object


      To test for an object''s presence in a set you simply call

      `Ember.Set#contains()`.


      ## Observing changes


      When using `Ember.Set`, you can observe the `"[]"` property to be

      alerted whenever the content changes. You can also add an enumerable

      observer to the set to be notified of specific objects that are added and

      removed from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)

      for more information on enumerables.


      This is often unhelpful. If you are filtering sets of objects, for instance,

      it is very inefficient to re-filter all of the items each time the set

      changes. It would be better if you could just adjust the filtered set based

      on what was changed on the original set. The same issue applies to merging

      sets, as well.


      ## Other Methods


      `Ember.Set` primary implements other mixin APIs. For a complete reference

      on the methods you will use with `Ember.Set`, please consult these mixins.

      The most useful ones will be `Ember.Enumerable` and

      `Ember.MutableEnumerable` which implement most of the common iterator

      methods you are used to on Array.


      Note that you can also use the `Ember.Copyable` and `Ember.Freezable`

      APIs on `Ember.Set` as well. Once a set is frozen it can no longer be

      modified. The benefit of this is that when you call `frozenCopy()` on it,

      Ember will avoid making copies of the set. This allows you to write

      code that can know with certainty when the underlying set data will or

      will not be modified.'
    extends: Ember.CoreObject
    uses:
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
    since: Ember 0.9
  Ember.SubArray:
    name: Ember.SubArray
    shortname: Ember.SubArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/subarray.js
    line: 11
    description: ! 'An `Ember.SubArray` tracks an array in a way similar to, but more
      specialized

      than, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of

      items within a filtered array.'
  Ember.TrackedArray:
    name: Ember.TrackedArray
    shortname: Ember.TrackedArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/tracked_array.js
    line: 7
    description: ! 'An `Ember.TrackedArray` tracks array operations.  It''s useful
      when you want to

      lazily compute the indexes of items in an array after they''ve been shifted
      by

      subsequent operations.'
    params:
    - name: items
      description: ! 'The array to be tracked.  This is used just to get

        the initial items for the starting state of retain:n.'
      type: Array
      optional: true
      optdefault: ! '['
  Ember.Error:
    name: Ember.Error
    shortname: Ember.Error
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/core.js
    line: 291
    description: A subclass of the JavaScript Error object for use in Ember.
    extends: Error
    is_constructor: 1
  Ember.Test.Adapter:
    name: Ember.Test.Adapter
    shortname: Ember.Test.Adapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember.Test
    file: ../packages/ember-testing/lib/adapters.js
    line: 10
    description: ! 'The primary purpose of this class is to create hooks that can
      be implemented

      by an adapter for various test frameworks.'
  Ember.Test.QUnitAdapter:
    name: Ember.Test.QUnitAdapter
    shortname: Ember.Test.QUnitAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember.Test
    file: ../packages/ember-testing/lib/adapters.js
    line: 61
    description: ! 'This class implements the methods defined by Ember.Test.Adapter
      for the

      QUnit testing framework.'
    extends: Ember.Test.Adapter
  Ember.Test:
    name: Ember.Test
    shortname: Ember.Test
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember
    file: ../packages/ember-testing/lib/test.js
    line: 10
    description: ! "This is a container for an assortment of testing related functionality:\n\n*
      Choose your default test adapter (for your framework of choice).\n* Register/Unregister
      additional test helpers.\n* Setup callbacks to be fired when the test helpers
      are injected into\n  your application."
  Ember.ViewTargetActionSupport:
    name: Ember.ViewTargetActionSupport
    shortname: Ember.ViewTargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-views/lib/mixins/view_target_action_support.js
    line: 1
    description: ! "`Ember.ViewTargetActionSupport` is a mixin that can be included
      in a\nview class to add a `triggerAction` method with semantics similar to\nthe
      Handlebars `{{action}}` helper. It provides intelligent defaults\nfor the action's
      target: the view's controller; and the context that is\nsent with the action:
      the view's context.\n\nNote: In normal Ember usage, the `{{action}}` helper
      is usually the best\nchoice. This mixin is most often useful when you are doing
      more complex\nevent handling in custom View subclasses.\n\nFor example:\n\n```javascript\nApp.SaveButtonView
      = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n  click:
      function() {\n    this.triggerAction(); // Sends the `save` action, along with
      the current context\n                          // to the current controller\n
      \ }\n});\n```\n\nThe `action` can be provided as properties of an optional object
      argument\nto `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView =
      Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function() {\n
      \   this.triggerAction({\n      action: 'save'\n    }); // Sends the `save`
      action, along with the current context\n        // to the current controller\n
      \ }\n});\n```"
    extends: Ember.TargetActionSupport
  Ember.EventDispatcher:
    name: Ember.EventDispatcher
    shortname: Ember.EventDispatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/event_dispatcher.js
    line: 8
    description: ! '`Ember.EventDispatcher` handles delegating browser events to their

      corresponding `Ember.Views.` For example, when you click on a view,

      `Ember.EventDispatcher` ensures that that view''s `mouseDown` method gets

      called.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.RenderBuffer:
    name: Ember.RenderBuffer
    shortname: Ember.RenderBuffer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/render_buffer.js
    line: 65
    description: ! "`Ember.RenderBuffer` gathers information regarding the a view
      and generates the\nfinal representation. `Ember.RenderBuffer` will generate
      HTML which can be pushed\nto the DOM.\n\n ```javascript\n var buffer = Ember.RenderBuffer('div');\n```"
    is_constructor: 1
    params:
    - name: tagName
      description: tag name (such as 'div' or 'p') used for the buffer
      type: String
  Ember.CollectionView:
    name: Ember.CollectionView
    shortname: Ember.CollectionView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/collection_view.js
    line: 11
    description: ! "`Ember.CollectionView` is an `Ember.View` descendent responsible
      for managing\na collection (an array or array-like object) by maintaining a
      child view object\nand associated DOM representation for each item in the array
      and ensuring\nthat child views and their associated rendered HTML are updated
      when items in\nthe array are added, removed, or replaced.\n\n## Setting content\n\nThe
      managed collection of objects is referenced as the `Ember.CollectionView`\ninstance's
      `content` property.\n\n```javascript\nsomeItemsView = Ember.CollectionView.create({\n
      \ content: ['A', 'B','C']\n})\n```\n\nThe view for each item in the collection
      will have its `content` property set\nto the item.\n\n## Specifying itemViewClass\n\nBy
      default the view class for each item in the managed collection will be an\ninstance
      of `Ember.View`. You can supply a different class by setting the\n`CollectionView`'s
      `itemViewClass` property.\n\nGiven an empty `<body>` and the following code:\n\n```javascript\nsomeItemsView
      = Ember.CollectionView.create({\n  classNames: ['a-collection'],\n  content:
      ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"the
      letter: {{view.content}}\")\n  })\n});\n\nsomeItemsView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<div class=\"ember-view a-collection\">\n
      \ <div class=\"ember-view\">the letter: A</div>\n  <div class=\"ember-view\">the
      letter: B</div>\n  <div class=\"ember-view\">the letter: C</div>\n</div>\n```\n\n##
      Automatic matching of parent/child tagNames\n\nSetting the `tagName` property
      of a `CollectionView` to any of\n\"ul\", \"ol\", \"table\", \"thead\", \"tbody\",
      \"tfoot\", \"tr\", or \"select\" will result\nin the item views receiving an
      appropriately matched `tagName` property.\n\nGiven an empty `<body>` and the
      following code:\n\n```javascript\nanUndorderedListView = Ember.CollectionView.create({\n
      \ tagName: 'ul',\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n
      \   template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nanUndorderedListView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<ul class=\"ember-view a-collection\">\n
      \ <li class=\"ember-view\">the letter: A</li>\n  <li class=\"ember-view\">the
      letter: B</li>\n  <li class=\"ember-view\">the letter: C</li>\n</ul>\n```\n\nAdditional
      `tagName` pairs can be provided by adding to\n`Ember.CollectionView.CONTAINER_MAP
      `\n\n```javascript\nEmber.CollectionView.CONTAINER_MAP['article'] = 'section'\n```\n\n##
      Programatic creation of child views\n\nFor cases where additional customization
      beyond the use of a single\n`itemViewClass` or `tagName` matching is required
      CollectionView's\n`createChildView` method can be overidden:\n\n```javascript\nCustomCollectionView
      = Ember.CollectionView.extend({\n  createChildView: function(viewClass, attrs)
      {\n    if (attrs.content.kind == 'album') {\n      viewClass = App.AlbumView;\n
      \   } else {\n      viewClass = App.SongView;\n    }\n    return this._super(viewClass,
      attrs);\n  }\n});\n```\n\n## Empty View\n\nYou can provide an `Ember.View` subclass
      to the `Ember.CollectionView`\ninstance as its `emptyView` property. If the
      `content` property of a\n`CollectionView` is set to `null` or an empty array,
      an instance of this view\nwill be the `CollectionView`s only child.\n\n```javascript\naListWithNothing
      = Ember.CollectionView.create({\n  classNames: ['nothing']\n  content: null,\n
      \ emptyView: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"The
      collection is empty\")\n  })\n});\n\naListWithNothing.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<div class=\"ember-view nothing\">\n
      \ <div class=\"ember-view\">\n    The collection is empty\n  </div>\n</div>\n```\n\n##
      Adding and Removing items\n\nThe `childViews` property of a `CollectionView`
      should not be directly\nmanipulated. Instead, add, remove, replace items from
      its `content` property.\nThis will trigger appropriate changes to its rendered
      HTML."
    extends: Ember.ContainerView
    since: Ember 0.9
  Ember.Component:
    name: Ember.Component
    shortname: Ember.Component
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/component.js
    line: 10
    description: ! "An `Ember.Component` is a view that is completely\nisolated. Property
      access in its templates go\nto the view object and actions are targeted at\nthe
      view object. There is no access to the\nsurrounding context or outer controller;
      all\ncontextual information is passed in.\n\nThe easiest way to create an `Ember.Component`
      is via\na template. If you name a template\n`components/my-foo`, you will be
      able to use\n`{{my-foo}}` in other templates, which will make\nan instance of
      the isolated component.\n\n```html\n{{app-profile person=currentUser}}\n```\n\n```html\n<!--
      app-profile template -->\n<h1>{{person.title}}</h1>\n<img {{bind-attr src=person.avatar}}>\n<p
      class='signature'>{{person.signature}}</p>\n```\n\nYou can also use `yield`
      inside a template to\ninclude the **contents** of the custom tag:\n\n```html\n{{#app-profile
      person=currentUser}}\n  <p>Admin mode</p>\n{{/app-profile}}\n```\n\n```html\n<!--
      app-profile template -->\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block contents
      -->\n```\n\nIf you want to customize the component, in order to\nhandle events
      or actions, you implement a subclass\nof `Ember.Component` named after the name
      of the\ncomponent. Note that `Component` needs to be appended to the name of\nyour
      subclass like `AppProfileComponent`.\n\nFor example, you could implement the
      action\n`hello` for the `app-profile` component:\n\n```javascript\nApp.AppProfileComponent
      = Ember.Component.extend({\n  hello: function(name) {\n    console.log(\"Hello\",
      name);\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```html\n<!--
      app-profile template -->\n\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block
      contents -->\n\n<button {{action 'hello' person.name}}>\n  Say Hello to {{person.name}}\n</button>\n```\n\nComponents
      must have a `-` in their name to avoid\nconflicts with built-in controls that
      wrap HTML\nelements. This is consistent with the same\nrequirement in web components."
    extends: Ember.View
  Ember.ContainerView:
    name: Ember.ContainerView
    shortname: Ember.ContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/container_view.js
    line: 16
    description: ! "A `ContainerView` is an `Ember.View` subclass that implements
      `Ember.MutableArray`\nallowing programatic management of its child views.\n\n##
      Setting Initial Child Views\n\nThe initial array of child views can be set in
      one of two ways. You can\nprovide a `childViews` property at creation time that
      contains instance of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ childViews: [Ember.View.create(), Ember.View.create()]\n});\n```\n\nYou can
      also provide a list of property names whose values are instances of\n`Ember.View`:\n\n```javascript\naContainer
      = Ember.ContainerView.create({\n  childViews: ['aView', 'bView', 'cView'],\n
      \ aView: Ember.View.create(),\n  bView: Ember.View.create(),\n  cView: Ember.View.create()\n});\n```\n\nThe
      two strategies can be combined:\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ childViews: ['aView', Ember.View.create()],\n  aView: Ember.View.create()\n});\n```\n\nEach
      child view's rendering will be inserted into the container's rendered\nHTML
      in the same order as its position in the `childViews` property.\n\n## Adding
      and Removing Child Views\n\nThe container view implements `Ember.MutableArray`
      allowing programatic management of its child views.\n\nTo remove a view, pass
      that view into a `removeObject` call on the container view.\n\nGiven an empty
      `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView:
      Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n
      \ bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div
      class=\"ember-view\">B</div>\n</div>\n```\n\nRemoving a view\n\n```javascript\naContainer.toArray();
      \ // [aContainer.aView, aContainer.bView]\naContainer.removeObject(aContainer.get('bView'));\naContainer.toArray();
      \ // [aContainer.aView]\n```\n\nWill result in the following HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n</div>\n```\n\nSimilarly,
      adding a child view is accomplished by adding `Ember.View` instances to the\ncontainer
      view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer
      = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews:
      ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n
      \ }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div
      class=\"ember-view\">B</div>\n</div>\n```\n\nAdding a view\n\n```javascript\nAnotherViewClass
      = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Another view\")\n});\n\naContainer.toArray();
      \ // [aContainer.aView, aContainer.bView]\naContainer.pushObject(AnotherViewClass.create());\naContainer.toArray();
      // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n```\n\nWill
      result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n
      \ <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n  <div
      class=\"ember-view\">Another view</div>\n</div>\n```\n\n## Templates and Layout\n\nA
      `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or\n`defaultLayout`
      property on a container view will not result in the template\nor layout being
      rendered. The HTML contents of a `Ember.ContainerView`'s DOM\nrepresentation
      will only be the rendered HTML of its child views.\n\n## Binding a View to Display\n\nIf
      you would like to display a single view in your ContainerView, you can set\nits
      `currentView` property. When the `currentView` property is set to a view\ninstance,
      it will be added to the ContainerView. If the `currentView` property\nis later
      changed to a different view, the new view will replace the old view.\nIf `currentView`
      is set to `null`, the last `currentView` will be removed.\n\nThis functionality
      is useful for cases where you want to bind the display of\na ContainerView to
      a controller or state manager. For example, you can bind\nthe `currentView`
      of a container to a controller like this:\n\n```javascript\nApp.appController
      = Ember.Object.create({\n  view: Ember.View.create({\n    templateName: 'person_template'\n
      \ })\n});\n```\n\n```handlebars\n{{view Ember.ContainerView currentViewBinding=\"App.appController.view\"}}\n```"
    extends: Ember.View
  Ember.CoreView:
    name: Ember.CoreView
    shortname: Ember.CoreView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/view.js
    line: 53
    description: ! '`Ember.CoreView` is an abstract class that exists to give view-like
      behavior

      to both Ember''s main view class `Ember.View` and other classes like

      `Ember._SimpleMetamorphView` that don''t need the fully functionaltiy of

      `Ember.View`.


      Unless you have specific needs for `CoreView`, you will use `Ember.View`

      in your applications.'
    extends: Ember.Object
    uses:
    - Ember.Evented
  Ember.View:
    name: Ember.View
    shortname: Ember.View
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/view.js
    line: 287
    description: ! "`Ember.View` is the class in Ember responsible for encapsulating
      templates of\nHTML content, combining templates with data to render as sections
      of a page's\nDOM, and registering and responding to user-initiated events.\n\n##
      HTML Tag\n\nThe default HTML tag name used for a view's DOM representation is
      `div`. This\ncan be customized by setting the `tagName` property. The following
      view\nclass:\n\n```javascript\nParagraphView = Ember.View.extend({\n  tagName:
      'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em
      id=\"ember1\" class=\"ember-view\"></em>\n```\n\n## HTML `class` Attribute\n\nThe
      HTML `class` attribute of a view's tag can be set by providing a\n`classNames`
      property that is set to an array of strings:\n\n```javascript\nMyView = Ember.View.extend({\n
      \ classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be
      set by providing a `classNameBindings`\nproperty set to an array of properties
      names for the view. The return value\nof these properties will be added as part
      of the value for the view's `class`\nattribute. These properties can be computed
      properties:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: function()
      {\n    if (someLogic) { return 'from-b'; }\n  }.property()\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name
      binding returns a boolean the property name\nitself will be used as the class
      name if the property is true. The class name\nwill not be added if the value
      is `false` or `undefined`.\n\n```javascript\nMyView = Ember.View.extend({\n
      \ classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings
      you can supply a string value other\nthan the property name for use as the `class`
      HTML attribute by appending the\npreferred value after a \":\" character when
      defining the binding:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property
      names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```javascript\nMyView
      = Ember.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer
      to object values that are found by\ntraversing a path relative to the view itself:\n\n```javascript\nMyView
      = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages:
      Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      empty\"></div>\n```\n\nIf you want to add a class name for a property which
      evaluates to true and\nand a different class name if it evaluates to false,
      you can pass a binding\nlike this:\n\n```javascript\n// Applies 'enabled' class
      when isEnabled is true and 'disabled' when isEnabled is false\nEmber.View.extend({\n
      \ classNameBindings: ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting
      HTML reprensentation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class
      if a property is `false`:\n\n```javascript\n// Applies no class when isEnabled
      is true and class 'disabled' when isEnabled is false\nEmber.View.extend({\n
      \ classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the view
      is set to `false`, it will result\nin view instances with an HTML representation
      of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates
      to the the value of a class name binding will result in automatic\nupdate of
      the  HTML `class` attribute in the view's rendered HTML\nrepresentation. If
      the value becomes `false` or `undefined` the class name\nwill be removed.\n\nBoth
      `classNames` and `classNameBindings` are concatenated properties. See\n[Ember.Object](/api/classes/Ember.Object.html)
      documentation for more\ninformation about concatenated properties.\n\n## HTML
      Attributes\n\nThe HTML attribute section of a view's tag can be set by providing
      an\n`attributeBindings` property set to an array of property names on the view.\nThe
      return value of these properties will be used as the value of the view's\nHTML
      associated attribute:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName:
      'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\"
      class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nIf the return value
      of an `attributeBindings` monitored property is a boolean\nthe property will
      follow HTML's pattern of repeating the attribute's name as\nits value:\n\n```javascript\nMyTextInput
      = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n
      \ disabled: true\n});\n```\n\nWill result in view instances with an HTML representation
      of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\"
      />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```javascript\nMyTextInput
      = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n
      \ disabled: function() {\n    if (someLogic) {\n      return true;\n    } else
      {\n      return false;\n    }\n  }.property()\n});\n```\n\nUpdates to the the
      property of an attribute binding will result in automatic\nupdate of the  HTML
      attribute in the view's rendered HTML representation.\n\n`attributeBindings`
      is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)\ndocumentation
      for more information about concatenated properties.\n\n## Templates\n\nThe HTML
      contents of a view's rendered representation are determined by its\ntemplate.
      Templates can be any function that accepts an optional context\nparameter and
      returns a string of HTML that will be inserted within the\nview's tag. Most
      typically in Ember this function will be a compiled\n`Ember.Handlebars` template.\n\n```javascript\nAView
      = Ember.View.extend({\n  template: Ember.Handlebars.compile('I am the template')\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\">I am the template</div>\n```\n\nWithin an Ember application
      is more common to define a Handlebars templates as\npart of a page:\n\n```html\n<script
      type='text/x-handlebars' data-template-name='some-template'>\n  Hello\n</script>\n```\n\nAnd
      associate it by name using a view's `templateName` property:\n\n```javascript\nAView
      = Ember.View.extend({\n  templateName: 'some-template'\n});\n```\n\nUsing a
      value for `templateName` that does not have a Handlebars template\nwith a matching
      `data-template-name` attribute will throw an error.\n\nFor views classes that
      may have a template later defined (e.g. as the block\nportion of a `{{view}}`
      Handlebars helper call in another template or in\na subclass), you can provide
      a `defaultTemplate` property set to compiled\ntemplate function. If a template
      is not later provided for the view instance\nthe `defaultTemplate` value will
      be used:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I
      was the default'),\n  template: null,\n  templateName: null\n});\n```\n\nWill
      result in instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\">I was the default</div>\n```\n\nIf a `template` or `templateName`
      is provided it will take precedence over\n`defaultTemplate`:\n\n```javascript\nAView
      = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the
      default')\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile('I
      was the template, not default')\n});\n```\n\nWill result in the following HTML
      representation when rendered:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I
      was the template, not default</div>\n```\n\n## View Context\n\nThe default context
      of the compiled template is the view's controller:\n\n```javascript\nAView =
      Ember.View.extend({\n  template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n});\n\naController
      = Ember.Object.create({\n  firstName: 'Barry',\n  excitedGreeting: function()
      {\n    return this.get(\"content.firstName\") + \"!!!\"\n  }.property()\n});\n\naView
      = AView.create({\n  controller: aController,\n});\n```\n\nWill result in an
      HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">Hello
      Barry!!!</div>\n```\n\nA context can also be explicitly supplied through the
      view's `context`\nproperty. If the view has neither `context` nor `controller`
      properties, the\n`parentView`'s context will be used.\n\n## Layouts\n\nViews
      can have a secondary template that wraps their main template. Like\nprimary
      templates, layouts can be any function that  accepts an optional\ncontext parameter
      and returns a string of HTML that will be inserted inside\nview's tag. Views
      whose HTML element is self closing (e.g. `<input />`)\ncannot have a layout
      and this property will be ignored.\n\nMost typically in Ember a layout will
      be a compiled `Ember.Handlebars`\ntemplate.\n\nA view's layout can be set directly
      with the `layout` property or reference\nan existing Handlebars template by
      name with the `layoutName` property.\n\nA template used as a layout must contain
      a single use of the Handlebars\n`{{yield}}` helper. The HTML contents of a view's
      rendered `template` will be\ninserted at this location:\n\n```javascript\nAViewWithLayout
      = Ember.View.extend({\n  layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\")\n
      \ template: Ember.Handlebars.compile(\"I got wrapped\"),\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\">\n  <div class=\"my-decorative-class\">\n    I got wrapped\n
      \ </div>\n</div>\n```\n\nSee [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)\nfor
      more information.\n\n## Responding to Browser Events\n\nViews can respond to
      user-initiated events in one of three ways: method\nimplementation, through
      an event manager, and through `{{action}}` helper use\nin their template or
      layout.\n\n### Method Implementation\n\nViews can respond to user-initiated
      events by implementing a method that\nmatches the event name. A `jQuery.Event`
      object will be passed as the\nargument to this method.\n\n```javascript\nAView
      = Ember.View.extend({\n  click: function(event) {\n    // will be called when
      when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n###
      Event Managers\n\nViews can define an object as their `eventManager` property.
      This object can\nthen implement methods that match the desired event names.
      Matching events\nthat occur on the view's rendered HTML or the rendered HTML
      of any of its DOM\ndescendants will trigger this method. A `jQuery.Event` object
      will be passed\nas the first argument to the method and an  `Ember.View` object
      as the\nsecond. The `Ember.View` will be the view whose rendered HTML was interacted\nwith.
      This may be the view with the `eventManager` property or one of its\ndescendent
      views.\n\n```javascript\nAView = Ember.View.extend({\n  eventManager: Ember.Object.create({\n
      \   doubleClick: function(event, view) {\n      // will be called when when
      an instance's\n      // rendered element or any rendering\n      // of this
      views's descendent\n      // elements is clicked\n    }\n  })\n});\n```\n\nAn
      event defined for an event manager takes precedence over events of the\nsame
      name handled through methods on the view.\n\n```javascript\nAView = Ember.View.extend({\n
      \ mouseEnter: function(event) {\n    // will never trigger.\n  },\n  eventManager:
      Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // takes
      precedence over AView#mouseEnter\n    }\n  })\n});\n```\n\nSimilarly a view's
      event manager will take precedence for events of any views\nrendered as a descendent.
      A method name that matches an event name will not\nbe called if the view instance
      was rendered inside the HTML representation of\na view that has an `eventManager`
      property defined that handles events of the\nname. Events not handled by the
      event manager will still trigger method calls\non the descendent.\n\n```javascript\nOuterView
      = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"outer {{#view
      InnerView}}inner{{/view}} outer\"),\n  eventManager: Ember.Object.create({\n
      \   mouseEnter: function(event, view) {\n      // view might be instance of
      either\n      // OuterView or InnerView depending on\n      // where on the
      page the user interaction occured\n    }\n  })\n});\n\nInnerView = Ember.View.extend({\n
      \ click: function(event) {\n    // will be called if rendered inside\n    //
      an OuterView because OuterView's\n    // eventManager doesn't handle click events\n
      \ },\n  mouseEnter: function(event) {\n    // will never be called if rendered
      inside\n    // an OuterView.\n  }\n});\n```\n\n### Handlebars `{{action}}` Helper\n\nSee
      [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).\n\n###
      Event Names\n\nAll of the event handling approaches described above respond
      to the same set\nof events. The names of the built-in events are listed below.
      (The hash of\nbuilt-in events exists in `Ember.EventDispatcher`.) Additional,
      custom events\ncan be registered by using `Ember.Application.customEvents`.\n\nTouch
      events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard
      events\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events\n\n* `mouseDown`\n*
      `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `mouseMove`\n* `focusIn`\n*
      `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm events:\n\n* `submit`\n*
      `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5 drag and drop events:\n\n*
      `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `drop`\n* `dragEnd`\n\n##
      Handlebars `{{view}}` Helper\n\nOther `Ember.View` instances can be included
      as part of a view's template by\nusing the `{{view}}` Handlebars helper. See
      [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)\nfor
      additional information."
    extends: Ember.CoreView
classitems:
- file: ../packages/ember-application/lib/ext/controller.js
  line: 31
  description: ! "An array of other controller objects available inside\ninstances
    of this controller via the `controllers`\nproperty:\n\nFor example, when you define
    a controller:\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n
    \ needs: ['post']\n});\n```\n\nThe application's single instance of these other\ncontrollers
    are accessible by name through the\n`controllers` property:\n\n```javascript\nthis.get('controllers.post');
    // instance of App.PostController\n```\n\nThis is only available for singleton
    controllers."
  itemtype: property
  name: needs
  type: Array
  default: ! '[]'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/ext/controller.js
  line: 78
  description: ! "Stores the instances of other controllers available from within\nthis
    controller. Any controller listed by name in the `needs`\nproperty will be accessible
    by name through this property.\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n
    \ needs: ['post'],\n  postTitle: function(){\n    var currentPost = this.get('controllers.post');
    // instance of App.PostController\n    return currentPost.get('title');\n  }.property('controllers.post.title')\n});\n```"
  see:
  - ! '{Ember.ControllerMixin#needs}'
  itemtype: property
  name: controllers
  type: Object
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 167
  description: ! 'The root DOM element of the Application. This can be specified as
    an

    element or a

    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).


    This is the element that will be passed to the Application''s,

    `eventDispatcher`, which sets up the listeners for event delegation. Every

    view in your application should be a child of the element you specify here.'
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 182
  description: ! 'The `Ember.EventDispatcher` responsible for delegating events to
    this

    application''s views.


    The event dispatcher is created by the application at initialization time

    and sets up event listeners on the DOM element described by the

    application''s `rootElement` property.


    See the documentation for `Ember.EventDispatcher` for more information.'
  itemtype: property
  name: eventDispatcher
  type: Ember.EventDispatcher
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 198
  description: ! "The DOM events for which the event dispatcher should listen.\n\nBy
    default, the application's `Ember.EventDispatcher` listens\nfor a set of standard
    DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's
    `Ember.View`\ninstances.\n\nIf you would like additional events to be delegated
    to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash
    containing the DOM event name as the key and the\ncorresponding view method name
    as the value. For example:\n\n```javascript\nApp = Ember.Application.create({\n
    \ customEvents: {\n    // add support for the loadedmetadata media\n    // player
    event\n    'loadedmetadata': \"loadedMetadata\"\n  }\n});\n```"
  itemtype: property
  name: customEvents
  type: Object
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 252
  access: private
  tagname: ! 'Build the container for the current application.


    Also register a default application view in case the application

    itself does not.'
  itemtype: method
  name: buildContainer
  return:
    description: the configured container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 269
  access: private
  tagname: ! "If the application has not opted out of routing and has not explicitly\ndefined
    a router, supply a default router for the application author\nto configure.\n\nThis
    allows application developers to do:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.Router.map(function()
    {\n  this.resource('posts');\n});\n```"
  itemtype: method
  name: defaultRouter
  return:
    description: the default router
    type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 298
  access: private
  tagname: ! 'Automatically initialize the application once the DOM has

    become ready.


    The initialization itself is scheduled on the actions queue

    which ensures that application loading finishes before

    booting.


    If you are asynchronously loading code, you should call

    `deferReadiness()` to defer booting, and then call

    `advanceReadiness()` once all of your code has finished

    loading.'
  itemtype: method
  name: scheduleInitialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 327
  description: ! "Use this to defer readiness until some condition is true.\n\nExample:\n\n```javascript\nApp
    = Ember.Application.create();\nApp.deferReadiness();\n\njQuery.getJSON(\"/auth-token\",
    function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n```\n\nThis
    allows you to perform asynchronous setup logic and defer\nbooting your application
    until the setup has finished.\n\nHowever, if the setup requires a loading UI,
    it might be better\nto use the router for this purpose."
  itemtype: method
  name: deferReadiness
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 356
  description: ! 'Call `advanceReadiness` after any asynchronous setup logic has completed.

    Each call to `deferReadiness` must be matched by a call to `advanceReadiness`

    or the application will never become ready and routing will not begin.'
  itemtype: method
  name: advanceReadiness
  see:
  - ! '{Ember.Application#deferReadiness}'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 373
  description: ! 'registers a factory for later injection


    Example:


    ```javascript

    App = Ember.Application.create();


    App.Person = Ember.Object.extend({});

    App.Orange = Ember.Object.extend({});

    App.Email  = Ember.Object.extend({});


    App.register(''model:user'', App.Person, {singleton: false });

    App.register(''fruit:favorite'', App.Orange);

    App.register(''communication:main'', App.Email, {singleton: false});

    ```'
  itemtype: method
  name: register
  params:
  - name: type
    description: ''
    type: String
  - name: name
    description: ''
    type: String
  - name: factory
    description: ''
    type: String
  - name: options
    description: (optional)
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 400
  description: ! 'defines an injection or typeInjection


    Example:


    ```javascript

    App.inject(<full_name or type>, <property name>, <full_name>)

    App.inject(''model:user'', ''email'', ''model:email'')

    App.inject(''model'', ''source'', ''source:main'')

    ```'
  itemtype: method
  name: inject
  params:
  - name: factoryNameOrType
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 421
  access: private
  tagname: ''
  deprecated: true
  deprecationMessage: ! 'Calling initialize manually is not supported.


    Please see Ember.Application#advanceReadiness and

    Ember.Application#deferReadiness.'
  itemtype: method
  name: initialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 435
  access: private
  tagname: ! 'Initialize the application. This happens automatically.


    Run any initializers and run the application load hook. These hooks may

    choose to defer readiness. For example, an authentication hook might want

    to defer readiness until the auth token has been retrieved.'
  itemtype: method
  name: _initialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 463
  description: ! "Reset the application. This is typically used only in tests. It
    cleans up\nthe application in the following order:\n\n1. Deactivate existing routes\n2.
    Destroy all objects in the container\n3. Create a new application container\n4.
    Re-route to the existing url\n\nTypical Example:\n\n```javascript\n\nvar App;\n\nEmber.run(function()
    {\n  App = Ember.Application.create();\n});\n\nmodule(\"acceptance test\", {\n
    \ setup: function() {\n    App.reset();\n  }\n});\n\ntest(\"first test\", function()
    {\n  // App is freshly reset\n});\n\ntest(\"first test\", function() {\n  // App
    is again freshly reset\n});\n```\n\nAdvanced Example:\n\nOccasionally you may
    want to prevent the app from initializing during\nsetup. This could enable extra
    configuration, or enable asserting prior\nto the app becoming ready.\n\n```javascript\n\nvar
    App;\n\nEmber.run(function() {\n  App = Ember.Application.create();\n});\n\nmodule(\"acceptance
    test\", {\n  setup: function() {\n    Ember.run(function() {\n      App.reset();\n
    \     App.deferReadiness();\n    });\n  }\n});\n\ntest(\"first test\", function()
    {\n  ok(true, 'something before app is initialized');\n\n  Ember.run(function()
    {\n    App.advanceReadiness();\n  });\n  ok(true, 'something after app is initialized');\n});\n```"
  itemtype: method
  name: reset
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 551
  access: private
  tagname: ''
  itemtype: method
  name: runInitializers
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 574
  access: private
  tagname: ''
  itemtype: method
  name: didBecomeReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 592
  access: private
  tagname: ! 'Setup up the event dispatcher to receive events on the

    application''s `rootElement` with any registered

    `customEvents`.'
  itemtype: method
  name: setupEventDispatcher
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 610
  access: private
  tagname: ! 'If the application has a router, use it to route to the current URL,
    and

    trigger a new call to `route` whenever the URL changes.'
  itemtype: property
  name: router
  type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 632
  description: ! 'Called when the Application has become ready.

    The call will be delayed until the DOM has become ready.'
  itemtype: event
  name: ready
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 640
  deprecated: true
  deprecationMessage: ! "Use 'Resolver' instead\n    Set this to provide an alternate
    class to `Ember.DefaultResolver`"
  itemtype: property
  name: resolver
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 649
  description: Set this to provide an alternate class to `Ember.DefaultResolver`
  itemtype: property
  name: resolver
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 680
  access: private
  tagname: ! "This creates a container with the default Ember naming conventions.\n\nIt
    also configures the container:\n\n* registered views are created every time they
    are looked up (they are\n  not singletons)\n* registered templates are not factories;
    the registered value is\n  returned directly.\n* the router receives the application
    as its `namespace` property\n* all controllers receive the router as their `target`
    and `controllers`\n  properties\n* all controllers receive the application as
    their `namespace` property\n* the application view receives the application controller
    as its\n  `controller` property\n* the application view receives the application
    template as its\n  `defaultTemplate` property"
  itemtype: method
  name: buildContainer
  static: 1
  params:
  - name: namespace
    description: ! "the application to build the\n  container for."
    type: Ember.Application
  return:
    description: the built container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 739
  access: private
  tagname: ! "This function defines the default lookup rules for container lookups:\n\n*
    templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the
    application after classifying the name.\n  For example, `controller:post` looks
    up `App.PostController` by default.\n* if the default lookup fails, look for registered
    classes on the container\n\nThis allows the application to register default injections
    in the container\nthat could be overridden by the normal naming convention."
  itemtype: method
  name: resolverFor
  params:
  - name: namespace
    description: the namespace to look for classes
    type: Ember.Namespace
  return:
    description: the resolved value for a given lookup
    type: ! '*'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 82
  description: ! 'This will be set to the Application instance when it is

    created.'
  itemtype: property
  name: namespace
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 115
  description: ! 'This method is called via the container''s resolver method.

    It parses the provided `fullName` and then looks up and

    returns the appropriate template or class.'
  itemtype: method
  name: resolve
  params:
  - name: fullName
    description: the lookup string
    type: String
  return:
    description: the resolved factory
    type: Object
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 138
  description: ! 'Convert the string name of the form "type:name" to

    a Javascript object with the parsed aspects of the name

    broken out.'
  access: protected
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: parseName
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 172
  description: Look up the template in Ember.TEMPLATES
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveTemplate
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 192
  description: ! 'Given a parseName object (output from `parseName`), apply

    the conventions expected by `Ember.Router`'
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: useRouterNaming
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 207
  description: Lookup the controller using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveController
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 219
  description: Lookup the route using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveRoute
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 231
  description: Lookup the view using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveView
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 244
  description: Lookup the model on the Application namespace
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveModel
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 258
  description: ! 'Look up the specified object (from parsedName) on the appropriate

    namespace (usually on the Application)'
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: ! "a parseName object with the parsed\n  fullName lookup string"
    type: Object
  itemtype: method
  name: resolveOther
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/resolver.js
  line: 273
  description: ! 'Returns a human-readable description for a fullName. Used by the

    Application namespace in assertions to describe the

    precise name of the class that Ember is looking for, rather than

    container keys.'
  access: protected
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: lookupDescription
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-debug/lib/main.js
  line: 28
  description: ! 'Define an assertion that will throw an exception if the condition
    is not

    met. Ember build tools will remove any calls to `Ember.assert()` when

    doing a production build. Example:


    ```javascript

    // Test for truthiness

    Ember.assert(''Must pass a valid object'', obj);

    // Fail unconditionally

    Ember.assert(''This code path should never be run'')

    ```'
  itemtype: method
  name: assert
  params:
  - name: desc
    description: ! "A description of the assertion. This will become\n  the text of
      the Error thrown if the assertion fails."
    type: String
  - name: test
    description: ! "Must be truthy for the assertion to pass. If\n  falsy, an exception
      will be thrown."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 58
  description: ! 'Display a warning with the provided message. Ember build tools will

    remove any calls to `Ember.warn()` when doing a production build.'
  itemtype: method
  name: warn
  params:
  - name: message
    description: A warning to display.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the warning\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 74
  description: ! 'Display a debug notice. Ember build tools will remove any calls
    to

    `Ember.debug()` when doing a production build.


    ```javascript

    Ember.debug("I''m a debug notice!");

    ```'
  itemtype: method
  name: debug
  params:
  - name: message
    description: A debug message to display.
    type: String
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 89
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only). Ember build tools will remove any calls to

    `Ember.deprecate()` when doing a production build.'
  itemtype: method
  name: deprecate
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the deprecation\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 135
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only) when the wrapped method is called.


    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though

    no warnings will be shown in production.'
  itemtype: method
  name: deprecateFunc
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: func
    description: The function to be deprecated.
    type: Function
  return:
    description: a new function that wrapped the original function with a deprecation
      warning
    type: Function
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-handlebars-compiler/lib/main.js
  line: 51
  description: ! "Register a bound helper or custom view helper.\n\n## Simple bound
    helper example\n\n```javascript\nEmber.Handlebars.helper('capitalize', function(value)
    {\n  return value.toUpperCase();\n});\n```\n\nThe above bound helper can be used
    inside of templates as follows:\n\n```handlebars\n{{capitalize name}}\n```\n\nIn
    this case, when the `name` property of the template's context changes,\nthe rendered
    value of the helper will update to reflect this change.\n\nFor more examples of
    bound helpers, see documentation for\n`Ember.Handlebars.registerBoundHelper`.\n\n##
    Custom view helper example\n\nAssuming a view subclass named `App.CalendarView`
    were defined, a helper\nfor rendering instances of this view could be registered
    as follows:\n\n```javascript\nEmber.Handlebars.helper('calendar', App.CalendarView):\n```\n\nThe
    above bound helper can be used inside of templates as follows:\n\n```handlebars\n{{calendar}}\n```\n\nWhich
    is functionally equivalent to:\n\n```handlebars\n{{view App.CalendarView}}\n```\n\nOptions
    in the helper will be passed to the view in exactly the same\nmanner as with the
    `view` helper."
  itemtype: method
  name: helper
  params:
  - name: name
    description: ''
    type: String
  - name: function
    description: or view class constructor
    type: Function|Ember.View
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: ../packages/ember-handlebars-compiler/lib/main.js
  line: 163
  access: private
  tagname: ! 'Override the default buffer for Ember Handlebars. By default, Handlebars

    creates an empty String at the beginning of each invocation and appends to

    it. Ember''s Handlebars overrides this to append to a single shared buffer.'
  itemtype: method
  name: appendToBuffer
  params:
  - name: string
    description: ''
    type: String
  class: Ember.Handlebars.JavaScriptCompiler
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars-compiler/lib/main.js
  line: 179
  access: private
  tagname: ! 'Rewrite simple mustaches from `{{foo}}` to `{{bind "foo"}}`. This means
    that

    all simple mustaches in Ember''s Handlebars will also set up an observer to

    keep the DOM up to date when the underlying property changes.'
  itemtype: method
  name: mustache
  params:
  - name: mustache
    description: ''
  class: Ember.Handlebars.Compiler
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars-compiler/lib/main.js
  line: 212
  description: ! 'Used for precompilation of Ember Handlebars templates. This will
    not be used

    during normal app execution.'
  itemtype: method
  name: precompile
  static: 1
  params:
  - name: string
    description: The template to precompile
    type: String
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: ../packages/ember-handlebars-compiler/lib/main.js
  line: 243
  description: ! 'The entry point for Ember Handlebars. This replaces the default

    `Handlebars.compile` and turns on template-local data and String

    parameters.'
  itemtype: method
  name: compile
  static: 1
  params:
  - name: string
    description: The template to compile
    type: String
  return:
    description: ''
    type: Function
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 328
  description: ! "tagName: 'select',\n  classNames: ['ember-select'],\n  defaultTemplate:
    precompileTemplate('{{#if view.prompt}}<option value=\"\">{{view.prompt}}</option>{{/if}}{{#if
    view.optionGroupPath}}{{#each view.groupedContent}}{{view view.groupView contentBinding=this.content
    labelBinding=this.label}}{{/each}}{{else}}{{#each view.content}}{{view view.optionView
    contentBinding=\"this\"}}{{/each}}{{/if}}'),\n  attributeBindings: ['multiple',
    'disabled', 'tabindex', 'name'],\n/**\n    The `multiple` attribute of the select
    element. Indicates whether multiple\n    options can be selected."
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 345
  description: ! 'The `disabled` attribute of the select element. Indicates whether

    the element is disabled from interactions.'
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 355
  description: ! "The list of options.\n\nIf `optionLabelPath` and `optionValuePath`
    are not overridden, this should\nbe a list of strings, which will serve simultaneously
    as labels and values.\n\nOtherwise, this should be a list of objects. For instance:\n\n```javascript\nEmber.Select.create({\n
    \ content: Ember.A([\n      { id: 1, firstName: 'Yehuda' },\n      { id: 2, firstName:
    'Tom' }\n    ]),\n  optionLabelPath: 'content.firstName',\n  optionValuePath:
    'content.id'\n});\n```"
  itemtype: property
  name: content
  type: Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 380
  description: ! 'When `multiple` is `false`, the element of `content` that is currently

    selected, if any.


    When `multiple` is `true`, an array of such elements.'
  itemtype: property
  name: selection
  type: Object or Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 392
  description: ! 'In single selection mode (when `multiple` is `false`), value can
    be used to

    get the current selection''s value or set the selection by it''s value.


    It is not currently supported in multiple selection mode.'
  itemtype: property
  name: value
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 408
  description: ! 'If given, a top-most dummy option will be rendered to serve as a
    user

    prompt.'
  itemtype: property
  name: prompt
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 418
  description: The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionLabelPath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 427
  description: The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionValuePath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 436
  description: ! 'The path of the option group.

    When this property is used, `content` should be sorted by `optionGroupPath`.'
  itemtype: property
  name: optionGroupPath
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 446
  description: The view class for optgroup.
  itemtype: property
  name: groupView
  type: Ember.View
  default: Ember.SelectOptgroup
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 475
  description: The view class for option.
  itemtype: property
  name: optionView
  type: Ember.View
  default: Ember.SelectOption
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 31
  description: ! "classNames: ['ember-text-field'],\n  tagName: \"input\",\n  attributeBindings:
    ['type', 'value', 'size', 'pattern', 'name'],\n/**\n    The `value` attribute
    of the input element. As the user inputs text, this\n    property is updated live."
  itemtype: property
  name: value
  type: String
  default: ! '""'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 47
  description: The `type` attribute of the input element.
  itemtype: property
  name: type
  type: String
  default: ! '"text"'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 56
  description: The `size` of the text field in characters.
  itemtype: property
  name: size
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 65
  description: The `pattern` the pattern attribute of input element.
  itemtype: property
  name: pattern
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 36
  description: ! 'The action to be sent when the user presses the return key.


    This is similar to the `{{action}}` helper, but is fired when

    the user presses the return key when editing a text field, and sends

    the value of the field as the context.'
  itemtype: property
  name: action
  type: String
  default: 'null'
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 49
  description: ! 'The event that should send the action.


    Options are:


    * `enter`: the user pressed enter

    * `keypress`: the user pressed a key'
  itemtype: property
  name: onEvent
  type: String
  default: enter
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 63
  description: ! 'Whether they `keyUp` event that triggers an `action` to be sent
    continues

    propagating to other views.


    By default, when the user presses the return key on their keyboard and

    the text field has an `action` set, the action will be sent to the view''s

    controller and the key event will stop propagating.


    If you would like parent views to receive the `keyUp` event even after an

    action has been dispatched, set `bubbles` to true.'
  itemtype: property
  name: bubbles
  type: Boolean
  default: 'false'
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 92
  description: ! 'The action to be sent when the user inserts a new line.


    Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.

    Uses sendAction to send the `enter` action to the controller.'
  itemtype: method
  name: insertNewLine
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 106
  description: ! 'Called when the user hits escape.


    Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.

    Uses sendAction to send the `enter` action to the controller.'
  itemtype: method
  name: cancel
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 119
  description: Called when the text area is focused.
  itemtype: method
  name: focusIn
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 129
  description: Called when the text area is blurred.
  itemtype: method
  name: focusOut
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_support.js
  line: 139
  description: ! 'The action to be sent when the user presses a key. Enabled by setting

    the `onEvent` property to `keyPress`.


    Uses sendAction to send the `keyPress` action to the controller.'
  itemtype: method
  name: keyPress
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 139
  access: private
  tagname: ! '''_triageMustache'' is used internally select between a binding and
    helper for

    the given context. Until this point, it would be hard to determine if the

    mustache is a property reference or a regular helper reference. This triage

    helper resolves that.


    This would not be typically invoked by directly.'
  itemtype: method
  name: _triageMustache
  params:
  - name: property
    description: Property/helperID to triage
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 165
  access: private
  tagname: ! '`bind` can be used to display a value, then update that value if it

    changes. For example, if you wanted to print the `title` property of

    `content`:


    ```handlebars

    {{bind "content.title"}}

    ```


    This will return the `title` property as a string, then create a new observer

    at the specified path. If it changes, it will update the value in DOM. Note

    that if you need to support IE7 and IE8 you must modify the model objects

    properties using `Ember.get()` and `Ember.set()` for this to work as it

    relies on Ember''s KVO system. For all other browsers this will be handled for

    you automatically.'
  itemtype: method
  name: bind
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 201
  access: private
  tagname: ! "Use the `boundIf` helper to create a conditional that re-evaluates\nwhenever
    the truthiness of the bound value changes.\n\n```handlebars\n{{#boundIf \"content.shouldDisplayTitle\"}}\n
    \ {{content.title}}\n{{/boundIf}}\n```"
  itemtype: method
  name: boundIf
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 235
  itemtype: method
  name: with
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 279
  description: See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)
  itemtype: method
  name: if
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 295
  itemtype: method
  name: unless
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 314
  description: ! "`bind-attr` allows you to create a binding between DOM element attributes
    and\nEmber objects. For example:\n\n```handlebars\n<img {{bind-attr src=\"imageUrl\"
    alt=\"imageTitle\"}}>\n```\n\nThe above handlebars template will fill the `<img>`'s
    `src` attribute will\nthe value of the property referenced with `\"imageUrl\"`
    and its `alt`\nattribute with the value of the property referenced with `\"imageTitle\"`.\n\nIf
    the rendering context of this template is the following object:\n\n```javascript\n{\n
    \ imageUrl: 'http://lolcats.info/haz-a-funny',\n  imageTitle: 'A humorous image
    of a cat'\n}\n```\n\nThe resulting HTML output will be:\n\n```html\n<img src=\"http://lolcats.info/haz-a-funny\"
    alt=\"A humorous image of a cat\">\n```\n\n`bind-attr` cannot redeclare existing
    DOM element attributes. The use of `src`\nin the following `bind-attr` example
    will be ignored and the hard coded value\nof `src=\"/failwhale.gif\"` will take
    precedence:\n\n```handlebars\n<img src=\"/failwhale.gif\" {{bind-attr src=\"imageUrl\"
    alt=\"imageTitle\"}}>\n```\n\n### `bind-attr` and the `class` attribute\n\n`bind-attr`
    supports a special syntax for handling a number of cases unique\nto the `class`
    DOM element attribute. The `class` attribute combines\nmultiple discreet values
    into a single attribute as a space-delimited\nlist of strings. Each string can
    be:\n\n* a string return value of an object's property.\n* a boolean return value
    of an object's property\n* a hard-coded value\n\nA string return value works identically
    to other uses of `bind-attr`. The\nreturn value of the property will become the
    value of the attribute. For\nexample, the following view and template:\n\n```javascript\n
    \ AView = Ember.View.extend({\n    someProperty: function() {\n      return \"aValue\";\n
    \   }.property()\n  })\n```\n\n```handlebars\n<img {{bind-attr class=\"view.someProperty}}>\n```\n\nResult
    in the following rendered output:\n\n```html\n<img class=\"aValue\">\n```\n\nA
    boolean return value will insert a specified class name if the property\nreturns
    `true` and remove the class name if the property returns `false`.\n\nA class name
    is provided via the syntax\n`somePropertyName:class-name-if-true`.\n\n```javascript\nAView
    = Ember.View.extend({\n  someBool: true\n})\n```\n\n```handlebars\n<img {{bind-attr
    class=\"view.someBool:class-name-if-true\"}}>\n```\n\nResult in the following
    rendered output:\n\n```html\n<img class=\"class-name-if-true\">\n```\n\nAn additional
    section of the binding can be provided if you want to\nreplace the existing class
    instead of removing it when the boolean\nvalue changes:\n\n```handlebars\n<img
    {{bind-attr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n```\n\nA
    hard-coded value can be used by prepending `:` to the desired\nclass name: `:class-name-to-always-apply`.\n\n```handlebars\n<img
    {{bind-attr class=\":class-name-to-always-apply\"}}>\n```\n\nResults in the following
    rendered output:\n\n```html\n<img class=\"class-name-to-always-apply\">\n```\n\nAll
    three strategies - string return value, boolean return value, and\nhard-coded
    value – can be combined in a single declaration:\n\n```handlebars\n<img {{bind-attr
    class=\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"}}>\n```"
  itemtype: method
  name: bind-attr
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 523
  description: See `bind-attr`
  itemtype: method
  name: bindAttr
  deprecated: true
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 535
  access: private
  tagname: ! 'Helper that, given a space-separated string of property paths and a
    context,

    returns an array of class names. Calling this method also has the side

    effect of setting up observers at those property paths, such that if they

    change, the correct class name will be reapplied to the DOM element.


    For example, if you pass the string "fooBar", it will first look up the

    "fooBar" value of the context. If that value is true, it will add the

    "foo-bar" class to the current element (i.e., the dasherized form of

    "fooBar"). If the value is a string, it will add that string as the class.

    Otherwise, it will not add any new class name.'
  itemtype: method
  name: bindClasses
  params:
  - name: context
    description: The context from which to lookup properties
    type: Ember.Object
  - name: classBindings
    description: ! "A string, space-separated, of class bindings\n  to use"
    type: String
  - name: view
    description: ! "The view in which observers should look for the\n  element to
      update"
    type: Ember.View
  - name: bindAttrId
    description: Optional bindAttr id used to lookup elements
    type: Srting
  return:
    description: An array of class names to add
    type: Array
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/helpers/collection.js
  line: 14
  description: ! "`{{collection}}` is a `Ember.Handlebars` helper for adding instances
    of\n`Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)\n
    for additional information on how a `CollectionView` functions.\n\n`{{collection}}`'s
    primary use is as a block helper with a `contentBinding`\noption pointing towards
    an `Ember.Array`-compatible object. An `Ember.View`\ninstance will be created
    for each item in its `content` property. Each view\nwill have its own `content`
    property set to the appropriate item in the\ncollection.\n\nThe provided block
    will be applied as the template for each item's view.\n\nGiven an empty `<body>`
    the following template:\n\n```handlebars\n{{#collection contentBinding=\"App.items\"}}\n
    \ Hi {{view.content.name}}\n{{/collection}}\n```\n\nAnd the following application
    code\n\n```javascript\nApp = Ember.Application.create()\nApp.items = [\n  Ember.Object.create({name:
    'Dave'}),\n  Ember.Object.create({name: 'Mary'}),\n  Ember.Object.create({name:
    'Sara'})\n]\n```\n\nWill result in the HTML structure below\n\n```html\n<div class=\"ember-view\">\n
    \ <div class=\"ember-view\">Hi Dave</div>\n  <div class=\"ember-view\">Hi Mary</div>\n
    \ <div class=\"ember-view\">Hi Sara</div>\n</div>\n```\n\n### Blockless Use\n\nIf
    you provide an `itemViewClass` option that has its own `template` you can\nomit
    the block.\n\nThe following template:\n\n```handlebars\n{{collection contentBinding=\"App.items\"
    itemViewClass=\"App.AnItemView\"}}\n```\n\nAnd application code\n\n```javascript\nApp
    = Ember.Application.create();\nApp.items = [\n  Ember.Object.create({name: 'Dave'}),\n
    \ Ember.Object.create({name: 'Mary'}),\n  Ember.Object.create({name: 'Sara'})\n];\n\nApp.AnItemView
    = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings {{view.content.name}}\")\n});\n```\n\nWill
    result in the HTML structure below\n\n```html\n<div class=\"ember-view\">\n  <div
    class=\"ember-view\">Greetings Dave</div>\n  <div class=\"ember-view\">Greetings
    Mary</div>\n  <div class=\"ember-view\">Greetings Sara</div>\n</div>\n```\n\n###
    Specifying a CollectionView subclass\n\nBy default the `{{collection}}` helper
    will create an instance of\n`Ember.CollectionView`. You can supply a `Ember.CollectionView`
    subclass to\nthe helper by passing it as the first argument:\n\n```handlebars\n{{#collection
    App.MyCustomCollectionClass contentBinding=\"App.items\"}}\n  Hi {{view.content.name}}\n{{/collection}}\n```\n\n###
    Forwarded `item.*`-named Options\n\nAs with the `{{view}}`, helper options passed
    to the `{{collection}}` will be\nset on the resulting `Ember.CollectionView` as
    properties. Additionally,\noptions prefixed with `item` will be applied to the
    views rendered for each\nitem (note the camelcasing):\n\n```handlebars\n{{#collection
    contentBinding=\"App.items\"\n              itemTagName=\"p\"\n              itemClassNames=\"greeting\"}}\n
    \ Howdy {{view.content.name}}\n{{/collection}}\n```\n\nWill result in the following
    HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <p class=\"ember-view
    greeting\">Howdy Dave</p>\n  <p class=\"ember-view greeting\">Howdy Mary</p>\n
    \ <p class=\"ember-view greeting\">Howdy Sara</p>\n</div>\n```"
  itemtype: method
  name: collection
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  deprecated: true
  deprecationMessage: Use `{{each}}` helper instead.
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 12
  description: ! '`log` allows you to output the value of a variable in the current
    rendering

    context.


    ```handlebars

    {{log myVariable}}

    ```'
  itemtype: method
  name: log
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 33
  description: ! 'Execute the `debugger` statement in the current context.


    ```handlebars

    {{debugger}}

    ```'
  itemtype: method
  name: debugger
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/each.js
  line: 206
  description: ! "The `{{#each}}` helper loops over elements in a collection, rendering
    its\nblock once for each item. It is an extension of the base Handlebars `{{#each}}`\nhelper:\n\n```javascript\nDevelopers
    = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n```\n\n```handlebars\n{{#each
    Developers}}\n  {{name}}\n{{/each}}\n```\n\n`{{each}}` supports an alternative
    syntax with element naming:\n\n```handlebars\n{{#each person in Developers}}\n
    \ {{person.name}}\n{{/each}}\n```\n\nWhen looping over objects that do not have
    properties, `{{this}}` can be used\nto render the object:\n\n```javascript\nDeveloperNames
    = ['Yehuda', 'Tom', 'Paul']\n```\n\n```handlebars\n{{#each DeveloperNames}}\n
    \ {{this}}\n{{/each}}\n```\n### {{else}} condition\n`{{#each}}` can have a matching
    `{{else}}`. The contents of this block will render\nif the collection is empty.\n\n```\n{{#each
    person in Developers}}\n  {{person.name}}\n{{else}}\n  <p>Sorry, nobody is available
    for this task.</p>\n{{/each}}\n```\n### Specifying a View class for items\nIf
    you provide an `itemViewClass` option that references a view class\nwith its own
    `template` you can omit the block.\n\nThe following template:\n\n```handlebars\n{{#view
    App.MyView }}\n  {{each view.items itemViewClass=\"App.AnItemView\"}}\n{{/view}}\n```\n\nAnd
    application code\n\n```javascript\nApp = Ember.Application.create({\n  MyView:
    Ember.View.extend({\n    items: [\n      Ember.Object.create({name: 'Dave'}),\n
    \     Ember.Object.create({name: 'Mary'}),\n      Ember.Object.create({name: 'Sara'})\n
    \   ]\n  })\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings
    {{name}}\")\n});\n```\n\nWill result in the HTML structure below\n\n```html\n<div
    class=\"ember-view\">\n  <div class=\"ember-view\">Greetings Dave</div>\n  <div
    class=\"ember-view\">Greetings Mary</div>\n  <div class=\"ember-view\">Greetings
    Sara</div>\n</div>\n```\n\nIf an `itemViewClass` is defined on the helper, and
    therefore the helper is not\nbeing used as a block, an `emptyViewClass` can also
    be provided optionally.\nThe `emptyViewClass` will match the behavior of the `{{else}}`
    condition\ndescribed above. That is, the `emptyViewClass` will render if the collection\nis
    empty.\n\n### Representing each item with a Controller.\nBy default the controller
    lookup within an `{{#each}}` block will be\nthe controller of the template where
    the `{{#each}}` was used. If each\nitem needs to be presented by a custom controller
    you can provide a\n`itemController` option which references a controller by lookup
    name.\nEach item in the loop will be wrapped in an instance of this controller\nand
    the item itself will be set to the `content` property of that controller.\n\nThis
    is useful in cases where properties of model objects need transformation\nor synthesis
    for display:\n\n```javascript\nApp.DeveloperController = Ember.ObjectController.extend({\n
    \ isAvailableForHire: function() {\n    return !this.get('content.isEmployed')
    && this.get('content.isSeekingWork');\n  }.property('isEmployed', 'isSeekingWork')\n})\n```\n\n```handlebars\n{{#each
    person in developers itemController=\"developer\"}}\n  {{person.name}} {{#if person.isAvailableForHire}}Hire
    me!{{/if}}\n{{/each}}\n```\n\nEach itemController will receive a reference to
    the current controller as\na `parentController` property.\n\n### (Experimental)
    Grouped Each\n\nWhen used in conjunction with the experimental [group helper](https://github.com/emberjs/group-helper),\nyou
    can inform Handlebars to re-render an entire group of items instead of\nre-rendering
    them one at a time (in the event that they are changed en masse\nor an item is
    added/removed).\n\n```handlebars\n{{#group}}\n  {{#each people}}\n    {{firstName}}
    {{lastName}}\n  {{/each}}\n{{/group}}\n```\n\nThis can be faster than the normal
    way that Handlebars re-renders items\nin some cases.\n\nIf for some reason you
    have a group with more than one `#each`, you can make\none of the collections
    be updated in normal (non-grouped) fashion by setting\nthe option `groupedRows=true`
    (counter-intuitive, I know).\n\nFor example,\n\n```handlebars\n{{dealershipName}}\n\n{{#group}}\n
    \ {{#each dealers}}\n    {{firstName}} {{lastName}}\n  {{/each}}\n\n  {{#each
    car in cars groupedRows=true}}\n    {{car.make}} {{car.model}} {{car.color}}\n
    \ {{/each}}\n{{/group}}\n```\nAny change to `dealershipName` or the `dealers`
    collection will cause the\nentire group to be re-rendered. However, changes to
    the `cars` collection\nwill be re-rendered individually (as normal).\n\nNote that
    `group` behavior is also disabled by specifying an `itemViewClass`."
  itemtype: method
  name: each
  params:
  - name: name
    description: name for item (used with `in`)
    type: String
    optional: true
  - name: path
    description: path
    type: String
    optional: true
  - name: options
    description: Handlebars key/value pairs of options
    type: Object
    optional: true
    props:
    - name: itemViewClass
      description: a path to a view class used for each item
      type: String
      optional: true
    - name: itemController
      description: name of a controller to be created for each item
      type: String
      optional: true
    - name: groupedRows
      description: enable normal item-by-item rendering when inside a `#group` helper
      type: Boolean
      optional: true
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/loc.js
  line: 8
  description: ! "`loc` looks up the string in the localized strings hash.\nThis is
    a convenient way to localize text. For example:\n\n```html\n<script type=\"text/x-handlebars\"
    data-template-name=\"home\">\n  {{loc \"welcome\"}}\n</script>\n```\n\nTake note
    that `\"welcome\"` is a string and not an object\nreference."
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/partial.js
  line: 8
  description: ! "`partial` renders a template directly using the current context.\nIf
    needed the context can be set using the `{{#with foo}}` helper.\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"header_bar\">\n  {{#with currentUser}}\n
    \   {{partial user_info}}\n  {{/with}}\n</script>\n```\n\nThe `data-template-name`
    attribute of a partial template\nis prefixed with an underscore.\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"_user_info\">\n  <span>Hello {{username}}!</span>\n</script>\n```"
  itemtype: method
  name: partial
  params:
  - name: partialName
    description: the name of the template to render minus the leading underscore
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/template.js
  line: 8
  description: ! "`template` allows you to render a template from inside another template.\nThis
    allows you to re-use the same template in multiple places. For example:\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"logged_in_user\">\n  {{#with loggedInUser}}\n
    \   Last Login: {{lastLogin}}\n    User Info: {{template \"user_info\"}}\n  {{/with}}\n</script>\n```\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"user_info\">\n  Name: <em>{{name}}</em>\n
    \ Karma: <em>{{karma}}</em>\n</script>\n```\n\n```handlebars\n{{#if isUser}}\n
    \ {{template \"user_info\"}}\n{{else}}\n  {{template \"unlogged_user_info\"}}\n{{/if}}\n```\n\nThis
    helper looks for templates in the global `Ember.TEMPLATES` hash. If you\nadd `<script>`
    tags to your page with the `data-template-name` attribute set,\nthey will be compiled
    and placed in this hash automatically.\n\nYou can also manually register templates
    by adding them to the hash:\n\n```javascript\nEmber.TEMPLATES[\"my_cool_template\"]
    = Ember.Handlebars.compile('<b>{{user}}</b>');\n```"
  deprecated: true
  itemtype: method
  name: template
  params:
  - name: templateName
    description: the template to render
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/unbound.js
  line: 12
  description: ! '`unbound` allows you to output a property without binding. *Important:*
    The

    output will not be updated if the property changes. Use with caution.


    ```handlebars

    <div>{{unbound somePropertyThatDoesntChange}}</div>

    ```


    `unbound` can also be used in conjunction with a bound helper to

    render it in its unbound form:


    ```handlebars

    <div>{{unbound helperName somePropertyThatDoesntChange}}</div>

    ```'
  itemtype: method
  name: unbound
  params:
  - name: property
    description: ''
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/view.js
  line: 165
  description: ! "`{{view}}` inserts a new instance of `Ember.View` into a template
    passing its\noptions to the `Ember.View`'s `create` method and using the supplied
    block as\nthe view's own template.\n\nAn empty `<body>` and the following template:\n\n```handlebars\nA
    span:\n{{#view tagName=\"span\"}}\n  hello.\n{{/view}}\n```\n\nWill result in
    HTML structure:\n\n```html\n<body>\n  <!-- Note: the handlebars template script\n
    \      also results in a rendered Ember.View\n       which is the outer <div>
    here -->\n\n  <div class=\"ember-view\">\n    A span:\n    <span id=\"ember1\"
    class=\"ember-view\">\n      Hello.\n    </span>\n  </div>\n</body>\n```\n\n###
    `parentView` setting\n\nThe `parentView` property of the new `Ember.View` instance
    created through\n`{{view}}` will be set to the `Ember.View` instance of the template
    where\n`{{view}}` was called.\n\n```javascript\naView = Ember.View.create({\n
    \ template: Ember.Handlebars.compile(\"{{#view}} my parent: {{parentView.elementId}}
    {{/view}}\")\n});\n\naView.appendTo('body');\n```\n\nWill result in HTML structure:\n\n```html\n<div
    id=\"ember1\" class=\"ember-view\">\n  <div id=\"ember2\" class=\"ember-view\">\n
    \   my parent: ember1\n  </div>\n</div>\n```\n\n### Setting CSS id and class attributes\n\nThe
    HTML `id` attribute can be set on the `{{view}}`'s resulting element with\nthe
    `id` option. This option will _not_ be passed to `Ember.View.create`.\n\n```handlebars\n{{#view
    tagName=\"span\" id=\"a-custom-id\"}}\n  hello.\n{{/view}}\n```\n\nResults in
    the following HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <span
    id=\"a-custom-id\" class=\"ember-view\">\n    hello.\n  </span>\n</div>\n```\n\nThe
    HTML `class` attribute can be set on the `{{view}}`'s resulting element\nwith
    the `class` or `classNameBindings` options. The `class` option will\ndirectly
    set the CSS `class` attribute and will not be passed to\n`Ember.View.create`.
    `classNameBindings` will be passed to `create` and use\n`Ember.View`'s class name
    binding functionality:\n\n```handlebars\n{{#view tagName=\"span\" class=\"a-custom-class\"}}\n
    \ hello.\n{{/view}}\n```\n\nResults in the following HTML structure:\n\n```html\n<div
    class=\"ember-view\">\n  <span id=\"ember2\" class=\"ember-view a-custom-class\">\n
    \   hello.\n  </span>\n</div>\n```\n\n### Supplying a different view class\n\n`{{view}}`
    can take an optional first argument before its supplied options to\nspecify a
    path to a custom view class.\n\n```handlebars\n{{#view \"MyApp.CustomView\"}}\n
    \ hello.\n{{/view}}\n```\n\nThe first argument can also be a relative path accessible
    from the current\ncontext.\n\n```javascript\nMyApp = Ember.Application.create({});\nMyApp.OuterView
    = Ember.View.extend({\n  innerViewClass: Ember.View.extend({\n    classNames:
    ['a-custom-view-class-as-property']\n  }),\n  template: Ember.Handlebars.compile('{{#view
    \"view.innerViewClass\"}} hi {{/view}}')\n});\n\nMyApp.OuterView.create().appendTo('body');\n```\n\nWill
    result in the following HTML:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n
    \ <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\n    hi\n
    \ </div>\n</div>\n```\n\n### Blockless use\n\nIf you supply a custom `Ember.View`
    subclass that specifies its own template\nor provide a `templateName` option to
    `{{view}}` it can be used without\nsupplying a block. Attempts to use both a `templateName`
    option and supply a\nblock will throw an error.\n\n```handlebars\n{{view \"MyApp.ViewWithATemplateDefined\"}}\n```\n\n###
    `viewName` property\n\nYou can supply a `viewName` option to `{{view}}`. The `Ember.View`
    instance\nwill be referenced as a property of its parent view by this name.\n\n```javascript\naView
    = Ember.View.create({\n  template: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}}
    hi {{/view}}')\n});\n\naView.appendTo('body');\naView.get('aChildByName') // the
    instance of Ember.View created by {{view}} helper\n```"
  itemtype: method
  name: view
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/helpers/yield.js
  line: 8
  description: ! "`{{yield}}` denotes an area of a template that will be rendered
    inside\n  of another template. It has two main uses:\n### Use with `layout`\n
    \ When used in a Handlebars template that is assigned to an `Ember.View`\n  instance's
    `layout` property Ember will render the layout template first,\n  inserting the
    view's own rendered output at the `{{yield}}` location.\nAn empty `<body>` and
    the following application code:\n```javascript\n  AView = Ember.View.extend({\n
    \   classNames: ['a-view-with-layout'],\n    layout: Ember.Handlebars.compile('<div
    class=\"wrapper\">{{yield}}</div>'),\n    template: Ember.Handlebars.compile('<span>I
    am wrapped</span>')\n  });\naView = AView.create();\n  aView.appendTo('body');\n
    \ ```\nWill result in the following HTML output:\n```html\n  <body>\n    <div
    class='ember-view a-view-with-layout'>\n      <div class=\"wrapper\">\n        <span>I
    am wrapped</span>\n      </div>\n    </div>\n  </body>\n  ```\nThe `yield` helper
    cannot be used outside of a template assigned to an\n  `Ember.View`'s `layout`
    property and will throw an error if attempted.\n```javascript\n  BView = Ember.View.extend({\n
    \   classNames: ['a-view-with-layout'],\n    template: Ember.Handlebars.compile('{{yield}}')\n
    \ });\nbView = BView.create();\n  bView.appendTo('body');\n// throws\n  // Uncaught
    Error: assertion failed:\n  // You called yield in a template that was not a layout\n
    \ ```\n### Use with Ember.Component\n  When designing components `{{yield}}` is
    used to denote where, inside the component's\n  template, an optional block passed
    to the component should render:\n```handlebars\n  <!-- application.hbs -->\n  {{#labeled-textfield
    value=someProperty}}\n    First name:\n  {{/my-component}}\n  ```\n```handlebars\n
    \ <!-- components/my-component.hbs -->\n  <label>\n    {{yield}} {{input value=value}}\n
    \ </label>\n  ```\nResult:\n```html\n  <label>\n    First name: <input type=\"text\"
    />\n  <label>\n  ```"
  itemtype: method
  name: yield
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 155
  description: ! 'The function used to determine if the `displayTemplate` or

    `inverseTemplate` should be rendered. This should be a function that takes

    a value and returns a Boolean.'
  itemtype: property
  name: shouldDisplayFunc
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 166
  description: ! 'Whether the template rendered by this view gets passed the context
    object

    of its parent template, or gets passed the value of retrieving `path`

    from the `pathRoot`.


    For example, this is true when using the `{{#if}}` helper, because the

    template inside the helper should look up properties relative to the same

    object as outside the block. This would be `false` when used with `{{#with

    foo}}` because the template should receive the object found by evaluating

    `foo`.'
  itemtype: property
  name: preserveContext
  type: Boolean
  default: 'false'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 183
  description: ! 'If `preserveContext` is true, this is the object that will be used

    to render the template.'
  itemtype: property
  name: previousContext
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 192
  description: The template to render when `shouldDisplayFunc` evaluates to `true`.
  itemtype: property
  name: displayTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 201
  description: The template to render when `shouldDisplayFunc` evaluates to `false`.
  itemtype: property
  name: inverseTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 211
  description: ! 'The path to look up on `pathRoot` that is passed to

    `shouldDisplayFunc` to determine which template to render.


    In addition, if `preserveContext` is `false,` the object at this path will

    be passed to the template when rendering.'
  itemtype: property
  name: path
  type: String
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 224
  description: ! 'The object from which the `path` will be looked up. Sometimes this
    is the

    same as the `previousContext`, but in cases where this view has been

    generated for paths that start with a keyword such as `view` or

    `controller`, the path root will be that resolved object.'
  itemtype: property
  name: pathRoot
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 259
  description: ! 'Determines which template to invoke, sets up the correct state based
    on

    that logic, then invokes the default `Ember.View` `render` implementation.


    This method will first look up the `path` key on `pathRoot`,

    then pass that value to the `shouldDisplayFunc` function. If that returns

    `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,

    `inverseTemplate`, if specified, will be rendered.


    For example, if this `Ember._HandlebarsBoundView` represented the `{{#with

    foo}}` helper, it would look up the `foo` property of its context, and

    `shouldDisplayFunc` would always return true. The object found by looking

    up `foo` would be passed to `displayTemplate`.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls.js
  line: 21
  description: ! "The `{{input}}` helper inserts an HTML `<input>` tag into the template,\n
    \ with a `type` value of either `text` or `checkbox`. If no `type` is provided,\n
    \ `text` will be the default value applied. The attributes of `{{input}}`\n  match
    those of the native HTML tag as closely as possible for these two types.\n## Use
    as text field\n  An `{{input}}` with no `type` or a `type` of `text` will render
    an HTML text input.\n  The following HTML attributes can be set via the helper:\n
    \ * `value`\n    * `size`\n    * `name`\n    * `pattern`\n    * `placeholder`\n
    \   * `disabled`\n    * `maxlength`\n    * `tabindex`\nWhen set to a quoted string,
    these values will be directly applied to the HTML\n  element. When left unquoted,
    these values will be bound to a property on the\n  template's current rendering
    context (most typically a controller instance).\nUnbound:\n```handlebars\n  {{input
    value=\"http://www.facebook.com\"}}\n  ```\n```html\n  <input type=\"text\" value=\"http://www.facebook.com\"/>\n
    \ ```\nBound:\n```javascript\n  App.ApplicationController = Ember.Controller.extend({\n
    \   firstName: \"Stanley\",\n    entryNotAllowed: true\n  });\n  ```\n```handlebars\n
    \ {{input type=\"text\" value=firstName disabled=entryNotAllowed size=\"50\"}}\n
    \ ```\n```html\n  <input type=\"text\" value=\"Stanley\" disabled=\"disabled\"
    size=\"50\"/>\n  ```\n### Extension\n  Internally, `{{input type=\"text\"}}` creates
    an instance of `Ember.TextField`, passing\n  arguments from the helper to `Ember.TextField`'s
    `create` method. You can extend the\n  capablilties of text inputs in your applications
    by reopening this class. For example,\n  if you are deploying to browsers where
    the `required` attribute is used, you\n  can add this to the `TextField`'s `attributeBindings`
    property:\n```javascript\n  Ember.TextField.reopen({\n    attributeBindings: ['required']\n
    \ });\n  ```\n## Use as checkbox\n  An `{{input}}` with a `type` of `checkbox`
    will render an HTML checkbox input.\n  The following HTML attributes can be set
    via the helper:\n  * `checked`\n    * `disabled`\n    * `tabindex`\n    * `indeterminate`\n
    \   * `name`\nWhen set to a quoted string, these values will be directly applied
    to the HTML\n  element. When left unquoted, these values will be bound to a property
    on the\n  template's current rendering context (most typically a controller instance).\nUnbound:\n```handlebars\n
    \ {{input type=\"checkbox\" name=\"isAdmin\"}}\n  ```\n```html\n  <input type=\"checkbox\"
    name=\"isAdmin\" />\n  ```\nBound:\n```javascript\n  App.ApplicationController
    = Ember.Controller.extend({\n    isAdmin: true\n  });\n  ```\n```handlebars\n
    \ {{input type=\"checkbox\" checked=isAdmin }}\n  ```\n```html\n  <input type=\"checkbox\"
    checked=\"checked\" />\n  ```\n### Extension\n  Internally, `{{input type=\"checkbox\"}}`
    creates an instance of `Ember.Checkbox`, passing\n  arguments from the helper
    to `Ember.Checkbox`'s `create` method. You can extend the\n  capablilties of checkbox
    inputs in your applications by reopening this class. For example,\n  if you wanted
    to add a css class to all checkboxes in your application:\n```javascript\n  Ember.Checkbox.reopen({\n
    \   classNames: ['my-app-checkbox']\n  });\n  ```"
  itemtype: method
  name: input
  params:
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/controls.js
  line: 163
  description: ! "`{{textarea}}` inserts a new instance of `<textarea>` tag into the
    template.\nThe attributes of `{{textarea}}` match those of the native HTML tags
    as\nclosely as possible.\n\nThe following HTML attributes can be set:\n\n  * `value`\n
    \ * `name`\n  * `rows`\n  * `cols`\n  * `placeholder`\n  * `disabled`\n  * `maxlength`\n
    \ * `tabindex`\n\nWhen set to a quoted string, these value will be directly applied
    to the HTML\nelement. When left unquoted, these values will be bound to a property
    on the\ntemplate's current rendering context (most typically a controller instance).\n\nUnbound:\n\n```handlebars\n{{textarea
    value=\"Lots of static text that ISN'T bound\"}}\n```\n\nWould result in the following
    HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of static text
    that ISN'T bound\n</textarea>\n```\n\nBound:\n\nIn the following example, the
    `writtenWords` property on `App.ApplicationController`\nwill be updated live as
    the user types 'Lots of text that IS bound' into\nthe text area of their browser's
    window.\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n
    \ writtenWords: \"Lots of text that IS bound\"\n});\n```\n\n```handlebars\n{{textarea
    value=writtenWords}}\n```\n\n Would result in the following HTML:\n\n```html\n<textarea
    class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\nIf
    you wanted a one way binding between the text area and a div tag\nsomewhere else
    on your screen, you could use `Ember.computed.oneWay`:\n\n```javascript\nApp.ApplicationController
    = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n
    \ outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea
    value=writtenWords}}\n\n<div>\n  {{outputWrittenWords}}\n</div>\n```\n\nWould
    result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n
    \ Lots of text that IS bound\n</textarea>\n\n<-- the following div will be updated
    in real time as you type -->\n\n<div>\n  Lots of text that IS bound\n</div>\n```\n\nFinally,
    this example really shows the power and ease of Ember when two\nproperties are
    bound to eachother via `Ember.computed.alias`. Type into\neither text area box
    and they'll both stay in sync. Note that\n`Ember.computed.alias` costs more in
    terms of performance, so only use it when\nyour really binding in both directions:\n\n```javascript\nApp.ApplicationController
    = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n
    \ twoWayWrittenWords: Ember.computed.alias(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea
    value=writtenWords}}\n{{textarea value=twoWayWrittenWords}}\n```\n\n```html\n<textarea
    id=\"ember1\" class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n\n<--
    both updated in real time -->\n\n<textarea id=\"ember2\" class=\"ember-text-area\">\n
    \ Lots of text that IS bound\n</textarea>\n```\n\n### Extension\n\nInternally,
    `{{textarea}}` creates an instance of `Ember.TextArea`, passing\narguments from
    the helper to `Ember.TextArea`'s `create` method. You can\nextend the capabilities
    of text areas in your application by reopening this\nclass. For example, if you
    are deploying to browsers where the `required`\nattribute is used, you can globally
    add support for the `required` attribute\non all {{textarea}}'s' in your app by
    reopening `Ember.TextArea` or\n`Ember.TextSupport` and adding it to the `attributeBindings`
    concatenated\nproperty:\n\n```javascript\nEmber.TextArea.reopen({\n  attributeBindings:
    ['required']\n});\n```"
  itemtype: method
  name: textarea
  params:
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/ext.js
  line: 5
  access: private
  tagname: ! 'If a path starts with a reserved keyword, returns the root

    that should be used.'
  itemtype: method
  name: normalizePath
  params:
  - name: root
    description: ''
    type: Object
  - name: path
    description: ''
    type: String
  - name: data
    description: ''
    type: Hash
  class: Ember
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 48
  description: ! 'Lookup both on root and on window. If the path starts with

    a keyword, the corresponding object will be looked up in the

    template''s data hash and used to resolve the path.'
  itemtype: method
  name: get
  params:
  - name: root
    description: The object to look up the property on
    type: Object
  - name: path
    description: The path to be lookedup
    type: String
  - name: options
    description: The template's option hash
    type: Object
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 116
  access: private
  tagname: ! 'Registers a helper in Handlebars that will be called if no property
    with the

    given name can be found on the current context object, and no helper with

    that name is registered.


    This throws an exception with a more helpful error message so the user can

    track down where the problem is happening.'
  itemtype: method
  name: helperMissing
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/ext.js
  line: 141
  description: ! "Register a bound handlebars helper. Bound helpers behave similarly
    to regular\nhandlebars helpers, with the added ability to re-render when the underlying
    data\nchanges.\n\n## Simple example\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalize',
    function(value) {\n  return value.toUpperCase();\n});\n```\n\nThe above bound
    helper can be used inside of templates as follows:\n\n```handlebars\n{{capitalize
    name}}\n```\n\nIn this case, when the `name` property of the template's context
    changes,\nthe rendered value of the helper will update to reflect this change.\n\n##
    Example with options\n\nLike normal handlebars helpers, bound helpers have access
    to the options\npassed into the helper call.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('repeat',
    function(value, options) {\n  var count = options.hash.count;\n  var a = [];\n
    \ while(a.length < count) {\n      a.push(value);\n  }\n  return a.join('');\n});\n```\n\nThis
    helper could be used in a template as follows:\n\n```handlebars\n{{repeat text
    count=3}}\n```\n\n## Example with bound options\n\nBound hash options are also
    supported. Example:\n\n```handlebars\n{{repeat text countBinding=\"numRepeats\"}}\n```\n\nIn
    this example, count will be bound to the value of\nthe `numRepeats` property on
    the context. If that property\nchanges, the helper will be re-rendered.\n\n##
    Example with extra dependencies\n\nThe `Ember.Handlebars.registerBoundHelper`
    method takes a variable length\nthird parameter which indicates extra dependencies
    on the passed in value.\nThis allows the handlebars helper to update when these
    dependencies change.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalizeName',
    function(value) {\n  return value.get('name').toUpperCase();\n}, 'name');\n```\n\n##
    Example with multiple bound properties\n\n`Ember.Handlebars.registerBoundHelper`
    supports binding to\nmultiple properties, e.g.:\n\n```javascript\nEmber.Handlebars.registerBoundHelper('concatenate',
    function() {\n  var values = Array.prototype.slice.call(arguments, 0, -1);\n  return
    values.join('||');\n});\n```\n\nWhich allows for template syntax such as `{{concatenate
    prop1 prop2}}` or\n`{{concatenate prop1 prop2 prop3}}`. If any of the properties
    change,\nthe helpr will re-render.  Note that dependency keys cannot be\nusing
    in conjunction with multi-property helpers, since it is ambiguous\nwhich property
    the dependent keys would belong to.\n\n## Use with unbound helper\n\nThe `{{unbound}}`
    helper can be used with bound helper invocations\nto render them in their unbound
    form, e.g.\n\n```handlebars\n{{unbound capitalize name}}\n```\n\nIn this example,
    if the name property changes, the helper\nwill not re-render.\n\n## Use with blocks
    not supported\n\nBound helpers do not support use with Handlebars blocks or\nthe
    addition of child views of any kind."
  itemtype: method
  name: registerBoundHelper
  params:
  - name: name
    description: ''
    type: String
  - name: function
    description: ''
    type: Function
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 366
  access: private
  tagname: Renders the unbound form of an otherwise bound helper function.
  itemtype: method
  name: evaluateUnboundHelper
  params:
  - name: fn
    description: ''
    type: Function
  - name: context
    description: ''
    type: Object
  - name: normalizedProperties
    description: ''
    type: Array
  - name: options
    description: ''
    type: String
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 393
  access: private
  tagname: ! 'Overrides Handlebars.template so that we can distinguish

    user-created, top-level templates from inner contexts.'
  itemtype: method
  name: template
  params:
  - name: template
    description: spec
    type: String
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: ../packages/ember-handlebars/lib/loader.js
  line: 10
  access: private
  tagname: ! 'Find templates stored in the head tag as script tags and make them available

    to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run

    as as jQuery DOM-ready callback.


    Script tags with `text/x-handlebars` will be compiled

    with Ember''s Handlebars and are suitable for use as a view''s template.

    Those with type `text/x-raw-handlebars` will be compiled with regular

    Handlebars and are suitable for use in views'' computed properties.'
  itemtype: method
  name: bootstrap
  static: 1
  params:
  - name: ctx
    description: ''
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/string.js
  line: 1
  description: ! 'Mark a string as safe for unescaped output with Handlebars. If you

    return HTML from a Handlebars helper, use this function to

    ensure Handlebars does not escape the HTML.


    ```javascript

    Ember.String.htmlSafe(''<div>someString</div>'')

    ```'
  itemtype: method
  name: htmlSafe
  static: 1
  return:
    description: a string that will not be html escaped by Handlebars
    type: Handlebars.SafeString
  class: Ember.String
  module: ember
- file: ../packages/ember-handlebars/lib/string.js
  line: 23
  description: ! 'Mark a string as being safe for unescaped output with Handlebars.


    ```javascript

    ''<div>someString</div>''.htmlSafe()

    ```


    See [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).'
  itemtype: method
  name: htmlSafe
  return:
    description: a string that will not be html escaped by Handlebars
    type: Handlebars.SafeString
  class: String
  module: ember
- file: ../packages/ember-metal/lib/array.js
  line: 73
  description: Array polyfills to support ES5 features in older browsers.
  itemtype: property
  name: ArrayPolyfills
  class: Ember
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 17
  description: ! 'Debug parameter you can turn on. This will log all bindings that
    fire to

    the console. This should be disabled in production code. Note that you

    can also enable this from the console or temporarily.'
  itemtype: property
  name: LOG_BINDINGS
  type: Boolean
  default: 'false'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 34
  description: ! 'Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)

    instead of local (`foo.bar.baz`).'
  itemtype: method
  name: isGlobalPath
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  return:
    description: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 69
  description: This copies the Binding so it can be connected to another object.
  itemtype: method
  name: copy
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 85
  description: ! 'This will set `from` property path to the specified value. It will
    not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you `connect()` the binding. It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: from
  params:
  - name: path
    description: the property path to connect to
    type: String
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 103
  description: ! 'This will set the `to` property path to the specified value. It
    will not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you `connect()` the binding. It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: to
  params:
  - name: path
    description: A property path or tuple
    type: String|Tuple
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 121
  description: ! 'Configures the binding as one way. A one-way binding will relay
    changes

    on the `from` side to the `to` side, but not the other way around. This

    means that if you change the `to` side directly, the `from` side may have

    a different value.'
  itemtype: method
  name: oneWay
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 135
  itemtype: method
  name: toString
  return:
    description: string representation of binding
    type: String
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 148
  description: ! 'Attempts to connect this binding instance so that it can receive
    and relay

    changes. This method will raise an exception if you have not set the

    from/to properties yet.'
  itemtype: method
  name: connect
  params:
  - name: obj
    description: The root object for this binding.
    type: Object
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 174
  description: ! 'Disconnects the binding instance. Changes will no longer be relayed.
    You

    will not usually need to call this method.'
  itemtype: method
  name: disconnect
  params:
  - name: obj
    description: The root object you passed when connecting the binding.
    type: Object
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 303
  description: ! 'Creates a new Binding instance and makes it apply in a single direction.

    A one-way binding will relay changes on the `from` side object (supplied

    as the `from` argument) the `to` side, but not the other way around.

    This means that if you change the "to" side directly, the "from" side may have

    a different value.


    See `Binding.oneWay`.'
  itemtype: method
  name: oneWay
  params:
  - name: from
    description: from path.
    type: String
  - name: flag
    description: ! "(Optional) passing nothing here will make the\n  binding `oneWay`.
      You can instead pass `false` to disable `oneWay`, making the\n  binding two
      way again."
    type: Boolean
    optional: true
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 445
  description: ! 'Global helper method to create a new binding. Just pass the root
    object

    along with a `to` and `from` path to create and connect the binding.'
  itemtype: method
  name: bind
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 462
  itemtype: method
  name: oneWay
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 195
  description: ! 'Properties are cacheable by default. Computed property will automatically

    cache the return value of your function until one of the dependent keys changes.


    Call `volatile()` to set it into non-cached mode. When in this mode

    the computed property will not automatically cache the return value.


    However, if a property is properly observable, there is no reason to disable

    caching.'
  itemtype: method
  name: cacheable
  params:
  - name: aFlag
    description: optional set to `false` to disable caching
    type: Boolean
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 215
  description: ! "Call on a computed property to set it into non-cached mode. When
    in this\nmode the computed property will not automatically cache the return value.\n\n```javascript\nMyApp.outsideService
    = Ember.Object.create({\n  value: function() {\n    return OutsideService.getValue();\n
    \ }.property().volatile()\n});\n```"
  itemtype: method
  name: volatile
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 235
  description: ! "Call on a computed property to set it into read-only mode. When
    in this\nmode the computed property will throw an error when set.\n\n```javascript\nMyApp.person
    = Ember.Object.create({\n  guid: function() {\n    return 'guid-guid-guid';\n
    \ }.property().readOnly()\n});\n\nMyApp.person.set('guid', 'new-guid'); // will
    throw an exception\n```"
  itemtype: method
  name: readOnly
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 258
  description: ! "Sets the dependent keys on this computed property. Pass any number
    of\narguments containing key paths that this computed property depends on.\n\n```javascript\nMyApp.president
    = Ember.Object.create({\n  fullName: Ember.computed(function() {\n    return this.get('firstName')
    + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property
    depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n```"
  itemtype: method
  name: property
  params:
  - name: path
    description: zero or more property paths
    type: String
    multiple: true
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 287
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For
    example,\ncomputed property functions may close over variables that are then no
    longer\navailable for introspection.\n\nYou can pass a hash of these values to
    a computed property like this:\n\n```\nperson: function() {\n  var personId =
    this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({
    type: App.Person })\n```\n\nThe hash that you pass to the `meta()` function will
    be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes
    a public API for retrieving these values from classes,\nvia the `metaForProperty()`
    function."
  itemtype: method
  name: meta
  params:
  - name: meta
    description: ''
    type: Hash
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 341
  description: ! "Access the value of the function backing the computed property.\nIf
    this property has already been cached, return the cached result.\nOtherwise, call
    the function passing the property name as an argument.\n\n```javascript\nPerson
    = Ember.Object.extend({\n  fullName: function(keyName) {\n    // the keyName parameter
    is 'fullName' in this case.\n\n    return this.get('firstName') + ' ' + this.get('lastName');\n
    \ }.property('firstName', 'lastName')\n});\n\n\nvar tom = Person.create({\n  firstName:
    \"Tom\",\n  lastName: \"Dale\"\n});\n\ntom.get('fullName') // \"Tom Dale\"\n```"
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  return:
    description: The return value of the function backing the CP.
    type: Object
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 384
  description: ! 'Set the value of a computed property. If the function that backs
    your

    computed property does not accept arguments then the default action for

    setting would be to define the property on the current object, and set

    the value of the property to the value being set.


    Generally speaking if you intend for your computed property to be set

    your backing function should accept either two or three arguments.'
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  - name: newValue
    description: The new value being assigned.
    type: Object
  - name: oldValue
    description: The old value being replaced.
    type: String
  return:
    description: The return value of the function backing the CP.
    type: Object
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 477
  description: ! 'This helper returns a new property descriptor that wraps the passed

    computed property function. You can use this helper to define properties

    with mixins or via `Ember.defineProperty()`.


    The function you pass will be used to both get and set property values.

    The function should accept two parameters, key and value. If value is not

    undefined you should set the value first. In either case return the

    current value of the property.'
  itemtype: method
  name: computed
  params:
  - name: func
    description: The computed property function.
    type: Function
  return:
    description: property descriptor instance
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 512
  description: ! 'Returns the cached value for a property, if one exists.

    This can be useful for peeking at the value of a computed

    property that is generated lazily, without accidentally causing

    it to be created.'
  itemtype: method
  name: cacheFor
  params:
  - name: obj
    description: the object whose property you want to check
    type: Object
  - name: key
    description: ! "the name of the property whose cached value you want\n  to return"
    type: String
  return:
    description: the cached value
    type: ! '*'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 562
  description: ! "A computed property that returns true of the value of the dependent\nproperty
    is null, an empty string, empty array, or empty function.\n\nNote: When using
    `Ember.computed.empty` to watch an array make sure to\nuse the `array.length`
    syntax so the computed can subscribe to transitions\nfrom empty to non-empty states.\n\nExample\n\n```javascript\nvar
    ToDoList = Ember.Object.extend({\n  done: Ember.computed.empty('todos.length')\n});\nvar
    todoList = ToDoList.create({todos: ['Unit Test', 'Documentation', 'Release']});\ntodoList.get('done');
    // false\ntodoList.get('todos').clear(); // []\ntodoList.get('done'); // true\n```"
  itemtype: method
  name: computed.empty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which negate

      the original value for property'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 592
  description: ! "A computed property that returns true of the value of the dependent\nproperty
    is NOT null, an empty string, empty array, or empty function.\n\nExample\n\n```javascript\nvar
    Hampster = Ember.Object.extend({\n  hasStuff: Ember.computed.notEmpty('backpack')\n});\nvar
    hampster = Hampster.create({backpack: ['Food', 'Sleeping Bag', 'Tent']});\nhampster.get('hasStuff');
    // true\nhampster.get('backpack').clear(); // []\nhampster.get('hasStuff'); //
    false\n```"
  itemtype: method
  name: computed.notEmpty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which returns true if

      original value for property is not empty.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 618
  description: ! "A computed property that returns true of the value of the dependent\nproperty
    is null or undefined. This avoids errors from JSLint complaining\nabout use of
    ==, which can be technically confusing.\n\nExample\n\n```javascript\nvar Hampster
    = Ember.Object.extend({\n  isHungry: Ember.computed.none('food')\n});\nvar hampster
    = Hampster.create();\nhampster.get('isHungry'); // true\nhampster.set('food',
    'Banana');\nhampster.get('isHungry'); // false\nhampster.set('food', null);\nhampster.get('isHungry');
    // true\n```"
  itemtype: method
  name: computed.none
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which

      returns true if original value for property is null or undefined.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 647
  description: ! "A computed property that returns the inverse boolean value\nof the
    original value for the dependent property.\n\nExample\n\n```javascript\nvar User
    = Ember.Object.extend({\n  isAnonymous: Ember.computed.not('loggedIn')\n});\nvar
    user = User.create({loggedIn: false});\nuser.get('isAnonymous'); // false\nuser.set('loggedIn',
    true);\nuser.get('isAnonymous'); // true\n```"
  itemtype: method
  name: computed.not
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which returns

      inverse of the original value for property'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 673
  description: ! "A computed property that converts the provided dependent property\ninto
    a boolean value.\n\n```javascript\nvar Hampster = Ember.Object.extend({\n  hasBananas:
    Ember.computed.bool('numBananas')\n});\nvar hampster = Hampster.create();\nhampster.get('hasBananas');
    // false\nhampster.set('numBananas', 0);\nhampster.get('hasBananas'); // false\nhampster.set('numBananas',
    1);\nhampster.get('hasBananas'); // true\nhampster.set('numBananas', null);\nhampster.get('hasBananas');
    // false\n```"
  itemtype: method
  name: computed.bool
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which convert

      to boolean the original value for property'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 701
  description: ! "A computed property which matches the original value for the\ndependent
    property against a given RegExp, returning `true`\nif they values matches the
    RegExp and `false` if it does not.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n
    \ hasValidEmail: Ember.computed.match('email', /^.+@.+\\..+$/)\n});\nvar user
    = User.create({loggedIn: false});\nuser.get('hasValidEmail'); // false\nuser.set('email',
    '');\nuser.get('hasValidEmail'); // false\nuser.set('email', 'ember_hampster@example.com');\nuser.get('hasValidEmail');
    // true\n```"
  itemtype: method
  name: computed.match
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: regexp
    description: ''
    type: RegExp
  return:
    description: ! 'computed property which match

      the original value for property against a given RegExp'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 732
  description: ! "A computed property that returns true if the provided dependent
    property\nis equal to the given value.\n\nExample\n\n```javascript\nvar Hampster
    = Ember.Object.extend({\n  napTime: Ember.computed.equal('state', 'sleepy')\n});\nvar
    hampster = Hampster.create();\nhampster.get('napTime'); // false\nhampster.set('state',
    'sleepy');\nhampster.get('napTime'); // false\nhampster.set('state', 'hungry');\nhampster.get('napTime');
    // false\n```"
  itemtype: method
  name: computed.equal
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: String|Number|Object
  return:
    description: ! 'computed property which returns true if

      the original value for property is equal to the given value.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 761
  description: ! "A computed property that returns true if the provied dependent property\nis
    greater than the provided value.\n\nExample\n\n```javascript\nvar Hampster = Ember.Object.extend({\n
    \ hasTooManyBananas: Ember.computed.gt('numBananas', 10)\n});\nvar hampster =
    Hampster.create();\nhampster.get('hasTooManyBananas'); // false\nhampster.set('numBananas',
    3);\nhampster.get('hasTooManyBananas'); // false\nhampster.set('numBananas', 11);\nhampster.get('hasTooManyBananas');
    // true\n```"
  itemtype: method
  name: computed.gt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: ! 'computed property which returns true if

      the original value for property is greater then given value.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 790
  description: ! "A computed property that returns true if the provided dependent
    property\nis greater than or equal to the provided value.\n\nExample\n\n```javascript\nvar
    Hampster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte('numBananas',
    10)\n});\nvar hampster = Hampster.create();\nhampster.get('hasTooManyBananas');
    // false\nhampster.set('numBananas', 3);\nhampster.get('hasTooManyBananas'); //
    false\nhampster.set('numBananas', 10);\nhampster.get('hasTooManyBananas'); //
    true\n```"
  itemtype: method
  name: computed.gte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: ! 'computed property which returns true if

      the original value for property is greater or equal then given value.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 819
  description: ! "A computed property that returns true if the provided dependent
    property\nis less than the provided value.\n\nExample\n\n```javascript\nvar Hampster
    = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt('numBananas', 3)\n});\nvar
    hampster = Hampster.create();\nhampster.get('needsMoreBananas'); // true\nhampster.set('numBananas',
    3);\nhampster.get('needsMoreBananas'); // false\nhampster.set('numBananas', 2);\nhampster.get('needsMoreBananas');
    // true\n```"
  itemtype: method
  name: computed.lt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: ! 'computed property which returns true if

      the original value for property is less then given value.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 848
  description: ! "A computed property that returns true if the provided dependent
    property\nis less than or equal to the provided value.\n\nExample\n\n```javascript\nvar
    Hampster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte('numBananas',
    3)\n});\nvar hampster = Hampster.create();\nhampster.get('needsMoreBananas');
    // true\nhampster.set('numBananas', 5);\nhampster.get('needsMoreBananas'); //
    false\nhampster.set('numBananas', 3);\nhampster.get('needsMoreBananas'); // true\n```"
  itemtype: method
  name: computed.lte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: ! 'computed property which returns true if

      the original value for property is less or equal then given value.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 877
  description: ! "A computed property that performs a logical `and` on the\noriginal
    values for the provided dependent properties.\n\n\nExample\n\n```javascript\nvar
    Hampster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and('hasTent',
    'hasBackpack')\n});\nvar hampster = Hampster.create();\nhampster.get('readyForCamp');
    // false\nhampster.set('hasTent', true);\nhampster.get('readyForCamp'); // false\nhampster.set('hasBackpack',
    true);\nhampster.get('readyForCamp'); // true\n```"
  itemtype: method
  name: computed.and
  params:
  - name: dependentKey,
    description: ! '[dependentKey...]'
    type: String
  return:
    description: ! 'computed property which performs

      a logical `and` on the values of all the original values for properties.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 911
  description: ! "A computed property that which performs a logical `or` on the\noriginal
    values for the provided dependent properties.\n\nExample\n\n```javascript\nvar
    Hampster = Ember.Object.extend({\n  readyForRain: Ember.computed.or('hasJacket',
    'hasUmbrella')\n});\nvar hampster = Hampster.create();\nhampster.get('readyForRain');
    // false\nhampster.set('hasJacket', true);\nhampster.get('readyForRain'); // true\n```"
  itemtype: method
  name: computed.or
  params:
  - name: dependentKey,
    description: ! '[dependentKey...]'
    type: String
  return:
    description: ! 'computed property which performs

      a logical `or` on the values of all the original values for properties.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 942
  description: ! "A computed property that returns the first truthy value\nfrom a
    list of dependent properties.\n\nExample\n\n```javascript\nvar Hampster = Ember.Object.extend({\n
    \ hasClothes: Ember.computed.any('hat', 'shirt')\n});\nvar hampster = Hampster.create();\nhampster.get('hasClothes');
    // null\nhampster.set('shirt', 'Hawaiian Shirt');\nhampster.get('hasClothes');
    // 'Hawaiian Shirt'\n```"
  itemtype: method
  name: computed.any
  params:
  - name: dependentKey,
    description: ! '[dependentKey...]'
    type: String
  return:
    description: ! 'computed property which returns

      the first truthy value of given list of properties.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 973
  description: ! "A computed property that returns the array of values\nfor the provided
    dependent properties.\n\nExample\n\n```javascript\nvar Hampster = Ember.Object.extend({\n
    \ clothes: Ember.computed.map('hat', 'shirt')\n});\nvar hampster = Hampster.create();\nhampster.get('clothes');
    // [null, null]\nhampster.set('hat', 'Camp Hat');\nhampster.set('shirt', 'Camp
    Shirt');\nhampster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n```"
  itemtype: method
  name: computed.map
  params:
  - name: dependentKey,
    description: ! '[dependentKey...]'
    type: String
  return:
    description: ! 'computed property which maps

      values of all passed properties in to an array.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 1010
  description: ! "Creates a new property that is an alias for another property\non
    an object. Calls to `get` or `set` this property behave as\nthough they were called
    on the original property.\n\n```javascript\nPerson = Ember.Object.extend({\n  name:
    'Alex Matchneer',\n  nomen: Ember.computed.alias('name')\n});\n\nalex = Person.create();\nalex.get('nomen');
    // 'Alex Matchneer'\nalex.get('name');  // 'Alex Matchneer'\n\nalex.set('nomen',
    '@machty');\nalex.get('name');  // '@machty'\n```"
  itemtype: method
  name: computed.alias
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which creates an

      alias to the original value for property.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 1045
  description: ! "Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\ndata
    flow, `computed.oneWay` only provides an aliased `get`. The `set` will\nnot mutate
    the upstream property, rather causes the current property to\nbecome the value
    set. This causes the downstream property to permentantly\ndiverge from the upstream
    property.\n\nExample\n\n```javascript\nUser = Ember.Object.extend({\n  firstName:
    null,\n  lastName: null,\n  nickName: Ember.computed.oneWay('firstName')\n});\n\nuser
    = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nuser.get('nickName');\n#
    'Teddy'\n\nuser.set('nickName', 'TeddyBear');\n# 'TeddyBear'\n\nuser.get('firstName');\n#
    'Teddy'\n```"
  itemtype: method
  name: computed.oneWay
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: ! 'computed property which creates an

      one way computed property to the original value for property.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 1089
  description: ! "A computed property that acts like a standard getter and setter,\nbut
    retruns the value at the provided `defaultPath` if the\nproperty itself has not
    been set to a value\n\nExample\n\n```javascript\nvar Hampster = Ember.Object.extend({\n
    \ wishList: Ember.computed.defaultTo('favoriteFood')\n});\nvar hampster = Hampster.create({favoriteFood:
    'Banana'});\nhampster.get('wishList'); // 'Banana'\nhampster.set('wishList', 'More
    Unit Tests');\nhampster.get('wishList'); // 'More Unit Tests'\nhampster.get('favoriteFood');
    // 'Banana'\n```"
  itemtype: method
  name: computed.defaultTo
  params:
  - name: defaultPath
    description: ''
    type: String
  return:
    description: ! 'computed property which acts like

      a standard getter and setter, but defaults to the value from `defaultPath`.'
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 49
  itemtype: property
  name: VERSION
  type: String
  default: ! '''1.0.0'''
  final: 1
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 57
  description: ! 'Standard environmental variables. You can define these in a global
    `ENV`

    variable before loading Ember to control various configuration

    settings.'
  itemtype: property
  name: ENV
  type: Hash
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 84
  description: ! 'Determines whether Ember should enhances some built-in object prototypes
    to

    provide a more friendly API. If enabled, a few methods will be added to

    `Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,

    which is the one that causes most trouble for people.


    In general we recommend leaving this option set to true since it rarely

    conflicts with other code. If you need to turn it off however, you can

    define an `ENV.EXTEND_PROTOTYPES` config to disable it.'
  itemtype: property
  name: EXTEND_PROTOTYPES
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 104
  description: Determines whether Ember logs a full stack trace during deprecation
    warnings
  itemtype: property
  name: LOG_STACKTRACE_ON_DEPRECATION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 113
  description: Determines whether Ember should add ECMAScript 5 shims to older browsers.
  itemtype: property
  name: SHIM_ES5
  type: Boolean
  default: Ember.EXTEND_PROTOTYPES
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 122
  description: Determines whether Ember logs info about version of used libraries
  itemtype: property
  name: LOG_VERSION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 131
  description: Empty function. Useful for some operations. Always returns `this`.
  itemtype: method
  name: K
  access: private
  tagname: ''
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 151
  description: ! 'Previously we used `Ember.$.uuid`, however `$.uuid` has been removed
    from

    jQuery master. We''ll just bootstrap our own uuid now.'
  itemtype: property
  name: uuid
  type: Number
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 211
  description: ! "Logs the arguments to the console.\nYou can pass as many arguments
    as you want and they will be joined together with a space.\n\n ```javascript\n
    var foo = 1;\n Ember.Logger.log('log value of foo:', foo); // \"log value of foo:
    1\" will be printed to the console\n ```"
  itemtype: method
  name: log
  params:
  - name: arguments
    description: ''
    type: ! '*'
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 225
  description: ! "Prints the arguments to the console with a warning icon.\nYou can
    pass as many arguments as you want and they will be joined together with a space.\n\n
    ```javascript\n Ember.Logger.warn('Something happened!'); // \"Something happened!\"
    will be printed to the console with a warning icon.\n ```"
  itemtype: method
  name: warn
  params:
  - name: arguments
    description: ''
    type: ! '*'
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 238
  description: ! "Prints the arguments to the console with an error icon, red text
    and a stack race.\nYou can pass as many arguments as you want and they will be
    joined together with a space.\n\n ```javascript\n Ember.Logger.error('Danger!
    Danger!'); // \"Danger! Danger!\" will be printed to the console in red text.\n
    ```"
  itemtype: method
  name: error
  params:
  - name: arguments
    description: ''
    type: ! '*'
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 251
  description: ! "Logs the arguments to the console.\nYou can pass as many arguments
    as you want and they will be joined together with a space.\n\n ```javascript\n
    var foo = 1;\n Ember.Logger.info('log value of foo:', foo); // \"log value of
    foo: 1\" will be printed to the console\n ```"
  itemtype: method
  name: info
  params:
  - name: arguments
    description: ''
    type: ! '*'
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 265
  description: ! "Logs the arguments to the console in blue text.\nYou can pass as
    many arguments as you want and they will be joined together with a space.\n\n
    ```javascript\n var foo = 1;\n Ember.Logger.debug('log value of foo:', foo); //
    \"log value of foo: 1\" will be printed to the console\n ```"
  itemtype: method
  name: debug
  params:
  - name: arguments
    description: ''
    type: ! '*'
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 279
  description: ! "If the value passed into Ember.Logger.assert is not truthy it will
    throw an error with a stack trace.\n ```javascript\n    Ember.Logger.assert(true);
    // undefined\n    Ember.Logger.assert(true === false); // Throws an Assertion
    failed error.\n    ```"
  itemtype: method
  name: assert
  params:
  - name: ! '@param'
    description: bool Value to test
    type: Boolean
  class: Ember.Logger
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/core.js
  line: 300
  description: ! "A function may be assigned to `Ember.onerror` to be called when
    Ember\ninternals encounter an error. This is useful for specialized error handling\nand
    reporting code.\n\n```javascript\nEmber.onerror = function(error) {\n  Em.$.ajax('/report-error',
    'POST', {\n    stack: error.stack,\n    otherInformation: 'whatever app state
    you want to provide'\n  });\n};\n```"
  itemtype: event
  name: onerror
  params:
  - name: error
    description: the error object
    type: Exception
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 320
  access: private
  tagname: Wrap code block in a try/catch if `Ember.onerror` is set.
  itemtype: method
  name: handleErrors
  params:
  - name: func
    description: ''
    type: Function
  - name: context
    description: ''
    optional: true
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 344
  description: ! 'Merge the contents of two objects together into the first object.


    ```javascript

    Ember.merge({first: ''Tom''}, {last: ''Dale''}); // {first: ''Tom'', last: ''Dale''}

    var a = {first: ''Yehuda''}, b = {last: ''Katz''};

    Ember.merge(a, b); // a == {first: ''Yehuda'', last: ''Katz''}, b == {last: ''Katz''}

    ```'
  itemtype: method
  name: merge
  params:
  - name: original
    description: The object to merge into
    type: Object
  - name: updates
    description: The object to copy properties from
    type: Object
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 367
  description: ! 'Returns true if the passed value is null or undefined. This avoids
    errors

    from JSLint complaining about use of ==, which can be technically

    confusing.


    ```javascript

    Ember.isNone();              // true

    Ember.isNone(null);          // true

    Ember.isNone(undefined);     // true

    Ember.isNone('''');            // false

    Ember.isNone([]);            // false

    Ember.isNone(function() {});  // false

    ```'
  itemtype: method
  name: isNone
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 391
  description: ! 'Verifies that a value is `null` or an empty string, empty array,

    or empty function.


    Constrains the rules on `Ember.isNone` by returning false for empty

    string and empty arrays.


    ```javascript

    Ember.isEmpty();                // true

    Ember.isEmpty(null);            // true

    Ember.isEmpty(undefined);       // true

    Ember.isEmpty('''');              // true

    Ember.isEmpty([]);              // true

    Ember.isEmpty(''Adam Hawkins'');  // false

    Ember.isEmpty([0,1,2]);         // false

    ```'
  itemtype: method
  name: isEmpty
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 103
  description: Add an event listener
  itemtype: method
  name: addListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: once
    description: A flag whether a function should only be called once
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 137
  description: ! 'Remove an event listener


    Arguments should match those passed to `Ember.addListener`.'
  itemtype: method
  name: removeListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 184
  access: private
  tagname: ! 'Suspend listener during callback.


    This should only be used by the target of the event listener

    when it is taking an action that would cause the event, e.g.

    an object might suspend its property change listener while it is

    setting that property.'
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 221
  access: private
  tagname: Suspends multiple listeners during a callback.
  itemtype: method
  name: suspendListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: Array of event names
    type: Array
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 267
  access: private
  tagname: Return a list of currently watched events
  itemtype: method
  name: watchedEvents
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 287
  description: ! 'Send an event. The execution of suspended listeners

    is skipped, and once listeners are removed. A listener without

    a target is executed on the passed object. If an array of actions

    is not passed, the actions stored on the passed object are invoked.'
  itemtype: method
  name: sendEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: Optional parameters for each listener.
    type: Array
  - name: actions
    description: Optional array of actions (listeners).
    type: Array
  return:
    description: 'true'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 330
  access: private
  tagname: ''
  itemtype: method
  name: hasListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 344
  access: private
  tagname: ''
  itemtype: method
  name: listenersFor
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 367
  description: ! "Define a property as a function that should be executed when\na
    specified event or events are triggered.\n\n    var Job = Ember.Object.extend({\n
    \     logCompleted: Ember.on('completed', function(){\n        console.log('Job
    completed!');\n      })\n    });\n    var job = Job.create();\n    Ember.sendEvent(job,
    'completed'); // Logs \"Job completed!\""
  itemtype: method
  name: 'on'
  params:
  - name: eventNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/get_properties.js
  line: 6
  description: ! 'To get multiple properties at once, call `Ember.getProperties`

    with an object followed by a list of strings or an array:


    ```javascript

    Ember.getProperties(record, ''firstName'', ''lastName'', ''zipCode'');  // { firstName:
    ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```


    is equivalent to:


    ```javascript

    Ember.getProperties(record, [''firstName'', ''lastName'', ''zipCode'']);  // {
    firstName: ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```'
  itemtype: method
  name: getProperties
  params:
  - name: obj
    description: ''
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Instrumentation
  module: ember-metal
- file: ../packages/ember-metal/lib/instrumentation.js
  line: 74
  description: Notifies event's subscribers, calls `before` and `after` hooks.
  itemtype: method
  name: instrument
  params:
  - name: name
    description: Namespaced event name.
    type: String
    optional: true
  - name: payload
    description: ''
    type: Object
  - name: callback
    description: Function that you're instrumenting.
    type: Function
  - name: binding
    description: Context that instrument function is called with.
    type: Object
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: ../packages/ember-metal/lib/instrumentation.js
  line: 133
  description: Subscribes to a particular event or instrumented block of code.
  itemtype: method
  name: subscribe
  params:
  - name: pattern
    description: Namespaced event name.
    type: String
    optional: true
  - name: object
    description: Before and After hooks.
    type: Object
    optional: true
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: ../packages/ember-metal/lib/instrumentation.js
  line: 169
  description: Unsubscribes from a particular event or instrumented block of code.
  itemtype: method
  name: unsubscribe
  params:
  - name: subscriber
    description: ''
    type: Object
    optional: true
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: ../packages/ember-metal/lib/instrumentation.js
  line: 190
  description: Resets `Ember.Instrumentation` by flushing list of subscribers.
  itemtype: method
  name: reset
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: ../packages/ember-metal/lib/map.js
  line: 69
  itemtype: method
  name: create
  static: 1
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 80
  itemtype: method
  name: clear
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 88
  itemtype: method
  name: add
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 103
  itemtype: method
  name: remove
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 120
  itemtype: method
  name: isEmpty
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 128
  itemtype: method
  name: has
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 140
  itemtype: method
  name: forEach
  params:
  - name: fn
    description: ''
    type: Function
  - name: self
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 154
  itemtype: method
  name: toArray
  return:
    description: ''
    type: Array
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 162
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 201
  itemtype: method
  name: create
  static: 1
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 210
  description: This property will change as the number of objects in the map changes.
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 220
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: ! '*'
  return:
    description: the value associated with the key, or `undefined`
    type: ! '*'
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 234
  description: ! 'Adds a value to the map. If a value for the given key has already
    been

    provided, the new value will replace the old value.'
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: ! '*'
  - name: value
    description: ''
    type: ! '*'
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 252
  description: Removes a value from the map for an associated key.
  itemtype: method
  name: remove
  params:
  - name: key
    description: ''
    type: ! '*'
  return:
    description: true if an item was removed, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 276
  description: Check whether a key is present.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: ! '*'
  return:
    description: true if the item was present, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 290
  description: ! 'Iterate over all the keys and values. Calls the function once

    for each key, passing in the key and value, in that order.


    The keys are guaranteed to be iterated over in insertion order.'
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: ''
    type: Function
  - name: self
    description: ! "if passed, the `this` value inside the\n  callback. By default,
      `this` is the map."
    type: ! '*'
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 311
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Map
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 334
  itemtype: method
  name: create
  static: 1
  params:
  - name: options
    description: ''
    optional: true
    props:
    - name: defaultValue
      description: ''
      type: ! '*'
      optional: true
  return:
    description: ! "If options are passed, returns\n  `Ember.MapWithDefault` otherwise
      returns `Ember.Map`"
    type: Ember.MapWithDefault|Ember.Map
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 352
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: ! '*'
  return:
    description: the value associated with the key, or the default value
    type: ! '*'
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 371
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.MapWithDefault
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 356
  itemtype: method
  name: mixin
  params:
  - name: obj
    description: ''
  - name: mixins
    description: ''
    multiple: true
  return:
    description: obj
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 444
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 457
  itemtype: method
  name: reopen
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 491
  itemtype: method
  name: apply
  params:
  - name: obj
    description: ''
  return:
    description: applied object
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 518
  itemtype: method
  name: detect
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 582
  description: Denotes a required property for a mixin
  itemtype: method
  name: required
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 597
  description: ! "Makes a property or method available via an additional name.\n\n```javascript\nApp.PaintSample
    = Ember.Object.extend({\n  color: 'red',\n  colour: Ember.alias('color'),\n  name:
    function() {\n    return \"Zed\";\n  },\n  moniker: Ember.alias(\"name\")\n});\n\nvar
    paintSample = App.PaintSample.create()\npaintSample.get('colour');  // 'red'\npaintSample.moniker();
    \     // 'Zed'\n```"
  itemtype: method
  name: alias
  params:
  - name: methodName
    description: name of the method or property to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  deprecated: true
  deprecationMessage: Use `Ember.aliasMethod` or `Ember.computed.alias` instead
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 627
  description: ! "Makes a method available via an additional name.\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  name: function() {\n    return 'Tomhuda Katzdale';\n
    \ },\n  moniker: Ember.aliasMethod('name')\n});\n\nvar goodGuy = App.Person.create()\n```"
  itemtype: method
  name: aliasMethod
  params:
  - name: methodName
    description: name of the method to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 654
  description: ! "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n
    \ valueObserver: Ember.observer(function() {\n    // Executes whenever the \"value\"
    property changes\n  }, 'value')\n});\n```\n\nIn the future this method may become
    asynchronous. If you want to ensure\nsynchronous behavior, use `immediateObserver`.\n\nAlso
    available as `Function.prototype.observes` if prototype extensions are\nenabled."
  itemtype: method
  name: observer
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 683
  description: ! "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n
    \ valueObserver: Ember.immediateObserver(function() {\n    // Executes whenever
    the \"value\" property changes\n  }, 'value')\n});\n```\n\nIn the future, `Ember.observer`
    may become asynchronous. In this event,\n`Ember.immediateObserver` will maintain
    the synchronous behavior.\n\nAlso available as `Function.prototype.observesImmediately`
    if prototype extensions are\nenabled."
  itemtype: method
  name: immediateObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 715
  description: ! "When observers fire, they are called with the arguments `obj`, `keyName`.\n\nNote,
    `@each.property` observer is called per each add or replace of an element\nand
    it's not called with a specific enumeration item.\n\nA `beforeObserver` fires
    before a property changes.\n\nA `beforeObserver` is an alternative form of `.observesBefore()`.\n\n```javascript\nApp.PersonView
    = Ember.View.extend({\n\n  friends: [{ name: 'Tom' }, { name: 'Stefan' }, { name:
    'Kris' }],\n\n  valueWillChange: Ember.beforeObserver(function(obj, keyName) {\n
    \   this.changingFrom = obj.get(keyName);\n  }, 'content.value'),\n\n  valueDidChange:
    Ember.observer(function(obj, keyName) {\n      // only run if updating a value
    already in the DOM\n      if (this.get('state') === 'inDOM') {\n        var color
    = obj.get(keyName) > this.changingFrom ? 'green' : 'red';\n        // logic\n
    \     }\n  }, 'content.value'),\n\n  friendsDidChange: Ember.observer(function(obj,
    keyName) {\n    // some logic\n    // obj.get(keyName) returns friends array\n
    \ }, 'friends.@each.name')\n});\n```\n\nAlso available as `Function.prototype.observesBefore`
    if prototype extensions are\nenabled."
  itemtype: method
  name: beforeObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 22
  itemtype: method
  name: addObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 39
  itemtype: method
  name: removeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 52
  itemtype: method
  name: addBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 93
  itemtype: method
  name: removeBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 19
  description: Identical to `Object.create()`. Implements if not available natively.
  itemtype: method
  name: create
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 130
  description: ! 'Identical to `Object.defineProperty()`. Implements as much functionality

    as possible if not available natively.'
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: The object to modify
    type: Object
  - name: keyName
    description: property name to modify
    type: String
  - name: desc
    description: descriptor hash
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/platform.js
  line: 142
  description: Set to true if the platform supports native getters and setters.
  itemtype: property
  name: hasPropertyAccessors
  final: 1
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/properties.js
  line: 48
  access: private
  tagname: ! "NOTE: This is a low-level method used by other parts of the API. You
    almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()`
    to define new properties.\n\nDefines a property on an object. This method works
    much like the ES5\n`Object.defineProperty()` method except that it can also accept
    computed\nproperties and other special descriptors.\n\nNormally this method takes
    only three parameters. However if you pass an\ninstance of `Ember.Descriptor`
    as the third param then you can pass an\noptional value as the fourth parameter.
    This is often more efficient than\ncreating new descriptor hashes for each property.\n\n##
    Examples\n\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact,
    'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n
    \ value: 'Charles'\n});\n\n// define a simple property\nEmber.defineProperty(contact,
    'lastName', undefined, 'Jolley');\n\n// define a computed property\nEmber.defineProperty(contact,
    'fullName', Ember.computed(function() {\n  return this.firstName+' '+this.lastName;\n}).property('firstName',
    'lastName'));\n```"
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: the object to define this property on. This may be a prototype.
    type: Object
  - name: keyName
    description: the name of the property
    type: String
  - name: desc
    description: ! "an instance of `Ember.Descriptor` (typically a\n  computed property)
      or an ES5 descriptor.\n  You must provide this or `data` but not both."
    type: Ember.Descriptor
    optional: true
  - name: data
    description: ! "something other than a descriptor, that will\n  become the explicit
      value of this property."
    type: ! '*'
    optional: true
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_events.js
  line: 20
  description: ! 'This function is called just before an object property is about
    to change.

    It will notify any before observers and prepare caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyDidChange()` which you should call just

    after the property value changes.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_events.js
  line: 50
  description: ! 'This function is called just after an object property has changed.

    It will notify any observers and clear caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyWillChange()` which you should call just

    before the property value changes.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_events.js
  line: 168
  itemtype: method
  name: beginPropertyChanges
  chainable: 1
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_events.js
  line: 178
  itemtype: method
  name: endPropertyChanges
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_events.js
  line: 191
  description: ! "Make a series of property changes together in an\nexception-safe
    way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo',
    mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```"
  itemtype: method
  name: changeProperties
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    optional: true
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_get.js
  line: 24
  description: ! 'Gets the value of a property on an object. If the property is computed,

    the function will be invoked. If the property is not defined but the

    object implements the `unknownProperty` method then that will be invoked.


    If you plan to run on IE8 and older browsers then you should use this

    method anytime you want to retrieve a property on an object that you don''t

    know for sure is private. (Properties beginning with an underscore ''_''

    are considered private.)


    On all newer browsers, you only need to use this method to retrieve

    properties if the property might not be defined on the object and you want

    to respect the `unknownProperty` handler. Otherwise you can ignore this

    method.


    Note that if the object itself is `undefined`, this method will throw

    an error.'
  itemtype: method
  name: get
  params:
  - name: obj
    description: The object to retrieve from.
    type: Object
  - name: keyName
    description: The property key to retrieve
    type: String
  return:
    description: the property value or `null`.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_get.js
  line: 92
  access: private
  tagname: ! 'Normalizes a target/path pair to reflect that actual target/path that
    should

    be observed, etc. This takes into account passing in global property

    paths (i.e. a path beginning with a captial letter not defined on the

    target) and * separators.'
  itemtype: method
  name: normalizeTuple
  params:
  - name: target
    description: The current target. May be `null`.
    type: Object
  - name: path
    description: A path on the target or a global property path.
    type: String
  return:
    description: a temporary array with the normalized target/path pair.
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_set.js
  line: 10
  description: ! 'Sets the value of a property on an object, respecting computed properties

    and notifying observers and other listeners of the change. If the

    property is not defined but the object implements the `setUnknownProperty`

    method then that will be invoked as well.


    If you plan to run on IE8 and older browsers then you should use this

    method anytime you want to set a property on an object that you don''t

    know for sure is private. (Properties beginning with an underscore ''_''

    are considered private.)


    On all newer browsers, you only need to use this method to set

    properties if the property might not be defined on the object and you want

    to respect the `setUnknownProperty` handler. Otherwise you can ignore this

    method.'
  itemtype: method
  name: set
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  return:
    description: the passed value.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/property_set.js
  line: 126
  description: ! 'Error-tolerant form of `Ember.set`. Will not blow up if any part
    of the

    chain is `undefined`, `null`, or destroyed.


    This is primarily used when syncing bindings, which may try to update after

    an object has been destroyed.'
  itemtype: method
  name: trySet
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: path
    description: The property path to set
    type: String
  - name: value
    description: The value to set
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/run_loop.js
  line: 70
  description: ! "If no run-loop is present, it creates a new one. If a run loop is\n
    \ present it will queue itself to run on the existing run-loops action\n  queue.\nPlease
    note: This is not for normal usage, and should be used sparingly.\nIf invoked
    when not within a run loop:\n```javascript\n  Ember.run.join(function() {\n    //
    creates a new run-loop\n  });\n  ```\nAlternatively, if called within an existing
    run loop:\n```javascript\n  Ember.run(function() {\n    // creates a new run-loop\n
    \   Ember.run.join(function() {\n      // joins with the existing run-loop, and
    queues for invocation on\n      // the existing run-loops action queue.\n    });\n
    \ });\n  ```"
  itemtype: method
  name: join
  params:
  - name: target
    description: target of method to call
    type: Object
    optional: true
  - name: method
    description: ! "Method to invoke.\n    May be a function or a string. If you pass
      a string\n    then it will be looked up on the passed target."
    type: Function|String
  - name: args*
    description: Any additional arguments you wish to pass to the method.
    type: Object
    optional: true
  return:
    description: ! "return value from invoking the passed function. Please note,\n
      \ when called within an existing loop, no return value is possible."
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 126
  description: ! 'Begins a new RunLoop. Any deferred actions invoked after the begin
    will

    be buffered until you invoke a matching call to `Ember.run.end()`. This is

    a lower-level way to use a RunLoop instead of using `Ember.run()`.


    ```javascript

    Ember.run.begin();

    // code to be execute within a RunLoop

    Ember.run.end();

    ```'
  itemtype: method
  name: begin
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 144
  description: ! 'Ends a RunLoop. This must be called sometime after you call

    `Ember.run.begin()` to flush any deferred actions. This is a lower-level way

    to use a RunLoop instead of using `Ember.run()`.


    ```javascript

    Ember.run.begin();

    // code to be execute within a RunLoop

    Ember.run.end();

    ```'
  itemtype: method
  name: end
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 162
  description: ! 'Array of named queues. This array determines the order in which
    queues

    are flushed at the end of the RunLoop. You can define your own queues by

    simply adding the queue name to this array. Normally you should not need

    to inspect or modify this property.'
  itemtype: property
  name: queues
  type: Array
  default: ! '[''sync'', ''actions'', ''destroy'']'
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 173
  description: ! "Adds the passed target/method and any optional arguments to the
    named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted
    a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt
    the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods
    will be invoked in an order matching the named queues defined in\nthe `Ember.run.queues`
    property.\n\n```javascript\nEmber.run.schedule('sync', this, function() {\n  //
    this will be executed in the first RunLoop queue, when bindings are synced\n  console.log(\"scheduled
    on sync queue\");\n});\n\nEmber.run.schedule('actions', this, function() {\n  //
    this will be executed in the 'actions' queue, after bindings have synced.\n  console.log(\"scheduled
    on actions queue\");\n});\n\n// Note the functions will be run in order based
    on the run queues order. Output would be:\n//   scheduled on sync queue\n//   scheduled
    on actions queue\n```"
  itemtype: method
  name: schedule
  params:
  - name: queue
    description: ! "The name of the queue to schedule against.\n  Default queues are
      'sync' and 'actions'"
    type: String
  - name: target
    description: target object to use as the context when invoking a method.
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke. If you pass a string it\n  will be resolved
      on the target object at the time the scheduled item is\n  invoked allowing you
      to change the target function."
    type: String|Function
  - name: arguments*
    description: Optional arguments to be passed to the queued method.
    type: Object
    optional: true
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 224
  description: ! 'Immediately flushes any events scheduled in the ''sync'' queue.
    Bindings

    use this queue so this method is a useful way to immediately force all

    bindings in the application to sync.


    You should call this method anytime you need any changed state to propagate

    throughout the app immediately without repainting the UI (which happens

    in the later ''render'' queue added by the `ember-views` package).


    ```javascript

    Ember.run.sync();

    ```'
  itemtype: method
  name: sync
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 246
  description: ! "Invokes the passed target/method and optional arguments after a
    specified\nperiod if time. The last parameter of this method must always be a
    number\nof milliseconds.\n\nYou should use this method whenever you need to run
    some action after a\nperiod of time instead of using `setTimeout()`. This method
    will ensure that\nitems that expire during the same script execution cycle all
    execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nEmber.run.later(myContext,
    function() {\n  // code here will execute within a RunLoop in about 500ms with
    this == myContext\n}, 500);\n```"
  itemtype: method
  name: later
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  return:
    description: ! "a string you can use to cancel the timer in\n  `Ember.run.cancel`
      later."
    type: String
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 276
  description: ! 'Schedule a function to run one time during the current RunLoop.
    This is equivalent

    to calling `scheduleOnce` with the "actions" queue.'
  itemtype: method
  name: once
  params:
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 295
  description: ! "Schedules a function to run one time in a given queue of the current
    RunLoop.\nCalling this method with the same queue/target/method combination will
    have\nno effect (past the initial call).\n\nNote that although you can pass optional
    arguments these will not be\nconsidered when looking for duplicates. New arguments
    will replace previous\ncalls.\n\n```javascript\nEmber.run(function() {\n  var
    sayHi = function() { console.log('hi'); }\n  Ember.run.scheduleOnce('afterRender',
    myContext, sayHi);\n  Ember.run.scheduleOnce('afterRender', myContext, sayHi);\n
    \ // sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n```\n\nAlso
    note that passing an anonymous function to `Ember.run.scheduleOnce` will\nnot
    prevent additional calls with an identical anonymous function from\nscheduling
    the items multiple times, e.g.:\n\n```javascript\nfunction scheduleIt() {\n  Ember.run.scheduleOnce('actions',
    myContext, function() { console.log(\"Closure\"); });\n}\nscheduleIt();\nscheduleIt();\n//
    \"Closure\" will print twice, even though we're using `Ember.run.scheduleOnce`,\n//
    because the function we pass to it is anonymous and won't match the\n// previously
    scheduled operation.\n```\n\nAvailable queues, and their order, can be found at
    `Ember.run.queues`"
  itemtype: method
  name: scheduleOnce
  params:
  - name: queue
    description: The name of the queue to schedule against. Default queues are 'sync'
      and 'actions'.
    type: String
    optional: true
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 344
  description: ! "Schedules an item to run from within a separate run loop, after\ncontrol
    has been returned to the system. This is equivalent to calling\n`Ember.run.later`
    with a wait time of 1ms.\n\n```javascript\nEmber.run.next(myContext, function()
    {\n  // code to be executed in the next run loop, which will be scheduled after
    the current one\n});\n```\n\nMultiple operations scheduled with `Ember.run.next`
    will coalesce\ninto the same later run loop, along with any other operations\nscheduled
    by `Ember.run.later` that expire right around the same\ntime that `Ember.run.next`
    operations will fire.\n\nNote that there are often alternatives to using `Ember.run.next`.\nFor
    instance, if you'd like to schedule an operation to happen\nafter all DOM element
    operations have completed within the current\nrun loop, you can make use of the
    `afterRender` run loop queue (added\nby the `ember-views` package, along with
    the preceding `render` queue\nwhere all the DOM element operations happen). Example:\n\n```javascript\nApp.MyCollectionView
    = Ember.CollectionView.extend({\n  didInsertElement: function() {\n    Ember.run.scheduleOnce('afterRender',
    this, 'processChildElements');\n  },\n  processChildElements: function() {\n    //
    ... do something with collectionView's child view\n    // elements after they've
    finished rendering, which\n    // can't be done within the CollectionView's\n
    \   // `didInsertElement` hook because that gets run\n    // before the child
    elements have been added to the DOM.\n  }\n});\n```\n\nOne benefit of the above
    approach compared to using `Ember.run.next` is\nthat you will be able to perform
    DOM/CSS operations before unprocessed\nelements are rendered to the screen, which
    may prevent flickering or\nother artifacts caused by delaying processing until
    after rendering.\n\nThe other major benefit to the above approach is that `Ember.run.next`\nintroduces
    an element of non-determinism, which can make things much\nharder to test, due
    to its reliance on `setTimeout`; it's much harder\nto guarantee the order of scheduled
    operations when they are scheduled\noutside of the current run loop, i.e. with
    `Ember.run.next`."
  itemtype: method
  name: next
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 407
  description: ! "Cancels a scheduled item. Must be a value returned by `Ember.run.later()`,\n`Ember.run.once()`,
    or `Ember.run.next()`.\n\n```javascript\nvar runNext = Ember.run.next(myContext,
    function() {\n  // will not be executed\n});\nEmber.run.cancel(runNext);\n\nvar
    runLater = Ember.run.later(myContext, function() {\n  // will not be executed\n},
    500);\nEmber.run.cancel(runLater);\n\nvar runOnce = Ember.run.once(myContext,
    function() {\n  // will not be executed\n});\nEmber.run.cancel(runOnce);\n```"
  itemtype: method
  name: cancel
  params:
  - name: timer
    description: Timer object to cancel
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 436
  description: ! "Delay calling the target method until the debounce period has elapsed\nwith
    no additional debounce calls. If `debounce` is called again before\nthe specified
    time has elapsed, the timer is reset and the entire period\nmust pass again before
    the target method is called.\n\nThis method should be used when an event may be
    called multiple times\nbut the action should only be called once when the event
    is done firing.\nA common example is for scroll events where you only want updates
    to\nhappen once scrolling has ceased.\n\n```javascript\n  var myFunc = function()
    { console.log(this.name + ' ran.'); };\n  var myContext = {name: 'debounce'};\n\n
    \ Ember.run.debounce(myContext, myFunc, 150);\n\n  // less than 150ms passes\n\n
    \ Ember.run.debounce(myContext, myFunc, 150);\n\n  // 150ms passes\n  // myFunc
    is invoked with context myContext\n  // console logs 'debounce ran.' one time.\n```"
  itemtype: method
  name: debounce
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  May be a function or a string. If you
      pass a string\n  then it will be looked up on the passed target."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  - name: immediate
    description: Trigger the function on the leading instead of the trailing edge
      of the wait interval.
    type: Boolean
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 476
  description: ! "Ensure that the target method is never called more frequently than\nthe
    specified spacing period.\n\n```javascript\n  var myFunc = function() { console.log(this.name
    + ' ran.'); };\n  var myContext = {name: 'throttle'};\n\n  Ember.run.throttle(myContext,
    myFunc, 150);\n\n  // 50ms passes\n  Ember.run.throttle(myContext, myFunc, 150);\n\n
    \ // 50ms passes\n  Ember.run.throttle(myContext, myFunc, 150);\n\n  // 50ms passes\n
    \ Ember.run.throttle(myContext, myFunc, 150);\n\n  // 150ms passes\n  // myFunc
    is invoked with context myContext\n  // console logs 'throttle ran.' twice, 150ms
    apart.\n```"
  itemtype: method
  name: throttle
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  May be a function or a string. If you
      pass a string\n  then it will be looked up on the passed target."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: spacing
    description: Number of milliseconds to space out requests.
    type: Number
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/set_properties.js
  line: 7
  description: ! "Set a list of properties on an object. These properties are set
    inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers
    will be buffered.\n\n```javascript\nanObject.setProperties({\n  firstName: \"Stanley\",\n
    \ lastName: \"Stuart\",\n  age: \"21\"\n})\n```"
  itemtype: method
  name: setProperties
  params:
  - name: self
    description: ''
  - name: hash
    description: ''
    type: Object
  return:
    description: self
  class: Ember
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/utils.js
  line: 20
  access: private
  tagname: ! 'A unique key used to assign guids and other private metadata to objects.

    If you inspect an object in your browser debugger you will often see these.

    They can be safely ignored.


    On browsers that support it, these properties are added with enumeration

    disabled so they won''t show up when you iterate over your properties.'
  itemtype: property
  name: GUID_KEY
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 44
  access: private
  tagname: ! 'Generates a new guid, optionally saving the guid to the object that
    you

    pass in. You will rarely need to use this method. Instead you should

    call `Ember.guidFor(obj)`, which return an existing guid if available.'
  itemtype: method
  name: generateGuid
  params:
  - name: obj
    description: ! "Object the guid will be used for. If passed in, the guid will\n
      \ be saved on the object and reused whenever you pass the same object\n  again.\n\n
      \ If no object is passed, just generate a new guid."
    type: Object
    optional: true
  - name: prefix
    description: ! "Prefix to place in front of the guid. Useful when you want to\n
      \ separate the guid into separate namespaces."
    type: String
    optional: true
  return:
    description: the guid
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 72
  access: private
  tagname: ! 'Returns a unique id for the object. If the object does not yet have
    a guid,

    one will be assigned to it. You can call this on any object,

    `Ember.Object`-based or not, but be aware that it will add a `_guid`

    property.


    You can also use this method on DOM Element objects.'
  itemtype: method
  name: guidFor
  params:
  - name: obj
    description: any object, string, number, Element, or primitive
    type: Object
  return:
    description: the unique guid for this instance.
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 135
  description: The key used to store meta information on object for property observing.
  itemtype: property
  name: META_KEY
  access: private
  tagname: ''
  final: 1
  type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 179
  description: ! 'Retrieves the meta hash for an object. If `writable` is true ensures
    the

    hash is writable for this object as well.


    The meta object contains information about computed property descriptors as

    well as any watched properties and other information. You generally will

    not access this information directly but instead work with higher level

    methods that manipulate this hash indirectly.'
  itemtype: method
  name: meta
  access: private
  tagname: ''
  params:
  - name: obj
    description: The object to retrieve meta for
    type: Object
  - name: writable
    description: ! "Pass `false` if you do not intend to modify\n  the meta hash,
      allowing the method to avoid making an unnecessary copy."
    type: Boolean
    optional: true
    optdefault: 'true'
  return:
    description: the meta hash for an object
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 241
  deprecated: true
  access: private
  tagname: ! 'In order to store defaults for a class, a prototype may need to create

    a default meta object, which will be inherited by any objects instantiated

    from the class''s constructor.


    However, the properties of that meta object are only shallow-cloned,

    so if a property is a hash (like the event system''s `listeners` hash),

    it will by default be shared across all instances of that class.


    This method allows extensions to deeply clone a series of nested hashes or

    other complex objects. For instance, the event system might pass

    `[''listeners'', ''foo:change'', ''ember157'']` to `prepareMetaPath`, which will

    walk down the keys provided.


    For each key, if the key does not exist, it is created. If it already

    exists and it was inherited from its constructor, the constructor''s

    key is cloned.


    You can also pass false for `writable`, which will simply return

    undefined if `prepareMetaPath` discovers any part of the path that

    shared or undefined.'
  itemtype: method
  name: metaPath
  params:
  - name: obj
    description: The object whose meta we are examining
    type: Object
  - name: path
    description: An array of keys to walk down
    type: Array
  - name: writable
    description: ! "whether or not to create a new meta\n  (or meta property) if one
      does not already exist or if it's\n  shared with its constructor"
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 297
  access: private
  tagname: ! 'Wraps the passed function so that `this._super` will point to the superFunc

    when the function is invoked. This is the primitive we use to implement

    calls to super.'
  itemtype: method
  name: wrap
  params:
  - name: func
    description: The function to call
    type: Function
  - name: superFunc
    description: The super function.
    type: Function
  return:
    description: wrapped function.
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 329
  description: ! "Returns true if the passed object is an array or Array-like.\n\nEmber
    Array Protocol:\n\n  - the object has an objectAt property\n  - the object is
    a native Array\n  - the object is an Object, and has a length property\n\nUnlike
    `Ember.typeOf` this method returns true even if the passed object is\nnot formally
    array but appears to be array-like (i.e. implements `Ember.Array`)\n\n```javascript\nEmber.isArray();
    \                                           // false\nEmber.isArray([]);                                          //
    true\nEmber.isArray( Ember.ArrayProxy.create({ content: [] }) );  // true\n```"
  itemtype: method
  name: isArray
  params:
  - name: obj
    description: The object to test
    type: Object
  return:
    description: true if the passed object is an array or Array-like
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 360
  description: ! 'Forces the passed object to be part of an array. If the object is
    already

    an array or array-like, returns the object. Otherwise adds the object to

    an array. If obj is `null` or `undefined`, returns an empty array.


    ```javascript

    Ember.makeArray();                           // []

    Ember.makeArray(null);                       // []

    Ember.makeArray(undefined);                  // []

    Ember.makeArray(''lindsay'');                  // [''lindsay'']

    Ember.makeArray([1,2,42]);                   // [1,2,42]


    var controller = Ember.ArrayProxy.create({ content: [] });

    Ember.makeArray(controller) === controller;  // true

    ```'
  itemtype: method
  name: makeArray
  params:
  - name: obj
    description: the object
    type: Object
  return:
    description: ''
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 390
  description: ! 'Checks to see if the `methodName` exists on the `obj`.


    ```javascript

    var foo = {bar: Ember.K, baz: null};

    Ember.canInvoke(foo, ''bar''); // true

    Ember.canInvoke(foo, ''baz''); // false

    Ember.canInvoke(foo, ''bat''); // false

    ```'
  itemtype: method
  name: canInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 408
  description: ! 'Checks to see if the `methodName` exists on the `obj`,

    and if it does, invokes it with the arguments passed.


    ```javascript

    var d = new Date(''03/15/2013'');

    Ember.tryInvoke(d, ''getTime''); // 1363320000000

    Ember.tryInvoke(d, ''setFullYear'', [2014]); // 1394856000000

    Ember.tryInvoke(d, ''noSuchMethod'', [2014]); // undefined

    ```'
  itemtype: method
  name: tryInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  - name: args
    description: The arguments to pass to the method
    type: Array
    optional: true
  return:
    description: the return value of the invoked method or undefined if it cannot
      be invoked
    type: ! '*'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 446
  description: ! "Provides try { } finally { } functionality, while working\naround
    Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  someResource.lock();\n
    \ runCallback(); // May throw error.\n};\nvar finalizer = function() {\n  someResource.unlock();\n};\nEmber.tryFinally(tryable,
    finalizer);\n```"
  itemtype: method
  name: tryFinally
  params:
  - name: tryable
    description: The function to run the try callback
    type: Function
  - name: finalizer
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: The optional calling object. Defaults to 'this'
    type: Object
    optional: true
  return:
    description: ! 'The return value is the that of the finalizer,

      unless that value is undefined, in which case it is the return value

      of the tryable'
    type: ! '*'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 507
  description: ! "Provides try { } catch finally { } functionality, while working\naround
    Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  for
    (i=0, l=listeners.length; i<l; i++) {\n    listener = listeners[i];\n    beforeValues[i]
    = listener.before(name, time(), payload);\n  }\n\n  return callback.call(binding);\n};\n\nvar
    catchable = function(e) {\n  payload = payload || {};\n  payload.exception = e;\n};\n\nvar
    finalizer = function() {\n  for (i=0, l=listeners.length; i<l; i++) {\n    listener
    = listeners[i];\n    listener.after(name, time(), payload, beforeValues[i]);\n
    \ }\n};\nEmber.tryCatchFinally(tryable, catchable, finalizer);\n```"
  itemtype: method
  name: tryCatchFinally
  params:
  - name: tryable
    description: The function to run the try callback
    type: Function
  - name: catchable
    description: The function to run the catchable callback
    type: Function
  - name: finalizer
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: The optional calling object. Defaults to 'this'
    type: Object
    optional: true
  return:
    description: ! 'The return value is the that of the finalizer,

      unless that value is undefined, in which case it is the return value

      of the tryable.'
    type: ! '*'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 597
  description: ! "Returns a consistent type for the passed item.\n\nUse this instead
    of the built-in `typeof` to get the type of an item.\nIt will return the same
    result across all browsers and includes a bit\nmore detail. Here is what will
    be returned:\n\n    | Return Value  | Meaning                                              |\n
    \   |---------------|------------------------------------------------------|\n
    \   | 'string'      | String primitive                                     |\n
    \   | 'number'      | Number primitive                                     |\n
    \   | 'boolean'     | Boolean primitive                                    |\n
    \   | 'null'        | Null value                                           |\n
    \   | 'undefined'   | Undefined value                                      |\n
    \   | 'function'    | A function                                           |\n
    \   | 'array'       | An instance of Array                                 |\n
    \   | 'class'       | An Ember class (created using Ember.Object.extend()) |\n
    \   | 'instance'    | An Ember object instance                             |\n
    \   | 'error'       | An instance of the Error object                      |\n
    \   | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\nExamples:\n\n```javascript\nEmber.typeOf();
    \                      // 'undefined'\nEmber.typeOf(null);                   //
    'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');
    \             // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(true);
    \                  // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1,2,90]);
    \              // 'array'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());
    \ // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n\n// \"normal\"
    JavaScript object\nEmber.typeOf({a: 'b'});              // 'object'\n```"
  itemtype: method
  name: typeOf
  params:
  - name: item
    description: the item to check
    type: Object
  return:
    description: the type
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 30
  access: private
  tagname: ! 'Starts watching a property on an object. Whenever the property changes,

    invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the

    primitive used by observers and dependent keys; usually you will never call

    this method directly but instead use higher level methods like

    `Ember.addObserver()`'
  itemtype: method
  name: watch
  params:
  - name: obj
    description: ''
  - name: keyName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 73
  access: private
  tagname: ! 'Call on an object when you first beget it from another object. This
    will

    setup any chained watchers on the object instance as needed. This method is

    safe to call multiple times.'
  itemtype: method
  name: rewatch
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 100
  description: ! 'Tears down the meta on an object so that it can be garbage collected.

    Multiple calls will have no effect.'
  itemtype: method
  name: destroy
  params:
  - name: obj
    description: the object to destroy
    type: Object
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-routing/lib/ext/controller.js
  line: 9
  description: ! "Transition the application into another route. The route may\nbe
    either a single route or route path:\n\n```javascript\n  aController.transitionToRoute('blogPosts');\n
    \ aController.transitionToRoute('blogPosts.recentEntries');\n```\n\nOptionally
    supply a model for the route in question. The model\nwill be serialized into the
    URL using the `serialize` hook of\nthe route:\n\n```javascript\n  aController.transitionToRoute('blogPost',
    aPost);\n```"
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: the
    type: ! '...Object'
  itemtype: method
  name: transitionToRoute
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/ext/controller.js
  line: 38
  deprecated: true
  itemtype: method
  name: transitionTo
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/ext/controller.js
  line: 48
  description: ! "Alernative to `transitionToRoute`.  Transition the application into
    another route. The route may\nbe either a single route or route path:\n\n```javascript\n
    \ aController.replaceRoute('blogPosts');\n  aController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally
    supply a model for the route in question. The model\nwill be serialized into the
    URL using the `serialize` hook of\nthe route:\n\n```javascript\n  aController.replaceRoute('blogPost',
    aPost);\n```"
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: the
    type: ! '...Object'
  itemtype: method
  name: replaceRoute
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/ext/controller.js
  line: 77
  deprecated: true
  itemtype: method
  name: replaceWith
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/ext/view.js
  line: 10
  description: Sets the private `_outlets` object on the view.
  itemtype: method
  name: init
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/ext/view.js
  line: 20
  description: ! "Manually fill any of a view's `{{outlet}}` areas with the\nsupplied
    view.\n\nExample\n\n```javascript\nvar MyView = Ember.View.extend({\n  template:
    Ember.Handlebars.compile('Child view: {{outlet \"main\"}} ')\n});\nvar myView
    = MyView.create();\nmyView.appendTo('body');\n// The html for myView now looks
    like:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\nmyView.connectOutlet('main',
    Ember.View.extend({\n  template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n}));\n//
    The html for myView now looks like:\n// <div id=\"ember228\" class=\"ember-view\">Child
    view:\n//   <div id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n//
    </div>\n```"
  itemtype: method
  name: connectOutlet
  params:
  - name: outletName
    description: A unique name for the outlet
    type: String
  - name: view
    description: An Ember.View
    type: Object
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/ext/view.js
  line: 69
  access: private
  tagname: ! 'Determines if the view has already been created by checking if

    the view has the same constructor, template, and context as the

    view in the `_outlets` object.'
  itemtype: method
  name: _hasEquivalentView
  params:
  - name: outletName
    description: The name of the outlet we are checking
    type: String
  - name: view
    description: An Ember.View
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/ext/view.js
  line: 89
  description: ! "Removes an outlet from the view.\n\nExample\n\n```javascript\nvar
    MyView = Ember.View.extend({\n  template: Ember.Handlebars.compile('Child view:
    {{outlet \"main\"}} ')\n});\nvar myView = MyView.create();\nmyView.appendTo('body');\n//
    myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n\nmyView.connectOutlet('main',
    Ember.View.extend({\n  template: Ember.Handlebars.compile('<h1>Foo</h1> ')\n}));\n//
    myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view:\n//   <div
    id=\"ember234\" class=\"ember-view\"><h1>Foo</h1> </div>\n// </div>\n\nmyView.disconnectOutlet('main');\n//
    myView's html:\n// <div id=\"ember228\" class=\"ember-view\">Child view: </div>\n```"
  itemtype: method
  name: disconnectOutlet
  params:
  - name: outletName
    description: The name of the outlet to be removed
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/ext/view.js
  line: 127
  access: private
  tagname: ! 'Gets an outlet that is pending disconnection and then

    nullifys the object on the `_outlet` object.'
  itemtype: method
  name: _finishDisconnections
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/helpers/action.js
  line: 93
  description: ! "The `{{action}}` helper registers an HTML element within a template
    for DOM\nevent handling and forwards that interaction to the view's controller\nor
    supplied `target` option (see 'Specifying a Target').\n\nIf the view's controller
    does not implement the event, the event is sent\nto the current route, and it
    bubbles up the route hierarchy from there.\n\nUser interaction with that element
    will invoke the supplied action name on\nthe appropriate target.\n\nGiven the
    following Handlebars template on the page\n\n```handlebars\n<div {{action 'anActionName'}}>\n
    \ click me\n</div>\n```\n\nAnd application code\n\n```javascript\nAController
    = Ember.Controller.extend({\n  anActionName: function() {}\n});\n\nAView = Ember.View.extend({\n
    \ controller: AController.create(),\n  templateName: 'a-template'\n});\n\naView
    = AView.create();\naView.appendTo('body');\n```\n\nWill result in the following
    rendered HTML\n\n```html\n<div class=\"ember-view\">\n  <div data-ember-action=\"1\">\n
    \   click me\n  </div>\n</div>\n```\n\nClicking \"click me\" will trigger the
    `anActionName` method of the\n`AController`. In this case, no additional parameters
    will be passed.\n\nIf you provide additional parameters to the helper:\n\n```handlebars\n<button
    {{action 'edit' post}}>Edit</button>\n```\n\nThose parameters will be passed along
    as arguments to the JavaScript\nfunction implementing the action.\n\n### Event
    Propagation\n\nEvents triggered through the action helper will automatically have\n`.preventDefault()`
    called on them. You do not need to do so in your event\nhandlers.\n\nTo also disable
    bubbling, pass `bubbles=false` to the helper:\n\n```handlebars\n<button {{action
    'edit' post bubbles=false}}>Edit</button>\n```\n\nIf you need the default handler
    to trigger you should either register your\nown event handler, or use event methods
    on your view class. See [Ember.View](/api/classes/Ember.View.html)\n'Responding
    to Browser Events' for more information.\n\n### Specifying DOM event type\n\nBy
    default the `{{action}}` helper registers for DOM `click` events. You can\nsupply
    an `on` option to the helper to specify a different DOM event name:\n\n```handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  <div {{action 'anActionName'
    on=\"doubleClick\"}}>\n    click me\n  </div>\n</script>\n```\n\nSee `Ember.View`
    'Responding to Browser Events' for a list of\nacceptable DOM event names.\n\nNOTE:
    Because `{{action}}` depends on Ember's event dispatch system it will\nonly function
    if an `Ember.EventDispatcher` instance is available. An\n`Ember.EventDispatcher`
    instance will be created when a new `Ember.Application`\nis created. Having an
    instance of `Ember.Application` will satisfy this\nrequirement.\n\n### Specifying
    whitelisted modifier keys\n\nBy default the `{{action}}` helper will ignore click
    event with pressed modifier\nkeys. You can supply an `allowedKeys` option to specify
    which keys should not be ignored.\n\n```handlebars\n<script type=\"text/x-handlebars\"
    data-template-name='a-template'>\n  <div {{action 'anActionName' allowedKeys=\"alt\"}}>\n
    \   click me\n  </div>\n</script>\n```\n\nThis way the `{{action}}` will fire
    when clicking with the alt key pressed down.\n\n### Specifying a Target\n\nThere
    are several possible target objects for `{{action}}` helpers:\n\nIn a typical
    Ember application, where views are managed through use of the\n`{{outlet}}` helper,
    actions will bubble to the current controller, then\nto the current route, and
    then up the route hierarchy.\n\nAlternatively, a `target` option can be provided
    to the helper to change\nwhich object will receive the method call. This option
    must be a path\nto an object, accessible in the current context:\n\n```handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  <div {{action 'anActionName'
    target=\"MyApplication.someObject\"}}>\n    click me\n  </div>\n</script>\n```\n\nClicking
    \"click me\" in the rendered HTML of the above template will trigger\nthe  `anActionName`
    method of the object at `MyApplication.someObject`.\n\nIf an action's target does
    not implement a method that matches the supplied\naction name an error will be
    thrown.\n\n```handlebars\n<script type=\"text/x-handlebars\" data-template-name='a-template'>\n
    \ <div {{action 'aMethodNameThatIsMissing'}}>\n    click me\n  </div>\n</script>\n```\n\nWith
    the following application code\n\n```javascript\nAView = Ember.View.extend({\n
    \ templateName; 'a-template',\n  // note: no method 'aMethodNameThatIsMissing'\n
    \ anActionName: function(event) {}\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill
    throw `Uncaught TypeError: Cannot call method 'call' of undefined` when\n\"click
    me\" is clicked.\n\n### Additional Parameters\n\nYou may specify additional parameters
    to the `{{action}}` helper. These\nparameters are passed along as the arguments
    to the JavaScript function\nimplementing the action.\n\n```handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  {{#each person
    in people}}\n    <div {{action 'edit' person}}>\n      click me\n    </div>\n
    \ {{/each}}\n</script>\n```\n\nClicking \"click me\" will trigger the `edit` method
    on the current view's\ncontroller with the current person as a parameter."
  itemtype: method
  name: action
  params:
  - name: actionName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/helpers/control.js
  line: 9
  description: ! "`{{control}}` works like render, except it uses a new controller
    instance for every call, instead of reusing the singleton controller.\n\n The
    control helper is currently under development and is considered experimental.\n
    To enable it, set `ENV.EXPERIMENTAL_CONTROL_HELPER = true` before requiring Ember.\n\nFor
    example if you had this `author` template.\n\n```handlebars\n<div class=\"author\">\n
    \ Written by {{firstName}} {{lastName}}.\n  Total Posts: {{postCount}}\n</div>\n```\n\nYou
    could render it inside the `post` template using the `control` helper.\n\n```handlebars\n<div
    class=\"post\">\n  <h1>{{title}}</h1>\n  <div>{{body}}</div>\n  {{control \"author\"
    author}}\n</div>\n```"
  itemtype: method
  name: control
  params:
  - name: path
    description: ''
    type: String
  - name: modelPath
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 50
  description: Sets the `title` attribute of the `LinkView`'s HTML element.
  itemtype: property
  name: title
  default: 'null'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 58
  description: Sets the `rel` attribute of the `LinkView`'s HTML element.
  itemtype: property
  name: rel
  default: 'null'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 66
  description: ! 'The CSS class to apply to `LinkView`''s element when its `active`

    property is `true`.'
  itemtype: property
  name: activeClass
  type: String
  default: active
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 76
  description: ! 'The CSS class to apply to `LinkView`''s element when its `loading`

    property is `true`.'
  itemtype: property
  name: loadingClass
  type: String
  default: loading
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 86
  description: ! 'The CSS class to apply to a `LinkView`''s element when its `disabled`

    property is `true`.'
  itemtype: property
  name: disabledClass
  type: String
  default: disabled
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 97
  description: ! 'Determines whether the `LinkView` will trigger routing via

    the `replaceWith` routing strategy.'
  itemtype: property
  name: replace
  type: Boolean
  default: 'false'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 107
  description: ! 'By default the `{{link-to}}` helper will bind to the `href` and

    `title` attributes. It''s discourage that you override these defaults,

    however you can push onto the array if needed.'
  itemtype: property
  name: attributeBindings
  type: Array | String
  default: ! '[''href'', ''title'', ''rel'']'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 118
  description: ! 'By default the `{{link-to}}` helper will bind to the `active`, `loading`,
    and

    `disabled` classes. It is discouraged to override these directly.'
  itemtype: property
  name: classNameBindings
  type: Array
  default: ! '[''active'', ''loading'', ''disabled'']'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 128
  description: ! 'By default the `{{link-to}}` helper responds to the `click` event.
    You

    can override this globally by setting this property to your custom

    event name.


    This is particularly useful on mobile when one wants to avoid the 300ms

    click delay using some sort of custom `tap` event.'
  itemtype: property
  name: eventName
  type: String
  default: click
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 145
  description: ! 'Triggers the `LinkView`''s routing behavior. If

    `eventName` is changed to a value other than `click`

    the routing behavior will trigger on that custom event

    instead.'
  itemtype: event
  name: click
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 154
  description: ! "An overridable method called when LinkView objects are instantiated.\n\nExample:\n\n```javascript\nApp.MyLinkView
    = Ember.LinkView.extend({\n  init: function() {\n    this._super();\n    Ember.Logger.log('Event
    is ' + this.get('eventName'));\n  }\n});\n```\n\nNOTE: If you do override `init`
    for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to
    call `this._super()` in your\n`init` declaration! If you don't, Ember may not
    have an opportunity to\ndo important setup work, and you'll see strange behavior
    in your\napplication."
  itemtype: method
  name: init
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 202
  access: private
  tagname: ! 'This method is invoked by observers installed during `init` that fire

    whenever the helpers'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 212
  access: private
  tagname: ! 'Even though this isn''t a virtual view, we want to treat it as if it
    is

    so that you can access the parent with {{view.prop}}'
  itemtype: method
  name: concreteView
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 224
  description: ! "Accessed as a classname binding to apply the `LinkView`'s `disabledClass`\n
    \     CSS `class` to the element when the link is disabled.\nWhen `true` interactions
    with the element will not trigger route changes."
  itemtype: property
  name: disabled
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 238
  description: ! 'Accessed as a classname binding to apply the `LinkView`''s `activeClass`

    CSS `class` to the element when the link is active.


    A `LinkView` is considered active when its `currentWhen` property is `true`

    or the application''s current route is the route the `LinkView` would trigger

    transitions into.'
  itemtype: property
  name: active
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 263
  description: ! 'Accessed as a classname binding to apply the `LinkView`''s `loadingClass`

    CSS `class` to the element when the link is loading.


    A `LinkView` is considered loading when it has at least one

    parameter whose value is currently null or undefined. During

    this time, clicking the link will perform no transition and

    emit a warning that the link is still in a loading state.'
  itemtype: property
  name: loading
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 278
  access: private
  tagname: Returns the application's main router from the container.
  itemtype: property
  name: router
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 289
  access: private
  tagname: Event handler that invokes the link, activating the associated route.
  itemtype: method
  name: _invoke
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 320
  access: private
  tagname: Computed property that returns the resolved parameters.
  itemtype: property
  name: ''
  return:
    description: ''
    type: Array
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 337
  access: private
  tagname: ! 'Computed property that returns the current route name and

    any dynamic segments.'
  itemtype: property
  name: ''
  return:
    description: An array with the route name and any dynamic segments
    type: Array
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 370
  description: ! 'Sets the element''s `href` attribute to the url for

    the `LinkView`''s targeted route.


    If the `LinkView`''s `tagName` is changed to a value other

    than `a`, this property will be ignored.'
  itemtype: property
  name: href
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 388
  description: ! 'The default href value to use while a link-to is loading.

    Only applies when tagName is ''a'''
  itemtype: property
  name: loadingHref
  type: String
  default: ! '#'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 401
  description: ! "The `{{link-to}}` helper renders a link to the supplied\n`routeName`
    passing an optionally supplied model to the\nroute as its `model` context of the
    route. The block\nfor `{{link-to}}` becomes the innerHTML of the rendered\nelement:\n\n```handlebars\n{{#link-to
    'photoGallery'}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos\">\n
    \ Great Hamster Photos\n</a>\n```\n\n### Supplying a tagName\nBy default `{{link-to}}`
    renders an `<a>` element. This can\nbe overridden for a single use of `{{link-to}}`
    by supplying\na `tagName` option:\n\n```handlebars\n{{#link-to 'photoGallery'
    tagName=\"li\"}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<li>\n
    \ Great Hamster Photos\n</li>\n```\n\nTo override this option for your entire
    application, see\n\"Overriding Application-wide Defaults\".\n\n### Handling `href`\n`{{link-to}}`
    will use your application's Router to\nfill the element's `href` property with
    a url that\nmatches the path to the supplied `routeName` for your\nrouters's configured
    `Location` scheme, which defaults\nto Ember.HashLocation.\n\n### Handling current
    route\n`{{link-to}}` will apply a CSS class name of 'active'\nwhen the application's
    current route matches\nthe supplied routeName. For example, if the application's\ncurrent
    route is 'photoGallery.recent' the following\nuse of `{{link-to}}`:\n\n```handlebars\n{{#link-to
    'photoGallery.recent'}}\n  Great Hamster Photos from the last week\n{{/link-to}}\n```\n\nwill
    result in\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"active\">\n
    \ Great Hamster Photos\n</a>\n```\n\nThe CSS class name used for active classes
    can be customized\nfor a single use of `{{link-to}}` by passing an `activeClass`\noption:\n\n```handlebars\n{{#link-to
    'photoGallery.recent' activeClass=\"current-url\"}}\n  Great Hamster Photos from
    the last week\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/this-week\"
    class=\"current-url\">\n  Great Hamster Photos\n</a>\n```\n\nTo override this
    option for your entire application, see\n\"Overriding Application-wide Defaults\".\n\n###
    Supplying a model\nAn optional model argument can be used for routes whose\npaths
    contain dynamic segments. This argument will become\nthe model context of the
    linked route:\n\n```javascript\nApp.Router.map(function() {\n  this.resource(\"photoGallery\",
    {path: \"hamster-photos/:photo_id\"});\n})\n```\n\n```handlebars\n{{#link-to 'photoGallery'
    aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n
    \ Tomster\n</a>\n```\n\n### Supplying multiple models\nFor deep-linking to route
    paths that contain multiple\ndynamic segments, multiple model arguments can be
    used.\nAs the router transitions through the route path, each\nsupplied model
    argument will become the context for the\nroute with the dynamic segments:\n\n```javascript\nApp.Router.map(function()
    {\n  this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"}, function()
    {\n    this.route(\"comment\", {path: \"comments/:comment_id\"});\n  });\n});\n```\nThis
    argument will become the model context of the linked route:\n\n```handlebars\n{{#link-to
    'photoGallery.comment' aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}\n```\n\n```html\n<a
    href=\"/hamster-photos/42/comment/718\">\n  A+++ would snuggle again.\n</a>\n```\n###
    Overriding attributes\nYou can override any given property of the Ember.LinkView\nthat
    is generated by the `{{link-to}}` helper by passing\nkey/value pairs, like so:\n\n```handlebars\n{{#link-to
    \ aPhoto tagName='li' title='Following this link will change your life' classNames=['pic',
    'sweet']}}\n  Uh-mazing!\n{{/link-to}}\n\nSee {{#crossLink \"Ember.LinkView\"}}{{/crossLink}}
    for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited
    properties of `LinkView`.\n\n### Overriding Application-wide Defaults\n``{{link-to}}``
    creates an instance of Ember.LinkView\nfor rendering. To override options for
    your entire\napplication, reopen Ember.LinkView and supply the\ndesired values:\n\n```
    javascript\nEmber.LinkView.reopen({\n  activeClass: \"is-active\",\n  tagName:
    'li'\n})\n```\n\nIt is also possible to override the default event in\nthis manner:\n\n```
    javascript\nEmber.LinkView.reopen({\n  eventName: 'customEventName'\n});\n```"
  itemtype: method
  name: link-to
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: Handlebars key/value pairs of options, you can over-ride any property
      of {{#crossLink "Ember.LinkView"}}{{/crossLink}}
    type: Object
    optional: true
  return:
    description: HTML string
    type: String
  see:
  - ! '{Ember.LinkView}'
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 597
  description: See `link-to`
  itemtype: method
  name: linkTo
  deprecated: true
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/helpers/outlet.js
  line: 18
  description: ! "The `outlet` helper is a placeholder that the router will fill in
    with\nthe appropriate template based on the current state of the application.\n\n```
    handlebars\n{{outlet}}\n```\n\nBy default, a template based on Ember's naming
    conventions will be rendered\ninto the `outlet` (e.g. `App.PostsRoute` will render
    the `posts` template).\n\nYou can render a different template by using the `render()`
    method in the\nroute's `renderTemplate` hook. The following will render the `favoritePost`\ntemplate
    into the `outlet`.\n\n``` javascript\nApp.PostsRoute = Ember.Route.extend({\n
    \ renderTemplate: function() {\n    this.render('favoritePost');\n  }\n});\n```\n\nYou
    can create custom named outlets for more control.\n\n``` handlebars\n{{outlet
    'favoritePost'}}\n{{outlet 'posts'}}\n```\n\nThen you can define what template
    is rendered into each outlet in your\nroute.\n\n\n``` javascript\nApp.PostsRoute
    = Ember.Route.extend({\n  renderTemplate: function() {\n    this.render('favoritePost',
    { outlet: 'favoritePost' });\n    this.render('posts', { outlet: 'posts' });\n
    \ }\n});\n```\n\nYou can specify the view class that the outlet uses to contain
    and manage the\ntemplates rendered into it.\n\n``` handlebars\n{{outlet viewClass=App.SectionContainer}}\n```\n\n```
    javascript\nApp.SectionContainer = Ember.ContainerView.extend({\n  tagName: 'section',\n
    \ classNames: ['special']\n});\n```"
  itemtype: method
  name: outlet
  params:
  - name: property
    description: ! "the property on the controller\n  that holds the view for this
      outlet"
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/helpers/render.js
  line: 12
  description: ! "Calling ``{{render}}`` from within a template will insert another
    \ntemplate that matches the provided name. The inserted template will\naccess
    its properties on its own controller (rather than the controller\nof the parent
    template).\n\nIf a view class with the same name exists, the view class also will
    be used.\n\nNote: A given controller may only be used *once* in your app in this
    manner.\nA singleton instance of the controller will be created for you.\n\nExample:\n\n```javascript\nApp.NavigationController
    = Ember.Controller.extned({\n  who: \"world\"\n});\n```\n\n```handelbars\n<!--
    navigation.hbs -->\nHello, {{who}}.\n```\n\n```handelbars\n<!-- applications.hbs
    -->\n<h1>My great app</h1>\n{{render navigaton}}\n```\n\n```html\n<h1>My great
    app</h1>\n<div class='ember-view'>\n  Hello, world.\n</div>\n```\n\nOptionally
    you may provide a  second argument: a property path\nthat will be bound to the
    `model` property of the controller.\n\nIf a `model` property path is specified,
    then a new instance of the\ncontroller will be created and `{{render}}` can be
    used multiple times\nwith the same name.\n\n   For example if you had this `author`
    template.\n\n   ```handlebars\n<div class=\"author\">\n  Written by {{firstName}}
    {{lastName}}.\n  Total Posts: {{postCount}}\n</div>\n  ```\n\n  You could render
    it inside the `post` template using the `render` helper.\n\n  ```handlebars\n<div
    class=\"post\">\n  <h1>{{title}}</h1>\n  <div>{{body}}</div>\n  {{render \"author\"
    author}}\n</div>\n   ```"
  itemtype: method
  name: render
  params:
  - name: name
    description: ''
    type: String
  - name: contextString
    description: ''
    type: Object?
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: ../packages/ember-routing/lib/location/api.js
  line: 36
  description: ! 'Create an instance of a an implementation of the `location` API.
    Requires

    an options object with an `implementation` property.


    Example


    ```javascript

    var hashLocation = Ember.Location.create({implementation: ''hash''});

    var historyLocation = Ember.Location.create({implementation: ''history''});

    var noneLocation = Ember.Location.create({implementation: ''none''});

    ```'
  itemtype: method
  name: create
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an instance of an implementation of the `location` API
    type: Object
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/api.js
  line: 62
  description: ! "Registers a class that implements the `location` API with an implementation\nname.
    This implementation name can then be specified by the location property on\nthe
    application's router class.\n\nExample\n\n```javascript\nEmber.Location.registerImplementation('history',
    Ember.HistoryLocation);\n\nApp.Router.reopen({\n  location: 'history'\n});\n```"
  itemtype: method
  name: registerImplementation
  params:
  - name: name
    description: ''
    type: String
  - name: implementation
    description: of the `location` API
    type: Object
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 23
  access: private
  tagname: Returns the current `location.hash`, minus the '#' at the front.
  itemtype: method
  name: getURL
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 34
  access: private
  tagname: ! 'Set the `location.hash` and remembers what was set. This prevents

    `onUpdateURL` callbacks from triggering when the hash was set by

    `HashLocation`.'
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 49
  access: private
  tagname: ! 'Uses location.replace to update the url without a page reload

    or history modification.'
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 62
  access: private
  tagname: ! 'Register a callback to be invoked when the hash changes. These

    callbacks will execute when the user presses the back or forward

    button, but not after `setURL` is invoked.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 88
  access: private
  tagname: ! 'Given a URL, formats it to be placed into the page as part

    of an element''s `href` attribute.


    This is used, for example, when using the {{action}} helper

    to generate a URL based on an event.'
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 104
  access: private
  tagname: Cleans up the HashLocation event listener.
  itemtype: method
  name: willDestroy
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 25
  access: private
  tagname: Used to set state on first call to setURL
  itemtype: method
  name: initState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 37
  description: Will be pre-pended to path upon state change
  itemtype: property
  name: rootURL
  default: ! '''/'''
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 45
  access: private
  tagname: Returns the current `location.pathname` without rootURL
  itemtype: method
  name: getURL
  return:
    description: url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 63
  access: private
  tagname: Uses `history.pushState` to update the url without a page reload.
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 80
  access: private
  tagname: ! 'Uses `history.replaceState` to update the url without a page reload

    or history modification.'
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 98
  access: private
  tagname: ! 'Get the current `history.state`

    Polyfill checks for native browser support and falls back to retrieving

    from a private _historyState variable'
  itemtype: method
  name: getState
  return:
    description: state
    type: Object
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 112
  access: private
  tagname: Pushes a new state
  itemtype: method
  name: pushState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 134
  access: private
  tagname: Replaces the current state
  itemtype: method
  name: replaceState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 156
  access: private
  tagname: ! 'Register a callback to be invoked whenever the browser

    history changes, including using forward and back buttons.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 179
  access: private
  tagname: Used when using `{{action}}` helper.  The url is always appended to the
    rootURL.
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: formatted url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 198
  access: private
  tagname: Cleans up the HistoryLocation event listener.
  itemtype: method
  name: willDestroy
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/none_location.js
  line: 21
  access: private
  tagname: Returns the current path.
  itemtype: method
  name: getURL
  return:
    description: path
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/none_location.js
  line: 33
  access: private
  tagname: ! 'Set the path and remembers what was set. Using this method

    to change the path will not invoke the `updateURL` callback.'
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/none_location.js
  line: 46
  access: private
  tagname: ! 'Register a callback to be invoked when the path changes. These

    callbacks will execute when the user presses the back or forward

    button, but not after `setURL` is invoked.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/none_location.js
  line: 60
  access: private
  tagname: Sets the path and calls the `updateURL` callback.
  itemtype: method
  name: handleURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/none_location.js
  line: 73
  access: private
  tagname: ! 'Given a URL, formats it to be placed into the page as part

    of an element''s `href` attribute.


    This is used, for example, when using the {{action}} helper

    to generate a URL based on an event.'
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: url
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/controller_for.js
  line: 8
  description: Finds a controller instance.
  itemtype: method
  name: controllerFor
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/system/controller_for.js
  line: 20
  description: ! 'Generates a controller automatically if none was provided.

    The type of generated controller depends on the context.

    You can customize your generated controllers by defining

    `App.ObjectController` and `App.ArrayController`'
  itemtype: method
  name: generateController
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/system/route.js
  line: 22
  access: private
  tagname: ''
  itemtype: method
  name: exit
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 32
  access: private
  tagname: ''
  itemtype: method
  name: enter
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 41
  description: ! "The collection of functions, keyed by name, available on this route
    as\naction targets.\n\nThese functions will be invoked when a matching `{{action}}`
    is triggered\nfrom within a template and the application's current route is this
    route.\n\nActions can also be invoked from other parts of your application via
    `Route#send`\nor `Controller#send`.\n\nThe `actions` hash will inherit action
    handlers from\nthe `actions` hash defined on extended Route parent classes\nor
    mixins rather than just replace the entire hash, e.g.:\n\n```js\nApp.CanDisplayBanner
    = Ember.Mixin.create({\n  actions: {\n    displayBanner: function(msg) {\n      //
    ...\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner,
    {\n  actions: {\n    playMusic: function() {\n      // ...\n    }\n  }\n});\n\n//
    `WelcomeRoute`, when active, will be able to respond\n// to both actions, since
    the actions hash is merged rather\n// then replaced when extending mixins / parent
    classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin
    a route's action handler, the value of the `this` context\nis the Route object:\n\n```js\nApp.SongRoute
    = Ember.Route.extend({\n  actions: {\n    myAction: function() {\n      this.controllerFor(\"song\");\n
    \     this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt
    is also possible to call `this._super()` from within an\naction handler if it
    overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the
    following routes:\n\n```js\nApp.DebugRoute = Ember.Mixin.create({\n  actions:
    {\n    debugRouteInformation: function() {\n      console.debug(\"trololo\");\n
    \   }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute,
    {\n  actions: {\n    debugRouteInformation: function() {\n      // also call the
    debugRouteInformation of mixed in App.DebugRoute\n      this._super();\n\n      //
    show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n##
    Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non
    the `actions` hash handles it. To continue bubbling the action,\nyou must return
    `true` from the handler:\n\n```js\nApp.Router.map(function() {\n  this.resource(\"album\",
    function() {\n    this.route(\"song\");\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n
    \ actions: {\n    startPlaying: function() {\n    }\n  }\n});\n\nApp.AlbumSongRoute
    = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n      //
    ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n
    \     }\n    }\n  }\n});\n```\n\n## Built-in actions\n\nThere are a few built-in
    actions pertaining to transitions that you\ncan use to customize transition behavior:
    `willTransition` and\n`error`.\n\n### `willTransition`\n\nThe `willTransition`
    action is fired at the beginning of any\nattempted transition with a `Transition`
    object as the sole\nargument. This action can be used for aborting, redirecting,\nor
    decorating the transition from the currently active routes.\n\nA good example
    is preventing navigation when a form is\nhalf-filled out:\n\n```js\nApp.ContactFormRoute
    = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition)
    {\n      if (this.controller.get('userHasEnteredData')) {\n        this.controller.displayNavigationConfirm();\n
    \       transition.abort();\n      }\n    }\n  }\n});\n```\n\nYou can also redirect
    elsewhere by calling\n`this.transitionTo('elsewhere')` from within `willTransition`.\nNote
    that `willTransition` will not be fired for the\nredirecting `transitionTo`, since
    `willTransition` doesn't\nfire when there is already a transition underway. If
    you want\nsubsequent `willTransition` actions to fire for the redirecting\ntransition,
    you must first explicitly call\n`transition.abort()`.\n\n### `error`\n\nWhen attempting
    to transition into a route, any of the hooks\nmay throw an error, or return a
    promise that rejects, at which\npoint an `error` action will be fired on the partially-entered\nroutes,
    allowing for per-route error handling logic, or shared\nerror handling logic defined
    on a parent route.\n\nHere is an example of an error handler that will be invoked\nfor
    rejected promises / thrown errors from the various hooks\non the route, as well
    as any unhandled errors from child\nroutes:\n\n```js\nApp.AdminRoute = Ember.Route.extend({\n
    \ beforeModel: function() {\n    throw \"bad things!\";\n    // ...or, equivalently:\n
    \   return Ember.RSVP.reject(\"bad things!\");\n  },\n\n  actions: {\n    error:
    function(error, transition) {\n      // Assuming we got here due to the error
    in `beforeModel`,\n      // we can expect that error === \"bad things!\",\n      //
    but a promise model rejecting would also\n      // call this hook, as would any
    errors encountered\n      // in `afterModel`.\n\n      // The `error` hook is
    also provided the failed\n      // `transition`, which can be stored and later\n
    \     // `.retry()`d if desired.\n\n      this.transitionTo('login');\n    }\n
    \ }\n});\n```\n\n`error` actions that bubble up all the way to `ApplicationRoute`\nwill
    fire a default error handler that logs the error. You can\nspecify your own global
    default error handler by overriding the\n`error` handler on `ApplicationRoute`:\n\n```js\nApp.ApplicationRoute
    = Ember.Route.extend({\n  actions: {\n    error: function(error, transition) {\n
    \     this.controllerFor('banner').displayError(error.message);\n    }\n  }\n});\n```"
  see:
  - ! '{Ember.Route#send}'
  - ! '{Handlebars.helpers.action}'
  itemtype: property
  name: actions
  type: Hash
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 256
  deprecated: true
  deprecationMessage: Please use `actions` instead.
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 265
  description: ! 'This hook is executed when the router completely exits this route.
    It is

    not executed when the model for the route changes.'
  itemtype: method
  name: deactivate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 273
  description: ! 'This hook is executed when the router enters the route for the first
    time.

    It is not executed when the model for the route changes.'
  itemtype: method
  name: activate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 281
  description: ! "Transition into another route. Optionally supply a model for the\nroute
    in question. The model will be serialized into the URL\nusing the `serialize`
    hook.\n\nExample\n\n```javascript\nApp.Router.map(function() {\n  this.route(\"index\");\n
    \ this.route(\"secret\");\n  this.route(\"fourOhFour\", { path: \"*:\"});\n});\n\nApp.IndexRoute
    = Ember.Route.extend({\n  actions: {\n    moveToSecret: function(context){\n      if
    (authorized()){\n        this.transitionTo('secret', context);\n      }\n        this.transitionTo('fourOhFour');\n
    \   }\n  }\n});\n```"
  itemtype: method
  name: transitionTo
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: ''
    type: ! '...Object'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 316
  description: ! "Transition into another route while replacing the current URL if\npossible.
    Identical to `transitionTo` in all other respects.\n\nExample\n\n```javascript\nApp.Router.map(function()
    {\n  this.route(\"index\");\n  this.route(\"secret\");\n});\n\nApp.SecretRoute
    = Ember.Route.extend({\n  afterModel: function() {\n    if (!authorized()){\n
    \     this.replaceWith('index');\n    }\n  }\n});\n```"
  itemtype: method
  name: replaceWith
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: ''
    type: ! '...Object'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 346
  description: ! "Sends an action to the router, which will delegate it to the currently\nactive
    route hierarchy per the bubbling rules explained under `actions`.\n\nExample\n\n```javascript\nApp.Router.map(function()
    {\n  this.route(\"index\");\n});\n\nApp.ApplicationRoute = Ember.Route.extend({\n
    \ actions: {\n    track: function(arg) {\n      console.log(arg, 'was clicked');\n
    \   }\n  }\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    trackIfDebug:
    function(arg) {\n      if (debug) {\n        this.send('track', arg);\n      }\n
    \   }\n  }\n});\n```"
  itemtype: method
  name: send
  params:
  - name: name
    description: the name of the action to trigger
    type: String
  - name: args
    description: ''
    type: ! '...*'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 384
  access: private
  tagname: This hook is the entry point for router.js
  itemtype: method
  name: setup
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 417
  deprecated: true
  deprecationMessage: ! 'A hook you can implement to optionally redirect to another
    route.


    If you call `this.transitionTo` from inside of this hook, this route

    will not be entered in favor of the other hook.


    This hook is deprecated in favor of using the `afterModel` hook

    for performing redirects after the model has resolved.'
  itemtype: method
  name: redirect
  params:
  - name: model
    description: the model for this route
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 433
  description: ! "This hook is the first of the route entry validation hooks\ncalled
    when an attempt is made to transition into a route\nor one of its children. It
    is called before `model` and\n`afterModel`, and is appropriate for cases when:\n\n1)
    A decision can be made to redirect elsewhere without\n   needing to resolve the
    model first.\n2) Any async operations need to occur first before the\n   model
    is attempted to be resolved.\n\nThis hook is provided the current `transition`
    attempt\nas a parameter, which can be used to `.abort()` the transition,\nsave
    it for a later `.retry()`, or retrieve values set\non it from a previous hook.
    You can also just call\n`this.transitionTo` to another route to implicitly\nabort
    the `transition`.\n\nYou can return a promise from this hook to pause the\ntransition
    until the promise resolves (or rejects). This could\nbe useful, for instance,
    for retrieving async code from\nthe server that is required to enter a route.\n\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post)
    {\n      return Ember.$.getScript('/models/post.js');\n    }\n  }\n});\n```\n\nIf
    `App.Post` doesn't exist in the above example,\n`beforeModel` will use jQuery's
    `getScript`, which\nreturns a promise that resolves after the server has\nsuccessfully
    retrieved and executed the code from the\nserver. Note that if an error were to
    occur, it would\nbe passed to the `error` hook on `Ember.Route`, but\nit's also
    possible to handle errors specific to\n`beforeModel` right from within the hook
    (to distinguish\nfrom the shared error handling behavior of the `error`\nhook):\n\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post)
    {\n      var self = this;\n      return Ember.$.getScript('post.js').then(null,
    function(e) {\n        self.transitionTo('help');\n\n        // Note that the
    above transitionTo will implicitly\n        // halt the transition. If you were
    to return\n        // nothing from this promise reject handler,\n        // according
    to promise semantics, that would\n        // convert the reject into a resolve
    and the\n        // transition would continue. To propagate the\n        // error
    so that it'd be handled by the `error`\n        // hook, you would have to either\n
    \       return Ember.RSVP.reject(e);\n        // or\n        throw e;\n      });\n
    \   }\n  }\n});\n```"
  itemtype: method
  name: beforeModel
  params:
  - name: transition
    description: ''
    type: Transition
  return:
    description: ! "if the value returned from this hook is\n  a promise, the transition
      will pause until the transition\n  resolves. Otherwise, non-promise return values
      are not\n  utilized in any way."
    type: Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 511
  description: ! "This hook is called after this route's model has resolved.\nIt follows
    identical async/promise semantics to `beforeModel`\nbut is provided the route's
    resolved model in addition to\nthe `transition`, and is therefore suited to performing\nlogic
    that can only take place after the model has already\nresolved.\n\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  afterModel: function(posts, transition) {\n    if (posts.length
    === 1) {\n      this.transitionTo('post.show', posts[0]);\n    }\n  }\n});\n```\n\nRefer
    to documentation for `beforeModel` for a description\nof transition-pausing semantics
    when a promise is returned\nfrom this hook."
  itemtype: method
  name: afterModel
  params:
  - name: resolvedModel
    description: ! "the value returned from `model`,\n  or its resolved value if it
      was a promise"
    type: Object
  - name: transition
    description: ''
    type: Transition
  return:
    description: ! "if the value returned from this hook is\n  a promise, the transition
      will pause until the transition\n  resolves. Otherwise, non-promise return values
      are not\n  utilized in any way."
    type: Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 547
  access: private
  tagname: Called when the context is changed by router.js.
  itemtype: method
  name: contextDidChange
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 558
  description: ! "A hook you can implement to convert the URL into the model for\nthis
    route.\n\n```js\nApp.Router.map(function() {\n  this.resource('post', {path: '/posts/:post_id'});\n});\n```\n\nThe
    model for the `post` route is `App.Post.find(params.post_id)`.\n\nBy default,
    if your route has a dynamic segment ending in `_id`:\n\n* The model class is determined
    from the segment (`post_id`'s\n  class is `App.Post`)\n* The find method is called
    on the model class with the value of\n  the dynamic segment.\n\nNote that for
    routes with dynamic segments, this hook is only\nexecuted when entered via the
    URL. If the route is entered\nthrough a transition (e.g. when using the `linkTo`
    Handlebars\nhelper), then a model context is already provided and this hook\nis
    not called. Routes without dynamic segments will always\nexecute the model hook.\n\nThis
    hook follows the asynchronous/promise semantics\ndescribed in the documentation
    for `beforeModel`. In particular,\nif a promise returned from `model` fails, the
    error will be\nhandled by the `error` hook on `Ember.Route`.\n\nExample\n\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  model: function(params) {\n    return App.Post.find(params.post_id);\n
    \ }\n});\n```"
  itemtype: method
  name: model
  params:
  - name: params
    description: the parameters extracted from the URL
    type: Object
  - name: transition
    description: ''
    type: Transition
  return:
    description: ! "the model for this route. If\n  a promise is returned, the transition
      will pause until\n  the promise resolves, and the resolved value of the promise\n
      \ will be used as the model for this route."
    type: Object|Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 624
  itemtype: method
  name: findModel
  params:
  - name: type
    description: the model type
    type: String
  - name: value
    description: the value passed to find
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 635
  description: ! 'Store property provides a hook for data persistence libraries to
    inject themselves.


    By default, this store property provides the exact same functionality previously

    in the model hook.


    Currently, the required interface is:


    `store.find(modelName, findArguments)`'
  itemtype: method
  name: store
  params:
  - name: store
    description: ''
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 664
  description: ! "A hook you can implement to convert the route's model into parameters\nfor
    the URL.\n\n```js\nApp.Router.map(function() {\n  this.resource('post', {path:
    '/posts/:post_id'});\n});\n\nApp.PostRoute = Ember.Route.extend({\n  model: function(params)
    {\n    // the server returns `{ id: 12 }`\n    return jQuery.getJSON(\"/posts/\"
    + params.post_id);\n  },\n\n  serialize: function(model) {\n    // this will make
    the URL `/posts/12`\n    return { post_id: model.id };\n  }\n});\n```\n\nThe default
    `serialize` method will insert the model's `id` into the\nroute's dynamic segment
    (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple
    dynamic segments or does not contain '_id', `serialize`\nwill return `Ember.getProperties(model,
    params)`\n\nThis method is called when `transitionTo` is called with a context\nin
    order to populate the URL."
  itemtype: method
  name: serialize
  params:
  - name: model
    description: the route's model
    type: Object
  - name: params
    description: ! "an Array of parameter names for the current\n  route (in the example,
      `['post_id']`."
    type: Array
  return:
    description: the serialized parameters
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 714
  description: ! "A hook you can use to setup the controller for the current route.\n\nThis
    method is called with the controller for the current route and the\nmodel supplied
    by the `model` hook.\n\nBy default, the `setupController` hook sets the `content`
    property of\nthe controller to the `model`.\n\nThis means that your template will
    get a proxy for the model as its\ncontext, and you can act as though the model
    itself was the context.\n\nThe provided controller will be one resolved based
    on the name\nof this route.\n\nIf no explicit controller is defined, Ember will
    automatically create\nan appropriate controller for the model.\n\n* if the model
    is an `Ember.Array` (including record arrays from Ember\n  Data), the controller
    is an `Ember.ArrayController`.\n* otherwise, the controller is an `Ember.ObjectController`.\n\nAs
    an example, consider the router:\n\n```js\nApp.Router.map(function() {\n  this.resource('post',
    {path: '/posts/:post_id'});\n});\n```\n\nFor the `post` route, a controller named
    `App.PostController` would\nbe used if it is defined. If it is not defined, an
    `Ember.ObjectController`\ninstance would be used.\n\nExample\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  setupController: function(controller, model) {\n    controller.set('model',
    model);\n  }\n});\n```"
  itemtype: method
  name: setupController
  params:
  - name: controller
    description: instance
    type: Controller
  - name: model
    description: ''
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 767
  description: ! "Returns the controller for a particular route or name.\n\nThe controller
    instance must already have been created, either through entering the\nassociated
    route or using `generateController`.\n\n```js\nApp.PostRoute = Ember.Route.extend({\n
    \ setupController: function(controller, post) {\n    this._super(controller, post);\n
    \   this.controllerFor('posts').set('currentPost', post);\n  }\n});\n```"
  itemtype: method
  name: controllerFor
  params:
  - name: name
    description: the name of the route or controller
    type: String
  return:
    description: ''
    type: Ember.Controller
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 805
  description: ! "Generates a controller for a route.\n\nIf the optional model is
    passed then the controller type is determined automatically,\ne.g., an ArrayController
    for arrays.\n\nExample\n\n```js\nApp.PostRoute = Ember.Route.extend({\n  setupController:
    function(controller, post) {\n    this._super(controller, post);\n    this.generateController('posts',
    post);\n  }\n});\n```"
  itemtype: method
  name: generateController
  params:
  - name: name
    description: the name of the controller
    type: String
  - name: model
    description: the model to infer the type of the controller (optional)
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 834
  description: ! "Returns the current model for a given route.\n\nThis is the object
    returned by the `model` hook of the route\nin question.\n\nExample\n\n```js\nApp.Router.map(function()
    {\n    this.resource('post', { path: '/post/:post_id' }, function() {\n        this.resource('comments');\n
    \   });\n});\n\nApp.CommentsRoute = Ember.Route.extend({\n    afterModel: function()
    {\n        this.set('post', this.modelFor('post'));\n    }\n});\n```"
  itemtype: method
  name: modelFor
  params:
  - name: name
    description: the name of the route
    type: String
  return:
    description: the model object
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 877
  description: ! "A hook you can use to render the template for the current route.\n\nThis
    method is called with the controller for the current route and the\nmodel supplied
    by the `model` hook. By default, it renders the route's\ntemplate, configured
    with the controller for the route.\n\nThis method can be overridden to set up
    and render additional or\nalternative templates.\n\n```js\nApp.PostsRoute = Ember.Route.extend({\n
    \ renderTemplate: function(controller, model) {\n    var favController = this.controllerFor('favoritePost');\n\n
    \   // Render the `favoritePost` template into\n    // the outlet `posts`, and
    display the `favoritePost`\n    // controller.\n    this.render('favoritePost',
    {\n      outlet: 'posts',\n      controller: favController\n    });\n  }\n});\n```"
  itemtype: method
  name: renderTemplate
  params:
  - name: controller
    description: the route's controller
    type: Object
  - name: model
    description: the route's model
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 911
  description: ! "Renders a template into an outlet.\n\nThis method has a number of
    defaults, based on the name of the\nroute specified in the router.\n\nFor example:\n\n```js\nApp.Router.map(function()
    {\n  this.route('index');\n  this.resource('post', {path: '/posts/:post_id'});\n});\n\nApp.PostRoute
    = App.Route.extend({\n  renderTemplate: function() {\n    this.render();\n  }\n});\n```\n\nThe
    name of the `PostRoute`, as defined by the router, is `post`.\n\nBy default, render
    will:\n\n* render the `post` template\n* with the `post` view (`PostView`) for
    event handling, if one exists\n* and the `post` controller (`PostController`),
    if one exists\n* into the `main` outlet of the `application` template\n\nYou can
    override this behavior:\n\n```js\nApp.PostRoute = App.Route.extend({\n  renderTemplate:
    function() {\n    this.render('myPost', {   // the template to render\n      into:
    'index',          // the template to render into\n      outlet: 'detail',       //
    the name of the outlet in that template\n      controller: 'blogPost'  // the
    controller to use for the template\n    });\n  }\n});\n```\n\nRemember that the
    controller's `content` will be the route's model. In\nthis case, the default model
    will be `App.Post.find(params.post_id)`."
  itemtype: method
  name: render
  params:
  - name: name
    description: the name of the template to render
    type: String
  - name: options
    description: the options
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 1001
  description: ! "Disconnects a view that has been rendered into an outlet.\n\nYou
    may pass any or all of the following options to `disconnectOutlet`:\n\n* `outlet`:
    the name of the outlet to clear (default: 'main')\n* `parentView`: the name of
    the view containing the outlet to clear\n   (default: the view rendered by the
    parent route)\n\nExample:\n\n```js\nApp.ApplicationRoute = App.Route.extend({\n
    \ actions: {\n    showModal: function(evt) {\n      this.render(evt.modalName,
    {\n        outlet: 'modal',\n        into: 'application'\n      });\n    },\n
    \   hideModal: function(evt) {\n      this.disconnectOutlet({\n        outlet:
    'modal',\n        parentView: 'application'\n      });\n    }\n  }\n});\n```"
  itemtype: method
  name: disconnectOutlet
  params:
  - name: options
    description: the options
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 1047
  access: private
  tagname: ''
  itemtype: method
  name: teardownViews
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/router.js
  line: 102
  access: private
  tagname: ! 'Resets the state of the router by clearing the current route

    handlers and deactivating them.'
  itemtype: method
  name: reset
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-runtime/lib/computed/array_computed.js
  line: 44
  description: ! "Creates a computed property which operates on dependent arrays and\nis
    updated with \"one at a time\" semantics. When items are added or\nremoved from
    the dependent array(s) an array computed only operates\non the change instead
    of re-evaluating the entire array. This should\nreturn an array, if you'd like
    to use \"one at a time\" semantics and\ncompute some value other then an array
    look at\n`Ember.reduceComputed`.\n\nIf there are more than one arguments the first
    arguments are\nconsidered to be dependent property keys. The last argument is\nrequired
    to be an options object. The options object can have the\nfollowing three properties.\n\n`initialize`
    - An optional initialize function. Typically this will be used\nto set up state
    on the instanceMeta object.\n\n`removedItem` - A function that is called each
    time an element is\nremoved from the array.\n\n`addedItem` - A function that is
    called each time an element is\nadded to the array.\n\n\nThe `initialize` function
    has the following signature:\n\n```javascript\n function (array, changeMeta, instanceMeta)\n```\n\n`array`
    - The initial value of the arrayComputed, an empty array.\n\n`changeMeta` - An
    object which contains meta information about the\ncomputed. It contains the following
    properties:\n\n   - `property` the computed property\n   - `propertyName` the
    name of the property on the object\n\n`instanceMeta` - An object that can be used
    to store meta\ninformation needed for calculating your computed. For example a\nunique
    computed might use this to store the number of times a given\nelement is found
    in the dependent array.\n\n\nThe `removedItem` and `addedItem` functions both
    have the following signature:\n\n```javascript\nfunction (accumulatedValue, item,
    changeMeta, instanceMeta)\n```\n\n`accumulatedValue` - The value returned from
    the last time\n`removedItem` or `addedItem` was called or an empty array.\n\n`item`
    - the element added or removed from the array\n\n`changeMeta` - An object which
    contains meta information about the\nchange. It contains the following properties:\n\n
    \ - `property` the computed property\n  - `propertyName` the name of the property
    on the object\n  - `index` the index of the added or removed item\n  - `item`
    the added or removed item: this is exactly the same as\n    the second arg\n  -
    `arrayChanged` the array that triggered the change. Can be\n    useful when depending
    on multiple arrays.\n\nFor property changes triggered on an item property change
    (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta`
    will also contain the following property:\n\n  - `previousValues` an object whose
    keys are the properties that changed on\n  the item, and whose values are the
    item's previous values.\n\n`previousValues` is important Ember coalesces item
    property changes via\nEmber.run.once. This means that by the time removedItem
    gets called, item has\nthe new values, but you may need the previous value (eg
    for sorting &\nfiltering).\n\n`instanceMeta` - An object that can be used to store
    meta\ninformation needed for calculating your computed. For example a\nunique
    computed might use this to store the number of times a given\nelement is found
    in the dependent array.\n\nThe `removedItem` and `addedItem` functions should
    return the accumulated\nvalue. It is acceptable to not return anything (ie return
    undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed
    but it's used in eg max and min.\n\nExample\n\n```javascript\nEmber.computed.map
    = function(dependentKey, callback) {\n  var options = {\n    addedItem: function(array,
    item, changeMeta, instanceMeta) {\n      var mapped = callback(item);\n      array.insertAt(changeMeta.index,
    mapped);\n      return array;\n    },\n    removedItem: function(array, item,
    changeMeta, instanceMeta) {\n      array.removeAt(changeMeta.index, 1);\n      return
    array;\n    }\n  };\n\n  return Ember.arrayComputed(dependentKey, options);\n};\n```"
  itemtype: method
  name: arrayComputed
  params:
  - name: dependentKeys*
    description: ''
    type: String
    optional: true
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.ComputedProperty
  class: Ember
  module: ember
- file: ../packages/ember-runtime/lib/computed/reduce_computed.js
  line: 536
  description: ! "Creates a computed property which operates on dependent arrays and\nis
    updated with \"one at a time\" semantics. When items are added or\nremoved from
    the dependent array(s) a reduce computed only operates\non the change instead
    of re-evaluating the entire array.\n\nIf there are more than one arguments the
    first arguments are\nconsidered to be dependent property keys. The last argument
    is\nrequired to be an options object. The options object can have the\nfollowing
    four properties.\n\n`initialValue` - A value or function that will be used as
    the initial\nvalue for the computed. If this property is a function the result
    of calling\nthe function will be used as the initial value. This property is required.\n\n`initialize`
    - An optional initialize function. Typically this will be used\nto set up state
    on the instanceMeta object.\n\n`removedItem` - A function that is called each
    time an element is removed\nfrom the array.\n\n`addedItem` - A function that is
    called each time an element is added to\nthe array.\n\n\nThe `initialize` function
    has the following signature:\n\n```javascript\n function (initialValue, changeMeta,
    instanceMeta)\n```\n\n`initialValue` - The value of the `initialValue` property
    from the\noptions object.\n\n`changeMeta` - An object which contains meta information
    about the\ncomputed. It contains the following properties:\n\n   - `property`
    the computed property\n   - `propertyName` the name of the property on the object\n\n`instanceMeta`
    - An object that can be used to store meta\ninformation needed for calculating
    your computed. For example a\nunique computed might use this to store the number
    of times a given\nelement is found in the dependent array.\n\n\nThe `removedItem`
    and `addedItem` functions both have the following signature:\n\n```javascript\nfunction
    (accumulatedValue, item, changeMeta, instanceMeta)\n```\n\n`accumulatedValue`
    - The value returned from the last time\n`removedItem` or `addedItem` was called
    or `initialValue`.\n\n`item` - the element added or removed from the array\n\n`changeMeta`
    - An object which contains meta information about the\nchange. It contains the
    following properties:\n\n  - `property` the computed property\n  - `propertyName`
    the name of the property on the object\n  - `index` the index of the added or
    removed item\n  - `item` the added or removed item: this is exactly the same as\n
    \   the second arg\n  - `arrayChanged` the array that triggered the change. Can
    be\n    useful when depending on multiple arrays.\n\nFor property changes triggered
    on an item property change (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta`
    will also contain the following property:\n\n  - `previousValues` an object whose
    keys are the properties that changed on\n  the item, and whose values are the
    item's previous values.\n\n`previousValues` is important Ember coalesces item
    property changes via\nEmber.run.once. This means that by the time removedItem
    gets called, item has\nthe new values, but you may need the previous value (eg
    for sorting &\nfiltering).\n\n`instanceMeta` - An object that can be used to store
    meta\ninformation needed for calculating your computed. For example a\nunique
    computed might use this to store the number of times a given\nelement is found
    in the dependent array.\n\nThe `removedItem` and `addedItem` functions should
    return the accumulated\nvalue. It is acceptable to not return anything (ie return
    undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed
    but it's used in eg max and min.\n\nExample\n\n```javascript\nEmber.computed.max
    = function (dependentKey) {\n  return Ember.reduceComputed.call(null, dependentKey,
    {\n    initialValue: -Infinity,\n\n    addedItem: function (accumulatedValue,
    item, changeMeta, instanceMeta) {\n      return Math.max(accumulatedValue, item);\n
    \   },\n\n    removedItem: function (accumulatedValue, item, changeMeta, instanceMeta)
    {\n      if (item < accumulatedValue) {\n        return accumulatedValue;\n      }\n
    \   }\n  });\n};\n```"
  itemtype: method
  name: reduceComputed
  params:
  - name: dependentKeys*
    description: ''
    type: String
    optional: true
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.ComputedProperty
  class: Ember
  module: ember
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 16
  description: ! "A computed property that calculates the maximum value in the\ndependent
    array. This will return `-Infinity` when the dependent\narray is empty.\n\nExample\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n
    \ maxChildAge: Ember.computed.max('childAges')\n});\n\nvar lordByron = App.Person.create({children:
    []});\nlordByron.get('maxChildAge'); // -Infinity\nlordByron.get('children').pushObject({name:
    'Augusta Ada Byron', age: 7});\nlordByron.get('maxChildAge'); // 7\nlordByron.get('children').pushObjects([{name:
    'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\nlordByron.get('maxChildAge');
    // 8\n```"
  itemtype: method
  name: computed.max
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the largest value in the dependentKey's array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 58
  description: ! "A computed property that calculates the minimum value in the\ndependent
    array. This will return `Infinity` when the dependent\narray is empty.\n\nExample\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n
    \ minChildAge: Ember.computed.min('childAges')\n});\n\nvar lordByron = App.Person.create({children:
    []});\nlordByron.get('minChildAge'); // Infinity\nlordByron.get('children').pushObject({name:
    'Augusta Ada Byron', age: 7});\nlordByron.get('minChildAge'); // 7\nlordByron.get('children').pushObjects([{name:
    'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\nlordByron.get('minChildAge');
    // 5\n```"
  itemtype: method
  name: computed.min
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the smallest value in the dependentKey's array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 100
  description: ! "Returns an array mapped via the callback\n\nThe callback method
    you provide should have the following signature:\n\n```javascript\nfunction(item);\n```\n\n-
    `item` is the current item in the iteration.\n\nExample\n\n```javascript\nApp.Hampster
    = Ember.Object.extend({\n  excitingChores: Ember.computed.map('chores', function(chore)
    {\n    return chore.toUpperCase() + '!';\n  })\n});\n\nvar hampster = App.Hampster.create({chores:
    ['cook', 'clean', 'write more unit tests']});\nhampster.get('excitingChores');
    // ['COOK!', 'CLEAN!', 'WRITE MORE UNIT TESTS!']\n```"
  itemtype: method
  name: computed.map
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: an array mapped via the callback
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 146
  description: ! "Returns an array mapped to the specified key.\n\nExample\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n
    \ minChildAge: Ember.computed.min('childAges')\n});\n\nvar lordByron = App.Person.create({children:
    []});\nlordByron.get('childAge'); // []\nlordByron.get('children').pushObject({name:
    'Augusta Ada Byron', age: 7});\nlordByron.get('childAge'); // [7]\nlordByron.get('children').pushObjects([{name:
    'Allegra Byron', age: 5}, {name: 'Elizabeth Medora Leigh', age: 8}]);\nlordByron.get('childAge');
    // [7, 5, 8]\n```"
  itemtype: method
  name: computed.mapBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  return:
    description: an array mapped to the specified key
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 176
  itemtype: method
  name: computed.mapProperty
  deprecated: true
  deprecationMessage: Use `Ember.computed.mapBy` instead
  params:
  - name: dependentKey
    description: ''
  - name: propertyKey
    description: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 185
  description: ! "Filters the array by the callback.\n\nThe callback method you provide
    should have the following signature:\n\n```javascript\nfunction(item);\n```\n\n-
    `item` is the current item in the iteration.\n\nExample\n\n```javascript\nApp.Hampster
    = Ember.Object.extend({\n  remainingChores: Ember.computed.filter('chores', function(chore)
    {\n    return !chore.done;\n  })\n});\n\nvar hampster = App.Hampster.create({chores:
    [\n  {name: 'cook', done: true},\n  {name: 'clean', done: true},\n  {name: 'write
    more unit tests', done: false}\n]});\nhampster.get('remainingChores'); // [{name:
    'write more unit tests', done: false}]\n```"
  itemtype: method
  name: computed.filter
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 250
  description: ! "Filters the array by the property and value\n\nExample\n\n```javascript\nApp.Hampster
    = Ember.Object.extend({\n  remainingChores: Ember.computed.filterBy('chores',
    'done', false)\n});\n\nvar hampster = App.Hampster.create({chores: [\n  {name:
    'cook', done: true},\n  {name: 'clean', done: true},\n  {name: 'write more unit
    tests', done: false}\n]});\nhampster.get('remainingChores'); // [{name: 'write
    more unit tests', done: false}]\n```"
  itemtype: method
  name: computed.filterBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  - name: value
    description: ''
    type: String
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 291
  itemtype: method
  name: computed.filterProperty
  params:
  - name: dependentKey
    description: ''
  - name: propertyKey
    description: ''
  - name: value
    description: ''
  deprecated: true
  deprecationMessage: Use `Ember.computed.filterBy` instead
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 301
  description: ! "A computed property which returns a new array with all the unique\nelements
    from one or more dependent arrays.\n\nExample\n\n```javascript\nApp.Hampster =
    Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniq('fruits')\n});\n\nvar
    hampster = App.Hampster.create({fruits: [\n  'banana',\n  'grape',\n  'kale',\n
    \ 'banana'\n]});\nhampster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n```"
  itemtype: method
  name: computed.uniq
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: ! 'computes a new array with all the

      unique elements from the dependent array'
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 358
  description: Alias for [Ember.computed.uniq](/api/#method_computed_uniq).
  itemtype: method
  name: computed.union
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: ! 'computes a new array with all the

      unique elements from the dependent array'
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 369
  description: ! "A computed property which returns a new array with all the duplicated\nelements
    from two or more dependeny arrays.\n\nExample\n\n```javascript\nvar obj = Ember.Object.createWithMixins({\n
    \ adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n
    \ charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George
    Peacock'],\n  friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')\n});\n\nobj.get('friendsInCommon');
    // ['William King', 'Mary Somerville']\n```"
  itemtype: method
  name: computed.intersect
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: ! 'computes a new array with all the

      duplicated elements from the dependent arrays'
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 445
  description: ! "A computed property which returns a new array with all the\nproperties
    from the first dependent array that are not in the second\ndependent array.\n\nExample\n\n```javascript\nApp.Hampster
    = Ember.Object.extend({\n  likes: ['banana', 'grape', 'kale'],\n  wants: Ember.computed.setDiff('likes',
    'fruits')\n});\n\nvar hampster = App.Hampster.create({fruits: [\n  'grape',\n
    \ 'kale',\n]});\nhampster.get('wants'); // ['banana']\n```"
  itemtype: method
  name: computed.setDiff
  params:
  - name: setAProperty
    description: ''
    type: String
  - name: setBProperty
    description: ''
    type: String
  return:
    description: ! 'computes a new array with all the

      items from the first dependent array that are not in the second

      dependent array'
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 550
  description: ! "A computed property which returns a new array with all the\nproperties
    from the first dependent array sorted based on a property\nor sort function.\n\nThe
    callback method you provide should have the following signature:\n\n```javascript\nfunction(itemA,
    itemB);\n```\n\n- `itemA` the first item to compare.\n- `itemB` the second item
    to compare.\n\nThis function should return `-1` when `itemA` should come before\n`itemB`.
    It should return `1` when `itemA` should come after\n`itemB`. If the `itemA` and
    `itemB` are equal this function should return `0`.\n\nExample\n\n```javascript\nvar
    ToDoList = Ember.Object.extend({\n  todosSorting: ['name'],\n  sortedTodos: Ember.computed.sort('todos',
    'todosSorting'),\n  priorityTodos: Ember.computed.sort('todos', function(a, b){\n
    \   if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority
    < b.priority) {\n      return -1;\n    }\n    return 0;\n  }),\n});\nvar todoList
    = ToDoList.create({todos: [\n  {name: 'Unit Test', priority: 2},\n  {name: 'Documentation',
    priority: 3},\n  {name: 'Release', priority: 1}\n]});\n\ntodoList.get('sortedTodos');
    // [{name:'Documentation', priority:3}, {name:'Release', priority:1}, {name:'Unit
    Test', priority:2}]\ntodoList.get('priroityTodos'); // [{name:'Release', priority:1},
    {name:'Unit Test', priority:2}, {name:'Documentation', priority:3}]\n```"
  itemtype: method
  name: computed.sort
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: sortDefinition
    description: ! 'a dependent key to an

      array of sort properties or a function to use when sorting'
    type: String or Function
  return:
    description: ! 'computes a new sorted array based

      on the sort property array or callback function'
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/controllers/array_controller.js
  line: 104
  description: The controller used to wrap items, if any.
  itemtype: property
  name: itemController
  type: String
  default: 'null'
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/array_controller.js
  line: 113
  description: ! "Return the name of the controller to wrap items, or `null` if items
    should\nbe returned directly.  The default implementation simply returns the\n`itemController`
    property, but subclasses can override this method to return\ndifferent controllers
    for different objects.\n\nFor example:\n\n```javascript\nApp.MyArrayController
    = Ember.ArrayController.extend({\n  lookupItemController: function( object ) {\n
    \   if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n
    \   } else {\n      return \"regular\"; // use App.RegularController\n    }\n
    \ }\n});\n```"
  itemtype: method
  name: lookupItemController
  params:
  - name: object
    description: ''
    type: Object
  return:
    description: ''
    type: String
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/controller.js
  line: 23
  description: ! 'The object to which actions from the view should be sent.


    For example, when a Handlebars template uses the `{{action}}` helper,

    it will attempt to send the action to the view''s controller''s `target`.


    By default, a controller''s `target` is set to the router after it is

    instantiated by `Ember.Application#initialize`.'
  itemtype: property
  name: target
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 12
  description: ! "The `property` extension of Javascript's Function prototype is available\nwhen
    `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n`true`, which
    is the default.\n\nComputed properties allow you to treat a function like a property:\n\n```javascript\nMyApp.President
    = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function()
    {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Call
    this flag to mark the function as a property\n  }.property()\n});\n\nvar president
    = MyApp.President.create({\n  firstName: \"Barack\",\n  lastName: \"Obama\"\n});\n\npresident.get('fullName');
    \   // \"Barack Obama\"\n```\n\nTreating a function like a property is useful
    because they can work with\nbindings, just like any other property.\n\nMany computed
    properties have dependencies on other properties. For\nexample, in the above example,
    the `fullName` property depends on\n`firstName` and `lastName` to determine its
    value. You can tell Ember\nabout these dependencies like this:\n\n```javascript\nMyApp.President
    = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function()
    {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell
    Ember.js that this computed property depends on firstName\n    // and lastName\n
    \ }.property('firstName', 'lastName')\n});\n```\n\nMake sure you list these dependencies
    so Ember knows when to update\nbindings that connect to a computed property. Changing
    a dependency\nwill not immediately trigger an update of the computed property,
    but\nwill instead clear the cache so that it is updated when the next `get`\nis
    called on the property.\n\nSee [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html),
    [Ember.computed](/api/#method_computed)."
  itemtype: method
  name: property
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 77
  description: ! "The `observes` extension of Javascript's Function prototype is available\nwhen
    `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which
    is the default.\n\nYou can observe property changes simply by adding the `observes`\ncall
    to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n
    \ valueObserver: function() {\n    // Executes whenever the \"value\" property
    changes\n  }.observes('value')\n});\n```\n\nIn the future this method may become
    asynchronous. If you want to ensure\nsynchronous behavior, use `observesImmediately`.\n\nSee
    `Ember.observer`."
  itemtype: method
  name: observes
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 107
  description: ! "The `observesImmediately` extension of Javascript's Function prototype
    is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function`
    is true, which is the default.\n\nYou can observe property changes simply by adding
    the `observesImmediately`\ncall to the end of your method declarations in classes
    that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver:
    function() {\n    // Executes immediately after the \"value\" property changes\n
    \ }.observesImmediately('value')\n});\n```\n\nIn the future, `observes` may become
    asynchronous. In this event,\n`observesImmediately` will maintain the synchronous
    behavior.\n\nSee `Ember.immediateObserver`."
  itemtype: method
  name: observesImmediately
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 141
  description: ! "The `observesBefore` extension of Javascript's Function prototype
    is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function`
    is true, which is the default.\n\nYou can get notified when a property change
    is about to happen by\nby adding the `observesBefore` call to the end of your
    method\ndeclarations in classes that you write. For example:\n\n```javascript\nEmber.Object.extend({\n
    \ valueObserver: function() {\n    // Executes whenever the \"value\" property
    is about to change\n  }.observesBefore('value')\n});\n```\n\nSee `Ember.beforeObserver`."
  itemtype: method
  name: observesBefore
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 168
  description: ! "The `on` extension of Javascript's Function prototype is available\nwhen
    `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which
    is the default.\n\nYou can listen for events simply by adding the `on` call to
    the end of\nyour method declarations in classes or mixins that you write. For
    example:\n\n```javascript\nEmber.Mixin.create({\n  doSomethingWithElement: function()
    {\n    // Executes whenever the \"didInsertElement\" event fires\n  }.on('didInsertElement')\n});\n```\n\nSee
    `Ember.on`."
  itemtype: method
  name: 'on'
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 23
  description: See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).
  itemtype: method
  name: fmt
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 33
  description: See [Ember.String.w](/api/classes/Ember.String.html#method_w).
  itemtype: method
  name: w
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 43
  description: See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).
  itemtype: method
  name: loc
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 53
  description: See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).
  itemtype: method
  name: camelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 63
  description: See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).
  itemtype: method
  name: decamelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 73
  description: See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).
  itemtype: method
  name: dasherize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 83
  description: See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).
  itemtype: method
  name: underscore
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 93
  description: See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).
  itemtype: method
  name: classify
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 103
  description: See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).
  itemtype: method
  name: capitalize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/mixins/action_handler.js
  line: 22
  access: private
  tagname: ! 'Moves `actions` to `_actions` at extend time. Note that this currently

    modifies the mixin themselves, which is technically dubious but

    is practically of little consequence. This may change in the future.'
  itemtype: method
  name: willMergeMixin
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 51
  description: ! 'Your array must support the `length` property. Your replace methods
    should

    set this property whenever it changes.'
  itemtype: property
  name: length
  type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 59
  description: ! 'Returns the object at the given `index`. If the given `index` is
    negative

    or is greater or equal than the array length, returns `undefined`.


    This is one of the primitives you must implement to support `Ember.Array`.

    If your object supports retrieving the value of an array item using `get()`

    (i.e. `myArray.get(0)`), then you do not need to implement this method

    yourself.


    ```javascript

    var arr = [''a'', ''b'', ''c'', ''d''];

    arr.objectAt(0);   // "a"

    arr.objectAt(3);   // "d"

    arr.objectAt(-1);  // undefined

    arr.objectAt(4);   // undefined

    arr.objectAt(5);   // undefined

    ```'
  itemtype: method
  name: objectAt
  params:
  - name: idx
    description: The index of the item to return.
    type: Number
  return:
    description: item at index or undefined
    type: ! '*'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 86
  description: ! 'This returns the objects at the specified indexes, using `objectAt`.


    ```javascript

    var arr = [''a'', ''b'', ''c'', ''d''];

    arr.objectsAt([0, 1, 2]);  // ["a", "b", "c"]

    arr.objectsAt([2, 3, 4]);  // ["c", "d", undefined]

    ```'
  itemtype: method
  name: objectsAt
  params:
  - name: indexes
    description: An array of indexes of items to return.
    type: Array
  return:
    description: ''
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 109
  description: ! 'This is the handler for the special array content property. If you
    get

    this property, it will return this. If you set this property it a new

    array, it will replace the current content.


    This property overrides the default property defined in `Ember.Enumerable`.'
  itemtype: property
  name: ! '[]'
  return:
    description: this
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 138
  description: ! 'Returns a new array that is a slice of the receiver. This implementation

    uses the observable array methods to retrieve the objects for the new

    slice.


    ```javascript

    var arr = [''red'', ''green'', ''blue''];

    arr.slice(0);       // [''red'', ''green'', ''blue'']

    arr.slice(0, 2);    // [''red'', ''green'']

    arr.slice(1, 100);  // [''green'', ''blue'']

    ```'
  itemtype: method
  name: slice
  params:
  - name: beginIndex
    description: (Optional) index to begin slicing from.
    type: Integer
  - name: endIndex
    description: (Optional) index to end the slice at.
    type: Integer
  return:
    description: New array with specified slice
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 170
  description: ! 'Returns the index of the given object''s first occurrence.

    If no `startAt` argument is given, the starting location to

    search is 0. If it''s negative, will count backward from

    the end of the array. Returns -1 if no match is found.


    ```javascript

    var arr = ["a", "b", "c", "d", "a"];

    arr.indexOf("a");       //  0

    arr.indexOf("z");       // -1

    arr.indexOf("a", 2);    //  4

    arr.indexOf("a", -1);   //  4

    arr.indexOf("b", 3);    // -1

    arr.indexOf("a", 100);  // -1

    ```'
  itemtype: method
  name: indexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 203
  description: ! 'Returns the index of the given object''s last occurrence.

    If no `startAt` argument is given, the search starts from

    the last position. If it''s negative, will count backward

    from the end of the array. Returns -1 if no match is found.


    ```javascript

    var arr = ["a", "b", "c", "d", "a"];

    arr.lastIndexOf("a");       //  4

    arr.lastIndexOf("z");       // -1

    arr.lastIndexOf("a", 2);    //  0

    arr.lastIndexOf("a", -1);   //  4

    arr.lastIndexOf("b", 3);    //  1

    arr.lastIndexOf("a", 100);  //  4

    ```'
  itemtype: method
  name: lastIndexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 240
  description: ! "Adds an array observer to the receiving array. The array observer
    object\nnormally must implement two methods:\n\n* `arrayWillChange(observedObj,
    start, removeCount, addCount)` - This method will be\n  called just before the
    array is modified.\n* `arrayDidChange(observedObj, start, removeCount, addCount)`
    - This method will be\n  called just after the array is modified.\n\nBoth callbacks
    will be passed the observed object, starting index of the\nchange as well a a
    count of the items to be removed and added. You can use\nthese callbacks to optionally
    inspect the array during the change, clear\ncaches, or do any other bookkeeping
    necessary.\n\nIn addition to passing a target, you can also include an options
    hash\nwhich you can use to override the method names that will be invoked on the\ntarget."
  itemtype: method
  name: addArrayObserver
  params:
  - name: target
    description: The observer object.
    type: Object
  - name: opts
    description: ! "Optional hash of configuration options including\n  `willChange`
      and `didChange` option."
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 276
  description: ! 'Removes an array observer from the object if the observer is current

    registered. Calling this method multiple times with the same object will

    have no effect.'
  itemtype: method
  name: removeArrayObserver
  params:
  - name: target
    description: The object observing the array.
    type: Object
  - name: opts
    description: ! "Optional hash of configuration options including\n  `willChange`
      and `didChange` option."
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 299
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: Boolean
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 309
  description: ! 'If you are implementing an object that supports `Ember.Array`, call
    this

    method just before the array content changes to notify any observers and

    invalidate any related properties. Pass the starting index of the change

    as well as a delta of the amounts to change.'
  itemtype: method
  name: arrayContentWillChange
  params:
  - name: startIdx
    description: The starting index in the array that will change.
    type: Number
  - name: removeAmt
    description: ! "The number of items that will be removed. If you\n  pass `null`
      assumes 0"
    type: Number
  - name: addAmt
    description: ! "The number of items that will be added. If you\n  pass `null`
      assumes 0."
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 353
  description: ! 'If you are implementing an object that supports `Ember.Array`, call
    this

    method just after the array content changes to notify any observers and

    invalidate any related properties. Pass the starting index of the change

    as well as a delta of the amounts to change.'
  itemtype: method
  name: arrayContentDidChange
  params:
  - name: startIdx
    description: The starting index in the array that did change.
    type: Number
  - name: removeAmt
    description: ! "The number of items that were removed. If you\n  pass `null` assumes
      0"
    type: Number
  - name: addAmt
    description: ! "The number of items that were added. If you\n  pass `null` assumes
      0."
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 409
  description: ! 'Returns a special object that can be used to observe individual
    properties

    on the array. Just get an equivalent property on this object and it will

    return an enumerable that maps automatically to the named key on the

    member objects.


    If you merely want to watch for any items being added or removed to the array,

    use the `[]` property instead of `@each`.'
  itemtype: property
  name: ! '@each'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/comparable.js
  line: 21
  description: ! 'Override to return the result of the comparison of the two parameters.
    The

    compare method should return:


    - `-1` if `a < b`

    - `0` if `a == b`

    - `1` if `a > b`


    Default implementation raises an exception.'
  itemtype: method
  name: compare
  params:
  - name: a
    description: the first object to compare
    type: Object
  - name: b
    description: the second object to compare
    type: Object
  return:
    description: the result of the comparison
    type: Integer
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 29
  description: ! 'Override to return a copy of the receiver. Default implementation
    raises

    an exception.'
  itemtype: method
  name: copy
  params:
  - name: deep
    description: if `true`, a deep copy of the object should be made
    type: Boolean
  return:
    description: copy of receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 39
  description: ! 'If the object implements `Ember.Freezable`, then this will return
    a new

    copy if the object is not frozen and the receiver if the object is frozen.


    Raises an exception if you try to call this method on a object that does

    not support freezing.


    You should use this method whenever you want a copy of a freezable object

    since a freezable object can simply return itself without actually

    consuming more memory.'
  itemtype: method
  name: frozenCopy
  return:
    description: copy of receiver or receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 19
  description: Add handlers to be called when the Deferred object is resolved or rejected.
  itemtype: method
  name: then
  params:
  - name: resolve
    description: a callback function to be called when done
    type: Function
  - name: reject
    description: a callback function to be called when failed
    type: Function
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 44
  description: Resolve a Deferred object and call any `doneCallbacks` with the given
    args.
  itemtype: method
  name: resolve
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 62
  description: Reject a Deferred object and call any `failCallbacks` with the given
    args.
  itemtype: method
  name: reject
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 74
  description: ! 'Implement this method to make your class enumerable.


    This method will be call repeatedly during enumeration. The index value

    will always begin with 0 and increment monotonically. You don''t have to

    rely on the index value to determine what object to return, but you should

    always check the value and start from the beginning when you see the

    requested index is 0.


    The `previousObject` is the object that was returned from the last call

    to `nextObject` for the current iteration. This is a useful way to

    manage iteration if you are tracing a linked list, for example.


    Finally the context parameter will always contain a hash you can use as

    a "scratchpad" to maintain any other state you need in order to iterate

    properly. The context object is reused and is not reset between

    iterations so make sure you setup the context with a fresh state whenever

    the index parameter is 0.


    Generally iterators will continue to call `nextObject` until the index

    reaches the your current length-1. If you run out of data before this

    time for some reason, you should simply return undefined.


    The default implementation of this method simply looks up the index.

    This works great on any Array-like objects.'
  itemtype: method
  name: nextObject
  params:
  - name: index
    description: the current index of the iteration
    type: Number
  - name: previousObject
    description: ! "the value returned by the last call to\n  `nextObject`."
    type: Object
  - name: context
    description: a context object you can use to maintain state.
    type: Object
  return:
    description: the next object in the iteration or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 109
  description: ! 'Helper method returns the first object from a collection. This is
    usually

    used by bindings and other parts of the framework to extract a single

    object if the enumerable contains only one item.


    If you override this method, you should implement it so that it will

    always return the same value each time it is called. If your enumerable

    contains only one object, this method should always return that object.

    If your enumerable is empty, this method should return `undefined`.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.get(''firstObject'');  // "a"


    var arr = [];

    arr.get(''firstObject'');  // undefined

    ```'
  itemtype: property
  name: firstObject
  return:
    description: the object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 140
  description: ! 'Helper method returns the last object from a collection. If your
    enumerable

    contains only one object, this method should always return that object.

    If your enumerable is empty, this method should return `undefined`.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.get(''lastObject'');  // "c"


    var arr = [];

    arr.get(''lastObject'');  // undefined

    ```'
  itemtype: property
  name: lastObject
  return:
    description: the last object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 168
  description: ! 'Returns `true` if the passed object can be found in the receiver.
    The

    default version will iterate through the enumerable until the object

    is found. You may want to override this with a more efficient version.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.contains("a"); // true

    arr.contains("z"); // false

    ```'
  itemtype: method
  name: contains
  params:
  - name: obj
    description: The object to search for.
    type: Object
  return:
    description: ! '`true` if object is found in enumerable.'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 187
  description: ! 'Iterates through the enumerable, calling the passed function on
    each

    item. This method corresponds to the `forEach()` method defined in

    JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 228
  description: Alias for `mapBy`
  itemtype: method
  name: getEach
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 239
  description: ! 'Sets the value on the named property for each member. This is more

    efficient than using other methods defined on this helper. If the object

    implements Ember.Observable, the value will be changed to `set(),` otherwise

    it will be set directly. `null` objects are skipped.'
  itemtype: method
  name: setEach
  params:
  - name: key
    description: The key to set
    type: String
  - name: value
    description: The object to set
    type: Object
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 256
  description: ! 'Maps all of the items in the enumeration to another value, returning

    a new array. This method corresponds to `map()` defined in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the mapped value.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: map
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 290
  description: ! 'Similar to map, this specialized function returns the value of the
    named

    property on all items in the enumeration.'
  itemtype: method
  name: mapBy
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 304
  description: ! 'Similar to map, this specialized function returns the value of the
    named

    property on all items in the enumeration.'
  itemtype: method
  name: mapProperty
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  deprecated: true
  deprecationMessage: Use `mapBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 316
  description: ! 'Returns an array with all of the items in the enumeration that the
    passed

    function returns true for. This method corresponds to `filter()` defined in

    JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: filter
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 352
  description: ! "Returns an array with all of the items in the enumeration where
    the passed\nfunction returns false for. This method is the inverse of filter().\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nIt should return the a falsey
    value to include the item in the results.\n\nNote that in addition to a callback,
    you can also pass an optional target\nobject that will be set as \"this\" on the
    context. This is a good way\nto give your iterator function access to the current
    object."
  itemtype: method
  name: reject
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A rejected array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 382
  description: ! 'Returns an array with just the items with the matched property.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.'
  itemtype: method
  name: filterBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 396
  description: ! 'Returns an array with just the items with the matched property.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.'
  itemtype: method
  name: filterProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  deprecated: true
  deprecationMessage: Use `filterBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 409
  description: ! 'Returns an array with the items that do not have truthy values for

    key.  You can pass an optional second argument with the target value.  Otherwise

    this will match any property that evaluates to false.'
  itemtype: method
  name: rejectBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 427
  description: ! 'Returns an array with the items that do not have truthy values for

    key.  You can pass an optional second argument with the target value.  Otherwise

    this will match any property that evaluates to false.'
  itemtype: method
  name: rejectProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  deprecated: true
  deprecationMessage: Use `rejectBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 440
  description: ! 'Returns the first item in the array for which the callback returns
    true.

    This method works similar to the `filter()` method defined in JavaScript 1.6

    except that it will stop working on the array once a match is found.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: find
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: Found item or `undefined`.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 484
  description: ! 'Returns the first item with a property matching the passed value.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.


    This method works much like the more generic `find()` method.'
  itemtype: method
  name: findBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 500
  description: ! 'Returns the first item with a property matching the passed value.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.


    This method works much like the more generic `find()` method.'
  itemtype: method
  name: findProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  deprecated: true
  deprecationMessage: Use `findBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 515
  description: ! 'Returns `true` if the passed function returns true for every item
    in the

    enumeration. This corresponds with the `every()` method in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` or `false`.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.


    Example Usage:


    ```javascript

    if (people.every(isEngineer)) { Paychecks.addBigBonus(); }

    ```'
  itemtype: method
  name: every
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 553
  description: ! 'Returns `true` if the passed property resolves to `true` for all
    items in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: everyBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 566
  description: ! 'Returns `true` if the passed property resolves to `true` for all
    items in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: everyProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  deprecated: true
  deprecationMessage: Use `everyBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 578
  description: ! 'Returns `true` if the passed function returns true for any item
    in the

    enumeration. This corresponds with the `some()` method in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.


    Usage Example:


    ```javascript

    if (people.any(isManager)) { Paychecks.addBiggerBonus(); }

    ```'
  itemtype: method
  name: any
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ! '`true` if the passed function returns `true` for any item'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 617
  description: ! 'Returns `true` if the passed function returns true for any item
    in the

    enumeration. This corresponds with the `some()` method in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.


    Usage Example:


    ```javascript

    if (people.some(isManager)) { Paychecks.addBiggerBonus(); }

    ```'
  itemtype: method
  name: some
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ! '`true` if the passed function returns `true` for any item'
    type: Boolean
  deprecated: true
  deprecationMessage: Use `any` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 653
  description: ! 'Returns `true` if the passed property resolves to `true` for any
    item in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: anyBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ! '`true` if the passed function returns `true` for any item'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 666
  description: ! 'Returns `true` if the passed property resolves to `true` for any
    item in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: someProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ! '`true` if the passed function returns `true` for any item'
    type: Boolean
  deprecated: true
  deprecationMessage: Use `anyBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 678
  description: ! 'This will combine the values of the enumerator into a single value.
    It

    is a useful way to collect a summary value from an enumeration. This

    corresponds to the `reduce()` method defined in JavaScript 1.8.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(previousValue, item, index, enumerable);

    ```


    - `previousValue` is the value returned by the last call to the iterator.

    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    Return the new cumulative value.


    In addition to the callback you can also pass an `initialValue`. An error

    will be raised if you do not pass an initial value and the enumerator is

    empty.


    Note that unlike the other methods, this method does not allow you to

    pass a target object to set as this for the callback. It''s part of the

    spec. Sorry.'
  itemtype: method
  name: reduce
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: initialValue
    description: Initial value for the reduce
    type: Object
  - name: reducerProperty
    description: internal use only.
    type: String
  return:
    description: The reduced value.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 723
  description: ! 'Invokes the named method on every object in the receiver that

    implements it. This method corresponds to the implementation in

    Prototype 1.6.'
  itemtype: method
  name: invoke
  params:
  - name: methodName
    description: the name of the method
    type: String
  - name: args
    description: optional arguments to pass as well.
    type: Object...
  return:
    description: return values from calling invoke.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 747
  description: ! 'Simply converts the enumerable into a genuine array. The order is
    not

    guaranteed. Corresponds to the method implemented by Prototype.'
  itemtype: method
  name: toArray
  return:
    description: the enumerable as an array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 760
  description: ! 'Returns a copy of the array with all null and undefined elements
    removed.


    ```javascript

    var arr = ["a", null, "c", undefined];

    arr.compact();  // ["a", "c"]

    ```'
  itemtype: method
  name: compact
  return:
    description: the array without null and undefined elements.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 775
  description: ! 'Returns a new enumerable that excludes the passed value. The default

    implementation returns an array regardless of the receiver type unless

    the receiver does not contain the value.


    ```javascript

    var arr = ["a", "b", "a", "c"];

    arr.without("a");  // ["b", "c"]

    ```'
  itemtype: method
  name: without
  params:
  - name: value
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 798
  description: ! 'Returns a new enumerable that contains only unique values. The default

    implementation returns an array regardless of the receiver type.


    ```javascript

    var arr = ["a", "a", "b", "b"];

    arr.uniq();  // ["a", "b"]

    ```'
  itemtype: method
  name: uniq
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 818
  description: ! 'This property will trigger anytime the enumerable''s content changes.

    You can observe this property to be notified of changes to the enumerables

    content.


    For plain enumerables, this property is read only. `Ember.Array` overrides

    this method.'
  itemtype: property
  name: ! '[]'
  type: Ember.Array
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 838
  description: ! 'Registers an enumerable observer. Must implement `Ember.EnumerableObserver`

    mixin.'
  itemtype: method
  name: addEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 859
  description: Removes a registered enumerable observer.
  itemtype: method
  name: removeEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 879
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: hasEnumerableObservers
  type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 891
  description: ! 'Invoke this method just before the contents of your enumerable will

    change. You can either omit the parameters completely or pass the objects

    to be removed or added if available or just a count.'
  itemtype: method
  name: enumerableContentWillChange
  params:
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to be\n  added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 927
  description: ! 'Invoke this method when the contents of your enumerable has changed.

    This will notify any observers watching for content changes. If your are

    implementing an ordered enumerable (such as an array), also pass the

    start and end values where the content changed so that it can be used to

    notify range observers.'
  itemtype: method
  name: enumerableContentDidChange
  params:
  - name: start
    description: ! "optional start offset for the content change.\n  For unordered
      enumerables, you should always pass -1."
    type: Number
    optional: true
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to\n  be added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 43
  description: ! "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad',
    function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target
    can be passed in as the 2nd argument that will\nbe set as the \"this\" for the
    callback. This is a good way to give your\nfunction access to the object triggering
    the event. When the target\nparameter is used the callback becomes the third argument."
  itemtype: method
  name: 'on'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 68
  description: ! 'Subscribes a function to a named event and then cancels the subscription

    after the first time the event is triggered. It is good to use ``one`` when

    you only care about the first time an event has taken place.


    This function takes an optional 2nd argument that will become the "this"

    value for the callback. If this argument is passed then the 3rd argument

    becomes the function.'
  itemtype: method
  name: one
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 93
  description: ! "Triggers a named event for the object. Any additional arguments\nwill
    be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat',
    function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat',
    'broccoli');\n\n// outputs: person ate some broccoli\n```"
  itemtype: method
  name: trigger
  params:
  - name: name
    description: The name of the event
    type: String
  - name: args
    description: Optional arguments to pass on
    type: Object...
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 119
  description: Cancels subscription for given name, target, and method.
  itemtype: method
  name: 'off'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The target of the subscription
    type: Object
  - name: method
    description: The function of the subscription
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 133
  description: Checks to see if object has any subscriptions for named event.
  itemtype: method
  name: has
  params:
  - name: name
    description: The name of the event
    type: String
  return:
    description: does the object have a subscription for event
    type: Boolean
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 67
  description: ! 'Set to `true` when the object is frozen. Use this property to detect

    whether your object is frozen or not.'
  itemtype: property
  name: isFrozen
  type: Boolean
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 76
  description: ! 'Freezes the object. Once this method has been called the object
    should

    no longer allow any properties to be edited.'
  itemtype: method
  name: freeze
  return:
    description: receiver
    type: Object
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 38
  description: ! '__Required.__ You must implement this method to apply this mixin.


    This is one of the primitives you must implement to support `Ember.Array`.

    You should replace amt objects started at idx with the objects in the

    passed array. You should also call `this.enumerableContentDidChange()`'
  itemtype: method
  name: replace
  params:
  - name: idx
    description: ! "Starting index in the array to replace. If\n  idx >= length, then
      append to the end of the array."
    type: Number
  - name: amt
    description: ! "Number of elements that should be removed from\n  the array, starting
      at *idx*."
    type: Number
  - name: objects
    description: ! "An array of zero or more objects that should be\n  inserted into
      the array at *idx*"
    type: Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 55
  description: ! 'Remove all elements from self. This is useful if you

    want to reuse an existing array without having to recreate it.


    ```javascript

    var colors = ["red", "green", "blue"];

    color.length();   //  3

    colors.clear();   //  []

    colors.length();  //  0

    ```'
  itemtype: method
  name: clear
  return:
    description: An empty Array.
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 76
  description: ! 'This will use the primitive `replace()` method to insert an object
    at the

    specified index.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.insertAt(2, "yellow");  // ["red", "green", "yellow", "blue"]

    colors.insertAt(5, "orange");  // Error: Index out of range

    ```'
  itemtype: method
  name: insertAt
  params:
  - name: idx
    description: index of insert the object at.
    type: Number
  - name: object
    description: object to insert
    type: Object
  return:
    description: this
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 97
  description: ! 'Remove an object at the specified index using the `replace()` primitive

    method. You can pass either a single index, or a start and a length.


    If you pass a start and length that is beyond the

    length this method will throw an `OUT_OF_RANGE_EXCEPTION`


    ```javascript

    var colors = ["red", "green", "blue", "yellow", "orange"];

    colors.removeAt(0);     // ["green", "blue", "yellow", "orange"]

    colors.removeAt(2, 2);  // ["green", "blue"]

    colors.removeAt(4, 2);  // Error: Index out of range

    ```'
  itemtype: method
  name: removeAt
  params:
  - name: start
    description: index, start of range
    type: Number
  - name: len
    description: length of passing range
    type: Number
  return:
    description: receiver
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 131
  description: ! 'Push the object onto the end of the array. Works just like `push()`
    but it

    is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.pushObject("black");               // ["red", "green", "blue", "black"]

    colors.pushObject(["yellow", "orange"]);  // ["red", "green", "blue", "black",
    ["yellow", "orange"]]

    ```'
  itemtype: method
  name: pushObject
  params:
  - name: obj
    description: object to push
    type: ! '*'
  return:
    description: the same obj passed as param
    type: ! '*'
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 150
  description: ! 'Add the objects in the passed numerable to the end of the array.
    Defers

    notifying observers of the change until all objects are added.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.pushObjects(["black"]);               // ["red", "green", "blue", "black"]

    colors.pushObjects(["yellow", "orange"]);  // ["red", "green", "blue", "black",
    "yellow", "orange"]

    ```'
  itemtype: method
  name: pushObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 172
  description: ! 'Pop object from array or nil if none are left. Works just like `pop()`
    but

    it is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.popObject();   // "blue"

    console.log(colors);  // ["red", "green"]

    ```'
  itemtype: method
  name: popObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 194
  description: ! 'Shift an object from start of array or nil if none are left. Works
    just

    like `shift()` but it is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.shiftObject();  // "red"

    console.log(colors);   // ["green", "blue"]

    ```'
  itemtype: method
  name: shiftObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 214
  description: ! 'Unshift an object to start of array. Works just like `unshift()`
    but it is

    KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.unshiftObject("yellow");             // ["yellow", "red", "green", "blue"]

    colors.unshiftObject(["black", "white"]);   // [["black", "white"], "yellow",
    "red", "green", "blue"]

    ```'
  itemtype: method
  name: unshiftObject
  params:
  - name: obj
    description: object to unshift
    type: ! '*'
  return:
    description: the same obj passed as param
    type: ! '*'
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 233
  description: ! 'Adds the named objects to the beginning of the array. Defers notifying

    observers until all objects have been added.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.unshiftObjects(["black", "white"]);   // ["black", "white", "red", "green",
    "blue"]

    colors.unshiftObjects("yellow");             // Type Error: ''undefined'' is not
    a function

    ```'
  itemtype: method
  name: unshiftObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 252
  description: ! 'Reverse objects in the array. Works just like `reverse()` but it
    is

    KVO-compliant.'
  itemtype: method
  name: reverseObjects
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 267
  description: ! 'Replace all the the receiver''s content with content of the argument.

    If argument is an empty array receiver will be cleared.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.setObjects(["black", "white"]);  // ["black", "white"]

    colors.setObjects([]);                  // []

    ```'
  itemtype: method
  name: setObjects
  params:
  - name: objects
    description: ! "array whose content will be used for replacing\n    the content
      of the receiver"
    type: Ember.Array
  return:
    description: receiver with the new content
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 51
  description: ! '__Required.__ You must implement this method to apply this mixin.


    Attempts to add the passed object to the receiver if the object is not

    already present in the collection. If the object is present, this method

    has no effect.


    If the passed object is of a type not supported by the receiver,

    then this method should raise an exception.'
  itemtype: method
  name: addObject
  params:
  - name: object
    description: The object to add to the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 67
  description: Adds each object in the passed enumerable to the receiver.
  itemtype: method
  name: addObjects
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 81
  description: ! '__Required.__ You must implement this method to apply this mixin.


    Attempts to remove the passed object from the receiver collection if the

    object is present in the collection. If the object is not present,

    this method has no effect.


    If the passed object is of a type not supported by the receiver,

    then this method should raise an exception.'
  itemtype: method
  name: removeObject
  params:
  - name: object
    description: The object to remove from the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 98
  description: Removes each object in the passed enumerable from the receiver.
  itemtype: method
  name: removeObjects
  params:
  - name: objects
    description: the objects to remove
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 78
  description: ! "Retrieves the value of a property from the object.\n\nThis method
    is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it
    supports both computed properties and the unknownProperty\nhandler.\n\nBecause
    `get` unifies the syntax for accessing all these kinds\nof properties, it can
    make many refactorings easier, such as replacing a\nsimple property with a computed
    property, or vice versa.\n\n### Computed Properties\n\nComputed properties are
    methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nfullName:
    function() {\n  return this.getEach('firstName', 'lastName').compact().join('
    ');\n}.property('firstName', 'lastName')\n```\n\nWhen you call `get` on a computed
    property, the function will be\ncalled and the return value will be returned instead
    of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to
    call `get` on a property whose value is\n`undefined`, the `unknownProperty()`
    method will be called on the object.\nIf this method returns any value other than
    `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\"
    properties that are\nnot defined upfront."
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The property to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 120
  description: ! 'To get multiple properties at once, call `getProperties`

    with a list of strings or an array:


    ```javascript

    record.getProperties(''firstName'', ''lastName'', ''zipCode'');  // { firstName:
    ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```


    is equivalent to:


    ```javascript

    record.getProperties([''firstName'', ''lastName'', ''zipCode'']);  // { firstName:
    ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```'
  itemtype: method
  name: getProperties
  params:
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 142
  description: ! 'Sets the provided key or path to the value.


    This method is generally very similar to calling `object[key] = value` or

    `object.key = value`, except that it provides support for computed

    properties, the `setUnknownProperty()` method and property observers.


    ### Computed Properties


    If you try to set a value on a key that has a computed property handler

    defined (see the `get()` method for an example), then `set()` will call

    that method, passing both the value and key instead of simply changing

    the value itself. This is useful for those times when you need to

    implement a property that is composed of one or more member

    properties.


    ### Unknown Properties


    If you try to set a value on a key that is undefined in the target

    object, then the `setUnknownProperty()` handler will be called instead. This

    gives you an opportunity to implement complex "virtual" properties that

    are not predefined on the object. If `setUnknownProperty()` returns

    undefined, then `set()` will simply set the value on the object.


    ### Property Observers


    In addition to changing the property, `set()` will also register a property

    change with the object. Unless you have placed this call inside of a

    `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers

    (i.e. observer methods declared on the same object), will be called

    immediately. Any "remote" observers (i.e. observer methods declared on

    another object) will be placed in a queue and called at a later time in a

    coalesced manner.


    ### Chaining


    In addition to property changes, `set()` returns the value of the object

    itself so you can do chaining like this:


    ```javascript

    record.set(''firstName'', ''Charles'').set(''lastName'', ''Jolley'');

    ```'
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The property to set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 195
  description: ! 'To set multiple properties at once, call `setProperties`

    with a Hash:


    ```javascript

    record.setProperties({ firstName: ''Charles'', lastName: ''Jolley'' });

    ```'
  itemtype: method
  name: setProperties
  params:
  - name: hash
    description: the hash of keys and values to set
    type: Hash
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 211
  description: ! 'Begins a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call this

    method at the beginning of the changes to begin deferring change

    notifications. When you are done making changes, call

    `endPropertyChanges()` to deliver the deferred change notifications and end

    deferring.'
  itemtype: method
  name: beginPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 230
  description: ! 'Ends a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call

    `beginPropertyChanges()` at the beginning of the changes to defer change

    notifications. When you are done making changes, call this method to

    deliver the deferred change notifications and end deferring.'
  itemtype: method
  name: endPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 248
  description: ! 'Notify the observer system that a property is about to change.


    Sometimes you need to change a value directly or indirectly without

    actually calling `get()` or `set()` on it. In this case, you can use this

    method and `propertyDidChange()` instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call `propertyWillChange` and `propertyDidChange`

    as a pair. If you do not, it may get the property change groups out of

    order and cause notifications to be delivered more often than you would

    like.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: keyName
    description: The property key that is about to change.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 271
  description: ! 'Notify the observer system that a property has just changed.


    Sometimes you need to change a value directly or indirectly without

    actually calling `get()` or `set()` on it. In this case, you can use this

    method and `propertyWillChange()` instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call `propertyWillChange` and `propertyDidChange`

    as a pair. If you do not, it may get the property change groups out of

    order and cause notifications to be delivered more often than you would

    like.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: keyName
    description: The property key that has just changed.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 294
  description: ! 'Convenience method to call `propertyWillChange` and `propertyDidChange`
    in

    succession.'
  itemtype: method
  name: notifyPropertyChange
  params:
  - name: keyName
    description: The property key to be notified about.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 312
  description: ! 'Adds an observer on a property.


    This is the core method used to register an observer for a property.


    Once you call this method, any time the key''s value is set, your observer

    will be notified. Note that the observers are triggered any time the

    value is set, regardless of whether it has actually changed. Your

    observer should be prepared to handle that.


    You can also pass an optional context parameter to this method. The

    context will be passed to your observer method whenever it is triggered.

    Note that if you add the same target/method pair on a key multiple times

    with different context parameters, your observer will only be called once

    with the last context you passed.


    ### Observer Methods


    Observer methods you pass should generally have the following signature if

    you do not pass a `context` parameter:


    ```javascript

    fooDidChange: function(sender, key, value, rev) { };

    ```


    The sender is the object that changed. The key is the property that

    changes. The value property is currently reserved and unused. The rev

    is the last property revision of the object when it changed, which you can

    use to detect if the key value has really changed or not.


    If you pass a `context` parameter, the context will be passed before the

    revision like so:


    ```javascript

    fooDidChange: function(sender, key, value, context, rev) { };

    ```


    Usually you will not need the value, context or revision parameters at

    the end. In this case, it is common to write observer methods that take

    only a sender and key value as parameters or, if you aren''t interested in

    any of these values, to write an observer that has no parameters at all.'
  itemtype: method
  name: addObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: self
    type: Ember.Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 364
  description: ! 'Remove an observer you have previously registered on this object.
    Pass

    the same key, target, and method you passed to `addObserver()` and your

    target will no longer receive notifications.'
  itemtype: method
  name: removeObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: receiver
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 379
  description: ! 'Returns `true` if the object currently has observers registered
    for a

    particular key. You can use this method to potentially defer performing

    an expensive action until someone begins observing a particular property

    on the object.'
  itemtype: method
  name: hasObserverFor
  params:
  - name: key
    description: Key to check
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 393
  deprecated: true
  itemtype: method
  name: getPath
  params:
  - name: path
    description: The property path to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 404
  deprecated: true
  itemtype: method
  name: setPath
  params:
  - name: path
    description: The path to the property that will be set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 416
  description: ! 'Retrieves the value of a property, or a default value in the case
    that the

    property returns `undefined`.


    ```javascript

    person.getWithDefault(''lastName'', ''Doe'');

    ```'
  itemtype: method
  name: getWithDefault
  params:
  - name: keyName
    description: The name of the property to retrieve
    type: String
  - name: defaultValue
    description: The value to return if the property value is undefined
    type: Object
  return:
    description: The property value or the defaultValue.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 433
  description: ! 'Set the value of a property to the current value plus some amount.


    ```javascript

    person.incrementProperty(''age'');

    team.incrementProperty(''score'', 2);

    ```'
  itemtype: method
  name: incrementProperty
  params:
  - name: keyName
    description: The name of the property to increment
    type: String
  - name: increment
    description: The amount to increment by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 453
  description: ! 'Set the value of a property to the current value minus some amount.


    ```javascript

    player.decrementProperty(''lives'');

    orc.decrementProperty(''health'', 5);

    ```'
  itemtype: method
  name: decrementProperty
  params:
  - name: keyName
    description: The name of the property to decrement
    type: String
  - name: decrement
    description: The amount to decrement by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 473
  description: ! 'Set the value of a boolean property to the opposite of it''s

    current value.


    ```javascript

    starship.toggleProperty(''warpDriveEngaged'');

    ```'
  itemtype: method
  name: toggleProperty
  params:
  - name: keyName
    description: The name of the property to toggle
    type: String
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 490
  description: ! 'Returns the cached value of a computed property, if it exists.

    This allows you to inspect the value of a computed property

    without accidentally invoking it if it is intended to be

    generated lazily.'
  itemtype: method
  name: cacheFor
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The cached value of the computed property, if any
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 62
  description: ! 'Specifies which properties dictate the arrangedContent''s sort order.


    When specifying multiple properties the sorting will use properties

    from the `sortProperties` array prioritized from first to last.'
  itemtype: property
  name: sortProperties
  type: Array
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 72
  description: Specifies the arrangedContent's sort direction
  itemtype: property
  name: sortAscending
  type: Boolean
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 79
  description: ! "The function used to compare two values. You can override this if
    you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort,
    i.e.\n  return 0 if the two parameters are equal,\n  return a negative value if
    the first parameter is smaller than the second or\n  return a positive value otherwise:\n\n```javascript\nfunction(x,y)
    { // These are assumed to be integers\n  if (x === y)\n    return 0;\n  return
    x < y ? -1 : 1;\n}\n```"
  itemtype: property
  name: sortFunction
  type: ! '{Function}'
  default: Ember.compare
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 138
  description: ! 'Overrides the default arrangedContent from arrayProxy in order to
    sort by sortFunction.

    Also sets up observers for each sortProperty on each item in the content Array.'
  itemtype: property
  name: arrangedContent
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/target_action_support.js
  line: 51
  description: ! "Send an \"action\" with an \"actionContext\" to a \"target\". The
    action, actionContext\nand target will be retrieved from properties of the object.
    For example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport,
    {\n  target: Ember.computed.alias('controller'),\n  action: 'save',\n  actionContext:
    Ember.computed.alias('context'),\n  click: function() {\n    this.triggerAction();
    // Sends the `save` action, along with the current context\n                          //
    to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext`
    can be provided as properties of\nan optional object argument to `triggerAction`
    as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport,
    {\n  click: function() {\n    this.triggerAction({\n      action: 'save',\n      target:
    this.get('controller'),\n      actionContext: this.get('context'),\n    }); //
    Sends the `save` action, along with the current context\n        // to the current
    controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you mixing
    `TargetActionSupport` into.\nBut `target` and `action` must be specified either
    as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nApp.SaveButtonView
    = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n
    \ click: function() {\n    this.triggerAction({\n      action: 'save'\n    });
    // Sends the `save` action, along with a reference to `this`,\n        // to the
    current controller\n  }\n});\n```"
  itemtype: method
  name: triggerAction
  params:
  - name: opts
    description: (optional, with the optional keys action, target and/or actionContext)
    type: Hash
  return:
    description: true if the action was sent successfully and did not return false
    type: Boolean
  class: Ember.TargetActionSupport
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 54
  description: ! 'The content array. Must be an object that implements `Ember.Array`
    and/or

    `Ember.MutableArray.`'
  itemtype: property
  name: content
  type: Ember.Array
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 63
  description: ! 'The array that the proxy pretends to be. In the default `ArrayProxy`

    implementation, this and `content` are the same. Subclasses of `ArrayProxy`

    can override this property to provide things like sorting and filtering.'
  itemtype: property
  name: arrangedContent
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 72
  description: ! 'Should actually retrieve the object at the specified index from
    the

    content. You can override this method in subclasses to transform the

    content item to something new.


    This method will only be called if content is non-`null`.'
  itemtype: method
  name: objectAtContent
  params:
  - name: idx
    description: The index to retrieve.
    type: Number
  return:
    description: the value or undefined if none found
    type: Object
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 87
  description: ! 'Should actually replace the specified objects on the content array.

    You can override this method in subclasses to transform the content item

    into something new.


    This method will only be called if content is non-`null`.'
  itemtype: method
  name: replaceContent
  params:
  - name: idx
    description: The starting index
    type: Number
  - name: amt
    description: The number of items to remove from the content.
    type: Number
  - name: objects
    description: ! "Optional array of objects to insert or null if no\n  objects."
    type: Array
  return:
    description: ''
    type: Void
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 105
  access: private
  tagname: ! 'Invoked when the content property is about to change. Notifies observers
    that the

    entire array content will change.'
  itemtype: method
  name: _contentWillChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 131
  access: private
  tagname: ! 'Invoked when the content property changes. Notifies observers that the

    entire array content has changed.'
  itemtype: method
  name: _contentDidChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 171
  description: ! "An overridable method called when objects are instantiated. By default,\ndoes
    nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  init: function() {\n    this._super();\n    alert('Name
    is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name:
    \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override
    `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be
    sure to call `this._super()` in your\n`init` declaration! If you don't, Ember
    may not have an opportunity to\ndo important setup work, and you'll see strange
    behavior in your\napplication."
  itemtype: method
  name: init
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 202
  description: ! "Defines the properties that will be concatenated from the superclass\n(instead
    of overridden).\n\nBy default, when you extend an Ember class a property defined
    in\nthe subclass overrides a property with the same name that is defined\nin the
    superclass. However, there are some cases where it is preferable\nto build up
    a property's value by combining the superclass' property\nvalue with the subclass'
    value. An example of this in use within Ember\nis the `classNames` property of
    `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty
    and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty:
    ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n
    \ someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo'],\n});\n\nvar fooBarView
    = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); //
    ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis
    behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar
    view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames:
    ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames');
    // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is
    not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n
    \ classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo',
    'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell to Ember
    that mix\nthe content of the properties.\n\nIn `Ember.View` the `classNameBindings`
    and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis
    feature is available for you to use throughout the Ember object model,\nalthough
    typical app developers are likely to use it infrequently."
  itemtype: property
  name: concatenatedProperties
  type: Array
  default: 'null'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 267
  description: ! 'Destroyed object property flag.


    if this property is `true` the observers and bindings were already

    removed by the effect of calling the `destroy()` method.'
  itemtype: property
  name: isDestroyed
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 278
  description: ! 'Destruction scheduled flag. The `destroy()` method has been called.


    The object stays intact until the end of the run loop at which point

    the `isDestroyed` flag is set.'
  itemtype: property
  name: isDestroying
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 289
  description: ! 'Destroys an object by setting the `isDestroyed` flag and removing
    its

    metadata, which effectively destroys observers and bindings.


    If you try to set a property on a destroyed object, an exception will be

    raised.


    Note that destruction is scheduled for the end of the run loop and does not

    happen immediately.  It will set an isDestroying flag immediately.'
  itemtype: method
  name: destroy
  return:
    description: receiver
    type: Ember.Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 311
  description: Override to implement teardown.
  itemtype: method
  name: willDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 318
  access: private
  tagname: ! 'Invoked by the run loop to actually destroy the object. This is

    scheduled for execution by the `destroy` method.'
  itemtype: method
  name: _scheduledDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 338
  description: ! "Returns a string representation which attempts to provide more information\nthan
    Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n
    \   App.Person = Em.Object.extend()\n    person = App.Person.create()\n    person.toString()
    //=> \"<App.Person:ember1024>\"\n\nIf the object's class is not defined on an
    Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n
    \   Student = App.Person.extend()\n    student = Student.create()\n    student.toString()
    //=> \"<(subclass of App.Person):ember1025>\"\n\nIf the method `toStringExtension`
    is defined, its return value will be\nincluded in the output.\n\n    App.Teacher
    = App.Person.extend({\n      toStringExtension: function() {\n        return this.get('fullName');\n
    \     }\n    });\n    teacher = App.Teacher.create()\n    teacher.toString();
    //=> \"<App.Teacher:ember1026:Tom Dale>\""
  itemtype: method
  name: toString
  return:
    description: string representation
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 421
  description: ! 'Equivalent to doing `extend(arguments).create()`.

    If possible use the normal `create` method instead.'
  itemtype: method
  name: createWithMixins
  static: 1
  params:
  - name: arguments
    description: ''
    optional: true
    multiple: true
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 435
  description: ! "Creates an instance of a class. Accepts either no arguments, or
    an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is
    \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom
    Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create`
    will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf
    no arguments are passed to `create`, it will not set values to the new\ninstance
    during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld();
    // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare
    methods or computed\nproperties during `create`. You should instead declare methods
    and computed\nproperties when using `extend` or use the `createWithMixins` shorthand."
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    optional: true
    multiple: true
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 478
  description: ! "Augments a constructor's prototype with additional\n    properties
    and functions:\n```javascript\n    MyObject = Ember.Object.extend({\n      name:
    'an object'\n    });\n\n    o = MyObject.create();\n    o.get('name'); // 'an
    object'\n\n    MyObject.reopen({\n      say: function(msg){\n        console.log(msg);\n
    \     }\n    })\n\n    o2 = MyObject.create();\n    o2.say(\"hello\"); // logs
    \"hello\"\n\n    o.say(\"goodbye\"); // logs \"goodbye\"\n    ```\nTo add functions
    and properties to the constructor itself,\n    see `reopenClass`"
  itemtype: method
  name: reopen
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 514
  description: ! "Augments a constructor's own properties and functions:\n\n```javascript\nMyObject
    = Ember.Object.extend({\n  name: 'an object'\n});\n\n\nMyObject.reopenClass({\n
    \ canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nTo
    add functions and properties to instances of\na constructor by extending the constructor's
    prototype\nsee `reopen`"
  itemtype: method
  name: reopenClass
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 556
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For\nexample,
    computed property functions may close over variables that are then\nno longer
    available for introspection.\n\nYou can pass a hash of these values to a computed
    property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n
    \ return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person
    })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty
    from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis
    will return the original hash that was passed to `meta()`."
  itemtype: method
  name: metaForProperty
  params:
  - name: key
    description: property name
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 590
  description: ! 'Iterate over each computed property for the class, passing its name

    and any associated metadata (see `metaForProperty`) to the callback.'
  itemtype: method
  name: eachComputedProperty
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/each_proxy.js
  line: 99
  description: ! 'You can directly access mapped properties by simply requesting them.

    The `unknownProperty` handler will generate an EachArray of each item.'
  itemtype: method
  name: unknownProperty
  params:
  - name: keyName
    description: ''
    type: String
  - name: value
    description: ''
    type: ! '*'
  class: Ember.EachProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 11
  description: ! "Detects when a specific package of Ember (e.g. 'Ember.Handlebars')\nhas
    fully loaded and is available for extension.\nThe provided `callback` will be
    called with the `name` passed\nresolved from a string into the object:\n```javascript\nEmber.onLoad('Ember.Handlebars'
    function(hbars){\n  hbars.registerHelper(...);\n});\n```"
  itemtype: method
  name: onLoad
  params:
  - name: name
    description: name of hook
    type: String
  - name: callback
    description: callback to be called
    type: Function
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 42
  description: ! 'Called when an Ember.js package (e.g Ember.Handlebars) has finished

    loading. Triggers any callbacks registered for this event.'
  itemtype: method
  name: runLoadHooks
  params:
  - name: name
    description: name of hook
    type: String
  - name: object
    description: object to pass to callbacks
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 124
  description: ! "Creates an `Ember.NativeArray` from an Array like object.\nDoes
    not modify the original object. Ember.A is not needed if\n`Ember.EXTEND_PROTOTYPES`
    is `true` (the default value). However,\nit is recommended that you use Ember.A
    when creating addons for\nember or when you can not garentee that `Ember.EXTEND_PROTOTYPES`\nwill
    be `true`.\n\nExample\n\n```js\nvar Pagination = Ember.CollectionView.extend({\n
    \ tagName: 'ul',\n  classNames: ['pagination'],\n  init: function() {\n    this._super();\n
    \   if (!this.get('content')) {\n      this.set('content', Ember.A([]));\n    }\n
    \ }\n});\n```"
  itemtype: method
  name: A
  return:
    description: ''
    type: Ember.NativeArray
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 156
  description: ! "Activates the mixin on the Array.prototype if not already applied.
    Calling\nthis method more than once is safe. This will be called when ember is
    loaded\nunless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\nset
    to `false`.\n\nExample\n\n```js\nif (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array)
    {\n  Ember.NativeArray.activate();\n}\n```"
  itemtype: method
  name: activate
  static: 1
  return:
    description: ''
    type: Void
  class: Ember.NativeArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/object_proxy.js
  line: 100
  description: The object whose properties will be forwarded.
  itemtype: property
  name: content
  type: Ember.Object
  default: 'null'
  class: Ember.ObjectProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 112
  description: ! "// ..........................................................\n
    \ // IMPLEMENT ENUMERABLE APIS\n  //\n/**\n    This property will change as the
    number of objects in the set changes."
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 127
  description: ! 'Clears the set. This is useful if you want to reuse an existing
    set

    without having to recreate it.


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.length;  // 3

    colors.clear();

    colors.length;  // 0

    ```'
  itemtype: method
  name: clear
  return:
    description: An empty Set
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 168
  description: ! "Returns true if the passed object is also an enumerable that contains
    the\nsame objects as the receiver.\n\n```javascript\nvar colors = [\"red\", \"green\",
    \"blue\"],\n    same_colors = new Ember.Set(colors);\n\nsame_colors.isEqual(colors);
    \              // true\nsame_colors.isEqual([\"purple\", \"brown\"]);  // false\n```"
  itemtype: method
  name: isEqual
  params:
  - name: obj
    description: the other object.
    type: Ember.Set
  return:
    description: ''
    type: Boolean
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 198
  description: ! 'Adds an object to the set. Only non-`null` objects can be added
    to a set

    and those can only be added once. If the object is already in the set or

    the passed value is null this method will have no effect.


    This is an alias for `Ember.MutableEnumerable.addObject()`.


    ```javascript

    var colors = new Ember.Set();

    colors.add("blue");     // ["blue"]

    colors.add("blue");     // ["blue"]

    colors.add("red");      // ["blue", "red"]

    colors.add(null);       // ["blue", "red"]

    colors.add(undefined);  // ["blue", "red"]

    ```'
  itemtype: method
  name: add
  params:
  - name: obj
    description: The object to add.
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 220
  description: ! 'Removes the object from the set if it is found. If you pass a `null`
    value

    or an object that is already not in the set, this method will have no

    effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.remove("red");     // ["blue", "green"]

    colors.remove("purple");  // ["blue", "green"]

    colors.remove(null);      // ["blue", "green"]

    ```'
  itemtype: method
  name: remove
  params:
  - name: obj
    description: The object to remove
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 238
  description: ! 'Removes the last element from the set and returns it, or `null`
    if it''s empty.


    ```javascript

    var colors = new Ember.Set(["green", "blue"]);

    colors.pop();  // "blue"

    colors.pop();  // "green"

    colors.pop();  // null

    ```'
  itemtype: method
  name: pop
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 258
  description: ! 'Inserts the given object on to the end of the set. It returns

    the set itself.


    This is an alias for `Ember.MutableEnumerable.addObject()`.


    ```javascript

    var colors = new Ember.Set();

    colors.push("red");   // ["red"]

    colors.push("green"); // ["red", "green"]

    colors.push("blue");  // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: push
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 276
  description: ! 'Removes the last element from the set and returns it, or `null`
    if it''s empty.


    This is an alias for `Ember.Set.pop()`.


    ```javascript

    var colors = new Ember.Set(["green", "blue"]);

    colors.shift();  // "blue"

    colors.shift();  // "green"

    colors.shift();  // null

    ```'
  itemtype: method
  name: shift
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 293
  description: ! 'Inserts the given object on to the end of the set. It returns

    the set itself.


    This is an alias of `Ember.Set.push()`


    ```javascript

    var colors = new Ember.Set();

    colors.unshift("red");    // ["red"]

    colors.unshift("green");  // ["red", "green"]

    colors.unshift("blue");   // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: unshift
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 311
  description: ! 'Adds each object in the passed enumerable to the set.


    This is an alias of `Ember.MutableEnumerable.addObjects()`


    ```javascript

    var colors = new Ember.Set();

    colors.addEach(["red", "green", "blue"]);  // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: addEach
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 327
  description: ! 'Removes each object in the passed enumerable to the set.


    This is an alias of `Ember.MutableEnumerable.removeObjects()`


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.removeEach(["red", "blue"]);  //  ["green"]

    ```'
  itemtype: method
  name: removeEach
  params:
  - name: objects
    description: the objects to remove.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 13
  description: ! 'Defines the hash of localized strings for the current language.
    Used by

    the `Ember.String.loc()` helper. To localize, add string values to this

    hash.'
  itemtype: property
  name: STRINGS
  type: Hash
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/string.js
  line: 35
  description: ! 'Apply formatting options to the string. This will look for occurrences

    of "%@" in your string and substitute them with the arguments you pass into

    this method. If you want to control the specific order of replacement,

    you can add a number after the key as well to indicate which argument

    you want to insert.


    Ordered insertions are most useful when building loc strings where values

    you need to insert may appear in different orders.


    ```javascript

    "Hello %@ %@".fmt(''John'', ''Doe'');     // "Hello John Doe"

    "Hello %@2, %@1".fmt(''John'', ''Doe'');  // "Hello Doe, John"

    ```'
  itemtype: method
  name: fmt
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: An array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 65
  description: ! "Formats the passed string, but first looks up the string in the
    localized\nstrings hash. This is a convenient way to localize text. See\n`Ember.String.fmt()`
    for more information on formatting.\n\nNote that it is traditional but not required
    to prefix localized string\nkeys with an underscore or other character so you
    can easily identify\nlocalized strings.\n\n```javascript\nEmber.STRINGS = {\n
    \ '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nEmber.String.loc(\"_Hello
    World\");  // 'Bonjour le monde';\nEmber.String.loc(\"_Hello %@ %@\", [\"John\",
    \"Smith\"]);  // \"Bonjour John Smith\";\n```"
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: Optional array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 94
  description: ! "Splits a string into separate units separated by spaces, eliminating
    any\nempty strings in the process. This is a convenience method for split that\nis
    mostly useful when applied to the `String.prototype`.\n\n```javascript\nEmber.String.w(\"alpha
    beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// > alpha\n//
    > beta\n// > gamma\n```"
  itemtype: method
  name: w
  params:
  - name: str
    description: The string to split
    type: String
  return:
    description: split string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 115
  description: ! 'Converts a camelized string into all lower case separated by underscores.


    ```javascript

    ''innerHTML''.decamelize();           // ''inner_html''

    ''action_name''.decamelize();        // ''action_name''

    ''css-class-name''.decamelize();     // ''css-class-name''

    ''my favorite items''.decamelize();  // ''my favorite items''

    ```'
  itemtype: method
  name: decamelize
  params:
  - name: str
    description: The string to decamelize.
    type: String
  return:
    description: the decamelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 133
  description: ! 'Replaces underscores, spaces, or camelCase with dashes.


    ```javascript

    ''innerHTML''.dasherize();          // ''inner-html''

    ''action_name''.dasherize();        // ''action-name''

    ''css-class-name''.dasherize();     // ''css-class-name''

    ''my favorite items''.dasherize();  // ''my-favorite-items''

    ```'
  itemtype: method
  name: dasherize
  params:
  - name: str
    description: The string to dasherize.
    type: String
  return:
    description: the dasherized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 162
  description: ! 'Returns the lowerCamelCase form of a string.


    ```javascript

    ''innerHTML''.camelize();          // ''innerHTML''

    ''action_name''.camelize();        // ''actionName''

    ''css-class-name''.camelize();     // ''cssClassName''

    ''my favorite items''.camelize();  // ''myFavoriteItems''

    ''My Favorite Items''.camelize();  // ''myFavoriteItems''

    ```'
  itemtype: method
  name: camelize
  params:
  - name: str
    description: The string to camelize.
    type: String
  return:
    description: the camelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 185
  description: ! 'Returns the UpperCamelCase form of a string.


    ```javascript

    ''innerHTML''.classify();          // ''InnerHTML''

    ''action_name''.classify();        // ''ActionName''

    ''css-class-name''.classify();     // ''CssClassName''

    ''my favorite items''.classify();  // ''MyFavoriteItems''

    ```'
  itemtype: method
  name: classify
  params:
  - name: str
    description: the string to classify
    type: String
  return:
    description: the classified string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 211
  description: ! 'More general than decamelize. Returns the lower\_case\_and\_underscored

    form of a string.


    ```javascript

    ''innerHTML''.underscore();          // ''inner_html''

    ''action_name''.underscore();        // ''action_name''

    ''css-class-name''.underscore();     // ''css_class_name''

    ''my favorite items''.underscore();  // ''my_favorite_items''

    ```'
  itemtype: method
  name: underscore
  params:
  - name: str
    description: The string to underscore.
    type: String
  return:
    description: the underscored string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 231
  description: ! 'Returns the Capitalized form of a string


    ```javascript

    ''innerHTML''.capitalize()         // ''InnerHTML''

    ''action_name''.capitalize()       // ''Action_name''

    ''css-class-name''.capitalize()    // ''Css-class-name''

    ''my favorite items''.capitalize() // ''My favorite items''

    ```'
  itemtype: method
  name: capitalize
  params:
  - name: str
    description: The string to capitalize.
    type: String
  return:
    description: The capitalized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/subarray.js
  line: 30
  description: Track that an item was added to the tracked array.
  itemtype: method
  name: addItem
  params:
  - name: index
    description: The index of the item in the tracked array.
    type: Number
  - name: match
    description: ! '`true` iff the item is included in the subarray.'
    type: Boolean
  return:
    description: The index of the item in the subarray.
    type: Number
  class: Ember.SubArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/subarray.js
  line: 83
  description: Track that an item was removed from the tracked array.
  itemtype: method
  name: removeItem
  params:
  - name: index
    description: The index of the item in the tracked array.
    type: Number
  return:
    description: ! 'The index of the item in the subarray, or `-1` if the item

      was not in the subarray.'
    type: Number
  class: Ember.SubArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/tracked_array.js
  line: 35
  description: Track that `newItems` were added to the tracked array at `index`.
  itemtype: method
  name: addItems
  params:
  - name: index
    description: ''
  - name: newItems
    description: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/tracked_array.js
  line: 74
  description: Track that `count` items were removed at `index`.
  itemtype: method
  name: removeItems
  params:
  - name: index
    description: ''
  - name: count
    description: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/tracked_array.js
  line: 102
  description: ! 'Apply all operations, reducing them to retain:n, for `n`, the number
    of

    items in the array.


    `callback` will be called for each operation and will be passed the following
    arguments:

    - {array} items The items for the given operation

    - {number} offset The computed offset of the items, ie the index in the

    array of the first item for this operation.

    - {string} operation The type of the operation.  One of

    `Ember.TrackedArray.{RETAIN, DELETE, INSERT}`'
  itemtype: method
  name: apply
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/tracked_array.js
  line: 133
  description: Return an ArrayOperationMatch for the operation that contains the item
    at `index`.
  itemtype: method
  name: _findArrayOperation
  params:
  - name: index
    description: ! 'the index of the item whose operation information

      should be returned.'
    type: Number
  access: private
  tagname: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/tracked_array.js
  line: 279
  description: ! 'Internal data structure used to include information when looking
    up operations

    by item index.'
  itemtype: property
  name: ! '{number} rangeStart The index of the first item in the operation,

    with respect to the tracked array.  The index of the last item can be computed

    from `rangeStart` and `operation.count`.'
  access: private
  tagname: ''
  type: ArrayOperation
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: ../packages/ember-runtime/lib/core.js
  line: 12
  description: ! "This will compare two javascript values of possibly different types.\nIt
    will tell you which one is greater than the other by returning:\n\n - -1 if the
    first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first
    is greater than the second.\n\nThe order is calculated based on `Ember.ORDER_DEFINITION`,
    if types are different.\nIn case they have the same type an appropriate comparison
    for this type is made.\n\n ```javascript\n Ember.compare('hello', 'hello');  //
    0\n Ember.compare('abc', 'dfg');      // -1\n Ember.compare(2, 1);              //
    1\n ```"
  itemtype: method
  name: compare
  params:
  - name: v
    description: First value to compare
    type: Object
  - name: w
    description: Second value to compare
    type: Object
  return:
    description: -1 if v < w, 0 if v = w and 1 if v > w.
    type: Number
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 166
  description: ! 'Creates a clone of the passed object. This function can take just
    about

    any type of object and create a clone of it, including primitive values

    (which are not actually cloned because they are immutable).


    If the passed object implements the `clone()` method, then this function

    will simply call that method and return the result.'
  itemtype: method
  name: copy
  params:
  - name: obj
    description: The object to clone
    type: Object
  - name: deep
    description: If true, a deep copy of the object is made
    type: Boolean
  return:
    description: The cloned object
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 187
  description: ! 'Convenience method to inspect an object. This method will attempt
    to

    convert the object into a useful string description.


    It is a pretty simple implementation. If you want something more robust,

    use something like JSDump: https://github.com/NV/jsDump'
  itemtype: method
  name: inspect
  params:
  - name: obj
    description: The object you want to inspect.
    type: Object
  return:
    description: A description of the object
    type: String
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 220
  description: ! 'Compares two objects, returning true if they are logically equal.
    This is

    a deeper comparison than a simple triple equal. For sets it will compare the

    internal objects. For any other object that implements `isEqual()` it will

    respect that method.


    ```javascript

    Ember.isEqual(''hello'', ''hello'');  // true

    Ember.isEqual(1, 2);              // false

    Ember.isEqual([4,2], [4,2]);      // false

    ```'
  itemtype: method
  name: isEqual
  params:
  - name: a
    description: first object to compare
    type: Object
  - name: b
    description: second object to compare
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 258
  description: ! 'Returns all of the keys defined on an object or hash. This is useful

    when inspecting objects for debugging. On browsers that support it, this

    uses the native `Object.keys` implementation.'
  itemtype: method
  name: keys
  params:
  - name: obj
    description: ''
    type: Object
  return:
    description: Array containing keys of obj
    type: Array
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-testing/lib/adapters.js
  line: 18
  description: ! 'This callback will be called whenever an async operation is about
    to start.


    Override this to call your framework''s methods that handle async

    operations.'
  access: public
  tagname: ''
  itemtype: method
  name: asyncStart
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: ../packages/ember-testing/lib/adapters.js
  line: 29
  description: This callback will be called whenever an async operation has completed.
  access: public
  tagname: ''
  itemtype: method
  name: asyncEnd
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: ../packages/ember-testing/lib/adapters.js
  line: 37
  description: ! "Override this method with your testing framework's false assertion.\nThis
    function is called whenever an exception occurs causing the testing\npromise to
    fail.\n\nQUnit example:\n\n```javascript\n  exception: function(error) {\n    ok(false,
    error);\n  };\n```"
  access: public
  tagname: ''
  itemtype: method
  name: exception
  params:
  - name: error
    description: The exception to be raised.
    type: String
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: ../packages/ember-testing/lib/helpers.js
  line: 175
  description: ! "Loads a route, sets up any controllers, and renders any templates
    associated\nwith the route as though a real user had triggered the route change
    while\nusing your app.\n\nExample:\n\n```\nvisit('posts/index').then(function()
    {\n  // assert something\n});\n```"
  itemtype: method
  name: visit
  params:
  - name: url
    description: the name of the route
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 194
  description: ! "Clicks an element and triggers any actions triggered by the element's
    `click`\nevent.\n\nExample:\n\n```\nclick('.some-jQuery-selector').then(function()
    {\n // assert something\n});\n```"
  itemtype: method
  name: click
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 212
  description: ! "Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with
    the desired keyCode\n\nExample:\n\n```\nkeyEvent('.some-jQuery-selector', 'keypress',
    13).then(function() {\n // assert something\n});\n```"
  itemtype: method
  name: keyEvent
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  - name: the
    description: type of key event, e.g. `keypress`, `keydown`, `keyup`
    type: String
  - name: the
    description: keyCode of the simulated key event
    type: Number
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 231
  description: ! "Fills in an input element with some text.\n\nExample:\n\n```\nfillIn('#email',
    'you@example.com').then(function() {\n  // assert something\n});\n```"
  itemtype: method
  name: fillIn
  params:
  - name: selector
    description: ! 'jQuery selector finding an input element on the DOM

      to fill text with'
    type: String
  - name: text
    description: text to place inside the input element
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 250
  description: ! 'Finds an element in the context of the app''s container element.
    A simple alias

    for `app.$(selector)`.


    Example:


    ```

    var $el = find(''.my-selector);

    ```'
  itemtype: method
  name: find
  params:
  - name: selector
    description: jQuery string selector for element lookup
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 266
  description: ! "Like `find`, but throws an error if the element selector returns
    no results\nExample:\n```\n var $el = findWithAssert('.doesnt-exist'); // throws
    error\n ```"
  itemtype: method
  name: findWithAssert
  params:
  - name: selector
    description: ! "jQuery selector string for finding an element within\n the DOM"
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  throws:
  - ! '{Error} throws error if jQuery object returned has a length of 0'
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/helpers.js
  line: 284
  description: ! "Causes the run loop to process any pending events. This is used
    to ensure that\nany async operations from other helpers (or your assertions) have
    been processed.\n\nThis is most often used as the return value for the helper
    functions (see 'click',\n'fillIn','visit',etc).\n\nExample:\n\n```\nEmber.Test.registerHelper('loginUser',
    function(app, username, password) {\n  visit('secured/path/here')\n  .fillIn('#username',
    username)\n  .fillIn('#password', username)\n  .click('.submit')\n\n  return wait(app);\n});"
  itemtype: method
  name: wait
  params:
  - name: value
    description: The value to be returned.
    type: Object
  return:
    description: ! '

      ```'
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/support.js
  line: 8
  description: ! 'This method creates a checkbox and triggers the click event to fire
    the

    passed in handler. It is used to correct for a bug in older versions

    of jQuery (e.g 1.8.3).'
  access: private
  tagname: ''
  itemtype: method
  name: testCheckboxClick
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: ../packages/ember-testing/lib/test.js
  line: 23
  description: ! "`registerHelper` is used to register a test helper that will be
    injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always
    be called with the current Application as\nthe first parameter.\n\nFor example:\n```javascript\n
    \ Ember.Test.registerHelper('boot', function(app) {\n    Ember.run(app, app.deferReadiness);\n
    \ });\n```\n\nThis helper can later be called without arguments because it will
    be\ncalled with `app` as the first parameter.\n\n```javascript\n  App = Ember.Application.create();\n
    \ App.injectTestHelpers();\n  boot();\n```\n\nWhenever you register a helper that
    performs async operations, make sure\nyou `return wait();` at the end of the helper.\n\nIf
    an async helper also needs to return a value, pass it to the `wait`\nhelper as
    a first argument:\n`return wait(val);`"
  access: public
  tagname: ''
  itemtype: method
  name: registerHelper
  params:
  - name: name
    description: The name of the helper method to add.
    type: String
  - name: helperMethod
    description: ''
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 61
  description: ! 'Remove a previously added helper method.


    Example:

    ```

    Ember.Test.unregisterHelper(''wait'');

    ```'
  access: public
  tagname: ''
  itemtype: method
  name: unregisterHelper
  params:
  - name: name
    description: The helper to remove.
    type: String
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 81
  description: ! "Used to register callbacks to be fired whenever `App.injectTestHelpers`\nis
    called.\n\nThe callback will receive the current application as an argument.\n\nExample:\n```\nEmber.Test.onInjectHelpers(function()
    {\n  Ember.$(document).ajaxStart(function() {\n    Test.pendingAjaxRequests++;\n
    \ });\n\n  Ember.$(document).ajaxStop(function() {\n    Test.pendingAjaxRequests--;\n
    \ });\n});\n```"
  access: public
  tagname: ''
  itemtype: method
  name: onInjectHelpers
  params:
  - name: callback
    description: The function to be called.
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 108
  description: ! 'This returns a thenable tailored for testing.  It catches failed

    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`

    callback in the last chained then.


    This method should be returned by async helpers such as `wait`.'
  access: public
  tagname: ''
  itemtype: method
  name: promise
  params:
  - name: resolver
    description: The function used to resolve the promise.
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 146
  description: ! 'Used to allow ember-testing to communicate with a specific testing

    framework.


    You can manually set it before calling `App.setupForTesting()`.


    Example:

    ```

    Ember.Test.adapter = MyCustomAdapter.create()

    ```


    If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.'
  access: public
  tagname: ''
  itemtype: property
  name: adapter
  type: ! '{Class} The adapter to be used.'
  default: Ember.Test.QUnitAdapter
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 176
  itemtype: property
  name: testHelpers
  type: ! '{Object}'
  default: ! '{}'
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 183
  description: ! "This hook defers the readiness of the application, so that you can
    start\nthe app when your tests are ready to run. It also sets the router's\nlocation
    to 'none', so that the window's location will not be modified\n(preventing both
    accidental leaking of state between tests and interference\nwith your testing
    framework).\n\nExample:\n  ```\n  App.setupForTesting();\n  ```"
  itemtype: method
  name: setupForTesting
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 212
  description: ! "This injects the test helpers into the window's scope. If a function
    of the\nsame name has already been defined it will be cached (so that it can be
    reset\nif the helper is removed with `unregisterHelper` or `removeTestHelpers`).\n\n
    \  Any callbacks registered with `onInjectHelpers` will be called once the\n   helpers
    have been injected.\n\n  Example:\n  ```\n  App.injectTestHelpers();\n  ```"
  itemtype: method
  name: injectTestHelpers
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-testing/lib/test.js
  line: 239
  description: ! 'This removes all helpers that have been registered, and resets and
    functions

    that were overridden by the helpers.


    Example:

    ```

    App.removeTestHelpers();

    ```'
  access: public
  tagname: ''
  itemtype: method
  name: removeTestHelpers
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: ../packages/ember-views/lib/mixins/view_target_action_support.js
  line: 43
  itemtype: property
  name: target
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: ../packages/ember-views/lib/mixins/view_target_action_support.js
  line: 47
  itemtype: property
  name: actionContext
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 21
  description: ! 'The set of events names (and associated handler function names)
    to be setup

    and dispatched by the `EventDispatcher`. Custom events can added to this list
    at setup

    time, generally via the `Ember.Application.customEvents` hash. Only override this

    default set to prevent the EventDispatcher from listening on some events all together.


    This set will be modified by `setup` to also include any events added at that
    time.'
  itemtype: property
  name: events
  type: Object
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 62
  access: private
  tagname: ! 'The root DOM element to which event listeners should be attached. Event

    listeners will be attached to the document unless this is overridden.


    Can be specified as a DOMElement or a selector string.


    The default body is a string since this may be evaluated before document.body

    exists in the DOM.'
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 79
  access: private
  tagname: ! 'Sets up event listeners for standard browser events.


    This will be called after the browser sends a `DOMContentReady` event. By

    default, it will set up all of the listeners on the document body. If you

    would like to register the listeners on a different element, set the event

    dispatcher''s `root` property.'
  itemtype: method
  name: setup
  params:
  - name: addedEvents
    description: ''
    type: Hash
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 119
  access: private
  tagname: ! 'Registers an event listener on the document. If the given event is

    triggered, the provided event handler will be triggered on the target view.


    If the target view does not implement the event handler, or if the handler

    returns `false`, the parent view will be called. The event will continue to

    bubble to each successive parent view until it reaches the top.


    For example, to have the `mouseDown` method called on the target view when

    a `mousedown` event is received from the browser, do the following:


    ```javascript

    setupHandler(''mousedown'', ''mouseDown'');

    ```'
  itemtype: method
  name: setupHandler
  params:
  - name: rootElement
    description: ''
    type: Element
  - name: event
    description: the browser-originated event to listen to
    type: String
  - name: eventName
    description: the name of the method to call on the view
    type: String
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 89
  description: ! "// The root view's element\n  _element: null,\n_hasElement: true,\n/**"
  access: private
  tagname: ! "An internal set used to de-dupe class names when `addClass()` is\n    used.
    After each call to `addClass()`, the `classes` property\n    will be updated."
  itemtype: property
  name: elementClasses
  type: Array
  default: ! '[]'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 109
  description: ! 'Array of class names which will be applied in the class attribute.


    You can use `setClasses()` to set this property directly. If you

    use `addClass()`, it will be maintained for you.'
  itemtype: property
  name: classes
  type: Array
  default: ! '[]'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 121
  description: ! 'The id in of the element, to be applied in the id attribute.


    You should not set this property yourself, rather, you should use

    the `id()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementId
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 133
  description: ! 'A hash keyed on the name of the attribute and whose value will be

    applied to that attribute. For example, if you wanted to apply a

    `data-view="Foo.bar"` property to an element, you would set the

    elementAttributes hash to `{''data-view'':''Foo.bar''}`.


    You should not maintain this hash yourself, rather, you should use

    the `attr()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementAttributes
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 148
  description: ! 'A hash keyed on the name of the properties and whose value will
    be

    applied to that property. For example, if you wanted to apply a

    `checked=true` property to an element, you would set the

    elementProperties hash to `{''checked'':true}`.


    You should not maintain this hash yourself, rather, you should use

    the `prop()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementProperties
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 163
  description: ! 'The tagname of the element an instance of `Ember.RenderBuffer` represents.


    Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For

    example, if you wanted to create a `p` tag, then you would call


    ```javascript

    Ember.RenderBuffer(''p'')

    ```'
  itemtype: property
  name: elementTag
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 179
  description: ! 'A hash keyed on the name of the style attribute and whose value
    will

    be applied to that attribute. For example, if you wanted to apply a

    `background-color:black;` style to an element, you would set the

    elementStyle hash to `{''background-color'':''black''}`.


    You should not maintain this hash yourself, rather, you should use

    the `style()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementStyle
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 194
  description: ! 'Nested `RenderBuffers` will set this to their parent `RenderBuffer`

    instance.'
  itemtype: property
  name: parentBuffer
  type: Ember._RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 203
  description: Adds a string of HTML to the `RenderBuffer`.
  itemtype: method
  name: push
  params:
  - name: string
    description: HTML to push into the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 215
  description: Adds a class to the buffer, which will be rendered to the class attribute.
  itemtype: method
  name: addClass
  params:
  - name: className
    description: Class name to add to the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 235
  description: Sets the elementID to be used for the element.
  itemtype: method
  name: id
  params:
  - name: id
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 250
  description: Adds an attribute which will be rendered to the element.
  itemtype: method
  name: attr
  params:
  - name: name
    description: The name of the attribute
    type: String
  - name: value
    description: The value to add to the attribute
    type: String
  chainable: 1
  return:
    description: this or the current attribute value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 271
  description: Remove an attribute from the list of attributes to render.
  itemtype: method
  name: removeAttr
  params:
  - name: name
    description: The name of the attribute
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 285
  description: Adds an property which will be rendered to the element.
  itemtype: method
  name: prop
  params:
  - name: name
    description: The name of the property
    type: String
  - name: value
    description: The value to add to the property
    type: String
  chainable: 1
  return:
    description: this or the current property value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 306
  description: Remove an property from the list of properties to render.
  itemtype: method
  name: removeProp
  params:
  - name: name
    description: The name of the property
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 320
  description: Adds a style to the style attribute which will be rendered to the element.
  itemtype: method
  name: style
  params:
  - name: name
    description: Name of the style
    type: String
  - name: value
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 477
  itemtype: method
  name: element
  return:
    description: ! "The element corresponding to the generated HTML\n  of this buffer"
    type: DOMElement
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 492
  description: Generates the HTML content for this buffer.
  itemtype: method
  name: string
  return:
    description: The generated HTML
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 161
  description: A list of items to be displayed by the `Ember.CollectionView`.
  itemtype: property
  name: content
  type: Ember.Array
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 170
  access: private
  tagname: ! 'This provides metadata about what kind of empty view class this

    collection would like if it is being instantiated from another

    system (like Handlebars)'
  itemtype: property
  name: emptyViewClass
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 181
  description: An optional view to display if content is set to an empty array.
  itemtype: property
  name: emptyView
  type: Ember.View
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 190
  itemtype: property
  name: itemViewClass
  type: Ember.View
  default: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 197
  description: Setup a CollectionView
  itemtype: method
  name: init
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 208
  access: private
  tagname: ! 'Invoked when the content property is about to change. Notifies observers
    that the

    entire array content will change.'
  itemtype: method
  name: _contentWillChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 224
  access: private
  tagname: ! 'Check to make sure that the content has changed, and if so,

    update the children directly. This is always scheduled

    asynchronously, to allow the element to be created before

    bindings have synchronized and vice versa.'
  itemtype: method
  name: _contentDidChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 246
  access: private
  tagname: Ensure that the content implements Ember.Array
  itemtype: method
  name: _assertArrayLike
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 257
  description: Removes the content and content observers.
  itemtype: method
  name: destroy
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 275
  description: ! 'Called when a mutation to the underlying content array will occur.


    This method will remove any views that are no longer in the underlying

    content array.


    Invokes whenever the content array itself will change.'
  itemtype: method
  name: arrayWillChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes will occurr
    type: Number
  - name: removed
    description: number of object to be removed from content
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 318
  description: ! 'Called when a mutation to the underlying content array occurs.


    This method will replay that mutation against the views that compose the

    `Ember.CollectionView`, ensuring that the view reflects the model.


    This array observer is added in `contentDidChange`.'
  itemtype: method
  name: arrayDidChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes occurred
    type: Number
  - name: removed
    description: number of object removed from content
    type: Number
  - name: added
    description: number of object added to content
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 378
  description: ! 'Instantiates a view to be added to the childViews array during view

    initialization. You generally will not call this method directly unless

    you are overriding `createChildViews()`. Note that this method will

    automatically configure the correct settings on the new view instance to

    act as a child of the parent.


    The tag name for the view will be set to the tagName of the viewClass

    passed in.'
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 407
  description: ! 'A map of parent tags to their default child tags. You can add

    additional parent tags if you want collection views that use

    a particular parent tag to default to a child tag.'
  itemtype: property
  name: CONTAINER_MAP
  type: Hash
  static: 1
  final: 1
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/component.js
  line: 124
  description: ! 'If the component is currently inserted into the DOM of a parent
    view, this

    property will point to the controller of the parent view.'
  itemtype: property
  name: targetObject
  type: Ember.Controller
  default: 'null'
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/component.js
  line: 137
  description: ! "Sends an action to component's controller. A component inherits
    its\ncontroller from the context in which it is used.\n\nBy default, calling `sendAction()`
    will send an action with the name\nof the component's `action` property.\n\nFor
    example, if the component had a property `action` with the value\n`\"addItem\"`,
    calling `sendAction()` would send the `addItem` action\nto the component's controller.\n\nIf
    you provide the `action` argument to `sendAction()`, that key will\nbe used to
    look up the action name.\n\nFor example, if the component had a property `playing`
    with the value\n`didStartPlaying`, calling `sendAction('playing')` would send
    the\n`didStartPlaying` action to the component's controller.\n\nWhether or not
    you are using the default action or a named action, if\nthe action name is not
    defined on the component, calling `sendAction()`\ndoes not have any effect.\n\nFor
    example, if you call `sendAction()` on a component that does not have\nan `action`
    property defined, no action will be sent to the controller,\nnor will an exception
    be raised.\n\nYou can send a context object with the action by supplying the `context`\nargument.
    The context will be supplied as the first argument in the\ntarget's action method.
    Example:\n\n```javascript\nApp.MyTreeComponent = Ember.Component.extend({\n  click:
    function() {\n    this.sendAction('didClickTreeNode', this.get('node'));\n  }\n});\n\nApp.CategoriesController
    = Ember.Controller.extend({\n  didClickCategory: function(category) {\n    //Do
    something with the node/category that was clicked\n  }\n});\n```\n\n```handlebars\n{{!
    categories.hbs}}\n{{my-tree didClickTreeNode='didClickCategory'}}\n```"
  itemtype: method
  name: sendAction
  params:
  - name: action
    description: the action to trigger
    type: String
    optional: true
  - name: context
    description: a context to send with the action
    type: ! '*'
    optional: true
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 254
  access: private
  tagname: Instructs each child view to render to the passed render buffer.
  itemtype: method
  name: render
  params:
  - name: buffer
    description: the buffer to render to
    type: Ember.RenderBuffer
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 270
  access: private
  tagname: ! 'When a child view is removed, destroy its element so that

    it is removed from the DOM.


    The array observer that triggers this action is set up in the

    `renderToBuffer` method.'
  itemtype: method
  name: childViewsWillChange
  params:
  - name: views
    description: the child views array before mutation
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 300
  access: private
  tagname: ! 'When a child view is added, make sure the DOM gets updated appropriately.


    If the view has already rendered an element, we tell the child view to

    create an element and insert it into the DOM. If the enclosing container

    view has already written to a buffer, but not yet converted that buffer

    into an element, we insert the string representation of the child into the

    appropriate place in the buffer.'
  itemtype: method
  name: childViewsDidChange
  params:
  - name: views
    description: the array of child views afte the mutation has occurred
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  - name: the
    description: number of child views added
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 42
  description: ! 'Global hash of shared templates. This will automatically be populated

    by the build tools so that you can store your Handlebars templates in

    separate files that get loaded into JavaScript at buildtime.'
  itemtype: property
  name: TEMPLATES
  type: Hash
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 78
  description: ! 'If the view is currently inserted into the DOM of a parent view,
    this

    property will point to the parent of the view.'
  itemtype: property
  name: parentView
  type: Ember.View
  default: 'null'
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 112
  access: private
  tagname: ! 'Invoked by the view system when this view needs to produce an HTML

    representation. This method will create a new render buffer, if needed,

    then apply any default attributes, such as class names and visibility.

    Finally, the `render()` method is invoked, which is responsible for

    doing the bulk of the rendering.


    You should not need to override this method; instead, implement the

    `template` property, or if you need more control, override the `render`

    method.'
  itemtype: method
  name: renderToBuffer
  params:
  - name: buffer
    description: ! "the render buffer. If no buffer is\n  passed, a default buffer,
      using the current view's `tagName`, will\n  be used."
    type: Ember.RenderBuffer
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 162
  access: private
  tagname: ! 'Override the default event firing from `Ember.Evented` to

    also call methods with the given name.'
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
    type: String
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 840
  description: ! 'concatenatedProperties: [''classNames'', ''classNameBindings'',
    ''attributeBindings''],

    /**'
  itemtype: property
  name: isView
  type: Boolean
  default: 'true'
  final: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 856
  description: ! 'The name of the template to lookup if no template is provided.


    `Ember.View` will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 869
  description: ! 'The name of the layout to lookup if no layout is provided.


    `Ember.View` will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: layoutName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 882
  description: The hash in which to look for `templateName`.
  itemtype: property
  name: templates
  type: Ember.Object
  default: Ember.TEMPLATES
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 891
  description: ! 'The template used to render the view. This should be a function
    that

    accepts an optional context parameter and returns a string of HTML that

    will be inserted into the DOM relative to its parent view.


    In general, you should set the `templateName` property instead of setting

    the template yourself.'
  itemtype: property
  name: template
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 913
  description: ! 'The controller managing this view. If this property is set, it will
    be

    made available for use by the template.'
  itemtype: property
  name: controller
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 925
  description: ! 'A view may contain a layout. A layout is a regular template but

    supersedes the `template` property during rendering. It is the

    responsibility of the layout template to retrieve the `template`

    property from the view (or alternatively, call `Handlebars.helpers.yield`,

    `{{yield}}`) to render it in the correct location.


    This is useful for a view that has a shared wrapper, but which delegates

    the rendering of the contents of the wrapper to the `template` property

    on a subclass.'
  itemtype: property
  name: layout
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 962
  description: ! 'The object from which templates should access properties.


    This object will be passed to the template function each time the render

    method is called, but it is up to the individual function to decide what

    to do with it.


    By default, this will be the view''s controller.'
  itemtype: property
  name: context
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 983
  access: private
  tagname: ! 'Private copy of the view''s template context. This can be set directly

    by Handlebars without triggering the observer that causes the view

    to be re-rendered.


    The context of a view is looked up as follows:


    1. Supplied context (usually by Handlebars)

    2. Specified controller

    3. `parentView`''s context (for a child of a ContainerView)


    The code in Handlebars that overrides the `_context` property first

    checks to see whether the view has a specified controller. This is

    something of a hack and should be revisited.'
  itemtype: property
  name: _context
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1017
  access: private
  tagname: ! 'If a value that affects template rendering changes, the view should
    be

    re-rendered to reflect the new value.'
  itemtype: method
  name: _contextDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1029
  description: If `false`, the view will appear hidden in DOM.
  itemtype: property
  name: isVisible
  type: Boolean
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1038
  access: private
  tagname: ! 'Array of child views. You should never edit this array directly.

    Instead, use `appendChild` and `removeFromParent`.'
  itemtype: property
  name: childViews
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1070
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class.'
  itemtype: property
  name: nearestInstanceOf
  return:
    description: Ember.View
  deprecated: true
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 1089
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class or mixin.'
  itemtype: property
  name: nearestOfType
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: ! "Subclass of Ember.View (or Ember.View itself),\n       or an instance
      of Ember.Mixin."
    type: Class,Mixin
- file: ../packages/ember-views/lib/views/view.js
  line: 1110
  description: Return the nearest ancestor that has a given property.
  itemtype: property
  name: nearestWithProperty
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: property
    description: A property name
    type: String
- file: ../packages/ember-views/lib/views/view.js
  line: 1126
  description: ! 'Return the nearest ancestor whose parent is an instance of

    `klass`.'
  itemtype: property
  name: nearestChildOf
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 1143
  access: private
  tagname: When the parent view changes, recursively invalidate `controller`
  itemtype: method
  name: _parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1181
  description: ! 'Called on your view when it should push strings of HTML into a

    `Ember.RenderBuffer`. Most users will want to override the `template`

    or `templateName` properties instead of this method.


    By default, `Ember.View` will look for a function in the `template`

    property and invoke it with the value of `context`. The value of

    `context` will be the view''s controller unless you override it.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: The render buffer
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1227
  description: ! 'Renders the view again. This will work regardless of whether the

    view is already in the DOM or not. If the view is in the DOM, the

    rendering process will be deferred to give bindings a chance

    to synchronize.


    If children were added during the rendering process using `appendChild`,

    `rerender` will remove them, because they will be added again

    if needed by the next `render`.


    In general, if the display of your view changes, you should modify

    the DOM element directly instead of manually calling `rerender`, which can

    be slow.'
  itemtype: method
  name: rerender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1262
  access: private
  tagname: ! 'Iterates over the view''s `classNameBindings` array, inserts the value

    of the specified property into the `classNames` array, then creates an

    observer to update the view''s element if the bound property ever changes

    in the future.'
  itemtype: method
  name: _applyClassNameBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1340
  access: private
  tagname: ! 'Iterates through the view''s attribute bindings, sets up observers for
    each,

    then applies the current value of the attributes to the passed render buffer.'
  itemtype: method
  name: _applyAttributeBindings
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1376
  access: private
  tagname: ! 'Given a property name, returns a dasherized version of that

    property name if the property evaluates to a non-falsy value.


    For example, if the view has property `isUrgent` that evaluates to true,

    passing `isUrgent` to this method will return `"is-urgent"`.'
  itemtype: method
  name: _classStringForProperty
  params:
  - name: property
    description: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1404
  description: Returns the current DOM element for the view.
  itemtype: property
  name: element
  type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1418
  description: ! 'Returns a jQuery object for this view''s element. If you pass in
    a selector

    string, this method will return a jQuery object, using the current element

    as its buffer.


    For example, calling `view.$(''li'')` will return a jQuery object containing

    all of the `li` elements inside the DOM element of this view.'
  itemtype: method
  name: $
  params:
  - name: selector
    description: a jQuery-compatible selector string
    type: String
    optional: true
  return:
    description: the jQuery object for the DOM node
    type: JQuery
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1463
  description: ! 'Appends the view''s element to the specified parent element.


    If the view does not have an HTML representation yet, `createElement()`

    will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing.


    This is not typically a function that you will need to call directly when

    building your application. You might consider using `Ember.ContainerView`

    instead. If you do need to use `appendTo`, be sure that the target element

    you are providing is associated with an `Ember.Application` and does not

    have an ancestor element that is associated with an Ember view.'
  itemtype: method
  name: appendTo
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1495
  description: ! 'Replaces the content of the specified parent element with this view''s

    element. If the view does not have an HTML representation yet,

    `createElement()` will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing'
  itemtype: method
  name: replaceIn
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: received
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1520
  access: private
  tagname: ! "Schedules a DOM operation to occur during the next render phase. This\nensures
    that all bindings have finished synchronizing before the view is\nrendered.\n\nTo
    use, pass a function that performs a DOM operation.\n\nBefore your function is
    called, this view and all child views will receive\nthe `willInsertElement` event.
    After your function is invoked, this view\nand all of its child views will receive
    the `didInsertElement` event.\n\n```javascript\nview._insertElementLater(function()
    {\n  this.createElement();\n  this.$().appendTo('body');\n});\n```"
  itemtype: method
  name: _insertElementLater
  params:
  - name: fn
    description: the function that inserts the element into the DOM
    type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1552
  description: ! 'Appends the view''s element to the document body. If the view does

    not have an HTML representation yet, `createElement()` will be called

    automatically.


    If your application uses the `rootElement` property, you must append

    the view within that element. Rendering views outside of the `rootElement`

    is not supported.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the document body until all bindings have

    finished synchronizing.'
  itemtype: method
  name: append
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1572
  description: Removes the view's element from the element to which it is attached.
  itemtype: method
  name: remove
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1592
  description: ! 'Attempts to discover the element in the parent element. The default

    implementation looks for an element with an ID of `elementId` (or the

    view''s guid if `elementId` is null). You can override this method to

    provide your own form of lookup. For example, if you want to discover your

    element using a CSS class name instead of an ID.'
  itemtype: method
  name: findElementInParentElement
  params:
  - name: parentElement
    description: The parent's DOM element
    type: DOMElement
  return:
    description: The discovered element
    type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1608
  description: ! 'Creates a DOM representation of the view and all of its

    child views by recursively calling the `render()` method.


    After the element has been created, `didInsertElement` will

    be called on this view and all of its child views.'
  itemtype: method
  name: createElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1627
  description: Called when a view is going to insert an element into the DOM.
  itemtype: event
  name: willInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1634
  description: ! 'Called when the element of the view has been inserted into the DOM

    or after the view was re-rendered. Override this function to do any

    set up that requires an element in the document body.'
  itemtype: event
  name: didInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1643
  description: ! 'Called when the view is about to rerender, but before anything has

    been torn down. This is a good opportunity to tear down any manual

    observers you have installed based on the DOM state'
  itemtype: event
  name: willClearRender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1652
  access: private
  tagname: Run this callback on the current view (unless includeSelf is false) and
    recursively on child views.
  itemtype: method
  name: invokeRecursively
  params:
  - name: fn
    description: ''
    type: Function
  - name: includeSelf
    description: (optional, default true)
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1712
  description: ! 'Destroys any existing element along with the element for any child
    views

    as well. If the view does not currently have a element, then this method

    will do nothing.


    If you implement `willDestroyElement()` on your view, then this method will

    be invoked on your view before your element is destroyed to give you a

    chance to clean up any event handlers, etc.


    If you write a `willDestroyElement()` handler, you can assume that your

    `didInsertElement()` handler was called earlier for the same element.


    Normally you will not call or override this method yourself, but you may

    want to implement the above callbacks when it is run.'
  itemtype: method
  name: destroyElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1734
  description: ! 'Called when the element of the view is going to be destroyed. Override

    this function to do any teardown that requires an element, like removing

    event listeners.'
  itemtype: event
  name: willDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1743
  access: private
  tagname: ! 'Triggers the `willDestroyElement` event (which invokes the

    `willDestroyElement()` method if it exists) on this view and all child

    views.


    Before triggering `willDestroyElement`, it first triggers the

    `willClearRender` event recursively.'
  itemtype: method
  name: _notifyWillDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1768
  access: private
  tagname: ! 'If this view''s element changes, we need to invalidate the caches of
    our

    child views so that we do not retain references to DOM elements that are

    no longer needed.'
  itemtype: method
  name: _elementDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1783
  description: Called when the parentView property has changed.
  itemtype: event
  name: parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1851
  description: ! 'Tag name for the view''s outer element. The tag name is only used
    when an

    element is first created. If you change the `tagName` for an element, you

    must destroy and recreate the view element.


    By default, the render buffer will use a `<div>` tag for views.'
  itemtype: property
  name: tagName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1867
  description: ! 'The WAI-ARIA role of the control represented by this view. For example,
    a

    button may have a role of type ''button'', or a pane may have a role of

    type ''alertdialog''. This property is used by assistive software to help

    visually challenged users navigate rich web applications.


    The full list of valid WAI-ARIA roles is available at:

    [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)'
  itemtype: property
  name: ariaRole
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1882
  description: ! 'Standard CSS class names to apply to the view''s outer element.
    This

    property automatically inherits any class names defined by the view''s

    superclasses as well.'
  itemtype: property
  name: classNames
  type: Array
  default: ! '[''ember-view'']'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1893
  description: ! "A list of properties of the view to apply as class names. If the
    property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n//
    Applies the 'high' class to the view element\nEmber.View.extend({\n  classNameBindings:
    ['priority']\n  priority: 'high'\n});\n```\n\nIf the value of the property is
    a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n//
    Applies the 'is-urgent' class to the view element\nEmber.View.extend({\n  classNameBindings:
    ['isUrgent']\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom
    value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n//
    Applies the 'urgent' class to the view element\nEmber.View.extend({\n  classNameBindings:
    ['isUrgent:urgent']\n  isUrgent: true\n});\n```\n\nThis list of properties is
    inherited from the view's superclasses as well."
  itemtype: property
  name: classNameBindings
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1936
  description: ! "A list of properties of the view to apply as attributes. If the
    property is\na string value, the value of that string will be applied as the attribute.\n\n```javascript\n//
    Applies the type attribute to the element\n// with the value \"button\", like
    <div type=\"button\">\nEmber.View.extend({\n  attributeBindings: ['type'],\n  type:
    'button'\n});\n```\n\nIf the value of the property is a Boolean, the name of that
    property is\nadded as an attribute.\n\n```javascript\n// Renders something like
    <div enabled=\"enabled\">\nEmber.View.extend({\n  attributeBindings: ['enabled'],\n
    \ enabled: true\n});\n```"
  itemtype: property
  name: attributeBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1968
  access: private
  tagname: ! "Setup a view, but do not finish waking it up.\n- configure `childViews`\n-
    register the view with the global views hash, which is used for event\n  dispatch"
  itemtype: method
  name: init
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1997
  description: Removes the child view from the parent view.
  itemtype: method
  name: removeChild
  params:
  - name: view
    description: ''
    type: Ember.View
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2023
  description: Removes all children from the `parentView`.
  itemtype: method
  name: removeAllChildren
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2041
  description: ! 'Removes the view from its `parentView`, if one is found. Otherwise

    does nothing.'
  itemtype: method
  name: removeFromParent
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2058
  description: ! 'You must call `destroy` on a view to destroy the view (and all of
    its

    child views). This will remove the view from any parent node, then make

    sure that the DOM element managed by the view can be released by the

    memory manager.'
  itemtype: method
  name: destroy
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2093
  description: ! 'Instantiates a view to be added to the childViews array during view

    initialization. You generally will not call this method directly unless

    you are overriding `createChildViews()`. Note that this method will

    automatically configure the correct settings on the new view instance to

    act as a child of the parent.'
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class|String
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2154
  access: private
  tagname: ! 'When the view''s `isVisible` property changes, toggle the visibility

    element of the actual DOM element.'
  itemtype: method
  name: _isVisibleDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2239
  access: private
  tagname: Handle events from `Ember.EventDispatcher`
  itemtype: method
  name: handleEvent
  params:
  - name: eventName
    description: ''
    type: String
  - name: evt
    description: ''
    type: Event
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2348
  access: private
  tagname: ! "Parse a path and return an object which holds the parsed properties.\n\nFor
    example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing
    object:\n\n```javascript\n{\n  path: \"content.isEnabled\",\n  className: \"enabled\",\n
    \ falsyClassName: \"disabled\",\n  classNames: \":enabled:disabled\"\n}\n```"
  itemtype: method
  name: _parsePropertyPath
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2392
  access: private
  tagname: ! "Get the class name for a given value, based on the path, optional\n`className`
    and optional `falsyClassName`.\n\n- if a `className` or `falsyClassName` has been
    specified:\n  - if the value is truthy and `className` has been specified,\n    `className`
    is returned\n  - if the value is falsy and `falsyClassName` has been specified,\n
    \   `falsyClassName` is returned\n  - otherwise `null` is returned\n- if the value
    is `true`, the dasherized last part of the supplied path\n  is returned\n- if
    the value is not `false`, `undefined` or `null`, the `value`\n  is returned\n-
    if none of the above rules apply, `null` is returned"
  itemtype: method
  name: _classStringForValue
  params:
  - name: path
    description: ''
  - name: val
    description: ''
  - name: className
    description: ''
  - name: falsyClassName
    description: ''
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2467
  description: Global views hash
  itemtype: property
  name: views
  static: 1
  type: Hash
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/core.js
  line: 9
  description: Alias for jQuery
  itemtype: method
  name: $
  class: Ember
  module: ember
  submodule: ember-views
