---
project:
  name: The Ember API
  description: 'The Ember API: a framework for building ambitious web applications'
  version: 1.4.0
  url: http://emberjs.com/
  sha: v1.4.0
files:
  "../packages/container/lib/main.js":
    name: "../packages/container/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-application/lib/ext/controller.js":
    name: "../packages/ember-application/lib/ext/controller.js"
    modules:
      ember-application: 1
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-application/lib/system/application.js":
    name: "../packages/ember-application/lib/system/application.js"
    modules: {}
    classes:
      Ember.Application: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-application/lib/system/resolver.js":
    name: "../packages/ember-application/lib/system/resolver.js"
    modules: {}
    classes:
      Ember.DefaultResolver: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-application/lib/main.js":
    name: "../packages/ember-application/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-debug/lib/main.js":
    name: "../packages/ember-debug/lib/main.js"
    modules:
      ember-debug: 1
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-extension-support/lib/data_adapter.js":
    name: "../packages/ember-extension-support/lib/data_adapter.js"
    modules:
      ember-extension-support: 1
    classes:
      Ember.DataAdapter: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-extension-support/lib/main.js":
    name: "../packages/ember-extension-support/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-handlebars-compiler/lib/main.js":
    name: "../packages/ember-handlebars-compiler/lib/main.js"
    modules:
      ember-handlebars-compiler: 1
    classes:
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors:
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
  "../packages/ember-handlebars/lib/controls/checkbox.js":
    name: "../packages/ember-handlebars/lib/controls/checkbox.js"
    modules:
      ember-handlebars: 1
    classes:
      Ember.Checkbox: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/controls/select.js":
    name: "../packages/ember-handlebars/lib/controls/select.js"
    modules: {}
    classes:
      Ember.Select: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/controls/text_area.js":
    name: "../packages/ember-handlebars/lib/controls/text_area.js"
    modules: {}
    classes:
      Ember.TextArea: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/controls/text_field.js":
    name: "../packages/ember-handlebars/lib/controls/text_field.js"
    modules: {}
    classes:
      Ember.TextField: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/controls/text_support.js":
    name: "../packages/ember-handlebars/lib/controls/text_support.js"
    modules: {}
    classes:
      Ember.TextSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/helpers/binding.js":
    name: "../packages/ember-handlebars/lib/helpers/binding.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/collection.js":
    name: "../packages/ember-handlebars/lib/helpers/collection.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/debug.js":
    name: "../packages/ember-handlebars/lib/helpers/debug.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/each.js":
    name: "../packages/ember-handlebars/lib/helpers/each.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/loc.js":
    name: "../packages/ember-handlebars/lib/helpers/loc.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/partial.js":
    name: "../packages/ember-handlebars/lib/helpers/partial.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/template.js":
    name: "../packages/ember-handlebars/lib/helpers/template.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/unbound.js":
    name: "../packages/ember-handlebars/lib/helpers/unbound.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/view.js":
    name: "../packages/ember-handlebars/lib/helpers/view.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/helpers/yield.js":
    name: "../packages/ember-handlebars/lib/helpers/yield.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/views/handlebars_bound_view.js":
    name: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
    modules: {}
    classes:
      Ember._HandlebarsBoundView: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/views/metamorph_view.js":
    name: "../packages/ember-handlebars/lib/views/metamorph_view.js"
    modules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-handlebars/lib/controls.js":
    name: "../packages/ember-handlebars/lib/controls.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/ext.js":
    name: "../packages/ember-handlebars/lib/ext.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/loader.js":
    name: "../packages/ember-handlebars/lib/loader.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars: 1
    namespaces: {}
  "../packages/ember-handlebars/lib/main.js":
    name: "../packages/ember-handlebars/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-handlebars/lib/string.js":
    name: "../packages/ember-handlebars/lib/string.js"
    modules: {}
    classes: {}
    fors:
      Ember.String: 1
      String: 1
    namespaces: {}
  "../packages/ember-metal/lib/array.js":
    name: "../packages/ember-metal/lib/array.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/binding.js":
    name: "../packages/ember-metal/lib/binding.js"
    modules: {}
    classes:
      Ember.Binding: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/computed.js":
    name: "../packages/ember-metal/lib/computed.js"
    modules: {}
    classes:
      Ember.ComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/core.js":
    name: "../packages/ember-metal/lib/core.js"
    modules: {}
    classes:
      Ember: 1
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/enumerable_utils.js":
    name: "../packages/ember-metal/lib/enumerable_utils.js"
    modules: {}
    classes:
      Ember.EnumerableUtils: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/error.js":
    name: "../packages/ember-metal/lib/error.js"
    modules: {}
    classes:
      Ember.Error: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/events.js":
    name: "../packages/ember-metal/lib/events.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/expand_properties.js":
    name: "../packages/ember-metal/lib/expand_properties.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-metal/lib/get_properties.js":
    name: "../packages/ember-metal/lib/get_properties.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-metal/lib/instrumentation.js":
    name: "../packages/ember-metal/lib/instrumentation.js"
    modules: {}
    classes:
      Ember.Instrumentation: 1
    fors: {}
    namespaces:
      Ember: 1
      Ember.Instrumentation: 1
  "../packages/ember-metal/lib/logger.js":
    name: "../packages/ember-metal/lib/logger.js"
    modules: {}
    classes:
      Ember.Logger: 1
    fors:
      Ember.Logger: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/main.js":
    name: "../packages/ember-metal/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-metal/lib/map.js":
    name: "../packages/ember-metal/lib/map.js"
    modules: {}
    classes:
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/mixin.js":
    name: "../packages/ember-metal/lib/mixin.js"
    modules: {}
    classes:
      Ember.Mixin: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/observer.js":
    name: "../packages/ember-metal/lib/observer.js"
    modules:
      ember-metal: 1
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-metal/lib/platform.js":
    name: "../packages/ember-metal/lib/platform.js"
    modules: {}
    classes:
      Ember.platform: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/properties.js":
    name: "../packages/ember-metal/lib/properties.js"
    modules: {}
    classes:
      Ember.Descriptor: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-metal/lib/property_events.js":
    name: "../packages/ember-metal/lib/property_events.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/property_get.js":
    name: "../packages/ember-metal/lib/property_get.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/property_set.js":
    name: "../packages/ember-metal/lib/property_set.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/run_loop.js":
    name: "../packages/ember-metal/lib/run_loop.js"
    modules: {}
    classes:
      Ember.run: 1
    fors: {}
    namespaces:
      Ember: 1
      Ember.run: 1
  "../packages/ember-metal/lib/set_properties.js":
    name: "../packages/ember-metal/lib/set_properties.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-metal/lib/utils.js":
    name: "../packages/ember-metal/lib/utils.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-metal/lib/watching.js":
    name: "../packages/ember-metal/lib/watching.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-routing/lib/ext/controller.js":
    name: "../packages/ember-routing/lib/ext/controller.js"
    modules:
      ember-routing: 1
    classes: {}
    fors:
      Ember.ControllerMixin: 1
    namespaces: {}
  "../packages/ember-routing/lib/ext/view.js":
    name: "../packages/ember-routing/lib/ext/view.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-routing/lib/helpers/action.js":
    name: "../packages/ember-routing/lib/helpers/action.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-routing/lib/helpers/link_to.js":
    name: "../packages/ember-routing/lib/helpers/link_to.js"
    modules: {}
    classes:
      Ember.LinkView: 1
    fors:
      Ember.Handlebars.helpers: 1
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/helpers/outlet.js":
    name: "../packages/ember-routing/lib/helpers/outlet.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-routing/lib/helpers/render.js":
    name: "../packages/ember-routing/lib/helpers/render.js"
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  "../packages/ember-routing/lib/location/api.js":
    name: "../packages/ember-routing/lib/location/api.js"
    modules: {}
    classes:
      Ember.Location: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/location/hash_location.js":
    name: "../packages/ember-routing/lib/location/hash_location.js"
    modules: {}
    classes:
      Ember.HashLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/location/history_location.js":
    name: "../packages/ember-routing/lib/location/history_location.js"
    modules: {}
    classes:
      Ember.HistoryLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/location/none_location.js":
    name: "../packages/ember-routing/lib/location/none_location.js"
    modules: {}
    classes:
      Ember.NoneLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/system/controller_for.js":
    name: "../packages/ember-routing/lib/system/controller_for.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-routing/lib/system/dsl.js":
    name: "../packages/ember-routing/lib/system/dsl.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-routing/lib/system/route.js":
    name: "../packages/ember-routing/lib/system/route.js"
    modules: {}
    classes:
      Ember.Route: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/system/router.js":
    name: "../packages/ember-routing/lib/system/router.js"
    modules: {}
    classes:
      Ember.Router: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-routing/lib/ext.js":
    name: "../packages/ember-routing/lib/ext.js"
    modules:
      ember-views: 1
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-routing/lib/main.js":
    name: "../packages/ember-routing/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-runtime/lib/computed/array_computed.js":
    name: "../packages/ember-runtime/lib/computed/array_computed.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-runtime/lib/computed/reduce_computed.js":
    name: "../packages/ember-runtime/lib/computed/reduce_computed.js"
    modules: {}
    classes:
      Ember.ReduceComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/computed/reduce_computed_macros.js":
    name: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
    modules:
      ember-runtime: 1
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-runtime/lib/controllers/array_controller.js":
    name: "../packages/ember-runtime/lib/controllers/array_controller.js"
    modules: {}
    classes:
      Ember.ArrayController: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/controllers/controller.js":
    name: "../packages/ember-runtime/lib/controllers/controller.js"
    modules: {}
    classes:
      Ember.Controller: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/controllers/object_controller.js":
    name: "../packages/ember-runtime/lib/controllers/object_controller.js"
    modules: {}
    classes:
      Ember.ObjectController: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/ext/function.js":
    name: "../packages/ember-runtime/lib/ext/function.js"
    modules: {}
    classes: {}
    fors:
      Function: 1
    namespaces: {}
  "../packages/ember-runtime/lib/ext/string.js":
    name: "../packages/ember-runtime/lib/ext/string.js"
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  "../packages/ember-runtime/lib/mixins/action_handler.js":
    name: "../packages/ember-runtime/lib/mixins/action_handler.js"
    modules: {}
    classes:
      Ember.ActionHandler: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/array.js":
    name: "../packages/ember-runtime/lib/mixins/array.js"
    modules: {}
    classes:
      Ember.Array: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/comparable.js":
    name: "../packages/ember-runtime/lib/mixins/comparable.js"
    modules: {}
    classes:
      Ember.Comparable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/copyable.js":
    name: "../packages/ember-runtime/lib/mixins/copyable.js"
    modules: {}
    classes:
      Ember.Copyable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/deferred.js":
    name: "../packages/ember-runtime/lib/mixins/deferred.js"
    modules: {}
    classes:
      Ember.Deferred: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/enumerable.js":
    name: "../packages/ember-runtime/lib/mixins/enumerable.js"
    modules: {}
    classes:
      Ember.Enumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/evented.js":
    name: "../packages/ember-runtime/lib/mixins/evented.js"
    modules: {}
    classes:
      Ember.Evented: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/freezable.js":
    name: "../packages/ember-runtime/lib/mixins/freezable.js"
    modules: {}
    classes:
      Ember.Freezable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/mutable_array.js":
    name: "../packages/ember-runtime/lib/mixins/mutable_array.js"
    modules: {}
    classes:
      Ember.MutableArray: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/mutable_enumerable.js":
    name: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
    modules: {}
    classes:
      Ember.MutableEnumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/observable.js":
    name: "../packages/ember-runtime/lib/mixins/observable.js"
    modules: {}
    classes:
      Ember.Observable: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/promise_proxy.js":
    name: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
    modules: {}
    classes:
      Ember.PromiseProxyMixin: 1
    fors: {}
    namespaces: {}
  "../packages/ember-runtime/lib/mixins/sortable.js":
    name: "../packages/ember-runtime/lib/mixins/sortable.js"
    modules: {}
    classes:
      Ember.SortableMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/mixins/target_action_support.js":
    name: "../packages/ember-runtime/lib/mixins/target_action_support.js"
    modules: {}
    classes:
      Ember.TargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/array_proxy.js":
    name: "../packages/ember-runtime/lib/system/array_proxy.js"
    modules: {}
    classes:
      Ember.ArrayProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/core_object.js":
    name: "../packages/ember-runtime/lib/system/core_object.js"
    modules: {}
    classes:
      Ember.CoreObject: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/each_proxy.js":
    name: "../packages/ember-runtime/lib/system/each_proxy.js"
    modules: {}
    classes:
      Ember.EachProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/lazy_load.js":
    name: "../packages/ember-runtime/lib/system/lazy_load.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-runtime/lib/system/namespace.js":
    name: "../packages/ember-runtime/lib/system/namespace.js"
    modules: {}
    classes:
      Ember.Namespace: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/native_array.js":
    name: "../packages/ember-runtime/lib/system/native_array.js"
    modules: {}
    classes:
      Ember.NativeArray: 1
    fors:
      Ember: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/object.js":
    name: "../packages/ember-runtime/lib/system/object.js"
    modules: {}
    classes:
      Ember.Object: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/object_proxy.js":
    name: "../packages/ember-runtime/lib/system/object_proxy.js"
    modules: {}
    classes:
      Ember.ObjectProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/set.js":
    name: "../packages/ember-runtime/lib/system/set.js"
    modules: {}
    classes:
      Ember.Set: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/string.js":
    name: "../packages/ember-runtime/lib/system/string.js"
    modules: {}
    classes:
      Ember.String: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/subarray.js":
    name: "../packages/ember-runtime/lib/system/subarray.js"
    modules: {}
    classes:
      Ember.SubArray: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/system/tracked_array.js":
    name: "../packages/ember-runtime/lib/system/tracked_array.js"
    modules: {}
    classes:
      Ember.TrackedArray: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-runtime/lib/core.js":
    name: "../packages/ember-runtime/lib/core.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-runtime/lib/main.js":
    name: "../packages/ember-runtime/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-testing/lib/adapters.js":
    name: "../packages/ember-testing/lib/adapters.js"
    modules:
      ember-testing: 1
    classes:
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
    fors: {}
    namespaces:
      Ember.Test: 1
  "../packages/ember-testing/lib/helpers.js":
    name: "../packages/ember-testing/lib/helpers.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-testing/lib/main.js":
    name: "../packages/ember-testing/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-testing/lib/support.js":
    name: "../packages/ember-testing/lib/support.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-testing/lib/test.js":
    name: "../packages/ember-testing/lib/test.js"
    modules: {}
    classes:
      Ember.Test: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/mixins/component_template_deprecation.js":
    name: "../packages/ember-views/lib/mixins/component_template_deprecation.js"
    modules: {}
    classes:
      Ember.ComponentTemplateDeprecation: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/mixins/view_target_action_support.js":
    name: "../packages/ember-views/lib/mixins/view_target_action_support.js"
    modules: {}
    classes:
      Ember.ViewTargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/system/controller.js":
    name: "../packages/ember-views/lib/system/controller.js"
    modules: {}
    classes:
      Ember.ControllerMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/system/event_dispatcher.js":
    name: "../packages/ember-views/lib/system/event_dispatcher.js"
    modules: {}
    classes:
      Ember.EventDispatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/system/ext.js":
    name: "../packages/ember-views/lib/system/ext.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/system/jquery_ext.js":
    name: "../packages/ember-views/lib/system/jquery_ext.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/system/render_buffer.js":
    name: "../packages/ember-views/lib/system/render_buffer.js"
    modules: {}
    classes:
      Ember.RenderBuffer: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/system/utils.js":
    name: "../packages/ember-views/lib/system/utils.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/default.js":
    name: "../packages/ember-views/lib/views/states/default.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/destroying.js":
    name: "../packages/ember-views/lib/views/states/destroying.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/has_element.js":
    name: "../packages/ember-views/lib/views/states/has_element.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/in_buffer.js":
    name: "../packages/ember-views/lib/views/states/in_buffer.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/in_dom.js":
    name: "../packages/ember-views/lib/views/states/in_dom.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/states/pre_render.js":
    name: "../packages/ember-views/lib/views/states/pre_render.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-views/lib/views/collection_view.js":
    name: "../packages/ember-views/lib/views/collection_view.js"
    modules: {}
    classes:
      Ember.CollectionView: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/views/component.js":
    name: "../packages/ember-views/lib/views/component.js"
    modules: {}
    classes:
      Ember.Component: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/views/container_view.js":
    name: "../packages/ember-views/lib/views/container_view.js"
    modules: {}
    classes:
      Ember.ContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/views/view.js":
    name: "../packages/ember-views/lib/views/view.js"
    modules: {}
    classes:
      Ember.CoreView: 1
      Ember.View: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  "../packages/ember-views/lib/core.js":
    name: "../packages/ember-views/lib/core.js"
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  "../packages/ember-views/lib/main.js":
    name: "../packages/ember-views/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember/lib/main.js":
    name: "../packages/ember/lib/main.js"
    modules:
      ember: 1
    classes:
      Ember.StateManager: 1
      Ember.State: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/metamorph/lib/main.js":
    name: "../packages/metamorph/lib/main.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/rsvp/lib/main.js":
    name: "../packages/rsvp/lib/main.js"
    modules:
      RSVP: 1
    classes:
      Ember.RSVP: 1
      Ember.RSVP.EventTarget: 1
      Ember.RSVP.Promise: 1
    fors:
      Ember.RSVP: 1
      Ember.RSVP.Promise: 1
    namespaces: {}
modules:
  ember:
    name: ember
    submodules:
      ember-application: 1
      ember-debug: 1
      ember-extension-support: 1
      ember-handlebars-compiler: 1
      ember-handlebars: 1
      ember-routing: 1
      ember-views: 1
      ember-runtime: 1
      ember-testing: 1
    classes:
      Ember.ControllerMixin: 1
      Ember.Application: 1
      Ember.DefaultResolver: 1
      Ember: 1
      Ember.DataAdapter: 1
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
      Ember.String: 1
      String: 1
      Ember.EnumerableUtils: 1
      Ember.Error: 1
      Ember.Mixin: 1
      Ember.LinkView: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
      Ember.ReduceComputedProperty: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.SubArray: 1
      Ember.TrackedArray: 1
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
      Ember.Test: 1
      Ember.ComponentTemplateDeprecation: 1
      Ember.ViewTargetActionSupport: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.Component: 1
      Ember.ContainerView: 1
      Ember.CoreView: 1
      Ember.View: 1
      Ember.StateManager: 1
      Ember.State: 1
    fors:
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.helpers: 1
      Ember: 1
      Ember.String: 1
      String: 1
      Ember.ControllerMixin: 1
      Function: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
      Ember.Test: 1
    tag: module
    file: "../packages/ember/lib/main.js"
    line: 35
    description: Ember
  ember-application:
    name: ember-application
    submodules: {}
    classes:
      Ember.Application: 1
      Ember.DefaultResolver: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-application/lib/system/resolver.js"
    line: 11
    description: Ember Application
    requires:
    - ember-views
    - ember-routing
  ember-debug:
    name: ember-debug
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: "../packages/ember-debug/lib/main.js"
    line: 3
    description: Ember Debug
  ember-extension-support:
    name: ember-extension-support
    submodules: {}
    classes:
      Ember.DataAdapter: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-extension-support/lib/data_adapter.js"
    line: 8
    description: Ember Extension Support
    requires:
    - ember-application
  ember-handlebars-compiler:
    name: ember-handlebars-compiler
    submodules: {}
    classes:
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
    module: ember
    namespace: ''
    file: "../packages/ember-handlebars-compiler/lib/main.js"
    line: 147
    description: |-
      Prepares the Handlebars templating library for use inside Ember's view
      system.

      The `Ember.Handlebars` object is the standard Handlebars library, extended to
      use Ember's `get()` method instead of direct property access, which allows
      computed properties to be used inside templates.

      To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.
      This will return a function that can be used by `Ember.View` for rendering.
  ember-handlebars:
    name: ember-handlebars
    submodules: {}
    classes:
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-handlebars/lib/views/metamorph_view.js"
    line: 123
    description: Ember Handlebars
    requires:
    - ember-views
  ember-metal:
    name: ember-metal
    submodules: {}
    classes:
      Ember: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.Instrumentation: 1
      Ember.Logger: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Ember.platform: 1
      Ember.Descriptor: 1
      Ember.run: 1
    fors:
      Ember: 1
      Ember.Logger: 1
    namespaces:
      Ember: 1
      Ember.Instrumentation: 1
      Ember.run: 1
    tag: module
    file: "../packages/ember-metal/lib/run_loop.js"
    line: 28
    description: |-
      All Ember methods and functions are defined inside of this namespace. You
      generally should not add new properties to this namespace as it may be
      overwritten by future versions of Ember.

      You can also use the shorthand `Em` instead of `Ember`.

      Ember-Runtime is a framework that provides core functions for Ember including
      cross-platform functions, support for property observing and objects. Its
      focus is on small size and performance. You can use this in place of or
      along-side other cross-platform libraries such as jQuery.

      The core Runtime framework is based on the jQuery API with a number of
      performance optimizations.
    module: ember
  ember-routing:
    name: ember-routing
    submodules: {}
    classes:
      Ember.LinkView: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-routing/lib/system/router.js"
    line: 18
    description: Ember Routing
    requires:
    - ember-views
  ember-views:
    name: ember-views
    submodules: {}
    classes:
      Ember.ControllerMixin: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.Component: 1
      Ember.ContainerView: 1
      Ember.CoreView: 1
      Ember.View: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-views/lib/views/view.js"
    line: 287
    description: Ember Views
    requires:
    - ember-runtime
    tag: main
    itemtype: main
  ember-runtime:
    name: ember-runtime
    submodules: {}
    classes:
      Ember.String: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-runtime/lib/system/set.js"
    line: 14
    description: Ember Runtime
    requires:
    - ember-metal
  ember-testing:
    name: ember-testing
    submodules: {}
    classes:
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
      Ember.Test: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember.Test: 1
      Ember: 1
    module: ember
    namespace: ''
    file: "../packages/ember-testing/lib/test.js"
    line: 9
    description: Ember Testing
    requires:
    - ember-application
  RSVP:
    name: RSVP
    submodules: {}
    classes:
      Ember.RSVP: 1
      Ember.RSVP.EventTarget: 1
      Ember.RSVP.Promise: 1
    fors:
      Ember.RSVP: 1
      Ember.RSVP.Promise: 1
    namespaces: {}
    tag: module
    file: "../packages/rsvp/lib/main.js"
    line: 950
classes:
  Ember.ControllerMixin:
    name: Ember.ControllerMixin
    shortname: Ember.ControllerMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    - Ember.Controller
    - Ember.ObjectController
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/system/controller.js"
    line: 11
    description: Additional methods for the ControllerMixin
    uses:
    - Ember.ActionHandler
  Ember.Application:
    name: Ember.Application
    shortname: Ember.Application
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: "../packages/ember-application/lib/system/application.js"
    line: 28
    description: |-
      An instance of `Ember.Application` is the starting point for every Ember
      application. It helps to instantiate, initialize and coordinate the many
      objects that make up your app.

      Each Ember app has one and only one `Ember.Application` object. In fact, the
      very first thing you should do in your application is create the instance:

      ```javascript
      window.App = Ember.Application.create();
      ```

      Typically, the application object is the only global variable. All other
      classes in your app should be properties on the `Ember.Application` instance,
      which highlights its first role: a global namespace.

      For example, if you define a view class, it might look like this:

      ```javascript
      App.MyView = Ember.View.extend();
      ```

      By default, calling `Ember.Application.create()` will automatically initialize
      your application by calling the `Ember.Application.initialize()` method. If
      you need to delay initialization, you can call your app's `deferReadiness()`
      method. When you are ready for your app to be initialized, call its
      `advanceReadiness()` method.

      You can define a `ready` method on the `Ember.Application` instance, which
      will be run by Ember when the application is initialized.

      Because `Ember.Application` inherits from `Ember.Namespace`, any classes
      you create will have useful string representations when calling `toString()`.
      See the `Ember.Namespace` documentation for more information.

      While you can think of your `Ember.Application` as a container that holds the
      other classes in your application, there are several other responsibilities
      going on under-the-hood that you may want to understand.

      ### Event Delegation

      Ember uses a technique called _event delegation_. This allows the framework
      to set up a global, shared event listener instead of requiring each view to
      do it manually. For example, instead of each view registering its own
      `mousedown` listener on its associated element, Ember sets up a `mousedown`
      listener on the `body`.

      If a `mousedown` event occurs, Ember will look at the target of the event and
      start walking up the DOM node tree, finding corresponding views and invoking
      their `mouseDown` method as it goes.

      `Ember.Application` has a number of default events that it listens for, as
      well as a mapping from lowercase events to camel-cased view method names. For
      example, the `keypress` event causes the `keyPress` method on the view to be
      called, the `dblclick` event causes `doubleClick` to be called, and so on.

      If there is a bubbling browser event that Ember does not listen for by
      default, you can specify custom events and their corresponding view method
      names by setting the application's `customEvents` property:

      ```javascript
      App = Ember.Application.create({
        customEvents: {
          // add support for the paste event
          paste: "paste"
        }
      });
      ```

      By default, the application sets up these event listeners on the document
      body. However, in cases where you are embedding an Ember application inside
      an existing page, you may want it to set up the listeners on an element
      inside the body.

      For example, if only events inside a DOM element with the ID of `ember-app`
      should be delegated, set your application's `rootElement` property:

      ```javascript
      window.App = Ember.Application.create({
        rootElement: '#ember-app'
      });
      ```

      The `rootElement` can be either a DOM element or a jQuery-compatible selector
      string. Note that *views appended to the DOM outside the root element will
      not receive events.* If you specify a custom root element, make sure you only
      append views inside it!

      To learn more about the advantages of event delegation and the Ember view
      layer, and a list of the event listeners that are setup by default, visit the
      [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).

      ### Initializers

      Libraries on top of Ember can register additional initializers, like so:

      ```javascript
      Ember.Application.initializer({
        name: "store",

        initialize: function(container, application) {
          container.register('store:main', application.Store);
        }
      });
      ```

      ### Routing

      In addition to creating your application's router, `Ember.Application` is
      also responsible for telling the router when to start routing. Transitions
      between routes can be logged with the `LOG_TRANSITIONS` flag, and more
      detailed intra-transition logging can be logged with
      the `LOG_TRANSITIONS_INTERNAL` flag:

      ```javascript
      window.App = Ember.Application.create({
        LOG_TRANSITIONS: true, // basic logging of successful transitions
        LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
      });
      ```

      By default, the router will begin trying to translate the current URL into
      application state once the browser emits the `DOMContentReady` event. If you
      need to defer routing, you can call the application's `deferReadiness()`
      method. Once routing can begin, call the `advanceReadiness()` method.

      If there is any setup required before routing begins, you can implement a
      `ready()` method on your app that will be invoked immediately before routing
      begins.
      ```
    extends: Ember.Namespace
  Ember.DefaultResolver:
    name: Ember.DefaultResolver
    shortname: Ember.DefaultResolver
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: "../packages/ember-application/lib/system/resolver.js"
    line: 11
    description: |-
      The DefaultResolver defines the default lookup rules to resolve
      container lookups before consulting the container for registered
      items:

      * templates are looked up on `Ember.TEMPLATES`
      * other names are looked up on the application after converting
      the name. For example, `controller:post` looks up
      `App.PostController` by default.
      * there are some nuances (see examples below)

      ### How Resolving Works

      The container calls this object's `resolve` method with the
      `fullName` argument.

      It first parses the fullName into an object using `parseName`.

      Then it checks for the presence of a type-specific instance
      method of the form `resolve[Type]` and calls it if it exists.
      For example if it was resolving 'template:post', it would call
      the `resolveTemplate` method.

      Its last resort is to call the `resolveOther` method.

      The methods of this object are designed to be easy to override
      in a subclass. For example, you could enhance how a template
      is resolved like so:

      ```javascript
      App = Ember.Application.create({
        Resolver: Ember.DefaultResolver.extend({
          resolveTemplate: function(parsedName) {
            var resolvedTemplate = this._super(parsedName);
            if (resolvedTemplate) { return resolvedTemplate; }
            return Ember.TEMPLATES['not_found'];
          }
        })
      });
      ```

      Some examples of how names are resolved:

      ```
      'template:post' //=> Ember.TEMPLATES['post']
      'template:posts/byline' //=> Ember.TEMPLATES['posts/byline']
      'template:posts.byline' //=> Ember.TEMPLATES['posts/byline']
      'template:blogPost' //=> Ember.TEMPLATES['blogPost']
                          //   OR
                          //   Ember.TEMPLATES['blog_post']
      'controller:post' //=> App.PostController
      'controller:posts.index' //=> App.PostsIndexController
      'controller:blog/post' //=> Blog.PostController
      'controller:basic' //=> Ember.Controller
      'route:post' //=> App.PostRoute
      'route:posts.index' //=> App.PostsIndexRoute
      'route:blog/post' //=> Blog.PostRoute
      'route:basic' //=> Ember.Route
      'view:post' //=> App.PostView
      'view:posts.index' //=> App.PostsIndexView
      'view:blog/post' //=> Blog.PostView
      'view:basic' //=> Ember.View
      'foo:post' //=> App.PostFoo
      'model:post' //=> App.Post
      ```
    extends: Ember.Object
  Ember:
    name: Ember
    shortname: Ember
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: "../packages/ember-metal/lib/core.js"
    line: 8
    description: |-
      All Ember methods and functions are defined inside of this namespace. You
      generally should not add new properties to this namespace as it may be
      overwritten by future versions of Ember.

      You can also use the shorthand `Em` instead of `Ember`.

      Ember-Runtime is a framework that provides core functions for Ember including
      cross-platform functions, support for property observing and objects. Its
      focus is on small size and performance. You can use this in place of or
      along-side other cross-platform libraries such as jQuery.

      The core Runtime framework is based on the jQuery API with a number of
      performance optimizations.
    static: 1
    version: VERSION_STRING_PLACEHOLDER
  Ember.DataAdapter:
    name: Ember.DataAdapter
    shortname: Ember.DataAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-extension-support
    namespace: Ember
    file: "../packages/ember-extension-support/lib/data_adapter.js"
    line: 8
    description: |-
      The `DataAdapter` helps a data persistence library
      interface with tools that debug Ember such
      as the [Ember Extension](https://github.com/tildeio/ember-extension)
      for Chrome and Firefox.

      This class will be extended by a persistence library
      which will override some of the methods with
      library-specific code.

      The methods likely to be overridden are:

      * `getFilters`
      * `detect`
      * `columnsForType`
      * `getRecords`
      * `getRecordColumnValues`
      * `getRecordKeywords`
      * `getRecordFilterValues`
      * `getRecordColor`
      * `observeRecord`

      The adapter will need to be registered
      in the application's container as `dataAdapter:main`

      Example:

      ```javascript
      Application.initializer({
        name: "dataAdapter",

        initialize: function(container, application) {
          application.register('dataAdapter:main', DS.DataAdapter);
        }
      });
      ```
    extends: Ember.Object
  Ember.Handlebars:
    name: Ember.Handlebars
    shortname: Ember.Handlebars
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember
    file: "../packages/ember-handlebars-compiler/lib/main.js"
    line: 27
    description: |-
      Prepares the Handlebars templating library for use inside Ember's view
      system.

      The `Ember.Handlebars` object is the standard Handlebars library, extended to
      use Ember's `get()` method instead of direct property access, which allows
      computed properties to be used inside templates.

      To create an `Ember.Handlebars` template, call `Ember.Handlebars.compile()`.
      This will return a function that can be used by `Ember.View` for rendering.
  Ember.Handlebars.helpers:
    name: Ember.Handlebars.helpers
    shortname: Ember.Handlebars.helpers
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: "../packages/ember-handlebars-compiler/lib/main.js"
    line: 124
  Ember.Handlebars.Compiler:
    name: Ember.Handlebars.Compiler
    shortname: Ember.Handlebars.Compiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: "../packages/ember-handlebars-compiler/lib/main.js"
    line: 130
    description: Override the the opcode compiler and JavaScript compiler for Handlebars.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.Handlebars.JavaScriptCompiler:
    name: Ember.Handlebars.JavaScriptCompiler
    shortname: Ember.Handlebars.JavaScriptCompiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars-compiler
    namespace: Ember.Handlebars
    file: "../packages/ember-handlebars-compiler/lib/main.js"
    line: 147
    access: private
    tagname: ''
    is_constructor: 1
  Ember.Checkbox:
    name: Ember.Checkbox
    shortname: Ember.Checkbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/controls/checkbox.js"
    line: 11
    description: |-
      The internal class used to create text inputs when the `{{input}}`
      helper is used with `type` of `checkbox`.

      See [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.

      ## Direct manipulation of `checked`

      The `checked` attribute of an `Ember.Checkbox` object should always be set
      through the Ember object or by interacting with its rendered element
      representation via the mouse, keyboard, or touch. Updating the value of the
      checkbox via jQuery will result in the checked value of the object and its
      element losing synchronization.

      ## Layout and LayoutName properties

      Because HTML `input` elements are self closing `layout` and `layoutName`
      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
      layout section for more information.
    extends: Ember.View
  Ember.Select:
    name: Ember.Select
    shortname: Ember.Select
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/controls/select.js"
    line: 78
    description: |-
      The `Ember.Select` view class renders a
      [select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,
      allowing the user to choose from a list of options.

      The text and `value` property of each `<option>` element within the
      `<select>` element are populated from the objects in the `Element.Select`'s
      `content` property. The underlying data object of the selected `<option>` is
      stored in the `Element.Select`'s `value` property.

      ## The Content Property (array of strings)

      The simplest version of an `Ember.Select` takes an array of strings as its
      `content` property. The string will be used as both the `value` property and
      the inner text of each `<option>` element inside the rendered `<select>`.

      Example:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        names: ["Yehuda", "Tom"]
      });
      ```

      ```handlebars
      {{view Ember.Select content=names}}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```

      You can control which `<option>` is selected through the `Ember.Select`'s
      `value` property:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedName: 'Tom',
        names: ["Yehuda", "Tom"]
      });
      ```

      ```handlebars
      {{view Ember.Select
             content=names
             value=selectedName
      }}
      ```

      Would result in the following HTML with the `<option>` for 'Tom' selected:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom" selected="selected">Tom</option>
      </select>
      ```

      A user interacting with the rendered `<select>` to choose "Yehuda" would
      update the value of `selectedName` to "Yehuda".

      ## The Content Property (array of Objects)

      An `Ember.Select` can also take an array of JavaScript or Ember objects as
      its `content` property.

      When using objects you need to tell the `Ember.Select` which property should
      be accessed on each object to supply the `value` attribute of the `<option>`
      and which property should be used to supply the element text.

      The `optionValuePath` option is used to specify the path on each object to
      the desired property for the `value` attribute. The `optionLabelPath`
      specifies the path on each object to the desired property for the
      element's text. Both paths must reference each object itself as `content`:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        programmers: [
          {firstName: "Yehuda", id: 1},
          {firstName: "Tom",    id: 2}
        ]
      });
      ```

      ```handlebars
      {{view Ember.Select
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"}}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2">Tom</option>
      </select>
      ```

      The `value` attribute of the selected `<option>` within an `Ember.Select`
      can be bound to a property on another object:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        programmers: [
          {firstName: "Yehuda", id: 1},
          {firstName: "Tom",    id: 2}
        ],
        currentProgrammer: {
          id: 2
        }
      });
      ```

      ```handlebars
      {{view Ember.Select
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"
             value=currentProgrammer.id}}
      ```

      Would result in the following HTML with a selected option:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2" selected="selected">Tom</option>
      </select>
      ```

      Interacting with the rendered element by selecting the first option
      ('Yehuda') will update the `id` of `currentProgrammer`
      to match the `value` property of the newly selected `<option>`.

      Alternatively, you can control selection through the underlying objects
      used to render each object by binding the `selection` option. When the selected
      `<option>` is changed, the property path provided to `selection`
      will be updated to match the content object of the rendered `<option>`
      element:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedPerson: null,
        programmers: [
          {firstName: "Yehuda", id: 1},
          {firstName: "Tom",    id: 2}
        ]
      });
      ```

      ```handlebars
      {{view Ember.Select
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"
             selection=selectedPerson}}
      ```

      Would result in the following HTML with a selected option:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2" selected="selected">Tom</option>
      </select>
      ```

      Interacting with the rendered element by selecting the first option
      ('Yehuda') will update the `selectedPerson` to match the object of
      the newly selected `<option>`. In this case it is the first object
      in the `programmers`

      ## Supplying a Prompt

      A `null` value for the `Ember.Select`'s `value` or `selection` property
      results in there being no `<option>` with a `selected` attribute:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedProgrammer: null,
        programmers: [
          "Yehuda",
          "Tom"
        ]
      });
      ```

      ``` handlebars
      {{view Ember.Select
             content=programmers
             value=selectedProgrammer
      }}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```

      Although `selectedProgrammer` is `null` and no `<option>`
      has a `selected` attribute the rendered HTML will display the
      first item as though it were selected. You can supply a string
      value for the `Ember.Select` to display when there is no selection
      with the `prompt` option:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedProgrammer: null,
        programmers: [
          "Yehuda",
          "Tom"
        ]
      });
      ```

      ```handlebars
      {{view Ember.Select
             content=programmers
             value=selectedProgrammer
             prompt="Please select a name"
      }}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option>Please select a name</option>
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```
    extends: Ember.View
  Ember.TextArea:
    name: Ember.TextArea
    shortname: Ember.TextArea
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/controls/text_area.js"
    line: 12
    description: |-
      The internal class used to create textarea element when the `{{textarea}}`
      helper is used.

      See [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)  for usage details.

      ## Layout and LayoutName properties

      Because HTML `textarea` elements do not contain inner HTML the `layout` and
      `layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
      layout section for more information.
    extends: Ember.Component
    uses:
    - Ember.TextSupport
  Ember.TextField:
    name: Ember.TextField
    shortname: Ember.TextField
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/controls/text_field.js"
    line: 12
    description: |-
      The internal class used to create text inputs when the `{{input}}`
        helper is used with `type` of `text`.
      See [Handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.
      ## Layout and LayoutName properties
      Because HTML `input` elements are self closing `layout` and `layoutName`
        properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
        layout section for more information.
    extends: Ember.Component
    uses:
    - Ember.TextSupport
  Ember.TextSupport:
    name: Ember.TextSupport
    shortname: Ember.TextSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextArea
    - Ember.TextField
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/controls/text_support.js"
    line: 11
    description: Shared mixin used by `Ember.TextField` and `Ember.TextArea`.
    access: private
    tagname: ''
  Ember._HandlebarsBoundView:
    name: Ember._HandlebarsBoundView
    shortname: Ember._HandlebarsBoundView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
    line: 137
    description: |-
      `Ember._HandlebarsBoundView` is a private view created by the Handlebars
      `{{bind}}` helpers that is used to keep track of bound properties.

      Every time a property is bound using a `{{mustache}}`, an anonymous subclass
      of `Ember._HandlebarsBoundView` is created with the appropriate sub-template
      and context set up. When the associated property changes, just the template
      for this view will re-render.
    extends: Ember._MetamorphView
    access: private
    tagname: ''
  Ember._Metamorph:
    name: Ember._Metamorph
    shortname: Ember._Metamorph
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember._MetamorphView
    - Ember._SimpleMetamorphView
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/views/metamorph_view.js"
    line: 78
    access: private
    tagname: ''
  Ember._MetamorphView:
    name: Ember._MetamorphView
    shortname: Ember._MetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/views/metamorph_view.js"
    line: 114
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember._SimpleMetamorphView:
    name: Ember._SimpleMetamorphView
    shortname: Ember._SimpleMetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: "../packages/ember-handlebars/lib/views/metamorph_view.js"
    line: 123
    extends: Ember.CoreView
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember.String:
    name: Ember.String
    shortname: Ember.String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/string.js"
    line: 28
    description: |-
      Defines string helper methods including string formatting and localization.
      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be
      added to the `String.prototype` as well.
    submodule: ember-runtime
    static: 1
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: ''
  Ember.Binding:
    name: Ember.Binding
    shortname: Ember.Binding
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/binding.js"
    line: 326
    description: |-
      An `Ember.Binding` connects the properties of two objects so that whenever
      the value of one property changes, the other property will be changed also.

      ## Automatic Creation of Bindings with `/^*Binding/`-named Properties

      You do not usually create Binding objects directly but instead describe
      bindings in your class or object definition using automatic binding
      detection.

      Properties ending in a `Binding` suffix will be converted to `Ember.Binding`
      instances. The value of this property should be a string representing a path
      to another object or a custom binding instanced created using Binding helpers
      (see "One Way Bindings"):

      ```
      valueBinding: "MyApp.someController.title"
      ```

      This will create a binding from `MyApp.someController.title` to the `value`
      property of your object instance automatically. Now the two values will be
      kept in sync.

      ## One Way Bindings

      One especially useful binding customization you can use is the `oneWay()`
      helper. This helper tells Ember that you are only interested in
      receiving changes on the object you are binding from. For example, if you
      are binding to a preference and you want to be notified if the preference
      has changed, but your object will not be changing the preference itself, you
      could do:

      ```
      bigTitlesBinding: Ember.Binding.oneWay("MyApp.preferencesController.bigTitles")
      ```

      This way if the value of `MyApp.preferencesController.bigTitles` changes the
      `bigTitles` property of your object will change also. However, if you
      change the value of your `bigTitles` property, it will not update the
      `preferencesController`.

      One way bindings are almost twice as fast to setup and twice as fast to
      execute because the binding only has to worry about changes to one side.

      You should consider using one way bindings anytime you have an object that
      may be created frequently and you do not intend to change a property; only
      to monitor it for changes (such as in the example above).

      ## Adding Bindings Manually

      All of the examples above show you how to configure a custom binding, but the
      result of these customizations will be a binding template, not a fully active
      Binding instance. The binding will actually become active only when you
      instantiate the object the binding belongs to. It is useful however, to
      understand what actually happens when the binding is activated.

      For a binding to function it must have at least a `from` property and a `to`
      property. The `from` property path points to the object/key that you want to
      bind from while the `to` path points to the object/key you want to bind to.

      When you define a custom binding, you are usually describing the property
      you want to bind from (such as `MyApp.someController.value` in the examples
      above). When your object is created, it will automatically assign the value
      you want to bind `to` based on the name of your binding key. In the
      examples above, during init, Ember objects will effectively call
      something like this on your binding:

      ```javascript
      binding = Ember.Binding.from(this.valueBinding).to("value");
      ```

      This creates a new binding instance based on the template you provide, and
      sets the to path to the `value` property of the new object. Now that the
      binding is fully configured with a `from` and a `to`, it simply needs to be
      connected to become active. This is done through the `connect()` method:

      ```javascript
      binding.connect(this);
      ```

      Note that when you connect a binding you pass the object you want it to be
      connected to. This object will be used as the root for both the from and
      to side of the binding when inspecting relative paths. This allows the
      binding to be automatically inherited by subclassed objects as well.

      Now that the binding is connected, it will observe both the from and to side
      and relay changes.

      If you ever needed to do so (you almost never will, but it is useful to
      understand this anyway), you could manually create an active binding by
      using the `Ember.bind()` helper method. (This is the same method used by
      to setup your bindings on objects):

      ```javascript
      Ember.bind(MyApp.anotherObject, "value", "MyApp.someController.value");
      ```

      Both of these code fragments have the same effect as doing the most friendly
      form of binding creation like so:

      ```javascript
      MyApp.anotherObject = Ember.Object.create({
        valueBinding: "MyApp.someController.value",

        // OTHER CODE FOR THIS OBJECT...
      });
      ```

      Ember's built in binding creation method makes it easy to automatically
      create bindings for you. You should always use the highest-level APIs
      available, even if you understand how it works underneath.
    since: Ember 0.9
  Ember.ComputedProperty:
    name: Ember.ComputedProperty
    shortname: Ember.ComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/computed.js"
    line: 104
    description: |-
      A computed property transforms an objects function into a property.

      By default the function backing the computed property will only be called
      once and the result will be cached. You can specify various properties
      that your computed property is dependent on. This will force the cached
      result to be recomputed if the dependencies are modified.

      In the following example we declare a computed property (by calling
      `.property()` on the fullName function) and setup the properties
      dependencies (depending on firstName and lastName). The fullName function
      will be called once (regardless of how many times it is accessed) as long
      as it's dependencies have not been changed. Once firstName or lastName are updated
      any future calls (or anything bound) to fullName will incorporate the new
      values.

      ```javascript
      Person = Ember.Object.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,

        fullName: function() {
          var firstName = this.get('firstName');
          var lastName = this.get('lastName');

         return firstName + ' ' + lastName;
        }.property('firstName', 'lastName')
      });

      var tom = Person.create({
        firstName: "Tom",
        lastName: "Dale"
      });

      tom.get('fullName') // "Tom Dale"
      ```

      You can also define what Ember should do when setting a computed property.
      If you try to set a computed property, it will be invoked with the key and
      value you want to set it to. You can also accept the previous value as the
      third parameter.

      ```javascript

       Person = Ember.Object.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,

        fullName: function(key, value, oldValue) {
          // getter
          if (arguments.length === 1) {
            var firstName = this.get('firstName');
            var lastName = this.get('lastName');

            return firstName + ' ' + lastName;

          // setter
          } else {
            var name = value.split(" ");

            this.set('firstName', name[0]);
            this.set('lastName', name[1]);

            return value;
          }
        }.property('firstName', 'lastName')
      });

      var person = Person.create();
      person.set('fullName', "Peter Wagenet");
      person.get('firstName') // Peter
      person.get('lastName') // Wagenet
      ```
    extends: Ember.Descriptor
    is_constructor: 1
  Ember.EnumerableUtils:
    name: Ember.EnumerableUtils
    shortname: Ember.EnumerableUtils
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-metal/lib/enumerable_utils.js"
    line: 10
    description: |-
      Defines some convenience methods for working with Enumerables.
      `Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.
    static: 1
  Ember.Error:
    name: Ember.Error
    shortname: Ember.Error
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-metal/lib/error.js"
    line: 6
    description: A subclass of the JavaScript Error object for use in Ember.
    extends: Error
    is_constructor: 1
  Ember.Instrumentation:
    name: Ember.Instrumentation
    shortname: Ember.Instrumentation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.Instrumentation
    file: "../packages/ember-metal/lib/instrumentation.js"
    line: 3
    description: |-
      The purpose of the Ember Instrumentation module is
      to provide efficient, general-purpose instrumentation
      for Ember.

      Subscribe to a listener by using `Ember.subscribe`:

      ```javascript
      Ember.subscribe("render", {
        before: function(name, timestamp, payload) {

        },

        after: function(name, timestamp, payload) {

        }
      });
      ```

      If you return a value from the `before` callback, that same
      value will be passed as a fourth parameter to the `after`
      callback.

      Instrument a block of code by using `Ember.instrument`:

      ```javascript
      Ember.instrument("render.handlebars", payload, function() {
        // rendering logic
      }, binding);
      ```

      Event names passed to `Ember.instrument` are namespaced
      by periods, from more general to more specific. Subscribers
      can listen for events by whatever level of granularity they
      are interested in.

      In the above example, the event is `render.handlebars`,
      and the subscriber listened for all events beginning with
      `render`. It would receive callbacks for events named
      `render`, `render.handlebars`, `render.container`, or
      even `render.handlebars.layout`.
    static: 1
  Ember.Logger:
    name: Ember.Logger
    shortname: Ember.Logger
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/logger.js"
    line: 44
    description: |-
      Inside Ember-Metal, simply uses the methods from `imports.console`.
      Override this to provide more robust logging functionality.
  Ember.OrderedSet:
    name: Ember.OrderedSet
    shortname: Ember.OrderedSet
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/map.js"
    line: 55
    description: |-
      This class is used internally by Ember and Ember Data.
      Please do not use it at this time. We plan to clean it up
      and add many tests soon.
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Map:
    name: Ember.Map
    shortname: Ember.Map
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/map.js"
    line: 176
    description: |-
      A Map stores values indexed by keys. Unlike JavaScript's
      default Objects, the keys of a Map can be any JavaScript
      object.

      Internally, a Map has two data structures:

      1. `keys`: an OrderedSet of all of the existing keys
      2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`

      When a key/value pair is added for the first time, we
      add the key to the `keys` OrderedSet, and create or
      replace an entry in `values`. When an entry is deleted,
      we delete its entry in `keys` and `values`.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.MapWithDefault:
    name: Ember.MapWithDefault
    shortname: Ember.MapWithDefault
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/map.js"
    line: 320
    extends: Ember.Map
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: options
      description: ''
      optional: true
      props:
      - name: defaultValue
        description: ''
        type: "*"
        optional: true
  Ember.Mixin:
    name: Ember.Mixin
    shortname: Ember.Mixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/mixin.js"
    line: 374
    description: |-
      The `Ember.Mixin` class allows you to create mixins, whose properties can be
      added to other classes. For instance,

      ```javascript
      App.Editable = Ember.Mixin.create({
        edit: function() {
          console.log('starting to edit');
          this.set('isEditing', true);
        },
        isEditing: false
      });

      // Mix mixins into classes by passing them as the first arguments to
      // .extend.
      App.CommentView = Ember.View.extend(App.Editable, {
        template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')
      });

      commentView = App.CommentView.create();
      commentView.edit(); // outputs 'starting to edit'
      ```

      Note that Mixins are created with `Ember.Mixin.create`, not
      `Ember.Mixin.extend`.

      Note that mixins extend a constructor's prototype so arrays and object literals
      defined as properties will be shared amongst objects that implement the mixin.
      If you want to define a property in a mixin that is not shared, you can define
      it either as a computed property or have it be created on initialization of the object.

      ```javascript
      //filters array will be shared amongst any object implementing mixin
      App.Filterable = Ember.Mixin.create({
        filters: Ember.A()
      });

      //filters will be a separate  array for every object implementing the mixin
      App.Filterable = Ember.Mixin.create({
        filters: Ember.computed(function(){return Ember.A();})
      });

      //filters will be created as a separate array during the object's initialization
      App.Filterable = Ember.Mixin.create({
        init: function() {
          this._super();
          this.set("filters", Ember.A());
        }
      });
      ```
  Ember.platform:
    name: Ember.platform
    shortname: Ember.platform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/platform.js"
    line: 125
    description: Platform specific methods and feature detectors needed by the framework.
    static: 1
  Ember.Descriptor:
    name: Ember.Descriptor
    shortname: Ember.Descriptor
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: "../packages/ember-metal/lib/properties.js"
    line: 20
    description: |-
      Objects of this type can implement an interface to respond to requests to
      get and set. The default implementation handles simple properties.

      You generally won't need to create or subclass this directly.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.run:
    name: Ember.run
    shortname: Ember.run
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.run
    file: "../packages/ember-metal/lib/run_loop.js"
    line: 28
    description: |-
      Runs the passed target and method inside of a RunLoop, ensuring any
      deferred actions including bindings and views updates are flushed at the
      end.

      Normally you should not need to invoke this method yourself. However if
      you are implementing raw event handlers when interfacing with other
      libraries or plugins, you should probably wrap all of your code inside this
      call.

      ```javascript
      Ember.run(function() {
        // code to be execute within a RunLoop
      });
      ```
    static: 1
    is_constructor: 1
    params:
    - name: target
      description: target of method to call
      type: Object
      optional: true
    - name: method
      description: |-
        Method to invoke.
          May be a function or a string. If you pass a string
          then it will be looked up on the passed target.
      type: Function|String
    - name: args*
      description: Any additional arguments you wish to pass to the method.
      type: Object
      optional: true
    return:
      description: return value from invoking the passed function.
      type: Object
  Ember.LinkView:
    name: Ember.LinkView
    shortname: Ember.LinkView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/helpers/link_to.js"
    line: 45
    description: |-
      `Ember.LinkView` renders an element whose `click` event triggers a
      transition of the application's instance of `Ember.Router` to
      a supplied route by name.

      Instances of `LinkView` will most likely be created through
      the `link-to` Handlebars helper, but properties of this class
      can be overridden to customize application-wide behavior.
    extends: Ember.View
    see:
    - "{Handlebars.helpers.link-to}"
  Ember.Location:
    name: Ember.Location
    shortname: Ember.Location
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/location/api.js"
    line: 8
    description: |-
      Ember.Location returns an instance of the correct implementation of
      the `location` API.

      ## Implementations

      You can pass an implementation name (`hash`, `history`, `none`) to force a
      particular implementation to be used in your application.

      ### HashLocation

      Using `HashLocation` results in URLs with a `#` (hash sign) separating the
      server side URL portion of the URL from the portion that is used by Ember.
      This relies upon the `hashchange` event existing in the browser.

      Example:

      ```javascript
      App.Router.map(function() {
        this.resource('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'hash'
      });
      ```

      This will result in a posts.new url of `/#/posts/new`.

      ### HistoryLocation

      Using `HistoryLocation` results in URLs that are indistinguishable from a
      standard URL. This relies upon the browser's `history` API.

      Example:

      ```javascript
      App.Router.map(function() {
        this.resource('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'history'
      });
      ```

      This will result in a posts.new url of `/posts/new`.

      ### NoneLocation

      Using `NoneLocation` causes Ember to not store the applications URL state
      in the actual URL. This is generally used for testing purposes, and is one
      of the changes made when calling `App.setupForTesting()`.

      ## Location API

      Each location implementation must provide the following methods:

      * implementation: returns the string name used to reference the implementation.
      * getURL: returns the current URL.
      * setURL(path): sets the current URL.
      * replaceURL(path): replace the current URL (optional).
      * onUpdateURL(callback): triggers the callback when the URL changes.
      * formatURL(url): formats `url` to be placed into `href` attribute.

      Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
    static: 1
  Ember.HashLocation:
    name: Ember.HashLocation
    shortname: Ember.HashLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/location/hash_location.js"
    line: 9
    description: |-
      `Ember.HashLocation` implements the location API using the browser's
      hash. At present, it relies on a `hashchange` event existing in the
      browser.
    extends: Ember.Object
  Ember.HistoryLocation:
    name: Ember.HistoryLocation
    shortname: Ember.HistoryLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/location/history_location.js"
    line: 10
    description: |-
      Ember.HistoryLocation implements the location API using the browser's
      history.pushState API.
    extends: Ember.Object
  Ember.NoneLocation:
    name: Ember.NoneLocation
    shortname: Ember.NoneLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/location/none_location.js"
    line: 8
    description: |-
      Ember.NoneLocation does not interact with the browser. It is useful for
      testing, or when you need to manage state with your Router, but temporarily
      don't want it to muck with the URL (for example when you embed your
      application in a larger page).
    extends: Ember.Object
  Ember.Route:
    name: Ember.Route
    shortname: Ember.Route
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/system/route.js"
    line: 14
    description: |-
      The `Ember.Route` class is used to define individual routes. Refer to
      the [routing guide](http://emberjs.com/guides/routing/) for documentation.
    extends: Ember.Object
    uses:
    - Ember.ActionHandler
  Ember.Router:
    name: Ember.Router
    shortname: Ember.Router
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: "../packages/ember-routing/lib/system/router.js"
    line: 18
    description: |-
      The `Ember.Router` class manages the application state and URLs. Refer to
      the [routing guide](http://emberjs.com/guides/routing/) for documentation.
    extends: Ember.Object
  Ember.ReduceComputedProperty:
    name: Ember.ReduceComputedProperty
    shortname: Ember.ReduceComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-runtime/lib/computed/reduce_computed.js"
    line: 446
    description: |-
      A computed property whose dependent keys are arrays and which is updated with
      "one at a time" semantics.
    extends: Ember.ComputedProperty
    is_constructor: 1
  Ember.ArrayController:
    name: Ember.ArrayController
    shortname: Ember.ArrayController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/controllers/array_controller.js"
    line: 13
    description: |-
      `Ember.ArrayController` provides a way for you to publish a collection of
      objects so that you can easily bind to the collection from a Handlebars
      `#each` helper, an `Ember.CollectionView`, or other controllers.

      The advantage of using an `ArrayController` is that you only have to set up
      your view bindings once; to change what's displayed, simply swap out the
      `content` property on the controller.

      For example, imagine you wanted to display a list of items fetched via an XHR
      request. Create an `Ember.ArrayController` and set its `content` property:

      ```javascript
      MyApp.listController = Ember.ArrayController.create();

      $.get('people.json', function(data) {
        MyApp.listController.set('content', data);
      });
      ```

      Then, create a view that binds to your new controller:

      ```handlebars
      {{#each MyApp.listController}}
        {{firstName}} {{lastName}}
      {{/each}}
      ```

      Although you are binding to the controller, the behavior of this controller
      is to pass through any methods or properties to the underlying array. This
      capability comes from `Ember.ArrayProxy`, which this class inherits from.

      Sometimes you want to display computed properties within the body of an
      `#each` helper that depend on the underlying items in `content`, but are not
      present on those items.   To do this, set `itemController` to the name of a
      controller (probably an `ObjectController`) that will wrap each individual item.

      For example:

      ```handlebars
        {{#each post in controller}}
          <li>{{title}} ({{titleLength}} characters)</li>
        {{/each}}
      ```

      ```javascript
      App.PostsController = Ember.ArrayController.extend({
        itemController: 'post'
      });

      App.PostController = Ember.ObjectController.extend({
        // the `title` property will be proxied to the underlying post.

        titleLength: function() {
          return this.get('title').length;
        }.property('title')
      });
      ```

      In some cases it is helpful to return a different `itemController` depending
      on the particular item.  Subclasses can do this by overriding
      `lookupItemController`.

      For example:

      ```javascript
      App.MyArrayController = Ember.ArrayController.extend({
        lookupItemController: function( object ) {
          if (object.get('isSpecial')) {
            return "special"; // use App.SpecialController
          } else {
            return "regular"; // use App.RegularController
          }
        }
      });
      ```

      The itemController instances will have a `parentController` property set to
      the `ArrayController` instance.
    extends: Ember.ArrayProxy
    uses:
    - Ember.SortableMixin
    - Ember.ControllerMixin
  Ember.Controller:
    name: Ember.Controller
    shortname: Ember.Controller
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/controllers/controller.js"
    line: 59
    extends: Ember.Object
    uses:
    - Ember.ControllerMixin
  Ember.ObjectController:
    name: Ember.ObjectController
    shortname: Ember.ObjectController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/controllers/object_controller.js"
    line: 9
    description: |-
      `Ember.ObjectController` is part of Ember's Controller layer. It is intended
      to wrap a single object, proxying unhandled attempts to `get` and `set` to the underlying
      content object, and to forward unhandled action attempts to its `target`.

      `Ember.ObjectController` derives this functionality from its superclass
      `Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.
    extends: Ember.ObjectProxy
    uses:
    - Ember.ControllerMixin
  Function:
    name: Function
    shortname: Function
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  Ember.ActionHandler:
    name: Ember.ActionHandler
    shortname: Ember.ActionHandler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ControllerMixin
    - Ember.Route
    - Ember.CoreView
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/action_handler.js"
    line: 8
    description: |-
      The `Ember.ActionHandler` mixin implements support for moving an `actions`
      property to an `_actions` property at extend time, and adding `_actions`
      to the object's mergedProperties list.

      `Ember.ActionHandler` is used internally by Ember in  `Ember.View`,
      `Ember.Controller`, and `Ember.Route`.
  Ember.Array:
    name: Ember.Array
    shortname: Ember.Array
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/array.js"
    line: 17
    description: |-
      This module implements Observer-friendly Array-like behavior. This mixin is
      picked up by the Array class as well as other controllers, etc. that want to
      appear to be arrays.

      Unlike `Ember.Enumerable,` this mixin defines methods specifically for
      collections that provide index-ordered access to their contents. When you
      are designing code that needs to accept any kind of Array-like object, you
      should use these methods instead of Array primitives because these will
      properly notify observers of changes to the array.

      Although these methods are efficient, they do add a layer of indirection to
      your application so it is a good idea to use them only when you need the
      flexibility of using both true JavaScript arrays and "virtual" arrays such
      as controllers and collections.

      You can use the methods defined in this module to access and modify array
      contents in a KVO-friendly way. You can also be notified whenever the
      membership of an array changes by changing the syntax of the property to
      `.observes('*myProperty.[]')`.

      To support `Ember.Array` in your own class, you must override two
      primitives to use it: `replace()` and `objectAt()`.

      Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`
      mixin. All `Ember.Array`-like objects are also enumerable.
    uses:
    - Ember.Enumerable
    since: Ember 0.9.0
  Ember.Comparable:
    name: Ember.Comparable
    shortname: Ember.Comparable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/comparable.js"
    line: 9
    description: |-
      Implements some standard methods for comparing objects. Add this mixin to
      any class you create that can compare its instances.

      You should implement the `compare()` method.
    since: Ember 0.9
  Ember.Copyable:
    name: Ember.Copyable
    shortname: Ember.Copyable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/copyable.js"
    line: 12
    description: |-
      Implements some standard methods for copying an object. Add this mixin to
      any object you create that can create a copy of itself. This mixin is
      added automatically to the built-in array.

      You should generally implement the `copy()` method to return a copy of the
      receiver.

      Note that `frozenCopy()` will only work if you also implement
      `Ember.Freezable`.
    since: Ember 0.9
  Ember.Deferred:
    name: Ember.Deferred
    shortname: Ember.Deferred
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/deferred.js"
    line: 19
  Ember.Enumerable:
    name: Ember.Enumerable
    shortname: Ember.Enumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Array
    - Ember.MutableEnumerable
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/enumerable.js"
    line: 35
    description: |-
      This mixin defines the common interface implemented by enumerable objects
      in Ember. Most of these methods follow the standard Array iteration
      API defined up to JavaScript 1.8 (excluding language-specific features that
      cannot be emulated in older versions of JavaScript).

      This mixin is applied automatically to the Array class on page load, so you
      can use any of these methods on simple arrays. If Array already implements
      one of these methods, the mixin will not override them.

      ## Writing Your Own Enumerable

      To make your own custom class enumerable, you need two items:

      1. You must have a length property. This property should change whenever
         the number of items in your enumerable object changes. If you use this
         with an `Ember.Object` subclass, you should be sure to change the length
         property using `set().`

      2. You must implement `nextObject().` See documentation.

      Once you have these two methods implemented, apply the `Ember.Enumerable` mixin
      to your class and you will be able to enumerate the contents of your object
      like any other collection.

      ## Using Ember Enumeration with Other Libraries

      Many other libraries provide some kind of iterator or enumeration like
      facility. This is often where the most common API conflicts occur.
      Ember's API is designed to be as friendly as possible with other
      libraries by implementing only methods that mostly correspond to the
      JavaScript 1.8 API.
    since: Ember 0.9
  Ember.Evented:
    name: Ember.Evented
    shortname: Ember.Evented
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.CoreView
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/evented.js"
    line: 6
    description: |-
      This mixin allows for Ember objects to subscribe to and emit events.

      ```javascript
      App.Person = Ember.Object.extend(Ember.Evented, {
        greet: function() {
          // ...
          this.trigger('greet');
        }
      });

      var person = App.Person.create();

      person.on('greet', function() {
        console.log('Our person has greeted');
      });

      person.greet();

      // outputs: 'Our person has greeted'
      ```

      You can also chain multiple event subscriptions:

      ```javascript
      person.on('greet', function() {
        console.log('Our person has greeted');
      }).one('greet', function() {
        console.log('Offer one-time special');
      }).off('event', this, forgetThis);
      ```
  Ember.Freezable:
    name: Ember.Freezable
    shortname: Ember.Freezable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/freezable.js"
    line: 9
    description: |-
      The `Ember.Freezable` mixin implements some basic methods for marking an
      object as frozen. Once an object is frozen it should be read only. No changes
      may be made the internal state of the object.

      ## Enforcement

      To fully support freezing in your subclass, you must include this mixin and
      override any method that might alter any property on the object to instead
      raise an exception. You can check the state of an object by checking the
      `isFrozen` property.

      Although future versions of JavaScript may support language-level freezing
      object objects, that is not the case today. Even if an object is freezable,
      it is still technically possible to modify the object, even though it could
      break other parts of your application that do not expect a frozen object to
      change. It is, therefore, very important that you always respect the
      `isFrozen` property on all freezable objects.

      ## Example Usage

      The example below shows a simple object that implement the `Ember.Freezable`
      protocol.

      ```javascript
      Contact = Ember.Object.extend(Ember.Freezable, {
        firstName: null,
        lastName: null,

        // swaps the names
        swapNames: function() {
          if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;
          var tmp = this.get('firstName');
          this.set('firstName', this.get('lastName'));
          this.set('lastName', tmp);
          return this;
        }

      });

      c = Contact.create({ firstName: "John", lastName: "Doe" });
      c.swapNames();  // returns c
      c.freeze();
      c.swapNames();  // EXCEPTION
      ```

      ## Copying

      Usually the `Ember.Freezable` protocol is implemented in cooperation with the
      `Ember.Copyable` protocol, which defines a `frozenCopy()` method that will
      return a frozen object, if the object implements this method as well.
    since: Ember 0.9
  Ember.MutableArray:
    name: Ember.MutableArray
    shortname: Ember.MutableArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayProxy
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
    line: 23
    description: |-
      This mixin defines the API for modifying array-like objects. These methods
      can be applied only to a collection that keeps its items in an ordered set.

      Note that an Array can change even if it does not implement this mixin.
      For example, one might implement a SparseArray that cannot be directly
      modified, but if its underlying enumerable changes, it will change also.
    uses:
    - Ember.Array
    - Ember.MutableEnumerable
  Ember.MutableEnumerable:
    name: Ember.MutableEnumerable
    shortname: Ember.MutableEnumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    - Ember.SortableMixin
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
    line: 10
    description: |-
      This mixin defines the API for modifying generic enumerables. These methods
      can be applied to an object regardless of whether it is ordered or
      unordered.

      Note that an Enumerable can change even if it does not implement this mixin.
      For example, a MappedEnumerable cannot be directly modified but if its
      underlying enumerable changes, it will change also.

      ## Adding Objects

      To add an object to an enumerable, use the `addObject()` method. This
      method will only add the object to the enumerable if the object is not
      already present and is of a type supported by the enumerable.

      ```javascript
      set.addObject(contact);
      ```

      ## Removing Objects

      To remove an object from an enumerable, use the `removeObject()` method. This
      will only remove the object if it is present in the enumerable, otherwise
      this method has no effect.

      ```javascript
      set.removeObject(contact);
      ```

      ## Implementing In Your Own Code

      If you are implementing an object and want to support this API, just include
      this mixin in your class and implement the required methods. In your unit
      tests, be sure to apply the Ember.MutableEnumerableTests to your object.
    uses:
    - Ember.Enumerable
  Ember.Observable:
    name: Ember.Observable
    shortname: Ember.Observable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Object
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/observable.js"
    line: 11
    description: |-
      ## Overview

      This mixin provides properties and property observing functionality, core
      features of the Ember object model.

      Properties and observers allow one object to observe changes to a
      property on another object. This is one of the fundamental ways that
      models, controllers and views communicate with each other in an Ember
      application.

      Any object that has this mixin applied can be used in observer
      operations. That includes `Ember.Object` and most objects you will
      interact with as you write your Ember application.

      Note that you will not generally apply this mixin to classes yourself,
      but you will use the features provided by this module frequently, so it
      is important to understand how to use it.

      ## Using `get()` and `set()`

      Because of Ember's support for bindings and observers, you will always
      access properties using the get method, and set properties using the
      set method. This allows the observing objects to be notified and
      computed properties to be handled properly.

      More documentation about `get` and `set` are below.

      ## Observing Property Changes

      You typically observe property changes simply by adding the `observes`
      call to the end of your method declarations in classes that you write.
      For example:

      ```javascript
      Ember.Object.extend({
        valueObserver: function() {
          // Executes whenever the "value" property changes
        }.observes('value')
      });
      ```

      Although this is the most common way to add an observer, this capability
      is actually built into the `Ember.Object` class on top of two methods
      defined in this mixin: `addObserver` and `removeObserver`. You can use
      these two methods to add and remove observers yourself if you need to
      do so at runtime.

      To add an observer for a property, call:

      ```javascript
      object.addObserver('propertyKey', targetObject, targetAction)
      ```

      This will call the `targetAction` method on the `targetObject` whenever
      the value of the `propertyKey` changes.

      Note that if `propertyKey` is a computed property, the observer will be
      called when any of the property dependencies are changed, even if the
      resulting value of the computed property is unchanged. This is necessary
      because computed properties are not computed until `get` is called.
  Ember.PromiseProxyMixin:
    name: Ember.PromiseProxyMixin
    shortname: Ember.PromiseProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
    file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
    line: 22
    description: |-
      A low level mixin making ObjectProxy, ObjectController or ArrayController's promise aware.

      ```javascript
      var ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);

      var controller = ObjectPromiseController.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      controller.then(function(json){
         // the json
      }, function(reason) {
         // the reason why you have no json
      });
      ```

      the controller has bindable attributes which
      track the promises life cycle

      ```javascript
      controller.get('isPending')   //=> true
      controller.get('isSettled')  //=> false
      controller.get('isRejected')  //=> false
      controller.get('isFulfilled') //=> false
      ```

      When the the $.getJSON completes, and the promise is fulfilled
      with json, the life cycle attributes will update accordingly.

      ```javascript
      controller.get('isPending')   //=> false
      controller.get('isSettled')   //=> true
      controller.get('isRejected')  //=> false
      controller.get('isFulfilled') //=> true
      ```

      As the controller is an ObjectController, and the json now its content,
      all the json properties will be available directly from the controller.

      ```javascript
      // Assuming the following json:
      {
        firstName: 'Stefan',
        lastName: 'Penner'
      }

      // both properties will accessible on the controller
      controller.get('firstName') //=> 'Stefan'
      controller.get('lastName')  //=> 'Penner'
      ```

      If the controller is backing a template, the attributes are
      bindable from within that template

      ```handlebars
      {{#if isPending}}
        loading...
      {{else}}
        firstName: {{firstName}}
        lastName: {{lastName}}
      {{/if}}
      ```
  Ember.SortableMixin:
    name: Ember.SortableMixin
    shortname: Ember.SortableMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/sortable.js"
    line: 8
    description: "`Ember.SortableMixin` provides a standard interface for array proxies\nto
      specify a sort order and maintain this sorting when objects are added,\nremoved,
      or updated without changing the implicit order of their underlying\ncontent
      array:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n
      \ {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title:
      'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  content:
      songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');
      \ // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber:
      1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber:
      1, title: 'Dear Prudence'}\n```\n\nIf you add or remove the properties to sort
      by or change the sort direction the content\nsort order will be automatically
      updated.\n\n```javascript\nsongsController.set('sortProperties', ['title']);\nsongsController.get('firstObject');
      // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.toggleProperty('sortAscending');\nsongsController.get('firstObject');
      // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n```\n\nSortableMixin works
      by sorting the arrangedContent array, which is the array that\narrayProxy displays.
      Due to the fact that the underlying 'content' array is not changed, that\narray
      will not display the sorted list:\n\n ```javascript\nsongsController.get('content').get('firstObject');
      // Returns the unsorted original content\nsongsController.get('firstObject');
      // Returns the sorted content.\n``` \n\nAlthough the sorted content can also
      be accessed through the arrangedContent property,\nit is preferable to use the
      proxied class and not the arrangedContent array directly."
    uses:
    - Ember.MutableEnumerable
  Ember.TargetActionSupport:
    name: Ember.TargetActionSupport
    shortname: Ember.TargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/mixins/target_action_support.js"
    line: 8
    description: |-
      `Ember.TargetActionSupport` is a mixin that can be included in a class
      to add a `triggerAction` method with semantics similar to the Handlebars
      `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is
      usually the best choice. This mixin is most often useful when you are
      doing more complex event handling in View objects.

      See also `Ember.ViewTargetActionSupport`, which has
      view-aware defaults for target and actionContext.
    extends: Ember.Mixin
  Ember.ArrayProxy:
    name: Ember.ArrayProxy
    shortname: Ember.ArrayProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/array_proxy.js"
    line: 14
    description: |-
      An ArrayProxy wraps any other object that implements `Ember.Array` and/or
      `Ember.MutableArray,` forwarding all requests. This makes it very useful for
      a number of binding use cases or other cases where being able to swap
      out the underlying array is useful.

      A simple example of usage:

      ```javascript
      var pets = ['dog', 'cat', 'fish'];
      var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });

      ap.get('firstObject');                        // 'dog'
      ap.set('content', ['amoeba', 'paramecium']);
      ap.get('firstObject');                        // 'amoeba'
      ```

      This class can also be useful as a layer to transform the contents of
      an array, as they are accessed. This can be done by overriding
      `objectAtContent`:

      ```javascript
      var pets = ['dog', 'cat', 'fish'];
      var ap = Ember.ArrayProxy.create({
          content: Ember.A(pets),
          objectAtContent: function(idx) {
              return this.get('content').objectAt(idx).toUpperCase();
          }
      });

      ap.get('firstObject'); // . 'DOG'
      ```
    extends: Ember.Object
    uses:
    - Ember.MutableArray
  Ember.CoreObject:
    name: Ember.CoreObject
    shortname: Ember.CoreObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/core_object.js"
    line: 170
  Ember.EachProxy:
    name: Ember.EachProxy
    shortname: Ember.EachProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/each_proxy.js"
    line: 75
    description: |-
      This is the object instance returned when you get the `@each` property on an
      array. It uses the unknownProperty handler to automatically create
      EachArray instances for property names.
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Namespace:
    name: Ember.Namespace
    shortname: Ember.Namespace
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/namespace.js"
    line: 10
    description: |-
      A Namespace is an object usually used to contain other objects or methods
      such as an application or framework. Create a namespace anytime you want
      to define one of these new containers.

      # Example Usage

      ```javascript
      MyFramework = Ember.Namespace.create({
        VERSION: '1.0.0'
      });
      ```
    extends: Ember.Object
  Ember.NativeArray:
    name: Ember.NativeArray
    shortname: Ember.NativeArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/native_array.js"
    line: 109
    description: |-
      The NativeArray mixin contains the properties needed to to make the native
      Array support Ember.MutableArray and all of its dependent APIs. Unless you
      have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to
      false, this will be applied automatically. Otherwise you can apply the mixin
      at anytime by calling `Ember.NativeArray.activate`.
    uses:
    - Ember.MutableArray
    - Ember.Observable
    - Ember.Copyable
  Ember.Object:
    name: Ember.Object
    shortname: Ember.Object
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/object.js"
    line: 9
    description: |-
      `Ember.Object` is the main base class for all Ember objects. It is a subclass
      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,
      see the documentation for each of these.
    extends: Ember.CoreObject
    uses:
    - Ember.Observable
  Ember.ObjectProxy:
    name: Ember.ObjectProxy
    shortname: Ember.ObjectProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/object_proxy.js"
    line: 32
    description: |-
      `Ember.ObjectProxy` forwards all properties not defined by the proxy itself
      to a proxied `content` object.

      ```javascript
      object = Ember.Object.create({
        name: 'Foo'
      });

      proxy = Ember.ObjectProxy.create({
        content: object
      });

      // Access and change existing properties
      proxy.get('name')          // 'Foo'
      proxy.set('name', 'Bar');
      object.get('name')         // 'Bar'

      // Create new 'description' property on `object`
      proxy.set('description', 'Foo is a whizboo baz');
      object.get('description')  // 'Foo is a whizboo baz'
      ```

      While `content` is unset, setting a property to be delegated will throw an
      Error.

      ```javascript
      proxy = Ember.ObjectProxy.create({
        content: null,
        flag: null
      });
      proxy.set('flag', true);
      proxy.get('flag');         // true
      proxy.get('foo');          // undefined
      proxy.set('foo', 'data');  // throws Error
      ```

      Delegated properties can be bound to and will change when content is updated.

      Computed properties on the proxy itself can depend on delegated properties.

      ```javascript
      ProxyWithComputedProperty = Ember.ObjectProxy.extend({
        fullName: function () {
          var firstName = this.get('firstName'),
              lastName = this.get('lastName');
          if (firstName && lastName) {
            return firstName + ' ' + lastName;
          }
          return firstName || lastName;
        }.property('firstName', 'lastName')
      });

      proxy = ProxyWithComputedProperty.create();

      proxy.get('fullName');  // undefined
      proxy.set('content', {
        firstName: 'Tom', lastName: 'Dale'
      }); // triggers property change for fullName on proxy

      proxy.get('fullName');  // 'Tom Dale'
      ```
    extends: Ember.Object
  Ember.Set:
    name: Ember.Set
    shortname: Ember.Set
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/set.js"
    line: 14
    description: |-
      An unordered collection of objects.

      A Set works a bit like an array except that its items are not ordered. You
      can create a set to efficiently test for membership for an object. You can
      also iterate through a set just like an array, even accessing objects by
      index, however there is no guarantee as to their order.

      All Sets are observable via the Enumerable Observer API - which works
      on any enumerable object including both Sets and Arrays.

      ## Creating a Set

      You can create a set like you would most objects using
      `new Ember.Set()`. Most new sets you create will be empty, but you can
      also initialize the set with some content by passing an array or other
      enumerable of objects to the constructor.

      Finally, you can pass in an existing set and the set will be copied. You
      can also create a copy of a set by calling `Ember.Set#copy()`.

      ```javascript
      // creates a new empty set
      var foundNames = new Ember.Set();

      // creates a set with four names in it.
      var names = new Ember.Set(["Charles", "Tom", "Juan", "Alex"]); // :P

      // creates a copy of the names set.
      var namesCopy = new Ember.Set(names);

      // same as above.
      var anotherNamesCopy = names.copy();
      ```

      ## Adding/Removing Objects

      You generally add or remove objects from a set using `add()` or
      `remove()`. You can add any type of object including primitives such as
      numbers, strings, and booleans.

      Unlike arrays, objects can only exist one time in a set. If you call `add()`
      on a set with the same object multiple times, the object will only be added
      once. Likewise, calling `remove()` with the same object multiple times will
      remove the object the first time and have no effect on future calls until
      you add the object to the set again.

      NOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do
      so will be ignored.

      In addition to add/remove you can also call `push()`/`pop()`. Push behaves
      just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary
      object, remove it and return it. This is a good way to use a set as a job
      queue when you don't care which order the jobs are executed in.

      ## Testing for an Object

      To test for an object's presence in a set you simply call
      `Ember.Set#contains()`.

      ## Observing changes

      When using `Ember.Set`, you can observe the `"[]"` property to be
      alerted whenever the content changes. You can also add an enumerable
      observer to the set to be notified of specific objects that are added and
      removed from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)
      for more information on enumerables.

      This is often unhelpful. If you are filtering sets of objects, for instance,
      it is very inefficient to re-filter all of the items each time the set
      changes. It would be better if you could just adjust the filtered set based
      on what was changed on the original set. The same issue applies to merging
      sets, as well.

      ## Other Methods

      `Ember.Set` primary implements other mixin APIs. For a complete reference
      on the methods you will use with `Ember.Set`, please consult these mixins.
      The most useful ones will be `Ember.Enumerable` and
      `Ember.MutableEnumerable` which implement most of the common iterator
      methods you are used to on Array.

      Note that you can also use the `Ember.Copyable` and `Ember.Freezable`
      APIs on `Ember.Set` as well. Once a set is frozen it can no longer be
      modified. The benefit of this is that when you call `frozenCopy()` on it,
      Ember will avoid making copies of the set. This allows you to write
      code that can know with certainty when the underlying set data will or
      will not be modified.
    extends: Ember.CoreObject
    uses:
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
    since: Ember 0.9
  Ember.SubArray:
    name: Ember.SubArray
    shortname: Ember.SubArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/subarray.js"
    line: 11
    description: |-
      An `Ember.SubArray` tracks an array in a way similar to, but more specialized
      than, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of
      items within a filtered array.
  Ember.TrackedArray:
    name: Ember.TrackedArray
    shortname: Ember.TrackedArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-runtime/lib/system/tracked_array.js"
    line: 7
    description: |-
      An `Ember.TrackedArray` tracks array operations.  It's useful when you want to
      lazily compute the indexes of items in an array after they've been shifted by
      subsequent operations.
    params:
    - name: items
      description: |-
        The array to be tracked.  This is used just to get
        the initial items for the starting state of retain:n.
      type: Array
      optional: true
      optdefault: "["
  Ember.Test.Adapter:
    name: Ember.Test.Adapter
    shortname: Ember.Test.Adapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember.Test
    file: "../packages/ember-testing/lib/adapters.js"
    line: 10
    description: |-
      The primary purpose of this class is to create hooks that can be implemented
      by an adapter for various test frameworks.
  Ember.Test.QUnitAdapter:
    name: Ember.Test.QUnitAdapter
    shortname: Ember.Test.QUnitAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember.Test
    file: "../packages/ember-testing/lib/adapters.js"
    line: 59
    description: |-
      This class implements the methods defined by Ember.Test.Adapter for the
      QUnit testing framework.
    extends: Ember.Test.Adapter
  Ember.Test:
    name: Ember.Test
    shortname: Ember.Test
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember
    file: "../packages/ember-testing/lib/test.js"
    line: 9
    description: |-
      This is a container for an assortment of testing related functionality:

      * Choose your default test adapter (for your framework of choice).
      * Register/Unregister additional test helpers.
      * Setup callbacks to be fired when the test helpers are injected into
        your application.
  Ember.ComponentTemplateDeprecation:
    name: Ember.ComponentTemplateDeprecation
    shortname: Ember.ComponentTemplateDeprecation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-views/lib/mixins/component_template_deprecation.js"
    line: 1
    description: |-
      The ComponentTemplateDeprecation mixin is used to provide a useful
      deprecation warning when using either `template` or `templateName` with
      a component. The `template` and `templateName` properties specified at
      extend time are moved to `layout` and `layoutName` respectively.

      `Ember.ComponentTemplateDeprecation` is used internally by Ember in
      `Ember.Component`.
  Ember.ViewTargetActionSupport:
    name: Ember.ViewTargetActionSupport
    shortname: Ember.ViewTargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember-views/lib/mixins/view_target_action_support.js"
    line: 1
    description: |-
      `Ember.ViewTargetActionSupport` is a mixin that can be included in a
      view class to add a `triggerAction` method with semantics similar to
      the Handlebars `{{action}}` helper. It provides intelligent defaults
      for the action's target: the view's controller; and the context that is
      sent with the action: the view's context.

      Note: In normal Ember usage, the `{{action}}` helper is usually the best
      choice. This mixin is most often useful when you are doing more complex
      event handling in custom View subclasses.

      For example:

      ```javascript
      App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
        action: 'save',
        click: function() {
          this.triggerAction(); // Sends the `save` action, along with the current context
                                // to the current controller
        }
      });
      ```

      The `action` can be provided as properties of an optional object argument
      to `triggerAction` as well.

      ```javascript
      App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
        click: function() {
          this.triggerAction({
            action: 'save'
          }); // Sends the `save` action, along with the current context
              // to the current controller
        }
      });
      ```
    extends: Ember.TargetActionSupport
  Ember.EventDispatcher:
    name: Ember.EventDispatcher
    shortname: Ember.EventDispatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/system/event_dispatcher.js"
    line: 8
    description: |-
      `Ember.EventDispatcher` handles delegating browser events to their
      corresponding `Ember.Views.` For example, when you click on a view,
      `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
      called.
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.RenderBuffer:
    name: Ember.RenderBuffer
    shortname: Ember.RenderBuffer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/system/render_buffer.js"
    line: 78
    description: |-
      `Ember.RenderBuffer` gathers information regarding the a view and generates the
      final representation. `Ember.RenderBuffer` will generate HTML which can be pushed
      to the DOM.

       ```javascript
       var buffer = Ember.RenderBuffer('div');
      ```
    is_constructor: 1
    params:
    - name: tagName
      description: tag name (such as 'div' or 'p') used for the buffer
      type: String
  Ember.CollectionView:
    name: Ember.CollectionView
    shortname: Ember.CollectionView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/views/collection_view.js"
    line: 11
    description: |-
      `Ember.CollectionView` is an `Ember.View` descendent responsible for managing
      a collection (an array or array-like object) by maintaining a child view object
      and associated DOM representation for each item in the array and ensuring
      that child views and their associated rendered HTML are updated when items in
      the array are added, removed, or replaced.

      ## Setting content

      The managed collection of objects is referenced as the `Ember.CollectionView`
      instance's `content` property.

      ```javascript
      someItemsView = Ember.CollectionView.create({
        content: ['A', 'B','C']
      })
      ```

      The view for each item in the collection will have its `content` property set
      to the item.

      ## Specifying itemViewClass

      By default the view class for each item in the managed collection will be an
      instance of `Ember.View`. You can supply a different class by setting the
      `CollectionView`'s `itemViewClass` property.

      Given an empty `<body>` and the following code:

      ```javascript
      someItemsView = Ember.CollectionView.create({
        classNames: ['a-collection'],
        content: ['A','B','C'],
        itemViewClass: Ember.View.extend({
          template: Ember.Handlebars.compile("the letter: {{view.content}}")
        })
      });

      someItemsView.appendTo('body');
      ```

      Will result in the following HTML structure

      ```html
      <div class="ember-view a-collection">
        <div class="ember-view">the letter: A</div>
        <div class="ember-view">the letter: B</div>
        <div class="ember-view">the letter: C</div>
      </div>
      ```

      ## Automatic matching of parent/child tagNames

      Setting the `tagName` property of a `CollectionView` to any of
      "ul", "ol", "table", "thead", "tbody", "tfoot", "tr", or "select" will result
      in the item views receiving an appropriately matched `tagName` property.

      Given an empty `<body>` and the following code:

      ```javascript
      anUnorderedListView = Ember.CollectionView.create({
        tagName: 'ul',
        content: ['A','B','C'],
        itemViewClass: Ember.View.extend({
          template: Ember.Handlebars.compile("the letter: {{view.content}}")
        })
      });

      anUnorderedListView.appendTo('body');
      ```

      Will result in the following HTML structure

      ```html
      <ul class="ember-view a-collection">
        <li class="ember-view">the letter: A</li>
        <li class="ember-view">the letter: B</li>
        <li class="ember-view">the letter: C</li>
      </ul>
      ```

      Additional `tagName` pairs can be provided by adding to
      `Ember.CollectionView.CONTAINER_MAP `

      ```javascript
      Ember.CollectionView.CONTAINER_MAP['article'] = 'section'
      ```

      ## Programmatic creation of child views

      For cases where additional customization beyond the use of a single
      `itemViewClass` or `tagName` matching is required CollectionView's
      `createChildView` method can be overidden:

      ```javascript
      CustomCollectionView = Ember.CollectionView.extend({
        createChildView: function(viewClass, attrs) {
          if (attrs.content.kind == 'album') {
            viewClass = App.AlbumView;
          } else {
            viewClass = App.SongView;
          }
          return this._super(viewClass, attrs);
        }
      });
      ```

      ## Empty View

      You can provide an `Ember.View` subclass to the `Ember.CollectionView`
      instance as its `emptyView` property. If the `content` property of a
      `CollectionView` is set to `null` or an empty array, an instance of this view
      will be the `CollectionView`s only child.

      ```javascript
      aListWithNothing = Ember.CollectionView.create({
        classNames: ['nothing']
        content: null,
        emptyView: Ember.View.extend({
          template: Ember.Handlebars.compile("The collection is empty")
        })
      });

      aListWithNothing.appendTo('body');
      ```

      Will result in the following HTML structure

      ```html
      <div class="ember-view nothing">
        <div class="ember-view">
          The collection is empty
        </div>
      </div>
      ```

      ## Adding and Removing items

      The `childViews` property of a `CollectionView` should not be directly
      manipulated. Instead, add, remove, replace items from its `content` property.
      This will trigger appropriate changes to its rendered HTML.
    extends: Ember.ContainerView
    since: Ember 0.9
  Ember.Component:
    name: Ember.Component
    shortname: Ember.Component
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/views/component.js"
    line: 13
    description: |-
      An `Ember.Component` is a view that is completely
      isolated. Property access in its templates go
      to the view object and actions are targeted at
      the view object. There is no access to the
      surrounding context or outer controller; all
      contextual information must be passed in.

      The easiest way to create an `Ember.Component` is via
      a template. If you name a template
      `components/my-foo`, you will be able to use
      `{{my-foo}}` in other templates, which will make
      an instance of the isolated component.

      ```handlebars
      {{app-profile person=currentUser}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      <img {{bind-attr src=person.avatar}}>
      <p class='signature'>{{person.signature}}</p>
      ```

      You can use `yield` inside a template to
      include the **contents** of any block attached to
      the component. The block will be executed in the
      context of the surrounding context or outer controller:

      ```handlebars
      {{#app-profile person=currentUser}}
        <p>Admin mode</p>
        {{! Executed in the controller's context. }}
      {{/app-profile}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      {{! Executed in the components context. }}
      {{yield}} {{! block contents }}
      ```

      If you want to customize the component, in order to
      handle events or actions, you implement a subclass
      of `Ember.Component` named after the name of the
      component. Note that `Component` needs to be appended to the name of
      your subclass like `AppProfileComponent`.

      For example, you could implement the action
      `hello` for the `app-profile` component:

      ```javascript
      App.AppProfileComponent = Ember.Component.extend({
        actions: {
          hello: function(name) {
            console.log("Hello", name);
          }
        }
      });
      ```

      And then use it in the component's template:

      ```handlebars
      <!-- app-profile template -->

      <h1>{{person.title}}</h1>
      {{yield}} <!-- block contents -->

      <button {{action 'hello' person.name}}>
        Say Hello to {{person.name}}
      </button>
      ```

      Components must have a `-` in their name to avoid
      conflicts with built-in controls that wrap HTML
      elements. This is consistent with the same
      requirement in web components.
    extends: Ember.View
  Ember.ContainerView:
    name: Ember.ContainerView
    shortname: Ember.ContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/views/container_view.js"
    line: 16
    description: |-
      A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`
      allowing programmatic management of its child views.

      ## Setting Initial Child Views

      The initial array of child views can be set in one of two ways. You can
      provide a `childViews` property at creation time that contains instance of
      `Ember.View`:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: [Ember.View.create(), Ember.View.create()]
      });
      ```

      You can also provide a list of property names whose values are instances of
      `Ember.View`:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: ['aView', 'bView', 'cView'],
        aView: Ember.View.create(),
        bView: Ember.View.create(),
        cView: Ember.View.create()
      });
      ```

      The two strategies can be combined:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: ['aView', Ember.View.create()],
        aView: Ember.View.create()
      });
      ```

      Each child view's rendering will be inserted into the container's rendered
      HTML in the same order as its position in the `childViews` property.

      ## Adding and Removing Child Views

      The container view implements `Ember.MutableArray` allowing programmatic management of its child views.

      To remove a view, pass that view into a `removeObject` call on the container view.

      Given an empty `<body>` the following code

      ```javascript
      aContainer = Ember.ContainerView.create({
        classNames: ['the-container'],
        childViews: ['aView', 'bView'],
        aView: Ember.View.create({
          template: Ember.Handlebars.compile("A")
        }),
        bView: Ember.View.create({
          template: Ember.Handlebars.compile("B")
        })
      });

      aContainer.appendTo('body');
      ```

      Results in the HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
      </div>
      ```

      Removing a view

      ```javascript
      aContainer.toArray();  // [aContainer.aView, aContainer.bView]
      aContainer.removeObject(aContainer.get('bView'));
      aContainer.toArray();  // [aContainer.aView]
      ```

      Will result in the following HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
      </div>
      ```

      Similarly, adding a child view is accomplished by adding `Ember.View` instances to the
      container view.

      Given an empty `<body>` the following code

      ```javascript
      aContainer = Ember.ContainerView.create({
        classNames: ['the-container'],
        childViews: ['aView', 'bView'],
        aView: Ember.View.create({
          template: Ember.Handlebars.compile("A")
        }),
        bView: Ember.View.create({
          template: Ember.Handlebars.compile("B")
        })
      });

      aContainer.appendTo('body');
      ```

      Results in the HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
      </div>
      ```

      Adding a view

      ```javascript
      AnotherViewClass = Ember.View.extend({
        template: Ember.Handlebars.compile("Another view")
      });

      aContainer.toArray();  // [aContainer.aView, aContainer.bView]
      aContainer.pushObject(AnotherViewClass.create());
      aContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]
      ```

      Will result in the following HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
        <div class="ember-view">Another view</div>
      </div>
      ```

      ## Templates and Layout

      A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or
      `defaultLayout` property on a container view will not result in the template
      or layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM
      representation will only be the rendered HTML of its child views.
    extends: Ember.View
  Ember.CoreView:
    name: Ember.CoreView
    shortname: Ember.CoreView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/views/view.js"
    line: 54
    description: |-
      `Ember.CoreView` is an abstract class that exists to give view-like behavior
      to both Ember's main view class `Ember.View` and other classes like
      `Ember._SimpleMetamorphView` that don't need the fully functionaltiy of
      `Ember.View`.

      Unless you have specific needs for `CoreView`, you will use `Ember.View`
      in your applications.
    extends: Ember.Object
    uses:
    - Ember.Evented
    - Ember.ActionHandler
  Ember.View:
    name: Ember.View
    shortname: Ember.View
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: "../packages/ember-views/lib/views/view.js"
    line: 287
    description: |-
      `Ember.View` is the class in Ember responsible for encapsulating templates of
      HTML content, combining templates with data to render as sections of a page's
      DOM, and registering and responding to user-initiated events.

      ## HTML Tag

      The default HTML tag name used for a view's DOM representation is `div`. This
      can be customized by setting the `tagName` property. The following view
      class:

      ```javascript
      ParagraphView = Ember.View.extend({
        tagName: 'em'
      });
      ```

      Would result in instances with the following HTML:

      ```html
      <em id="ember1" class="ember-view"></em>
      ```

      ## HTML `class` Attribute

      The HTML `class` attribute of a view's tag can be set by providing a
      `classNames` property that is set to an array of strings:

      ```javascript
      MyView = Ember.View.extend({
        classNames: ['my-class', 'my-other-class']
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view my-class my-other-class"></div>
      ```

      `class` attribute values can also be set by providing a `classNameBindings`
      property set to an array of properties names for the view. The return value
      of these properties will be added as part of the value for the view's `class`
      attribute. These properties can be computed properties:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['propertyA', 'propertyB'],
        propertyA: 'from-a',
        propertyB: function() {
          if (someLogic) { return 'from-b'; }
        }.property()
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view from-a from-b"></div>
      ```

      If the value of a class name binding returns a boolean the property name
      itself will be used as the class name if the property is true. The class name
      will not be added if the value is `false` or `undefined`.

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['hovered'],
        hovered: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view hovered"></div>
      ```

      When using boolean class name bindings you can supply a string value other
      than the property name for use as the `class` HTML attribute by appending the
      preferred value after a ":" character when defining the binding:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['awesome:so-very-cool'],
        awesome: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view so-very-cool"></div>
      ```

      Boolean value class name bindings whose property names are in a
      camelCase-style format will be converted to a dasherized format:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view is-urgent"></div>
      ```

      Class name bindings can also refer to object values that are found by
      traversing a path relative to the view itself:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['messages.empty']
        messages: Ember.Object.create({
          empty: true
        })
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view empty"></div>
      ```

      If you want to add a class name for a property which evaluates to true and
      and a different class name if it evaluates to false, you can pass a binding
      like this:

      ```javascript
      // Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false
      Ember.View.extend({
        classNameBindings: ['isEnabled:enabled:disabled']
        isEnabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view enabled"></div>
      ```

      When isEnabled is `false`, the resulting HTML reprensentation looks like
      this:

      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```

      This syntax offers the convenience to add a class if a property is `false`:

      ```javascript
      // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
      Ember.View.extend({
        classNameBindings: ['isEnabled::disabled']
        isEnabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view"></div>
      ```

      When the `isEnabled` property on the view is set to `false`, it will result
      in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```

      Updates to the the value of a class name binding will result in automatic
      update of the  HTML `class` attribute in the view's rendered HTML
      representation. If the value becomes `false` or `undefined` the class name
      will be removed.

      Both `classNames` and `classNameBindings` are concatenated properties. See
      [Ember.Object](/api/classes/Ember.Object.html) documentation for more
      information about concatenated properties.

      ## HTML Attributes

      The HTML attribute section of a view's tag can be set by providing an
      `attributeBindings` property set to an array of property names on the view.
      The return value of these properties will be used as the value of the view's
      HTML associated attribute:

      ```javascript
      AnchorView = Ember.View.extend({
        tagName: 'a',
        attributeBindings: ['href'],
        href: 'http://google.com'
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <a id="ember1" class="ember-view" href="http://google.com"></a>
      ```

      If the return value of an `attributeBindings` monitored property is a boolean
      the property will follow HTML's pattern of repeating the attribute's name as
      its value:

      ```javascript
      MyTextInput = Ember.View.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
        disabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <input id="ember1" class="ember-view" disabled="disabled" />
      ```

      `attributeBindings` can refer to computed properties:

      ```javascript
      MyTextInput = Ember.View.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
        disabled: function() {
          if (someLogic) {
            return true;
          } else {
            return false;
          }
        }.property()
      });
      ```

      Updates to the the property of an attribute binding will result in automatic
      update of the  HTML attribute in the view's rendered HTML representation.

      `attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)
      documentation for more information about concatenated properties.

      ## Templates

      The HTML contents of a view's rendered representation are determined by its
      template. Templates can be any function that accepts an optional context
      parameter and returns a string of HTML that will be inserted within the
      view's tag. Most typically in Ember this function will be a compiled
      `Ember.Handlebars` template.

      ```javascript
      AView = Ember.View.extend({
        template: Ember.Handlebars.compile('I am the template')
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">I am the template</div>
      ```

      Within an Ember application is more common to define a Handlebars templates as
      part of a page:

      ```html
      <script type='text/x-handlebars' data-template-name='some-template'>
        Hello
      </script>
      ```

      And associate it by name using a view's `templateName` property:

      ```javascript
      AView = Ember.View.extend({
        templateName: 'some-template'
      });
      ```

      If you have nested resources, your Handlebars template will look like this:

      ```html
      <script type='text/x-handlebars' data-template-name='posts/new'>
        <h1>New Post</h1>
      </script>
      ```

      And `templateName` property:

      ```javascript
      AView = Ember.View.extend({
        templateName: 'posts/new'
      });
      ```

      Using a value for `templateName` that does not have a Handlebars template
      with a matching `data-template-name` attribute will throw an error.

      For views classes that may have a template later defined (e.g. as the block
      portion of a `{{view}}` Handlebars helper call in another template or in
      a subclass), you can provide a `defaultTemplate` property set to compiled
      template function. If a template is not later provided for the view instance
      the `defaultTemplate` value will be used:

      ```javascript
      AView = Ember.View.extend({
        defaultTemplate: Ember.Handlebars.compile('I was the default'),
        template: null,
        templateName: null
      });
      ```

      Will result in instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">I was the default</div>
      ```

      If a `template` or `templateName` is provided it will take precedence over
      `defaultTemplate`:

      ```javascript
      AView = Ember.View.extend({
        defaultTemplate: Ember.Handlebars.compile('I was the default')
      });

      aView = AView.create({
        template: Ember.Handlebars.compile('I was the template, not default')
      });
      ```

      Will result in the following HTML representation when rendered:

      ```html
      <div id="ember1" class="ember-view">I was the template, not default</div>
      ```

      ## View Context

      The default context of the compiled template is the view's controller:

      ```javascript
      AView = Ember.View.extend({
        template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')
      });

      aController = Ember.Object.create({
        firstName: 'Barry',
        excitedGreeting: function() {
          return this.get("content.firstName") + "!!!"
        }.property()
      });

      aView = AView.create({
        controller: aController,
      });
      ```

      Will result in an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">Hello Barry!!!</div>
      ```

      A context can also be explicitly supplied through the view's `context`
      property. If the view has neither `context` nor `controller` properties, the
      `parentView`'s context will be used.

      ## Layouts

      Views can have a secondary template that wraps their main template. Like
      primary templates, layouts can be any function that  accepts an optional
      context parameter and returns a string of HTML that will be inserted inside
      view's tag. Views whose HTML element is self closing (e.g. `<input />`)
      cannot have a layout and this property will be ignored.

      Most typically in Ember a layout will be a compiled `Ember.Handlebars`
      template.

      A view's layout can be set directly with the `layout` property or reference
      an existing Handlebars template by name with the `layoutName` property.

      A template used as a layout must contain a single use of the Handlebars
      `{{yield}}` helper. The HTML contents of a view's rendered `template` will be
      inserted at this location:

      ```javascript
      AViewWithLayout = Ember.View.extend({
        layout: Ember.Handlebars.compile("<div class='my-decorative-class'>{{yield}}</div>")
        template: Ember.Handlebars.compile("I got wrapped"),
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">
        <div class="my-decorative-class">
          I got wrapped
        </div>
      </div>
      ```

      See [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)
      for more information.

      ## Responding to Browser Events

      Views can respond to user-initiated events in one of three ways: method
      implementation, through an event manager, and through `{{action}}` helper use
      in their template or layout.

      ### Method Implementation

      Views can respond to user-initiated events by implementing a method that
      matches the event name. A `jQuery.Event` object will be passed as the
      argument to this method.

      ```javascript
      AView = Ember.View.extend({
        click: function(event) {
          // will be called when when an instance's
          // rendered element is clicked
        }
      });
      ```

      ### Event Managers

      Views can define an object as their `eventManager` property. This object can
      then implement methods that match the desired event names. Matching events
      that occur on the view's rendered HTML or the rendered HTML of any of its DOM
      descendants will trigger this method. A `jQuery.Event` object will be passed
      as the first argument to the method and an  `Ember.View` object as the
      second. The `Ember.View` will be the view whose rendered HTML was interacted
      with. This may be the view with the `eventManager` property or one of its
      descendent views.

      ```javascript
      AView = Ember.View.extend({
        eventManager: Ember.Object.create({
          doubleClick: function(event, view) {
            // will be called when when an instance's
            // rendered element or any rendering
            // of this views's descendent
            // elements is clicked
          }
        })
      });
      ```

      An event defined for an event manager takes precedence over events of the
      same name handled through methods on the view.

      ```javascript
      AView = Ember.View.extend({
        mouseEnter: function(event) {
          // will never trigger.
        },
        eventManager: Ember.Object.create({
          mouseEnter: function(event, view) {
            // takes precedence over AView#mouseEnter
          }
        })
      });
      ```

      Similarly a view's event manager will take precedence for events of any views
      rendered as a descendent. A method name that matches an event name will not
      be called if the view instance was rendered inside the HTML representation of
      a view that has an `eventManager` property defined that handles events of the
      name. Events not handled by the event manager will still trigger method calls
      on the descendent.

      ```javascript
      OuterView = Ember.View.extend({
        template: Ember.Handlebars.compile("outer {{#view InnerView}}inner{{/view}} outer"),
        eventManager: Ember.Object.create({
          mouseEnter: function(event, view) {
            // view might be instance of either
            // OuterView or InnerView depending on
            // where on the page the user interaction occured
          }
        })
      });

      InnerView = Ember.View.extend({
        click: function(event) {
          // will be called if rendered inside
          // an OuterView because OuterView's
          // eventManager doesn't handle click events
        },
        mouseEnter: function(event) {
          // will never be called if rendered inside
          // an OuterView.
        }
      });
      ```

      ### Handlebars `{{action}}` Helper

      See [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).

      ### Event Names

      All of the event handling approaches described above respond to the same set
      of events. The names of the built-in events are listed below. (The hash of
      built-in events exists in `Ember.EventDispatcher`.) Additional, custom events
      can be registered by using `Ember.Application.customEvents`.

      Touch events:

      * `touchStart`
      * `touchMove`
      * `touchEnd`
      * `touchCancel`

      Keyboard events

      * `keyDown`
      * `keyUp`
      * `keyPress`

      Mouse events

      * `mouseDown`
      * `mouseUp`
      * `contextMenu`
      * `click`
      * `doubleClick`
      * `mouseMove`
      * `focusIn`
      * `focusOut`
      * `mouseEnter`
      * `mouseLeave`

      Form events:

      * `submit`
      * `change`
      * `focusIn`
      * `focusOut`
      * `input`

      HTML5 drag and drop events:

      * `dragStart`
      * `drag`
      * `dragEnter`
      * `dragLeave`
      * `drop`
      * `dragEnd`

      ## Handlebars `{{view}}` Helper

      Other `Ember.View` instances can be included as part of a view's template by
      using the `{{view}}` Handlebars helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)
      for additional information.
    extends: Ember.CoreView
  Ember.StateManager:
    name: Ember.StateManager
    shortname: Ember.StateManager
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember/lib/main.js"
    line: 26
    description: 'This was exported to ember-states plugin for v 1.0.0 release. See:
      https://github.com/emberjs/ember-states'
  Ember.State:
    name: Ember.State
    shortname: Ember.State
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: "../packages/ember/lib/main.js"
    line: 35
    description: 'This was exported to ember-states plugin for v 1.0.0 release. See:
      https://github.com/emberjs/ember-states'
  Ember.RSVP:
    name: Ember.RSVP
    shortname: RSVP
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: RSVP
    namespace: Ember
    file: "../packages/rsvp/lib/main.js"
    line: 1
  Ember.RSVP.EventTarget:
    name: Ember.RSVP.EventTarget
    shortname: RSVP.EventTarget
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: RSVP
    namespace: Ember
    file: "../packages/rsvp/lib/main.js"
    line: 242
  Ember.RSVP.Promise:
    name: Ember.RSVP.Promise
    shortname: RSVP.Promise
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: RSVP
    namespace: Ember
    file: "../packages/rsvp/lib/main.js"
    line: 950
    description: |-
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise’s eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.  Similarly, a
      rejection reason is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error("getJSON: `" + url + "` failed with status: [" + this.status + "]");
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```
    params:
    - name: UNKNOWN
      description: ''
      type: Function
    - name: label
      description: |-
        optional string for labeling the promise.
        Useful for tooling.
      type: String
    is_constructor: 1
classitems:
- file: "../packages/container/lib/main.js"
  line: 1
  description: |-
    Public api for the container is still in flux.
    The public api, specified on the application namespace should be considered the stable api.
    // @module container
  access: private
  tagname: ''
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 28
  itemtype: property
  name: parent
  type: InheritingDict
  default: 'null'
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 36
  description: Object used to store the current nodes data.
  itemtype: property
  name: dict
  type: Object
  default: Object
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 45
  description: |-
    Retrieve the value given a key, if the value is present at the current
    level use it, otherwise walk up the parent hierarchy and try again. If
    no matching key is found, return undefined.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: String
  return:
    description: ''
    type: Any
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 66
  description: Set the given value for the given key, at the current level.
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: String
  - name: value
    description: ''
    type: Any
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 77
  description: Delete the given key
  itemtype: method
  name: remove
  params:
  - name: key
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 87
  description: |-
    Check for the existence of given a key, if the key is present at the current
    level return true, otherwise walk up the parent hierarchy and try again. If
    no matching key is found, return false.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 110
  description: Iterate and invoke a callback for each local key-value pair.
  itemtype: method
  name: eachLocal
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 154
  itemtype: property
  name: parent
  type: Container
  default: 'null'
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 161
  itemtype: property
  name: children
  type: Array
  default: "[]"
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 168
  itemtype: property
  name: resolver
  type: function
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 174
  itemtype: property
  name: registry
  type: InheritingDict
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 180
  itemtype: property
  name: cache
  type: InheritingDict
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 186
  itemtype: property
  name: typeInjections
  type: InheritingDict
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 192
  itemtype: property
  name: injections
  type: Object
  default: "{}"
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 199
  access: private
  tagname: ''
  itemtype: property
  name: _options
  type: InheritingDict
  default: 'null'
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 208
  access: private
  tagname: ''
  itemtype: property
  name: _typeOptions
  type: InheritingDict
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 216
  description: |-
    Returns a new child of the current container. These children are configured
    to correctly inherit from the current container.
  itemtype: method
  name: child
  return:
    description: ''
    type: Container
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 229
  description: |-
    Sets a key-value pair on the current container. If a parent container,
    has the same key, once set on a child, the parent and child will diverge
    as expected.
  itemtype: method
  name: set
  params:
  - name: object
    description: ''
    type: Object
  - name: key
    description: ''
    type: String
  - name: value
    description: ''
    type: Any
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 243
  description: |-
    Registers a factory for later injection.

    Example:

    ```javascript
    var container = new Container();

    container.register('model:user', Person, {singleton: false });
    container.register('fruit:favorite', Orange);
    container.register('communication:main', Email, {singleton: false});
    ```
  itemtype: method
  name: register
  params:
  - name: fullName
    description: ''
    type: String
  - name: factory
    description: ''
    type: Function
  - name: options
    description: ''
    type: Object
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 278
  description: |-
    Unregister a fullName

    ```javascript
    var container = new Container();
    container.register('model:user', User);

    container.lookup('model:user') instanceof User //=> true

    container.unregister('model:user')
    container.lookup('model:user') === undefined //=> true
    ```
  itemtype: method
  name: unregister
  params:
  - name: fullName
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 306
  description: |-
    Given a fullName return the corresponding factory.

    By default `resolve` will retrieve the factory from
    its container's registry.

    ```javascript
    var container = new Container();
    container.register('api:twitter', Twitter);

    container.resolve('api:twitter') // => Twitter
    ```

    Optionally the container can be provided with a custom resolver.
    If provided, `resolve` will first provide the custom resolver
    the oppertunity to resolve the fullName, otherwise it will fallback
    to the registry.

    ```javascript
    var container = new Container();
    container.resolver = function(fullName) {
      // lookup via the module system of choice
    };

    // the twitter factory is added to the module system
    container.resolve('api:twitter') // => Twitter
    ```
  itemtype: method
  name: resolve
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: fullName's factory
    type: Function
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 353
  description: |-
    A hook that can be used to describe how the resolver will
    attempt to find the factory.

    For example, the default Ember `.describe` returns the full
    class name (including namespace) where Ember's resolver expects
    to find the `fullName`.
  itemtype: method
  name: describe
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: described fullName
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 369
  description: A hook to enable custom fullName normalization behaviour
  itemtype: method
  name: normalize
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: normalized fullName
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 380
  itemtype: method
  name: makeToString
  params:
  - name: factory
    description: ''
    type: Any
  - name: fullName
    description: ''
    type: String
  return:
    description: toString function
    type: Function
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 391
  description: |-
    Given a fullName return a corresponding instance.

    The default behaviour is for lookup to return a singleton instance.
    The singleton is scoped to the container, allowing multiple containers
    to all have their own locally scoped singletons.

    ```javascript
    var container = new Container();
    container.register('api:twitter', Twitter);

    var twitter = container.lookup('api:twitter');

    twitter instanceof Twitter; // => true

    // by default the container will return singletons
    var twitter2 = container.lookup('api:twitter');
    twitter instanceof Twitter; // => true

    twitter === twitter2; //=> true
    ```

    If singletons are not wanted an optional flag can be provided at lookup.

    ```javascript
    var container = new Container();
    container.register('api:twitter', Twitter);

    var twitter = container.lookup('api:twitter', { singleton: false });
    var twitter2 = container.lookup('api:twitter', { singleton: false });

    twitter === twitter2; //=> false
    ```
  itemtype: method
  name: lookup
  params:
  - name: fullName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Any
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 435
  description: Given a fullName return the corresponding factory.
  itemtype: method
  name: lookupFactory
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: ''
    type: Any
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 447
  description: |-
    Given a fullName check if the container is aware of its factory
    or singleton instance.
  itemtype: method
  name: has
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 460
  description: |-
    Allow registering options for all factories of a type.

    ```javascript
    var container = new Container();

    // if all of type `connection` must not be singletons
    container.optionsForType('connection', { singleton: false });

    container.register('connection:twitter', TwitterConnection);
    container.register('connection:facebook', FacebookConnection);

    var twitter = container.lookup('connection:twitter');
    var twitter2 = container.lookup('connection:twitter');

    twitter === twitter2; // => false

    var facebook = container.lookup('connection:facebook');
    var facebook2 = container.lookup('connection:facebook');

    facebook === facebook2; // => false
    ```
  itemtype: method
  name: optionsForType
  params:
  - name: type
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 493
  itemtype: method
  name: options
  params:
  - name: type
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 502
  description: |-
    Used only via `injection`.

    Provides a specialized form of injection, specifically enabling
    all objects of one type to be injected with a reference to another
    object.

    For example, provided each object of type `controller` needed a `router`.
    one would do the following:

    ```javascript
    var container = new Container();

    container.register('router:main', Router);
    container.register('controller:user', UserController);
    container.register('controller:post', PostController);

    container.typeInjection('controller', 'router', 'router:main');

    var user = container.lookup('controller:user');
    var post = container.lookup('controller:post');

    user.router instanceof Router; //=> true
    post.router instanceof Router; //=> true

    // both controllers share the same router
    user.router === post.router; //=> true
    ```
  access: private
  tagname: ''
  itemtype: method
  name: typeInjection
  params:
  - name: type
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: fullName
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 544
  description: |-
    Defines injection rules.

    These rules are used to inject dependencies onto objects when they
    are instantiated.

    Two forms of injections are possible:

    * Injecting one fullName on another fullName
    * Injecting one fullName on a type

    Example:

    ```javascript
    var container = new Container();

    container.register('source:main', Source);
    container.register('model:user', User);
    container.register('model:post', Post);

    // injecting one fullName on another fullName
    // eg. each user model gets a post model
    container.injection('model:user', 'post', 'model:post');

    // injecting one fullName on another type
    container.injection('model', 'source', 'source:main');

    var user = container.lookup('model:user');
    var post = container.lookup('model:post');

    user.source instanceof Source; //=> true
    post.source instanceof Source; //=> true

    user.post instanceof Post; //=> true

    // and both models share the same source
    user.source === post.source; //=> true
    ```
  itemtype: method
  name: injection
  params:
  - name: factoryName
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 605
  description: |-
    Used only via `factoryInjection`.

    Provides a specialized form of injection, specifically enabling
    all factory of one type to be injected with a reference to another
    object.

    For example, provided each factory of type `model` needed a `store`.
    one would do the following:

    ```javascript
    var container = new Container();

    container.register('store:main', SomeStore);

    container.factoryTypeInjection('model', 'store', 'store:main');

    var store = container.lookup('store:main');
    var UserFactory = container.lookupFactory('model:user');

    UserFactory.store instanceof SomeStore; //=> true
    ```
  access: private
  tagname: ''
  itemtype: method
  name: factoryTypeInjection
  params:
  - name: type
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: fullName
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 640
  description: |-
    Defines factory injection rules.

    Similar to regular injection rules, but are run against factories, via
    `Container#lookupFactory`.

    These rules are used to inject objects onto factories when they
    are looked up.

    Two forms of injections are possible:

          * Injecting one fullName on another fullName
          * Injecting one fullName on a type

    Example:

    ```javascript
    var container = new Container();

    container.register('store:main', Store);
    container.register('store:secondary', OtherStore);
    container.register('model:user', User);
    container.register('model:post', Post);

    // injecting one fullName on another type
    container.factoryInjection('model', 'store', 'store:main');

    // injecting one fullName on another fullName
    container.factoryInjection('model:post', 'secondaryStore', 'store:secondary');

    var UserFactory = container.lookupFactory('model:user');
    var PostFactory = container.lookupFactory('model:post');
    var store = container.lookup('store:main');

    UserFactory.store instanceof Store; //=> true
    UserFactory.secondaryStore instanceof OtherStore; //=> false

    PostFactory.store instanceof Store; //=> true
    PostFactory.secondaryStore instanceof OtherStore; //=> true

    // and both models share the same source instance
    UserFactory.store === PostFactory.store; //=> true
    ```
  itemtype: method
  name: factoryInjection
  params:
  - name: factoryName
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 706
  description: |-
    A depth first traversal, destroying the container, its descendant containers and all
    their managed objects.
  itemtype: method
  name: destroy
  class: Ember.ControllerMixin
- file: "../packages/container/lib/main.js"
  line: 727
  itemtype: method
  name: reset
  class: Ember.ControllerMixin
- file: "../packages/ember-application/lib/ext/controller.js"
  line: 62
  description: |-
    An array of other controller objects available inside
    instances of this controller via the `controllers`
    property:

    For example, when you define a controller:

    ```javascript
    App.CommentsController = Ember.ArrayController.extend({
      needs: ['post']
    });
    ```

    The application's single instance of these other
    controllers are accessible by name through the
    `controllers` property:

    ```javascript
    this.get('controllers.post'); // instance of App.PostController
    ```

    Given that you have a nested controller (nested resource):

    ```javascript
    App.CommentsNewController = Ember.ObjectController.extend({
    });
    ```

    When you define a controller that requires access to a nested one:

    ```javascript
    App.IndexController = Ember.ObjectController.extend({
      needs: ['commentsNew']
    });
    ```

    You will be able to get access to it:

    ```javascript
    this.get('controllers.commentsNew'); // instance of App.CommentsNewController
    ```

    This is only available for singleton controllers.
  itemtype: property
  name: needs
  type: Array
  default: "[]"
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/ext/controller.js"
  line: 132
  itemtype: method
  name: controllerFor
  see:
  - "{Ember.Route#controllerFor}"
  deprecated: true
  deprecationMessage: Use `needs` instead
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/ext/controller.js"
  line: 142
  description: |-
    Stores the instances of other controllers available from within
    this controller. Any controller listed by name in the `needs`
    property will be accessible by name through this property.

    ```javascript
    App.CommentsController = Ember.ArrayController.extend({
      needs: ['post'],
      postTitle: function(){
        var currentPost = this.get('controllers.post'); // instance of App.PostController
        return currentPost.get('title');
      }.property('controllers.post.title')
    });
    ```
  see:
  - "{Ember.ControllerMixin#needs}"
  itemtype: property
  name: controllers
  type: Object
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 166
  description: |-
    The root DOM element of the Application. This can be specified as an
    element or a
    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).

    This is the element that will be passed to the Application's,
    `eventDispatcher`, which sets up the listeners for event delegation. Every
    view in your application should be a child of the element you specify here.
  itemtype: property
  name: rootElement
  type: DOMElement
  default: "'body'"
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 181
  description: |-
    The `Ember.EventDispatcher` responsible for delegating events to this
    application's views.

    The event dispatcher is created by the application at initialization time
    and sets up event listeners on the DOM element described by the
    application's `rootElement` property.

    See the documentation for `Ember.EventDispatcher` for more information.
  itemtype: property
  name: eventDispatcher
  type: Ember.EventDispatcher
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 197
  description: |-
    The DOM events for which the event dispatcher should listen.

    By default, the application's `Ember.EventDispatcher` listens
    for a set of standard DOM events, such as `mousedown` and
    `keyup`, and delegates them to your application's `Ember.View`
    instances.

    If you would like additional bubbling events to be delegated to your
    views, set your `Ember.Application`'s `customEvents` property
    to a hash containing the DOM event name as the key and the
    corresponding view method name as the value. For example:

    ```javascript
    App = Ember.Application.create({
      customEvents: {
        // add support for the paste event
        paste: "paste"
      }
    });
    ```
  itemtype: property
  name: customEvents
  type: Object
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 255
  description: |-
    Build the container for the current application.

    Also register a default application view in case the application
    itself does not.
  access: private
  tagname: ''
  itemtype: method
  name: buildContainer
  return:
    description: the configured container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 271
  description: |-
    If the application has not opted out of routing and has not explicitly
    defined a router, supply a default router for the application author
    to configure.

    This allows application developers to do:

    ```javascript
    var App = Ember.Application.create();

    App.Router.map(function() {
      this.resource('posts');
    });
    ```
  access: private
  tagname: ''
  itemtype: method
  name: defaultRouter
  return:
    description: the default router
    type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 303
  description: |-
    Automatically initialize the application once the DOM has
    become ready.

    The initialization itself is scheduled on the actions queue
    which ensures that application loading finishes before
    booting.

    If you are asynchronously loading code, you should call
    `deferReadiness()` to defer booting, and then call
    `advanceReadiness()` once all of your code has finished
    loading.
  access: private
  tagname: ''
  itemtype: method
  name: scheduleInitialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 331
  description: |-
    Use this to defer readiness until some condition is true.

    Example:

    ```javascript
    App = Ember.Application.create();
    App.deferReadiness();

    jQuery.getJSON("/auth-token", function(token) {
      App.token = token;
      App.advanceReadiness();
    });
    ```

    This allows you to perform asynchronous setup logic and defer
    booting your application until the setup has finished.

    However, if the setup requires a loading UI, it might be better
    to use the router for this purpose.
  itemtype: method
  name: deferReadiness
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 360
  description: |-
    Call `advanceReadiness` after any asynchronous setup logic has completed.
    Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
    or the application will never become ready and routing will not begin.
  itemtype: method
  name: advanceReadiness
  see:
  - "{Ember.Application#deferReadiness}"
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 377
  description: |-
    registers a factory for later injection

    Example:

    ```javascript
    App = Ember.Application.create();

    App.Person  = Ember.Object.extend({});
    App.Orange  = Ember.Object.extend({});
    App.Email   = Ember.Object.extend({});
    App.session = Ember.Object.create({});

    App.register('model:user', App.Person, {singleton: false });
    App.register('fruit:favorite', App.Orange);
    App.register('communication:main', App.Email, {singleton: false});
    App.register('session', App.session, {instantiate: false});
    ```
  itemtype: method
  name: register
  params:
  - name: fullName
    description: type:name (e.g., 'model:user')
    type: String
  - name: factory
    description: "(e.g., App.Person)"
    type: Function
  - name: options
    description: "(optional)"
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 405
  description: "defines an injection or typeInjection\n\nExample:\n\n```javascript\nApp.inject(<full_name
    or type>, <property name>, <full_name>)\nApp.inject('controller:application',
    'email', 'model:email')\nApp.inject('controller', 'source', 'source:main')\n```\nPlease
    note that injections on models are currently disabled. \nThis was done because
    ember-data was not ready for fully a container aware ecosystem.\n\nYou can enable
    injections on models by setting `Ember.MODEL_FACTORY_INJECTIONS` flag to `true`\nIf
    model factory injections are enabled, models should not be\naccessed globally
    (only through `container.lookupFactory('model:modelName'))`);"
  itemtype: method
  name: inject
  params:
  - name: factoryNameOrType
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 432
  description: |-
    Calling initialize manually is not supported.

    Please see Ember.Application#advanceReadiness and
    Ember.Application#deferReadiness.
  access: private
  tagname: ''
  deprecated: true
  itemtype: method
  name: initialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 445
  description: |-
    Initialize the application. This happens automatically.

    Run any initializers and run the application load hook. These hooks may
    choose to defer readiness. For example, an authentication hook might want
    to defer readiness until the auth token has been retrieved.
  access: private
  tagname: ''
  itemtype: method
  name: _initialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 476
  description: |-
    Reset the application. This is typically used only in tests. It cleans up
    the application in the following order:

    1. Deactivate existing routes
    2. Destroy all objects in the container
    3. Create a new application container
    4. Re-route to the existing url

    Typical Example:

    ```javascript

    var App;

    Ember.run(function() {
      App = Ember.Application.create();
    });

    module("acceptance test", {
      setup: function() {
        App.reset();
      }
    });

    test("first test", function() {
      // App is freshly reset
    });

    test("first test", function() {
      // App is again freshly reset
    });
    ```

    Advanced Example:

    Occasionally you may want to prevent the app from initializing during
    setup. This could enable extra configuration, or enable asserting prior
    to the app becoming ready.

    ```javascript

    var App;

    Ember.run(function() {
      App = Ember.Application.create();
    });

    module("acceptance test", {
      setup: function() {
        Ember.run(function() {
          App.reset();
          App.deferReadiness();
        });
      }
    });

    test("first test", function() {
      ok(true, 'something before app is initialized');

      Ember.run(function() {
        App.advanceReadiness();
      });
      ok(true, 'something after app is initialized');
    });
    ```
  itemtype: method
  name: reset
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 564
  access: private
  tagname: ''
  itemtype: method
  name: runInitializers
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 587
  access: private
  tagname: ''
  itemtype: method
  name: didBecomeReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 605
  description: |-
    Setup up the event dispatcher to receive events on the
    application's `rootElement` with any registered
    `customEvents`.
  access: private
  tagname: ''
  itemtype: method
  name: setupEventDispatcher
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 622
  description: |-
    trigger a new call to `route` whenever the URL changes.
    If the application has a router, use it to route to the current URL, and
  access: private
  tagname: ''
  itemtype: property
  name: router
  type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 643
  description: |-
    Called when the Application has become ready.
    The call will be delayed until the DOM has become ready.
  itemtype: event
  name: ready
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 651
  deprecated: true
  deprecationMessage: |-
    Use 'Resolver' instead
    Set this to provide an alternate class to `Ember.DefaultResolver`
  itemtype: property
  name: resolver
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 660
  description: Set this to provide an alternate class to `Ember.DefaultResolver`
  itemtype: property
  name: resolver
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 700
  description: |-
    This creates a container with the default Ember naming conventions.

    It also configures the container:

    * registered views are created every time they are looked up (they are
      not singletons)
    * registered templates are not factories; the registered value is
      returned directly.
    * the router receives the application as its `namespace` property
    * all controllers receive the router as their `target` and `controllers`
      properties
    * all controllers receive the application as their `namespace` property
    * the application view receives the application controller as its
      `controller` property
    * the application view receives the application template as its
      `defaultTemplate` property
  access: private
  tagname: ''
  itemtype: method
  name: buildContainer
  static: 1
  params:
  - name: namespace
    description: |-
      the application to build the
        container for.
    type: Ember.Application
  return:
    description: the built container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/application.js"
  line: 765
  description: |-
    This function defines the default lookup rules for container lookups:

    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container

    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  access: private
  tagname: ''
  itemtype: method
  name: resolverFor
  params:
  - name: namespace
    description: the namespace to look for classes
    type: Ember.Namespace
  return:
    description: the resolved value for a given lookup
    type: "*"
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 82
  description: |-
    This will be set to the Application instance when it is
    created.
  itemtype: property
  name: namespace
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 118
  description: |-
    This method is called via the container's resolver method.
    It parses the provided `fullName` and then looks up and
    returns the appropriate template or class.
  itemtype: method
  name: resolve
  params:
  - name: fullName
    description: the lookup string
    type: String
  return:
    description: the resolved factory
    type: Object
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 141
  description: |-
    Convert the string name of the form "type:name" to
    a Javascript object with the parsed aspects of the name
    broken out.
  access: protected
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: parseName
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 175
  description: Look up the template in Ember.TEMPLATES
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveTemplate
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 195
  description: |-
    Given a parseName object (output from `parseName`), apply
    the conventions expected by `Ember.Router`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: useRouterNaming
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 210
  description: Lookup the controller using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveController
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 222
  description: Lookup the route using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveRoute
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 234
  description: Lookup the view using `resolveOther`
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveView
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 251
  description: Lookup the model on the Application namespace
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveModel
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 265
  description: |-
    Look up the specified object (from parsedName) on the appropriate
    namespace (usually on the Application)
  access: protected
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveOther
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-application/lib/system/resolver.js"
  line: 280
  description: |-
    Returns a human-readable description for a fullName. Used by the
    Application namespace in assertions to describe the
    precise name of the class that Ember is looking for, rather than
    container keys.
  access: protected
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: lookupDescription
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: "../packages/ember-debug/lib/main.js"
  line: 41
  description: |-
    Define an assertion that will throw an exception if the condition is not
    met. Ember build tools will remove any calls to `Ember.assert()` when
    doing a production build. Example:

    ```javascript
    // Test for truthiness
    Ember.assert('Must pass a valid object', obj);
    // Fail unconditionally
    Ember.assert('This code path should never be run')
    ```
  itemtype: method
  name: assert
  params:
  - name: desc
    description: |-
      A description of the assertion. This will become
        the text of the Error thrown if the assertion fails.
    type: String
  - name: test
    description: |-
      Must be truthy for the assertion to pass. If
        falsy, an exception will be thrown.
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: "../packages/ember-debug/lib/main.js"
  line: 66
  description: |-
    Display a warning with the provided message. Ember build tools will
    remove any calls to `Ember.warn()` when doing a production build.
  itemtype: method
  name: warn
  params:
  - name: message
    description: A warning to display.
    type: String
  - name: test
    description: |-
      An optional boolean. If falsy, the warning
        will be displayed.
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: "../packages/ember-debug/lib/main.js"
  line: 82
  description: |-
    Display a debug notice. Ember build tools will remove any calls to
    `Ember.debug()` when doing a production build.

    ```javascript
    Ember.debug("I'm a debug notice!");
    ```
  itemtype: method
  name: debug
  params:
  - name: message
    description: A debug message to display.
    type: String
  class: Ember
  module: ember
  submodule: ember-debug
- file: "../packages/ember-debug/lib/main.js"
  line: 97
  description: |-
    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only). Ember build tools will remove any calls to
    `Ember.deprecate()` when doing a production build.
  itemtype: method
  name: deprecate
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: test
    description: |-
      An optional boolean. If falsy, the deprecation
        will be displayed.
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: "../packages/ember-debug/lib/main.js"
  line: 143
  description: |-
    Alias an old, deprecated method with its new counterpart.

    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only) when the assigned method is called.

    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though
    no warnings will be shown in production.

    ```javascript
    Ember.oldMethod = Ember.deprecateFunc("Please use the new, updated method", Ember.newMethod);
    ```
  itemtype: method
  name: deprecateFunc
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: func
    description: The new function called to replace its deprecated counterpart.
    type: Function
  return:
    description: a new function that wrapped the original function with a deprecation
      warning
    type: Function
  class: Ember
  module: ember
  submodule: ember-debug
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 55
  description: |-
    The container of the application being debugged.
    This property will be injected
    on creation.
  itemtype: property
  name: container
  default: 'null'
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 65
  description: |-
    Number of attributes to send
    as columns. (Enough to make the record
    identifiable).
  access: private
  tagname: ''
  itemtype: property
  name: attributeLimit
  default: '3'
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 76
  description: |-
    Stores all methods that clear observers.
    These methods will be called on destruction.
  access: private
  tagname: ''
  itemtype: property
  name: releaseMethods
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 85
  description: |-
    Specifies how records can be filtered.
    Records returned will need to have a `filterValues`
    property with a key for every name in the returned array.
  access: public
  tagname: ''
  itemtype: method
  name: getFilters
  return:
    description: |-
      List of objects defining filters.
       The object should have a `name` and `desc` property.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 99
  description: Fetch the model types and observe them for changes.
  access: public
  tagname: ''
  itemtype: method
  name: watchModelTypes
  params:
  - name: typesAdded
    description: |-
      Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
    type: Function
  - name: typesUpdated
    description: |-
      Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
    type: Function
  return:
    description: Method to call to remove all observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 133
  description: Fetch the records of a given type and observe them for changes.
  access: public
  tagname: ''
  itemtype: method
  name: watchRecords
  params:
  - name: recordsAdded
    description: |-
      Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} key and value of a table cell
        object: {Object} the actual record object
    type: Function
  - name: recordsUpdated
    description: |-
      Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
    type: Function
  - name: recordsRemoved
    description: |-
      Callback to call when a record has removed.
      Takes the following parameters:
        index: the array index where the records were removed
        count: the number of records removed
    type: Function
  return:
    description: Method to call to remove all observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 196
  description: Clear all observers before destruction
  access: private
  tagname: ''
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 207
  description: |-
    Detect whether a class is a model.

    Test that against the model class
    of your persistence library
  access: private
  tagname: ''
  itemtype: method
  name: detect
  params:
  - name: klass
    description: The class to test
    type: Class
  return:
    description: boolean Whether the class is a model class or not
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 222
  description: Get the columns for a given model type.
  access: private
  tagname: ''
  itemtype: method
  name: columnsForType
  params:
  - name: type
    description: The model type
    type: Class
  return:
    description: |-
      An array of columns of the following format:
       name: {String} name of the column
       desc: {String} Humanized description (what would show in a table column name)
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 236
  description: Adds observers to a model type class.
  access: private
  tagname: ''
  itemtype: method
  name: observeModelType
  params:
  - name: type
    description: The model type class
    type: Class
  - name: typesUpdated
    description: Called when a type is modified.
    type: Function
  return:
    description: The function to call to remove observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 269
  description: Wraps a given model type and observes changes to it.
  access: private
  tagname: ''
  itemtype: method
  name: wrapModelType
  params:
  - name: type
    description: A model class
    type: Class
  - name: typesUpdated
    description: callback to call when the type changes
    type: Function
  return:
    description: |-
      contains the wrapped type and the function to remove observers
      Format:
        type: {Object} the wrapped type
          The wrapped type has the following format:
            name: {String} name of the type
            count: {Integer} number of records available
            columns: {Columns} array of columns to describe the record
            object: {Class} the actual Model type class
        release: {Function} The function to remove observers
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 302
  description: Fetches all models defined in the application.
  access: private
  tagname: ''
  itemtype: method
  name: getModelTypes
  return:
    description: Array of model types
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 326
  description: Fetches all loaded records for a given type.
  access: private
  tagname: ''
  itemtype: method
  name: getRecords
  return:
    description: |-
      An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 339
  description: Wraps a record and observers changes to it.
  access: private
  tagname: ''
  itemtype: method
  name: wrapRecord
  params:
  - name: record
    description: The record instance.
    type: Object
  return:
    description: |-
      The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 360
  description: Gets the values for each column.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordColumnValues
  return:
    description: |-
      Keys should match column names defined
      by the model type.
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 372
  description: Returns keywords to match when searching records.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordKeywords
  return:
    description: Relevant keywords for search.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 383
  description: Returns the values of filters defined by `getFilters`.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordFilterValues
  params:
  - name: record
    description: The record instance
    type: Object
  return:
    description: The filter values
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 395
  description: Each record can have a color that represents its state.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordColor
  params:
  - name: record
    description: The record instance
    type: Object
  return:
    description: |-
      The record's color
        Possible options: black, red, blue, green
    type: String
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-extension-support/lib/data_adapter.js"
  line: 408
  description: |-
    Observes all relevant properties and re-sends the wrapped record
    when a change occurs.
  access: private
  tagname: ''
  itemtype: method
  name: observerRecord
  params:
  - name: record
    description: The record instance
    type: Object
  - name: recordUpdated
    description: The callback to call when a record is updated.
    type: Function
  return:
    description: The function to call to remove all observers.
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 43
  description: |-
    Register a bound helper or custom view helper.

    ## Simple bound helper example

    ```javascript
    Ember.Handlebars.helper('capitalize', function(value) {
      return value.toUpperCase();
    });
    ```

    The above bound helper can be used inside of templates as follows:

    ```handlebars
    {{capitalize name}}
    ```

    In this case, when the `name` property of the template's context changes,
    the rendered value of the helper will update to reflect this change.

    For more examples of bound helpers, see documentation for
    `Ember.Handlebars.registerBoundHelper`.

    ## Custom view helper example

    Assuming a view subclass named `App.CalendarView` were defined, a helper
    for rendering instances of this view could be registered as follows:

    ```javascript
    Ember.Handlebars.helper('calendar', App.CalendarView):
    ```

    The above bound helper can be used inside of templates as follows:

    ```handlebars
    {{calendar}}
    ```

    Which is functionally equivalent to:

    ```handlebars
    {{view App.CalendarView}}
    ```

    Options in the helper will be passed to the view in exactly the same
    manner as with the `view` helper.
  itemtype: method
  name: helper
  params:
  - name: name
    description: ''
    type: String
  - name: function
    description: or view class constructor
    type: Function|Ember.View
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 106
  description: |-
    Returns a helper function that renders the provided ViewClass.

    Used internally by Ember.Handlebars.helper and other methods
    involving helper/component registration.
  access: private
  tagname: ''
  itemtype: method
  name: helper
  params:
  - name: ViewClass
    description: view class constructor
    type: Function
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 168
  description: |-
    Override the default buffer for Ember Handlebars. By default, Handlebars
    creates an empty String at the beginning of each invocation and appends to
    it. Ember's Handlebars overrides this to append to a single shared buffer.
  access: private
  tagname: ''
  itemtype: method
  name: appendToBuffer
  params:
  - name: string
    description: ''
    type: String
  class: Ember.Handlebars.JavaScriptCompiler
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 220
  description: |-
    Rewrite simple mustaches from `{{foo}}` to `{{bind "foo"}}`. This means that
    all simple mustaches in Ember's Handlebars will also set up an observer to
    keep the DOM up to date when the underlying property changes.
  access: private
  tagname: ''
  itemtype: method
  name: mustache
  params:
  - name: mustache
    description: ''
  class: Ember.Handlebars.Compiler
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 252
  description: |-
    Used for precompilation of Ember Handlebars templates. This will not be used
    during normal app execution.
  itemtype: method
  name: precompile
  static: 1
  params:
  - name: string
    description: The template to precompile
    type: String
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: "../packages/ember-handlebars-compiler/lib/main.js"
  line: 283
  description: |-
    The entry point for Ember Handlebars. This replaces the default
    `Handlebars.compile` and turns on template-local data and String
    parameters.
  itemtype: method
  name: compile
  static: 1
  params:
  - name: string
    description: The template to compile
    type: String
  return:
    description: ''
    type: Function
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 332
  description: |-
    The `multiple` attribute of the select element. Indicates whether multiple
    options can be selected.
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 342
  description: |-
    The `disabled` attribute of the select element. Indicates whether
    the element is disabled from interactions.
  itemtype: property
  name: disabled
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 352
  description: |-
    The list of options.

    If `optionLabelPath` and `optionValuePath` are not overridden, this should
    be a list of strings, which will serve simultaneously as labels and values.

    Otherwise, this should be a list of objects. For instance:

    ```javascript
    Ember.Select.create({
      content: Ember.A([
          { id: 1, firstName: 'Yehuda' },
          { id: 2, firstName: 'Tom' }
        ]),
      optionLabelPath: 'content.firstName',
      optionValuePath: 'content.id'
    });
    ```
  itemtype: property
  name: content
  type: Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 377
  description: |-
    When `multiple` is `false`, the element of `content` that is currently
    selected, if any.

    When `multiple` is `true`, an array of such elements.
  itemtype: property
  name: selection
  type: Object or Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 389
  description: |-
    In single selection mode (when `multiple` is `false`), value can be used to
    get the current selection's value or set the selection by it's value.

    It is not currently supported in multiple selection mode.
  itemtype: property
  name: value
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 405
  description: |-
    If given, a top-most dummy option will be rendered to serve as a user
    prompt.
  itemtype: property
  name: prompt
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 415
  description: The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionLabelPath
  type: String
  default: "'content'"
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 424
  description: The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionValuePath
  type: String
  default: "'content'"
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 433
  description: |-
    The path of the option group.
    When this property is used, `content` should be sorted by `optionGroupPath`.
  itemtype: property
  name: optionGroupPath
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 443
  description: The view class for optgroup.
  itemtype: property
  name: groupView
  type: Ember.View
  default: Ember.SelectOptgroup
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/select.js"
  line: 473
  description: The view class for option.
  itemtype: property
  name: optionView
  type: Ember.View
  default: Ember.SelectOption
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 36
  description: |-
    The `value` attribute of the input element. As the user inputs text, this
    property is updated live.
  itemtype: property
  name: value
  type: String
  default: "\"\""
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 46
  description: The `type` attribute of the input element.
  itemtype: property
  name: type
  type: String
  default: "\"text\""
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 55
  description: The `size` of the text field in characters.
  itemtype: property
  name: size
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 64
  description: The `pattern` attribute of input element.
  itemtype: property
  name: pattern
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 73
  description: The `min` attribute of input element used with `type="number"` or `type="range"`.
  itemtype: property
  name: min
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_field.js"
  line: 82
  description: The `max` attribute of input element used with `type="number"` or `type="range"`.
  itemtype: property
  name: max
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 36
  description: |-
    The action to be sent when the user presses the return key.

    This is similar to the `{{action}}` helper, but is fired when
    the user presses the return key when editing a text field, and sends
    the value of the field as the context.
  itemtype: property
  name: action
  type: String
  default: 'null'
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 49
  description: |-
    The event that should send the action.

    Options are:

    * `enter`: the user pressed enter
    * `keyPress`: the user pressed a key
  itemtype: property
  name: onEvent
  type: String
  default: enter
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 63
  description: |-
    Whether they `keyUp` event that triggers an `action` to be sent continues
    propagating to other views.

    By default, when the user presses the return key on their keyboard and
    the text field has an `action` set, the action will be sent to the view's
    controller and the key event will stop propagating.

    If you would like parent views to receive the `keyUp` event even after an
    action has been dispatched, set `bubbles` to true.
  itemtype: property
  name: bubbles
  type: Boolean
  default: 'false'
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 92
  description: |-
    The action to be sent when the user inserts a new line.

    Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 13.
    Uses sendAction to send the `enter` action to the controller.
  itemtype: method
  name: insertNewline
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 106
  description: |-
    Called when the user hits escape.

    Called by the `Ember.TextSupport` mixin on keyUp if keycode matches 27.
    Uses sendAction to send the `escape-press` action to the controller.
  itemtype: method
  name: cancel
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 119
  description: Called when the text area is focused.
  itemtype: method
  name: focusIn
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 129
  description: Called when the text area is blurred.
  itemtype: method
  name: focusOut
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls/text_support.js"
  line: 139
  description: |-
    The action to be sent when the user presses a key. Enabled by setting
    the `onEvent` property to `keyPress`.

    Uses sendAction to send the `keyPress` action to the controller.
  itemtype: method
  name: keyPress
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.TextSupport
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 163
  description: |-
    '_triageMustache' is used internally select between a binding, helper, or component for
    the given context. Until this point, it would be hard to determine if the
    mustache is a property reference or a regular helper reference. This triage
    helper resolves that.

    This would not be typically invoked by directly.
  access: private
  tagname: ''
  itemtype: method
  name: _triageMustache
  params:
  - name: property
    description: Property/helperID to triage
    type: String
  - name: options
    description: hash of template/rendering options
    type: Object
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 213
  description: |-
    `bind` can be used to display a value, then update that value if it
    changes. For example, if you wanted to print the `title` property of
    `content`:

    ```handlebars
    {{bind "content.title"}}
    ```

    This will return the `title` property as a string, then create a new observer
    at the specified path. If it changes, it will update the value in DOM. Note
    that if you need to support IE7 and IE8 you must modify the model objects
    properties using `Ember.get()` and `Ember.set()` for this to work as it
    relies on Ember's KVO system. For all other browsers this will be handled for
    you automatically.
  access: private
  tagname: ''
  itemtype: method
  name: bind
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 248
  description: |-
    Use the `boundIf` helper to create a conditional that re-evaluates
    whenever the truthiness of the bound value changes.

    ```handlebars
    {{#boundIf "content.shouldDisplayTitle"}}
      {{content.title}}
    {{/boundIf}}
    ```
  access: private
  tagname: ''
  itemtype: method
  name: boundIf
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 272
  access: private
  tagname: |-
    Use the `unboundIf` helper to create a conditional that evaluates once.

    ```handlebars
    {{#unboundIf "content.shouldDisplayTitle"}}
      {{content.title}}
    {{/unboundIf}}
    ```
  itemtype: method
  name: unboundIf
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 306
  description: "Use the `{{with}}` helper when you want to scope context. Take the
    following code as an example:\n\n```handlebars\n<h5>{{user.name}}</h5>\n\n<div
    class=\"role\">\n  <h6>{{user.role.label}}</h6>\n  <span class=\"role-id\">{{user.role.id}}</span>\n\n
    \ <p class=\"role-desc\">{{user.role.description}}</p>\n</div>\n```\n\n`{{with}}`
    can be our best friend in these cases, \ninstead of writing `user.role.*` over
    and over, we use `{{#with user.role}}`.\nNow the context within the `{{#with}}
    .. {{/with}}` block is `user.role` so you can do the following:\n\n```handlebars\n<h5>{{user.name}}</h5>\n\n<div
    class=\"role\">\n  {{#with user.role}}\n    <h6>{{label}}</h6>\n    <span class=\"role-id\">{{id}}</span>\n\n
    \   <p class=\"role-desc\">{{description}}</p>\n  {{/with}}\n</div>\n```\n\n###
    `as` operator\n\nThis operator aliases the scope to a new name. It's helpful for
    semantic clarity and to retain \ndefault scope or to reference from another `{{with}}`
    block.\n\n```handlebars\n// posts might not be\n{{#with user.posts as blogPosts}}\n
    \ <div class=\"notice\">\n    There are {{blogPosts.length}} blog posts written
    by {{user.name}}.\n  </div>\n\n  {{#each post in blogPosts}}\n    <li>{{post.title}}</li>\n
    \ {{/each}}\n{{/with}}\n```\n\nWithout the `as` operator, it would be impossible
    to reference `user.name` in the example above.\n\n### `controller` option\n\nAdding
    `controller='something'` instructs the `{{with}}` helper to create and use an
    instance of\nthe specified controller with the new context as its content.\n\nThis
    is very similar to using an `itemController` option with the `{{each}}` helper.\n\n```handlebars\n{{#with
    users.posts controller='userBlogPosts'}}\n  {{!- The current context is wrapped
    in our controller instance }}\n{{/with}}\n```\n\nIn the above example, the template
    provided to the `{{with}}` block is now wrapped in the\n`userBlogPost` controller,
    which provides a very elegant way to decorate the context with custom\nfunctions/properties."
  itemtype: method
  name: with
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 421
  description: |-
    See [boundIf](/api/classes/Ember.Handlebars.helpers.html#method_boundIf)
    and [unboundIf](/api/classes/Ember.Handlebars.helpers.html#method_unboundIf)
  itemtype: method
  name: if
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 441
  itemtype: method
  name: unless
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 464
  description: |-
    `bind-attr` allows you to create a binding between DOM element attributes and
    Ember objects. For example:

    ```handlebars
    <img {{bind-attr src="imageUrl" alt="imageTitle"}}>
    ```

    The above handlebars template will fill the `<img>`'s `src` attribute will
    the value of the property referenced with `"imageUrl"` and its `alt`
    attribute with the value of the property referenced with `"imageTitle"`.

    If the rendering context of this template is the following object:

    ```javascript
    {
      imageUrl: 'http://lolcats.info/haz-a-funny',
      imageTitle: 'A humorous image of a cat'
    }
    ```

    The resulting HTML output will be:

    ```html
    <img src="http://lolcats.info/haz-a-funny" alt="A humorous image of a cat">
    ```

    `bind-attr` cannot redeclare existing DOM element attributes. The use of `src`
    in the following `bind-attr` example will be ignored and the hard coded value
    of `src="/failwhale.gif"` will take precedence:

    ```handlebars
    <img src="/failwhale.gif" {{bind-attr src="imageUrl" alt="imageTitle"}}>
    ```

    ### `bind-attr` and the `class` attribute

    `bind-attr` supports a special syntax for handling a number of cases unique
    to the `class` DOM element attribute. The `class` attribute combines
    multiple discrete values into a single attribute as a space-delimited
    list of strings. Each string can be:

    * a string return value of an object's property.
    * a boolean return value of an object's property
    * a hard-coded value

    A string return value works identically to other uses of `bind-attr`. The
    return value of the property will become the value of the attribute. For
    example, the following view and template:

    ```javascript
      AView = Ember.View.extend({
        someProperty: function() {
          return "aValue";
        }.property()
      })
    ```

    ```handlebars
    <img {{bind-attr class="view.someProperty}}>
    ```

    Result in the following rendered output:

    ```html
    <img class="aValue">
    ```

    A boolean return value will insert a specified class name if the property
    returns `true` and remove the class name if the property returns `false`.

    A class name is provided via the syntax
    `somePropertyName:class-name-if-true`.

    ```javascript
    AView = Ember.View.extend({
      someBool: true
    })
    ```

    ```handlebars
    <img {{bind-attr class="view.someBool:class-name-if-true"}}>
    ```

    Result in the following rendered output:

    ```html
    <img class="class-name-if-true">
    ```

    An additional section of the binding can be provided if you want to
    replace the existing class instead of removing it when the boolean
    value changes:

    ```handlebars
    <img {{bind-attr class="view.someBool:class-name-if-true:class-name-if-false"}}>
    ```

    A hard-coded value can be used by prepending `:` to the desired
    class name: `:class-name-to-always-apply`.

    ```handlebars
    <img {{bind-attr class=":class-name-to-always-apply"}}>
    ```

    Results in the following rendered output:

    ```html
    <img class="class-name-to-always-apply">
    ```

    All three strategies - string return value, boolean return value, and
    hard-coded value – can be combined in a single declaration:

    ```handlebars
    <img {{bind-attr class=":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty"}}>
    ```
  itemtype: method
  name: bind-attr
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 675
  description: See `bind-attr`
  itemtype: method
  name: bindAttr
  deprecated: true
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/binding.js"
  line: 690
  description: |-
    Helper that, given a space-separated string of property paths and a context,
    returns an array of class names. Calling this method also has the side
    effect of setting up observers at those property paths, such that if they
    change, the correct class name will be reapplied to the DOM element.

    For example, if you pass the string "fooBar", it will first look up the
    "fooBar" value of the context. If that value is true, it will add the
    "foo-bar" class to the current element (i.e., the dasherized form of
    "fooBar"). If the value is a string, it will add that string as the class.
    Otherwise, it will not add any new class name.
  access: private
  tagname: ''
  itemtype: method
  name: bindClasses
  params:
  - name: context
    description: The context from which to lookup properties
    type: Ember.Object
  - name: classBindings
    description: |-
      A string, space-separated, of class bindings
        to use
    type: String
  - name: view
    description: |-
      The view in which observers should look for the
        element to update
    type: Ember.View
  - name: bindAttrId
    description: Optional bindAttr id used to lookup elements
    type: Srting
  return:
    description: An array of class names to add
    type: Array
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/helpers/collection.js"
  line: 12
  description: |-
    `{{collection}}` is a `Ember.Handlebars` helper for adding instances of
    `Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)
     for additional information on how a `CollectionView` functions.

    `{{collection}}`'s primary use is as a block helper with a `contentBinding`
    option pointing towards an `Ember.Array`-compatible object. An `Ember.View`
    instance will be created for each item in its `content` property. Each view
    will have its own `content` property set to the appropriate item in the
    collection.

    The provided block will be applied as the template for each item's view.

    Given an empty `<body>` the following template:

    ```handlebars
    {{#collection contentBinding="App.items"}}
      Hi {{view.content.name}}
    {{/collection}}
    ```

    And the following application code

    ```javascript
    App = Ember.Application.create()
    App.items = [
      Ember.Object.create({name: 'Dave'}),
      Ember.Object.create({name: 'Mary'}),
      Ember.Object.create({name: 'Sara'})
    ]
    ```

    Will result in the HTML structure below

    ```html
    <div class="ember-view">
      <div class="ember-view">Hi Dave</div>
      <div class="ember-view">Hi Mary</div>
      <div class="ember-view">Hi Sara</div>
    </div>
    ```

    ### Blockless use in a collection

    If you provide an `itemViewClass` option that has its own `template` you can
    omit the block.

    The following template:

    ```handlebars
    {{collection contentBinding="App.items" itemViewClass="App.AnItemView"}}
    ```

    And application code

    ```javascript
    App = Ember.Application.create();
    App.items = [
      Ember.Object.create({name: 'Dave'}),
      Ember.Object.create({name: 'Mary'}),
      Ember.Object.create({name: 'Sara'})
    ];

    App.AnItemView = Ember.View.extend({
      template: Ember.Handlebars.compile("Greetings {{view.content.name}}")
    });
    ```

    Will result in the HTML structure below

    ```html
    <div class="ember-view">
      <div class="ember-view">Greetings Dave</div>
      <div class="ember-view">Greetings Mary</div>
      <div class="ember-view">Greetings Sara</div>
    </div>
    ```

    ### Specifying a CollectionView subclass

    By default the `{{collection}}` helper will create an instance of
    `Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to
    the helper by passing it as the first argument:

    ```handlebars
    {{#collection App.MyCustomCollectionClass contentBinding="App.items"}}
      Hi {{view.content.name}}
    {{/collection}}
    ```

    ### Forwarded `item.*`-named Options

    As with the `{{view}}`, helper options passed to the `{{collection}}` will be
    set on the resulting `Ember.CollectionView` as properties. Additionally,
    options prefixed with `item` will be applied to the views rendered for each
    item (note the camelcasing):

    ```handlebars
    {{#collection contentBinding="App.items"
                  itemTagName="p"
                  itemClassNames="greeting"}}
      Howdy {{view.content.name}}
    {{/collection}}
    ```

    Will result in the following HTML structure:

    ```html
    <div class="ember-view">
      <p class="ember-view greeting">Howdy Dave</p>
      <p class="ember-view greeting">Howdy Mary</p>
      <p class="ember-view greeting">Howdy Sara</p>
    </div>
    ```
  itemtype: method
  name: collection
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  deprecated: true
  deprecationMessage: Use `{{each}}` helper instead.
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/debug.js"
  line: 12
  description: |-
    `log` allows you to output the value of a variable in the current rendering
    context.

    ```handlebars
    {{log myVariable}}
    ```
  itemtype: method
  name: log
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/debug.js"
  line: 33
  description: |-
    Execute the `debugger` statement in the current context.

    ```handlebars
    {{debugger}}
    ```

    Before invoking the `debugger` statement, there
    are a few helpful variables defined in the
    body of this helper that you can inspect while
    debugging that describe how and where this
    helper was invoked:

    - templateContext: this is most likely a controller
      from which this template looks up / displays properties
    - typeOfTemplateContext: a string description of
      what the templateContext is

    For example, if you're wondering why a value `{{foo}}`
    isn't rendering as expected within a template, you
    could place a `{{debugger}}` statement, and when
    the `debugger;` breakpoint is hit, you can inspect
    `templateContext`, determine if it's the object you
    expect, and/or evaluate expressions in the console
    to perform property lookups on the `templateContext`:

    ```
      > templateContext.get('foo') // -> "<value of {{foo}}>"
    ```
  itemtype: method
  name: debugger
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/each.js"
  line: 213
  description: |-
    The `{{#each}}` helper loops over elements in a collection, rendering its
    block once for each item. It is an extension of the base Handlebars `{{#each}}`
    helper:

    ```javascript
    Developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];
    ```

    ```handlebars
    {{#each Developers}}
      {{name}}
    {{/each}}
    ```

    `{{each}}` supports an alternative syntax with element naming:

    ```handlebars
    {{#each person in Developers}}
      {{person.name}}
    {{/each}}
    ```

    When looping over objects that do not have properties, `{{this}}` can be used
    to render the object:

    ```javascript
    DeveloperNames = ['Yehuda', 'Tom', 'Paul']
    ```

    ```handlebars
    {{#each DeveloperNames}}
      {{this}}
    {{/each}}
    ```
    ### {{else}} condition
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.

    ```
    {{#each person in Developers}}
      {{person.name}}
    {{else}}
      <p>Sorry, nobody is available for this task.</p>
    {{/each}}
    ```
    ### Specifying a View class for items
    If you provide an `itemViewClass` option that references a view class
    with its own `template` you can omit the block.

    The following template:

    ```handlebars
    {{#view App.MyView }}
      {{each view.items itemViewClass="App.AnItemView"}}
    {{/view}}
    ```

    And application code

    ```javascript
    App = Ember.Application.create({
      MyView: Ember.View.extend({
        items: [
          Ember.Object.create({name: 'Dave'}),
          Ember.Object.create({name: 'Mary'}),
          Ember.Object.create({name: 'Sara'})
        ]
      })
    });

    App.AnItemView = Ember.View.extend({
      template: Ember.Handlebars.compile("Greetings {{name}}")
    });
    ```

    Will result in the HTML structure below

    ```html
    <div class="ember-view">
      <div class="ember-view">Greetings Dave</div>
      <div class="ember-view">Greetings Mary</div>
      <div class="ember-view">Greetings Sara</div>
    </div>
    ```

    If an `itemViewClass` is defined on the helper, and therefore the helper is not
    being used as a block, an `emptyViewClass` can also be provided optionally.
    The `emptyViewClass` will match the behavior of the `{{else}}` condition
    described above. That is, the `emptyViewClass` will render if the collection
    is empty.

    ### Representing each item with a Controller.
    By default the controller lookup within an `{{#each}}` block will be
    the controller of the template where the `{{#each}}` was used. If each
    item needs to be presented by a custom controller you can provide a
    `itemController` option which references a controller by lookup name.
    Each item in the loop will be wrapped in an instance of this controller
    and the item itself will be set to the `content` property of that controller.

    This is useful in cases where properties of model objects need transformation
    or synthesis for display:

    ```javascript
    App.DeveloperController = Ember.ObjectController.extend({
      isAvailableForHire: function() {
        return !this.get('content.isEmployed') && this.get('content.isSeekingWork');
      }.property('isEmployed', 'isSeekingWork')
    })
    ```

    ```handlebars
    {{#each person in developers itemController="developer"}}
      {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}
    {{/each}}
    ```

    Each itemController will receive a reference to the current controller as
    a `parentController` property.

    ### (Experimental) Grouped Each

    When used in conjunction with the experimental [group helper](https://github.com/emberjs/group-helper),
    you can inform Handlebars to re-render an entire group of items instead of
    re-rendering them one at a time (in the event that they are changed en masse
    or an item is added/removed).

    ```handlebars
    {{#group}}
      {{#each people}}
        {{firstName}} {{lastName}}
      {{/each}}
    {{/group}}
    ```

    This can be faster than the normal way that Handlebars re-renders items
    in some cases.

    If for some reason you have a group with more than one `#each`, you can make
    one of the collections be updated in normal (non-grouped) fashion by setting
    the option `groupedRows=true` (counter-intuitive, I know).

    For example,

    ```handlebars
    {{dealershipName}}

    {{#group}}
      {{#each dealers}}
        {{firstName}} {{lastName}}
      {{/each}}

      {{#each car in cars groupedRows=true}}
        {{car.make}} {{car.model}} {{car.color}}
      {{/each}}
    {{/group}}
    ```
    Any change to `dealershipName` or the `dealers` collection will cause the
    entire group to be re-rendered. However, changes to the `cars` collection
    will be re-rendered individually (as normal).

    Note that `group` behavior is also disabled by specifying an `itemViewClass`.
  itemtype: method
  name: each
  params:
  - name: name
    description: name for item (used with `in`)
    type: String
    optional: true
  - name: path
    description: path
    type: String
    optional: true
  - name: options
    description: Handlebars key/value pairs of options
    type: Object
    optional: true
    props:
    - name: itemViewClass
      description: a path to a view class used for each item
      type: String
      optional: true
    - name: itemController
      description: name of a controller to be created for each item
      type: String
      optional: true
    - name: groupedRows
      description: enable normal item-by-item rendering when inside a `#group` helper
      type: Boolean
      optional: true
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/loc.js"
  line: 8
  description: |-
    `loc` looks up the string in the localized strings hash.
    This is a convenient way to localize text. For example:

    ```html
    <script type="text/x-handlebars" data-template-name="home">
      {{loc "welcome"}}
    </script>
    ```

    Take note that `"welcome"` is a string and not an object
    reference.
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/partial.js"
  line: 8
  description: |-
    The `partial` helper renders another template without
    changing the template context:

    ```handlebars
    {{foo}}
    {{partial "nav"}}
    ```

    The above example template will render a template named
    "_nav", which has the same context as the parent template
    it's rendered into, so if the "_nav" template also referenced
    `{{foo}}`, it would print the same thing as the `{{foo}}`
    in the above example.

    If a "_nav" template isn't found, the `partial` helper will
    fall back to a template named "nav".

    ## Bound template names

    The parameter supplied to `partial` can also be a path
    to a property containing a template name, e.g.:

    ```handlebars
    {{partial someTemplateName}}
    ```

    The above example will look up the value of `someTemplateName`
    on the template context (e.g. a controller) and use that
    value as the name of the template to render. If the resolved
    value is falsy, nothing will be rendered. If `someTemplateName`
    changes, the partial will be re-rendered using the new template
    name.

    ## Setting the partial's context with `with`

    The `partial` helper can be used in conjunction with the `with`
    helper to set a context that will be used by the partial:

    ```handlebars
    {{#with currentUser}}
      {{partial "user_info"}}
    {{/with}}
    ```
  itemtype: method
  name: partial
  params:
  - name: partialName
    description: the name of the template to render minus the leading underscore
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/template.js"
  line: 8
  description: |-
    `template` allows you to render a template from inside another template.
    This allows you to re-use the same template in multiple places. For example:

    ```html
    <script type="text/x-handlebars" data-template-name="logged_in_user">
      {{#with loggedInUser}}
        Last Login: {{lastLogin}}
        User Info: {{template "user_info"}}
      {{/with}}
    </script>
    ```

    ```html
    <script type="text/x-handlebars" data-template-name="user_info">
      Name: <em>{{name}}</em>
      Karma: <em>{{karma}}</em>
    </script>
    ```

    ```handlebars
    {{#if isUser}}
      {{template "user_info"}}
    {{else}}
      {{template "unlogged_user_info"}}
    {{/if}}
    ```

    This helper looks for templates in the global `Ember.TEMPLATES` hash. If you
    add `<script>` tags to your page with the `data-template-name` attribute set,
    they will be compiled and placed in this hash automatically.

    You can also manually register templates by adding them to the hash:

    ```javascript
    Ember.TEMPLATES["my_cool_template"] = Ember.Handlebars.compile('<b>{{user}}</b>');
    ```
  deprecated: true
  itemtype: method
  name: template
  params:
  - name: templateName
    description: the template to render
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/unbound.js"
  line: 12
  description: |-
    `unbound` allows you to output a property without binding. *Important:* The
    output will not be updated if the property changes. Use with caution.

    ```handlebars
    <div>{{unbound somePropertyThatDoesntChange}}</div>
    ```

    `unbound` can also be used in conjunction with a bound helper to
    render it in its unbound form:

    ```handlebars
    <div>{{unbound helperName somePropertyThatDoesntChange}}</div>
    ```
  itemtype: method
  name: unbound
  params:
  - name: property
    description: ''
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/view.js"
  line: 196
  description: |-
    `{{view}}` inserts a new instance of `Ember.View` into a template passing its
    options to the `Ember.View`'s `create` method and using the supplied block as
    the view's own template.

    An empty `<body>` and the following template:

    ```handlebars
    A span:
    {{#view tagName="span"}}
      hello.
    {{/view}}
    ```

    Will result in HTML structure:

    ```html
    <body>
      <!-- Note: the handlebars template script
           also results in a rendered Ember.View
           which is the outer <div> here -->

      <div class="ember-view">
        A span:
        <span id="ember1" class="ember-view">
          Hello.
        </span>
      </div>
    </body>
    ```

    ### `parentView` setting

    The `parentView` property of the new `Ember.View` instance created through
    `{{view}}` will be set to the `Ember.View` instance of the template where
    `{{view}}` was called.

    ```javascript
    aView = Ember.View.create({
      template: Ember.Handlebars.compile("{{#view}} my parent: {{parentView.elementId}} {{/view}}")
    });

    aView.appendTo('body');
    ```

    Will result in HTML structure:

    ```html
    <div id="ember1" class="ember-view">
      <div id="ember2" class="ember-view">
        my parent: ember1
      </div>
    </div>
    ```

    ### Setting CSS id and class attributes

    The HTML `id` attribute can be set on the `{{view}}`'s resulting element with
    the `id` option. This option will _not_ be passed to `Ember.View.create`.

    ```handlebars
    {{#view tagName="span" id="a-custom-id"}}
      hello.
    {{/view}}
    ```

    Results in the following HTML structure:

    ```html
    <div class="ember-view">
      <span id="a-custom-id" class="ember-view">
        hello.
      </span>
    </div>
    ```

    The HTML `class` attribute can be set on the `{{view}}`'s resulting element
    with the `class` or `classNameBindings` options. The `class` option will
    directly set the CSS `class` attribute and will not be passed to
    `Ember.View.create`. `classNameBindings` will be passed to `create` and use
    `Ember.View`'s class name binding functionality:

    ```handlebars
    {{#view tagName="span" class="a-custom-class"}}
      hello.
    {{/view}}
    ```

    Results in the following HTML structure:

    ```html
    <div class="ember-view">
      <span id="ember2" class="ember-view a-custom-class">
        hello.
      </span>
    </div>
    ```

    ### Supplying a different view class

    `{{view}}` can take an optional first argument before its supplied options to
    specify a path to a custom view class.

    ```handlebars
    {{#view "MyApp.CustomView"}}
      hello.
    {{/view}}
    ```

    The first argument can also be a relative path accessible from the current
    context.

    ```javascript
    MyApp = Ember.Application.create({});
    MyApp.OuterView = Ember.View.extend({
      innerViewClass: Ember.View.extend({
        classNames: ['a-custom-view-class-as-property']
      }),
      template: Ember.Handlebars.compile('{{#view "view.innerViewClass"}} hi {{/view}}')
    });

    MyApp.OuterView.create().appendTo('body');
    ```

    Will result in the following HTML:

    ```html
    <div id="ember1" class="ember-view">
      <div id="ember2" class="ember-view a-custom-view-class-as-property">
        hi
      </div>
    </div>
    ```

    ### Blockless use

    If you supply a custom `Ember.View` subclass that specifies its own template
    or provide a `templateName` option to `{{view}}` it can be used without
    supplying a block. Attempts to use both a `templateName` option and supply a
    block will throw an error.

    ```handlebars
    {{view "MyApp.ViewWithATemplateDefined"}}
    ```

    ### `viewName` property

    You can supply a `viewName` option to `{{view}}`. The `Ember.View` instance
    will be referenced as a property of its parent view by this name.

    ```javascript
    aView = Ember.View.create({
      template: Ember.Handlebars.compile('{{#view viewName="aChildByName"}} hi {{/view}}')
    });

    aView.appendTo('body');
    aView.get('aChildByName') // the instance of Ember.View created by {{view}} helper
    ```
  itemtype: method
  name: view
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/helpers/yield.js"
  line: 8
  description: |-
    `{{yield}}` denotes an area of a template that will be rendered inside
    of another template. It has two main uses:

    ### Use with `layout`
    When used in a Handlebars template that is assigned to an `Ember.View`
    instance's `layout` property Ember will render the layout template first,
    inserting the view's own rendered output at the `{{yield}}` location.

    An empty `<body>` and the following application code:

    ```javascript
    AView = Ember.View.extend({
      classNames: ['a-view-with-layout'],
      layout: Ember.Handlebars.compile('<div class="wrapper">{{yield}}</div>'),
      template: Ember.Handlebars.compile('<span>I am wrapped</span>')
    });

    aView = AView.create();
    aView.appendTo('body');
    ```

    Will result in the following HTML output:

    ```html
    <body>
      <div class='ember-view a-view-with-layout'>
        <div class="wrapper">
          <span>I am wrapped</span>
        </div>
      </div>
    </body>
    ```

    The `yield` helper cannot be used outside of a template assigned to an
    `Ember.View`'s `layout` property and will throw an error if attempted.

    ```javascript
    BView = Ember.View.extend({
      classNames: ['a-view-with-layout'],
      template: Ember.Handlebars.compile('{{yield}}')
    });

    bView = BView.create();
    bView.appendTo('body');

    // throws
    // Uncaught Error: assertion failed:
    // You called yield in a template that was not a layout
    ```

    ### Use with Ember.Component
    When designing components `{{yield}}` is used to denote where, inside the component's
    template, an optional block passed to the component should render:

    ```handlebars
    <!-- application.hbs -->
    {{#labeled-textfield value=someProperty}}
      First name:
    {{/labeled-textfield}}
    ```

    ```handlebars
    <!-- components/labeled-textfield.hbs -->
    <label>
      {{yield}} {{input value=value}}
    </label>
    ```

    Result:

    ```html
    <label>
      First name: <input type="text" />
    <label>
    ```
  itemtype: method
  name: yield
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 155
  description: |-
    The function used to determine if the `displayTemplate` or
    `inverseTemplate` should be rendered. This should be a function that takes
    a value and returns a Boolean.
  itemtype: property
  name: shouldDisplayFunc
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 166
  description: |-
    Whether the template rendered by this view gets passed the context object
    of its parent template, or gets passed the value of retrieving `path`
    from the `pathRoot`.

    For example, this is true when using the `{{#if}}` helper, because the
    template inside the helper should look up properties relative to the same
    object as outside the block. This would be `false` when used with `{{#with
    foo}}` because the template should receive the object found by evaluating
    `foo`.
  itemtype: property
  name: preserveContext
  type: Boolean
  default: 'false'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 183
  description: |-
    If `preserveContext` is true, this is the object that will be used
    to render the template.
  itemtype: property
  name: previousContext
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 192
  description: The template to render when `shouldDisplayFunc` evaluates to `true`.
  itemtype: property
  name: displayTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 201
  description: The template to render when `shouldDisplayFunc` evaluates to `false`.
  itemtype: property
  name: inverseTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 211
  description: |-
    The path to look up on `pathRoot` that is passed to
    `shouldDisplayFunc` to determine which template to render.

    In addition, if `preserveContext` is `false,` the object at this path will
    be passed to the template when rendering.
  itemtype: property
  name: path
  type: String
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 224
  description: |-
    The object from which the `path` will be looked up. Sometimes this is the
    same as the `previousContext`, but in cases where this view has been
    generated for paths that start with a keyword such as `view` or
    `controller`, the path root will be that resolved object.
  itemtype: property
  name: pathRoot
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/views/handlebars_bound_view.js"
  line: 259
  description: |-
    Determines which template to invoke, sets up the correct state based on
    that logic, then invokes the default `Ember.View` `render` implementation.

    This method will first look up the `path` key on `pathRoot`,
    then pass that value to the `shouldDisplayFunc` function. If that returns
    `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,
    `inverseTemplate`, if specified, will be rendered.

    For example, if this `Ember._HandlebarsBoundView` represented the `{{#with
    foo}}` helper, it would look up the `foo` property of its context, and
    `shouldDisplayFunc` would always return true. The object found by looking
    up `foo` would be passed to `displayTemplate`.
  itemtype: method
  name: render
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/controls.js"
  line: 11
  description: |-
    The `{{input}}` helper inserts an HTML `<input>` tag into the template,
      with a `type` value of either `text` or `checkbox`. If no `type` is provided,
      `text` will be the default value applied. The attributes of `{{input}}`
      match those of the native HTML tag as closely as possible for these two types.
    ## Use as text field
      An `{{input}}` with no `type` or a `type` of `text` will render an HTML text input.
      The following HTML attributes can be set via the helper:

    * `value`
    * `size`
    * `name`
    * `pattern`
    * `placeholder`
    * `disabled`
    * `maxlength`
    * `tabindex`

    When set to a quoted string, these values will be directly applied to the HTML
      element. When left unquoted, these values will be bound to a property on the
      template's current rendering context (most typically a controller instance).
    ## Unbound:
    ```handlebars
      {{input value="http://www.facebook.com"}}
      ```

    ```html
      <input type="text" value="http://www.facebook.com"/>
      ```
    ## Bound:
    ```javascript
      App.ApplicationController = Ember.Controller.extend({
        firstName: "Stanley",
        entryNotAllowed: true
      });
      ```

    ```handlebars
      {{input type="text" value=firstName disabled=entryNotAllowed size="50"}}
      ```

    ```html
      <input type="text" value="Stanley" disabled="disabled" size="50"/>
      ```
    ## Extension
    Internally, `{{input type="text"}}` creates an instance of `Ember.TextField`, passing
      arguments from the helper to `Ember.TextField`'s `create` method. You can extend the
      capablilties of text inputs in your applications by reopening this class. For example,
      if you are deploying to browsers where the `required` attribute is used, you
      can add this to the `TextField`'s `attributeBindings` property:

    ```javascript
      Ember.TextField.reopen({
        attributeBindings: ['required']
      });
      ```
    Keep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`
      itself extends `Ember.Component`, meaning that it does NOT inherit
      the `controller` of the parent view.
    See more about [Ember components](api/classes/Ember.Component.html)

    ## Use as checkbox
    An `{{input}}` with a `type` of `checkbox` will render an HTML checkbox input.
      The following HTML attributes can be set via the helper:

    * `checked`
    * `disabled`
    * `tabindex`
    * `indeterminate`
    * `name`

    When set to a quoted string, these values will be directly applied to the HTML
      element. When left unquoted, these values will be bound to a property on the
      template's current rendering context (most typically a controller instance).
    ## Unbound:
    ```handlebars
      {{input type="checkbox" name="isAdmin"}}
      ```
    ```html
      <input type="checkbox" name="isAdmin" />
      ```
    ## Bound:
    ```javascript
      App.ApplicationController = Ember.Controller.extend({
        isAdmin: true
      });
      ```

    ```handlebars
      {{input type="checkbox" checked=isAdmin }}
      ```

    ```html
      <input type="checkbox" checked="checked" />
      ```
    ## Extension
    Internally, `{{input type="checkbox"}}` creates an instance of `Ember.Checkbox`, passing
      arguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the
      capablilties of checkbox inputs in your applications by reopening this class. For example,
      if you wanted to add a css class to all checkboxes in your application:

    ```javascript
      Ember.Checkbox.reopen({
        classNames: ['my-app-checkbox']
      });
      ```
  itemtype: method
  name: input
  params:
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/controls.js"
  line: 172
  description: |-
    `{{textarea}}` inserts a new instance of `<textarea>` tag into the template.
    The attributes of `{{textarea}}` match those of the native HTML tags as
    closely as possible.

    The following HTML attributes can be set:

      * `value`
      * `name`
      * `rows`
      * `cols`
      * `placeholder`
      * `disabled`
      * `maxlength`
      * `tabindex`

    When set to a quoted string, these value will be directly applied to the HTML
    element. When left unquoted, these values will be bound to a property on the
    template's current rendering context (most typically a controller instance).

    Unbound:

    ```handlebars
    {{textarea value="Lots of static text that ISN'T bound"}}
    ```

    Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of static text that ISN'T bound
    </textarea>
    ```

    Bound:

    In the following example, the `writtenWords` property on `App.ApplicationController`
    will be updated live as the user types 'Lots of text that IS bound' into
    the text area of their browser's window.

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound"
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}
    ```

     Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```

    If you wanted a one way binding between the text area and a div tag
    somewhere else on your screen, you could use `Ember.computed.oneWay`:

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound",
      outputWrittenWords: Ember.computed.oneWay("writtenWords")
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}

    <div>
      {{outputWrittenWords}}
    </div>
    ```

    Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>

    <-- the following div will be updated in real time as you type -->

    <div>
      Lots of text that IS bound
    </div>
    ```

    Finally, this example really shows the power and ease of Ember when two
    properties are bound to eachother via `Ember.computed.alias`. Type into
    either text area box and they'll both stay in sync. Note that
    `Ember.computed.alias` costs more in terms of performance, so only use it when
    your really binding in both directions:

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound",
      twoWayWrittenWords: Ember.computed.alias("writtenWords")
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}
    {{textarea value=twoWayWrittenWords}}
    ```

    ```html
    <textarea id="ember1" class="ember-text-area">
      Lots of text that IS bound
    </textarea>

    <-- both updated in real time -->

    <textarea id="ember2" class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```

    ## Extension

    Internally, `{{textarea}}` creates an instance of `Ember.TextArea`, passing
    arguments from the helper to `Ember.TextArea`'s `create` method. You can
    extend the capabilities of text areas in your application by reopening this
    class. For example, if you are deploying to browsers where the `required`
    attribute is used, you can globally add support for the `required` attribute
    on all `{{textarea}}`s' in your app by reopening `Ember.TextArea` or
    `Ember.TextSupport` and adding it to the `attributeBindings` concatenated
    property:

    ```javascript
    Ember.TextArea.reopen({
      attributeBindings: ['required']
    });
    ```

    Keep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`
    itself extends `Ember.Component`, meaning that it does NOT inherit
    the `controller` of the parent view.

    See more about [Ember components](api/classes/Ember.Component.html)
  itemtype: method
  name: textarea
  params:
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars-compiler
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 6
  description: |-
    If a path starts with a reserved keyword, returns the root
    that should be used.
  access: private
  tagname: ''
  itemtype: method
  name: normalizePath
  params:
  - name: root
    description: ''
    type: Object
  - name: path
    description: ''
    type: String
  - name: data
    description: ''
    type: Hash
  class: Ember
  module: ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 48
  description: |-
    Lookup both on root and on window. If the path starts with
    a keyword, the corresponding object will be looked up in the
    template's data hash and used to resolve the path.
  itemtype: method
  name: get
  params:
  - name: root
    description: The object to look up the property on
    type: Object
  - name: path
    description: The path to be lookedup
    type: String
  - name: options
    description: The template's option hash
    type: Object
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 92
  description: |-
    This method uses `Ember.Handlebars.get` to lookup a value, then ensures
    that the value is escaped properly.

    If `unescaped` is a truthy value then the escaping will not be performed.
  itemtype: method
  name: getEscaped
  params:
  - name: root
    description: The object to look up the property on
    type: Object
  - name: path
    description: The path to be lookedup
    type: String
  - name: options
    description: The template's option hash
    type: Object
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 154
  description: |-
    Registers a helper in Handlebars that will be called if no property with the
    given name can be found on the current context object, and no helper with
    that name is registered.

    This throws an exception with a more helpful error message so the user can
    track down where the problem is happening.
  access: private
  tagname: ''
  itemtype: method
  name: helperMissing
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 186
  description: |-
    Registers a helper in Handlebars that will be called if no property with the
    given name can be found on the current context object, and no helper with
    that name is registered.

    This throws an exception with a more helpful error message so the user can
    track down where the problem is happening.
  access: private
  tagname: ''
  itemtype: method
  name: helperMissing
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  namespace: Ember.Handlebars
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 221
  description: |-
    Register a bound handlebars helper. Bound helpers behave similarly to regular
    handlebars helpers, with the added ability to re-render when the underlying data
    changes.

    ## Simple example

    ```javascript
    Ember.Handlebars.registerBoundHelper('capitalize', function(value) {
      return value.toUpperCase();
    });
    ```

    The above bound helper can be used inside of templates as follows:

    ```handlebars
    {{capitalize name}}
    ```

    In this case, when the `name` property of the template's context changes,
    the rendered value of the helper will update to reflect this change.

    ## Example with options

    Like normal handlebars helpers, bound helpers have access to the options
    passed into the helper call.

    ```javascript
    Ember.Handlebars.registerBoundHelper('repeat', function(value, options) {
      var count = options.hash.count;
      var a = [];
      while(a.length < count) {
          a.push(value);
      }
      return a.join('');
    });
    ```

    This helper could be used in a template as follows:

    ```handlebars
    {{repeat text count=3}}
    ```

    ## Example with bound options

    Bound hash options are also supported. Example:

    ```handlebars
    {{repeat text countBinding="numRepeats"}}
    ```

    In this example, count will be bound to the value of
    the `numRepeats` property on the context. If that property
    changes, the helper will be re-rendered.

    ## Example with extra dependencies

    The `Ember.Handlebars.registerBoundHelper` method takes a variable length
    third parameter which indicates extra dependencies on the passed in value.
    This allows the handlebars helper to update when these dependencies change.

    ```javascript
    Ember.Handlebars.registerBoundHelper('capitalizeName', function(value) {
      return value.get('name').toUpperCase();
    }, 'name');
    ```

    ## Example with multiple bound properties

    `Ember.Handlebars.registerBoundHelper` supports binding to
    multiple properties, e.g.:

    ```javascript
    Ember.Handlebars.registerBoundHelper('concatenate', function() {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      return values.join('||');
    });
    ```

    Which allows for template syntax such as `{{concatenate prop1 prop2}}` or
    `{{concatenate prop1 prop2 prop3}}`. If any of the properties change,
    the helpr will re-render.  Note that dependency keys cannot be
    using in conjunction with multi-property helpers, since it is ambiguous
    which property the dependent keys would belong to.

    ## Use with unbound helper

    The `{{unbound}}` helper can be used with bound helper invocations
    to render them in their unbound form, e.g.

    ```handlebars
    {{unbound capitalize name}}
    ```

    In this example, if the name property changes, the helper
    will not re-render.

    ## Use with blocks not supported

    Bound helpers do not support use with Handlebars blocks or
    the addition of child views of any kind.
  itemtype: method
  name: registerBoundHelper
  params:
  - name: name
    description: ''
    type: String
  - name: function
    description: ''
    type: Function
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 336
  description: |-
    A (mostly) private helper function to `registerBoundHelper`. Takes the
    provided Handlebars helper function fn and returns it in wrapped
    bound helper form.

    The main use case for using this outside of `registerBoundHelper`
    is for registering helpers on the container:

    ```js
    var boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {
      return word.toUpperCase();
    });

    container.register('helper:my-bound-helper', boundHelperFn);
    ```

    In the above example, if the helper function hadn't been wrapped in
    `makeBoundHelper`, the registered helper would be unbound.
  access: private
  tagname: ''
  itemtype: method
  name: makeBoundHelper
  params:
  - name: function
    description: ''
    type: Function
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 482
  description: Renders the unbound form of an otherwise bound helper function.
  access: private
  tagname: ''
  itemtype: method
  name: evaluateUnboundHelper
  params:
  - name: fn
    description: ''
    type: Function
  - name: context
    description: ''
    type: Object
  - name: normalizedProperties
    description: ''
    type: Array
  - name: options
    description: ''
    type: String
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/ext.js"
  line: 521
  description: |-
    Overrides Handlebars.template so that we can distinguish
    user-created, top-level templates from inner contexts.
  access: private
  tagname: ''
  itemtype: method
  name: template
  params:
  - name: spec
    description: ''
    type: String
  class: Ember.Handlebars
  module: ember
  namespace: Ember
- file: "../packages/ember-handlebars/lib/loader.js"
  line: 11
  description: |-
    Find templates stored in the head tag as script tags and make them available
    to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run
    as as jQuery DOM-ready callback.

    Script tags with `text/x-handlebars` will be compiled
    with Ember's Handlebars and are suitable for use as a view's template.
    Those with type `text/x-raw-handlebars` will be compiled with regular
    Handlebars and are suitable for use in views' computed properties.
  access: private
  tagname: ''
  itemtype: method
  name: bootstrap
  static: 1
  params:
  - name: ctx
    description: ''
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: "../packages/ember-handlebars/lib/string.js"
  line: 1
  description: |-
    Mark a string as safe for unescaped output with Handlebars. If you
    return HTML from a Handlebars helper, use this function to
    ensure Handlebars does not escape the HTML.

    ```javascript
    Ember.String.htmlSafe('<div>someString</div>')
    ```
  itemtype: method
  name: htmlSafe
  static: 1
  return:
    description: a string that will not be html escaped by Handlebars
    type: Handlebars.SafeString
  class: Ember.String
  module: ember
- file: "../packages/ember-handlebars/lib/string.js"
  line: 23
  description: |-
    Mark a string as being safe for unescaped output with Handlebars.

    ```javascript
    '<div>someString</div>'.htmlSafe()
    ```

    See [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).
  itemtype: method
  name: htmlSafe
  return:
    description: a string that will not be html escaped by Handlebars
    type: Handlebars.SafeString
  class: String
  module: ember
- file: "../packages/ember-metal/lib/array.js"
  line: 91
  description: Array polyfills to support ES5 features in older browsers.
  itemtype: property
  name: ArrayPolyfills
  class: Ember
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/array.js"
  line: 104
  description: Array polyfills to support ES5 features in older browsers.
  itemtype: property
  name: ArrayPolyfills
  class: Ember
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 17
  description: |-
    Debug parameter you can turn on. This will log all bindings that fire to
    the console. This should be disabled in production code. Note that you
    can also enable this from the console or temporarily.
  itemtype: property
  name: LOG_BINDINGS
  type: Boolean
  default: 'false'
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/binding.js"
  line: 34
  description: |-
    Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)
    instead of local (`foo.bar.baz`).
  itemtype: method
  name: isGlobalPath
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  return:
    description: Boolean
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/binding.js"
  line: 69
  description: This copies the Binding so it can be connected to another object.
  itemtype: method
  name: copy
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 85
  description: |-
    This will set `from` property path to the specified value. It will not
    attempt to resolve this property path to an actual object until you
    connect the binding.

    The binding will search for the property path starting at the root object
    you pass when you `connect()` the binding. It follows the same rules as
    `get()` - see that method for more information.
  itemtype: method
  name: from
  params:
  - name: path
    description: the property path to connect to
    type: String
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 103
  description: |-
    This will set the `to` property path to the specified value. It will not
    attempt to resolve this property path to an actual object until you
    connect the binding.

    The binding will search for the property path starting at the root object
    you pass when you `connect()` the binding. It follows the same rules as
    `get()` - see that method for more information.
  itemtype: method
  name: to
  params:
  - name: path
    description: A property path or tuple
    type: String|Tuple
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 121
  description: |-
    Configures the binding as one way. A one-way binding will relay changes
    on the `from` side to the `to` side, but not the other way around. This
    means that if you change the `to` side directly, the `from` side may have
    a different value.
  itemtype: method
  name: oneWay
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 135
  itemtype: method
  name: toString
  return:
    description: string representation of binding
    type: String
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 148
  description: |-
    Attempts to connect this binding instance so that it can receive and relay
    changes. This method will raise an exception if you have not set the
    from/to properties yet.
  itemtype: method
  name: connect
  params:
  - name: obj
    description: The root object for this binding.
    type: Object
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 174
  description: |-
    Disconnects the binding instance. Changes will no longer be relayed. You
    will not usually need to call this method.
  itemtype: method
  name: disconnect
  params:
  - name: obj
    description: The root object you passed when connecting the binding.
    type: Object
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 303
  description: |-
    Creates a new Binding instance and makes it apply in a single direction.
    A one-way binding will relay changes on the `from` side object (supplied
    as the `from` argument) the `to` side, but not the other way around.
    This means that if you change the "to" side directly, the "from" side may have
    a different value.

    See `Binding.oneWay`.
  itemtype: method
  name: oneWay
  params:
  - name: from
    description: from path.
    type: String
  - name: flag
    description: |-
      (Optional) passing nothing here will make the
        binding `oneWay`. You can instead pass `false` to disable `oneWay`, making the
        binding two way again.
    type: Boolean
    optional: true
  return:
    description: "`this`"
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/binding.js"
  line: 445
  description: |-
    Global helper method to create a new binding. Just pass the root object
    along with a `to` and `from` path to create and connect the binding.
  itemtype: method
  name: bind
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: |-
      The path to the 'to' side of the binding.
        Must be relative to obj.
    type: String
  - name: from
    description: |-
      The path to the 'from' side of the binding.
        Must be relative to obj or a global path.
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/binding.js"
  line: 462
  itemtype: method
  name: oneWay
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: |-
      The path to the 'to' side of the binding.
        Must be relative to obj.
    type: String
  - name: from
    description: |-
      The path to the 'from' side of the binding.
        Must be relative to obj or a global path.
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 211
  description: |-
    Properties are cacheable by default. Computed property will automatically
    cache the return value of your function until one of the dependent keys changes.

    Call `volatile()` to set it into non-cached mode. When in this mode
    the computed property will not automatically cache the return value.

    However, if a property is properly observable, there is no reason to disable
    caching.
  itemtype: method
  name: cacheable
  params:
  - name: aFlag
    description: optional set to `false` to disable caching
    type: Boolean
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 231
  description: |-
    Call on a computed property to set it into non-cached mode. When in this
    mode the computed property will not automatically cache the return value.

    ```javascript
    MyApp.outsideService = Ember.Object.extend({
      value: function() {
        return OutsideService.getValue();
      }.property().volatile()
    }).create();
    ```
  itemtype: method
  name: volatile
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 251
  description: |-
    Call on a computed property to set it into read-only mode. When in this
    mode the computed property will throw an error when set.

    ```javascript
    MyApp.Person = Ember.Object.extend({
      guid: function() {
        return 'guid-guid-guid';
      }.property().readOnly()
    });

    MyApp.person = MyApp.Person.create();

    MyApp.person.set('guid', 'new-guid'); // will throw an exception
    ```
  itemtype: method
  name: readOnly
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 276
  description: |-
    Sets the dependent keys on this computed property. Pass any number of
    arguments containing key paths that this computed property depends on.

    ```javascript
    MyApp.President = Ember.Object.extend({
      fullName: Ember.computed(function() {
        return this.get('firstName') + ' ' + this.get('lastName');

        // Tell Ember that this computed property depends on firstName
        // and lastName
      }).property('firstName', 'lastName')
    });

    MyApp.president = MyApp.President.create({
      firstName: 'Barack',
      lastName: 'Obama',
    });
    MyApp.president.get('fullName'); // Barack Obama
    ```
  itemtype: method
  name: property
  params:
  - name: path
    description: zero or more property paths
    type: String
    multiple: true
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 323
  description: |-
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For example,
    computed property functions may close over variables that are then no longer
    available for introspection.

    You can pass a hash of these values to a computed property like this:

    ```
    person: function() {
      var personId = this.get('personId');
      return App.Person.create({ id: personId });
    }.property().meta({ type: App.Person })
    ```

    The hash that you pass to the `meta()` function will be saved on the
    computed property descriptor under the `_meta` key. Ember runtime
    exposes a public API for retrieving these values from classes,
    via the `metaForProperty()` function.
  itemtype: method
  name: meta
  params:
  - name: meta
    description: ''
    type: Hash
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 377
  description: |-
    Access the value of the function backing the computed property.
    If this property has already been cached, return the cached result.
    Otherwise, call the function passing the property name as an argument.

    ```javascript
    Person = Ember.Object.extend({
      fullName: function(keyName) {
        // the keyName parameter is 'fullName' in this case.

        return this.get('firstName') + ' ' + this.get('lastName');
      }.property('firstName', 'lastName')
    });


    var tom = Person.create({
      firstName: "Tom",
      lastName: "Dale"
    });

    tom.get('fullName') // "Tom Dale"
    ```
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  return:
    description: The return value of the function backing the CP.
    type: Object
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 420
  description: |-
    Set the value of a computed property. If the function that backs your
    computed property does not accept arguments then the default action for
    setting would be to define the property on the current object, and set
    the value of the property to the value being set.

    Generally speaking if you intend for your computed property to be set
    your backing function should accept either two or three arguments.
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  - name: newValue
    description: The new value being assigned.
    type: Object
  - name: oldValue
    description: The old value being replaced.
    type: String
  return:
    description: The return value of the function backing the CP.
    type: Object
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/computed.js"
  line: 513
  description: |-
    This helper returns a new property descriptor that wraps the passed
    computed property function. You can use this helper to define properties
    with mixins or via `Ember.defineProperty()`.

    The function you pass will be used to both get and set property values.
    The function should accept two parameters, key and value. If value is not
    undefined you should set the value first. In either case return the
    current value of the property.
  itemtype: method
  name: computed
  params:
  - name: func
    description: The computed property function.
    type: Function
  return:
    description: property descriptor instance
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 548
  description: |-
    Returns the cached value for a property, if one exists.
    This can be useful for peeking at the value of a computed
    property that is generated lazily, without accidentally causing
    it to be created.
  itemtype: method
  name: cacheFor
  params:
  - name: obj
    description: the object whose property you want to check
    type: Object
  - name: key
    description: |-
      the name of the property whose cached value you want
        to return
    type: String
  return:
    description: the cached value
    type: Object
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 682
  description: |-
    A computed property that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.

    Note: When using `Ember.computed.empty` to watch an array make sure to
    use the `array.[]` syntax so the computed can subscribe to transitions
    from empty to non-empty states.

    Example

    ```javascript
    var ToDoList = Ember.Object.extend({
      done: Ember.computed.empty('todos.[]') // detect array changes
    });
    var todoList = ToDoList.create({todos: ['Unit Test', 'Documentation', 'Release']});
    todoList.get('done'); // false
    todoList.get('todos').clear(); // []
    todoList.get('done'); // true
    ```
  itemtype: method
  name: computed.empty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which negate
      the original value for property
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 712
  description: |-
    A computed property that returns true if the value of the dependent
    property is NOT null, an empty string, empty array, or empty function.

    Note: When using `Ember.computed.notEmpty` to watch an array make sure to
    use the `array.[]` syntax so the computed can subscribe to transitions
    from empty to non-empty states.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasStuff: Ember.computed.notEmpty('backpack.[]')
    });
    var hamster = Hamster.create({backpack: ['Food', 'Sleeping Bag', 'Tent']});
    hamster.get('hasStuff'); // true
    hamster.get('backpack').clear(); // []
    hamster.get('hasStuff'); // false
    ```
  itemtype: method
  name: computed.notEmpty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which returns true if
      original value for property is not empty.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 742
  description: |-
    A computed property that returns true if the value of the dependent
    property is null or undefined. This avoids errors from JSLint complaining
    about use of ==, which can be technically confusing.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      isHungry: Ember.computed.none('food')
    });
    var hamster = Hamster.create();
    hamster.get('isHungry'); // true
    hamster.set('food', 'Banana');
    hamster.get('isHungry'); // false
    hamster.set('food', null);
    hamster.get('isHungry'); // true
    ```
  itemtype: method
  name: computed.none
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which
      returns true if original value for property is null or undefined.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 771
  description: |-
    A computed property that returns the inverse boolean value
    of the original value for the dependent property.

    Example

    ```javascript
    var User = Ember.Object.extend({
      isAnonymous: Ember.computed.not('loggedIn')
    });
    var user = User.create({loggedIn: false});
    user.get('isAnonymous'); // true
    user.set('loggedIn', true);
    user.get('isAnonymous'); // false
    ```
  itemtype: method
  name: computed.not
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which returns
      inverse of the original value for property
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 797
  description: |-
    A computed property that converts the provided dependent property
    into a boolean value.

    ```javascript
    var Hamster = Ember.Object.extend({
      hasBananas: Ember.computed.bool('numBananas')
    });
    var hamster = Hamster.create();
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 0);
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 1);
    hamster.get('hasBananas'); // true
    hamster.set('numBananas', null);
    hamster.get('hasBananas'); // false
    ```
  itemtype: method
  name: computed.bool
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which converts
      to boolean the original value for property
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 825
  description: |-
    A computed property which matches the original value for the
    dependent property against a given RegExp, returning `true`
    if they values matches the RegExp and `false` if it does not.

    Example

    ```javascript
    var User = Ember.Object.extend({
      hasValidEmail: Ember.computed.match('email', /^.+@.+\..+$/)
    });
    var user = User.create({loggedIn: false});
    user.get('hasValidEmail'); // false
    user.set('email', '');
    user.get('hasValidEmail'); // false
    user.set('email', 'ember_hamster@example.com');
    user.get('hasValidEmail'); // true
    ```
  itemtype: method
  name: computed.match
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: regexp
    description: ''
    type: RegExp
  return:
    description: |-
      computed property which match
      the original value for property against a given RegExp
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 856
  description: |-
    A computed property that returns true if the provided dependent property
    is equal to the given value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      napTime: Ember.computed.equal('state', 'sleepy')
    });
    var hamster = Hamster.create();
    hamster.get('napTime'); // false
    hamster.set('state', 'sleepy');
    hamster.get('napTime'); // true
    hamster.set('state', 'hungry');
    hamster.get('napTime'); // false
    ```
  itemtype: method
  name: computed.equal
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: String|Number|Object
  return:
    description: |-
      computed property which returns true if
      the original value for property is equal to the given value.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 885
  description: |-
    A computed property that returns true if the provied dependent property
    is greater than the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gt('numBananas', 10)
    });
    var hamster = Hamster.create();
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 11);
    hamster.get('hasTooManyBananas'); // true
    ```
  itemtype: method
  name: computed.gt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is greater then given value.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 914
  description: |-
    A computed property that returns true if the provided dependent property
    is greater than or equal to the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gte('numBananas', 10)
    });
    var hamster = Hamster.create();
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 10);
    hamster.get('hasTooManyBananas'); // true
    ```
  itemtype: method
  name: computed.gte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is greater or equal then given value.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 943
  description: |-
    A computed property that returns true if the provided dependent property
    is less than the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lt('numBananas', 3)
    });
    var hamster = Hamster.create();
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 2);
    hamster.get('needsMoreBananas'); // true
    ```
  itemtype: method
  name: computed.lt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is less then given value.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 972
  description: |-
    A computed property that returns true if the provided dependent property
    is less than or equal to the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lte('numBananas', 3)
    });
    var hamster = Hamster.create();
    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 5);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // true
    ```
  itemtype: method
  name: computed.lte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is less or equal then given value.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1001
  description: |-
    A computed property that performs a logical `and` on the
    original values for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')
    });
    var hamster = Hamster.create();
    hamster.get('readyForCamp'); // false
    hamster.set('hasTent', true);
    hamster.get('readyForCamp'); // false
    hamster.set('hasBackpack', true);
    hamster.get('readyForCamp'); // true
    ```
  itemtype: method
  name: computed.and
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which performs
      a logical `and` on the values of all the original values for properties.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1034
  description: |-
    A computed property which performs a logical `or` on the
    original values for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')
    });
    var hamster = Hamster.create();
    hamster.get('readyForRain'); // false
    hamster.set('hasJacket', true);
    hamster.get('readyForRain'); // true
    ```
  itemtype: method
  name: computed.or
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which performs
      a logical `or` on the values of all the original values for properties.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1065
  description: |-
    A computed property that returns the first truthy value
    from a list of dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasClothes: Ember.computed.any('hat', 'shirt')
    });
    var hamster = Hamster.create();
    hamster.get('hasClothes'); // null
    hamster.set('shirt', 'Hawaiian Shirt');
    hamster.get('hasClothes'); // 'Hawaiian Shirt'
    ```
  itemtype: method
  name: computed.any
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which returns
      the first truthy value of given list of properties.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1096
  description: |-
    A computed property that returns the array of values
    for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      clothes: Ember.computed.collect('hat', 'shirt')
    });
    var hamster = Hamster.create();
    hamster.get('clothes'); // [null, null]
    hamster.set('hat', 'Camp Hat');
    hamster.set('shirt', 'Camp Shirt');
    hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']
    ```
  itemtype: method
  name: computed.collect
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which maps
      values of all passed properties in to an array.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1133
  description: |-
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property.

    ```javascript
    Person = Ember.Object.extend({
      name: 'Alex Matchneer',
      nomen: Ember.computed.alias('name')
    });

    alex = Person.create();
    alex.get('nomen'); // 'Alex Matchneer'
    alex.get('name');  // 'Alex Matchneer'

    alex.set('nomen', '@machty');
    alex.get('name');  // '@machty'
    ```
  itemtype: method
  name: computed.alias
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates an
      alias to the original value for property.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1168
  description: |-
    Where `computed.alias` aliases `get` and `set`, and allows for bidirectional
    data flow, `computed.oneWay` only provides an aliased `get`. The `set` will
    not mutate the upstream property, rather causes the current property to
    become the value set. This causes the downstream property to permentantly
    diverge from the upstream property.

    Example

    ```javascript
    User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.oneWay('firstName')
    });

    user = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });

    user.get('nickName');
    # 'Teddy'

    user.set('nickName', 'TeddyBear');
    # 'TeddyBear'

    user.get('firstName');
    # 'Teddy'
    ```
  itemtype: method
  name: computed.oneWay
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates a
      one way computed property to the original value for property.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1212
  description: |-
    Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides
    a readOnly one way binding. Very often when using `computed.oneWay` one does
    not also want changes to propogate back up, as they will replace the value.

    This prevents the reverse flow, and also throws an exception when it occurs.

    Example

    ```javascript
    User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.readOnly('firstName')
    });

    user = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });

    user.get('nickName');
    # 'Teddy'

    user.set('nickName', 'TeddyBear');
    # throws Exception
    # throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`

    user.get('firstName');
    # 'Teddy'
    ```
  itemtype: method
  name: computed.readOnly
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates a
      one way computed property to the original value for property.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/computed.js"
  line: 1256
  description: |-
    A computed property that acts like a standard getter and setter,
    but returns the value at the provided `defaultPath` if the
    property itself has not been set to a value

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      wishList: Ember.computed.defaultTo('favoriteFood')
    });
    var hamster = Hamster.create({favoriteFood: 'Banana'});
    hamster.get('wishList'); // 'Banana'
    hamster.set('wishList', 'More Unit Tests');
    hamster.get('wishList'); // 'More Unit Tests'
    hamster.get('favoriteFood'); // 'Banana'
    ```
  itemtype: method
  name: computed.defaultTo
  params:
  - name: defaultPath
    description: ''
    type: String
  return:
    description: |-
      computed property which acts like
      a standard getter and setter, but defaults to the value from `defaultPath`.
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 49
  itemtype: property
  name: VERSION
  type: String
  default: "'VERSION_STRING_PLACEHOLDER'"
  static: 1
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 57
  description: |-
    Standard environmental variables. You can define these in a global `EmberENV`
    variable before loading Ember to control various configuration settings.

    For backwards compatibility with earlier versions of Ember the global `ENV`
    variable will be used if `EmberENV` is not defined.
  itemtype: property
  name: ENV
  type: Hash
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 93
  description: |-
    Hash of enabled Canary features. Add to before creating your application.

    You can also define `ENV.FEATURES` if you need to enable features flagged at runtime.
  itemtype: property
  name: FEATURES
  type: Hash
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 104
  description: |-
    Test that a feature is enabled. Parsed by Ember's build tools to leave
    experimental features out of beta/stable builds.

    You can define the following configuration options:

    * `ENV.ENABLE_ALL_FEATURES` - force all features to be enabled.
    * `ENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  itemtype: method
  name: isEnabled
  params:
  - name: feature
    description: ''
    type: String
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 136
  description: |-
    Determines whether Ember should enhances some built-in object prototypes to
    provide a more friendly API. If enabled, a few methods will be added to
    `Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,
    which is the one that causes most trouble for people.

    In general we recommend leaving this option set to true since it rarely
    conflicts with other code. If you need to turn it off however, you can
    define an `ENV.EXTEND_PROTOTYPES` config to disable it.
  itemtype: property
  name: EXTEND_PROTOTYPES
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 156
  description: Determines whether Ember logs a full stack trace during deprecation
    warnings
  itemtype: property
  name: LOG_STACKTRACE_ON_DEPRECATION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 165
  description: Determines whether Ember should add ECMAScript 5 shims to older browsers.
  itemtype: property
  name: SHIM_ES5
  type: Boolean
  default: Ember.EXTEND_PROTOTYPES
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 174
  description: Determines whether Ember logs info about version of used libraries
  itemtype: property
  name: LOG_VERSION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 183
  description: Empty function. Useful for some operations. Always returns `this`.
  itemtype: method
  name: K
  access: private
  tagname: ''
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 203
  description: |-
    Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
    jQuery master. We'll just bootstrap our own uuid now.
  itemtype: property
  name: uuid
  type: Number
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 213
  description: |-
    Merge the contents of two objects together into the first object.

    ```javascript
    Ember.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}
    var a = {first: 'Yehuda'}, b = {last: 'Katz'};
    Ember.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}
    ```
  itemtype: method
  name: merge
  params:
  - name: original
    description: The object to merge into
    type: Object
  - name: updates
    description: The object to copy properties from
    type: Object
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 236
  description: |-
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.

    ```javascript
    Ember.isNone();              // true
    Ember.isNone(null);          // true
    Ember.isNone(undefined);     // true
    Ember.isNone('');            // false
    Ember.isNone([]);            // false
    Ember.isNone(function() {});  // false
    ```
  itemtype: method
  name: isNone
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/core.js"
  line: 260
  description: |-
    Verifies that a value is `null` or an empty string, empty array,
    or empty function.

    Constrains the rules on `Ember.isNone` by returning false for empty
    string and empty arrays.

    ```javascript
    Ember.isEmpty();                // true
    Ember.isEmpty(null);            // true
    Ember.isEmpty(undefined);       // true
    Ember.isEmpty('');              // true
    Ember.isEmpty([]);              // true
    Ember.isEmpty('Adam Hawkins');  // false
    Ember.isEmpty([0,1,2]);         // false
    ```
  itemtype: method
  name: isEmpty
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 19
  description: |-
    Calls the map function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-map method when necessary.
  itemtype: method
  name: map
  params:
  - name: obj
    description: The object that should be mapped
    type: Object
  - name: callback
    description: The callback to execute
    type: Function
  - name: thisArg
    description: Value to use as this when executing *callback*
    type: Object
  return:
    description: An array of mapped values.
    type: Array
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 34
  description: |-
    Calls the forEach function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-forEach method when necessary.
  itemtype: method
  name: forEach
  params:
  - name: obj
    description: The object to call forEach on
    type: Object
  - name: callback
    description: The callback to execute
    type: Function
  - name: thisArg
    description: Value to use as this when executing *callback*
    type: Object
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 48
  description: |-
    Calls the filter function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-filter method when necessary.
  itemtype: method
  name: filter
  params:
  - name: obj
    description: The object to call filter on
    type: Object
  - name: callback
    description: The callback to execute
    type: Function
  - name: thisArg
    description: Value to use as this when executing *callback*
    type: Object
  return:
    description: An array containing the filtered values
    type: Array
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 63
  description: |-
    Calls the indexOf function on the passed object with a specified callback. This
    uses `Ember.ArrayPolyfill`'s-indexOf method when necessary.
  itemtype: method
  name: indexOf
  params:
  - name: obj
    description: The object to call indexOn on
    type: Object
  - name: callback
    description: The callback to execute
    type: Function
  - name: index
    description: The index to start searching from
    type: Object
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 77
  description: |-
    Returns an array of indexes of the first occurrences of the passed elements
    on the passed object.

    ```javascript
     var array = [1, 2, 3, 4, 5];
     Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]

     var fubar = "Fubarr";
     Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]
    ```
  itemtype: method
  name: indexesOf
  params:
  - name: obj
    description: The object to check for element indexes
    type: Object
  - name: elements
    description: The elements to search for on *obj*
    type: Array
  return:
    description: An array of indexes.
    type: Array
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 102
  description: |-
    Adds an object to an array. If the array already includes the object this
    method has no effect.
  itemtype: method
  name: addObject
  params:
  - name: array
    description: The array the passed item should be added to
    type: Array
  - name: item
    description: The item to add to the passed array
    type: Object
  return:
    description: "'undefined'"
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 117
  description: |-
    Removes an object from an array. If the array does not contain the passed
    object this method has no effect.
  itemtype: method
  name: removeObject
  params:
  - name: array
    description: The array to remove the item from.
    type: Array
  - name: item
    description: The item to remove from the passed array.
    type: Object
  return:
    description: "'undefined'"
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 152
  description: |-
    Replaces objects in an array with the passed objects.

    ```javascript
      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]

      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]

      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]
    ```
  itemtype: method
  name: replace
  params:
  - name: array
    description: The array the objects should be inserted into.
    type: Array
  - name: idx
    description: |-
      Starting index in the array to replace. If *idx* >=
      length, then append to the end of the array.
    type: Number
  - name: amt
    description: |-
      Number of elements that should be remove from the array,
      starting at *idx*
    type: Number
  - name: objects
    description: |-
      An array of zero or more objects that should be
      inserted into the array at *idx*
    type: Array
  return:
    description: The changed array.
    type: Array
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/enumerable_utils.js"
  line: 185
  description: "Calculates the intersection of two arrays. This method returns a new
    array\nfilled with the records that the two passed arrays share with each other.
    \nIf there is no intersection, an empty array will be returned.\n\n```javascript\nvar
    array1 = [1, 2, 3, 4, 5];\nvar array2 = [1, 3, 5, 6, 7];\n\nEmber.EnumerableUtils.intersection(array1,
    array2); // [1, 3, 5]\n\nvar array1 = [1, 2, 3];\nvar array2 = [4, 5, 6];\n\nEmber.EnumerableUtils.intersection(array1,
    array2); // []\n```"
  itemtype: method
  name: intersection
  params:
  - name: array1
    description: The first array
    type: Array
  - name: array2
    description: The second array
    type: Array
  return:
    description: The intersection of the two passed arrays.
    type: Array
  class: Ember.EnumerableUtils
  module: ember
  namespace: Ember
- file: "../packages/ember-metal/lib/error.js"
  line: 39
  description: |-
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.

    ```javascript
    Ember.onerror = function(error) {
      Em.$.ajax('/report-error', 'POST', {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      });
    };
    ```
  itemtype: event
  name: onerror
  params:
  - name: error
    description: the error object
    type: Exception
  class: Ember
  module: ember
- file: "../packages/ember-metal/lib/error.js"
  line: 59
  description: Wrap code block in a try/catch if `Ember.onerror` is set.
  access: private
  tagname: ''
  itemtype: method
  name: handleErrors
  params:
  - name: func
    description: ''
    type: Function
  - name: context
    description: ''
    optional: true
  class: Ember
  module: ember
- file: "../packages/ember-metal/lib/events.js"
  line: 103
  description: Add an event listener
  itemtype: method
  name: addListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: once
    description: A flag whether a function should only be called once
    type: Boolean
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 137
  description: |-
    Remove an event listener

    Arguments should match those passed to `Ember.addListener`.
  itemtype: method
  name: removeListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 184
  description: |-
    Suspend listener during callback.

    This should only be used by the target of the event listener
    when it is taking an action that would cause the event, e.g.
    an object might suspend its property change listener while it is
    setting that property.
  access: private
  tagname: ''
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 220
  description: Suspends multiple listeners during a callback.
  access: private
  tagname: ''
  itemtype: method
  name: suspendListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: Array of event names
    type: Array
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 266
  description: Return a list of currently watched events
  access: private
  tagname: ''
  itemtype: method
  name: watchedEvents
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 285
  description: |-
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  itemtype: method
  name: sendEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: Optional parameters for each listener.
    type: Array
  - name: actions
    description: Optional array of actions (listeners).
    type: Array
  return:
    description: 'true'
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 328
  access: private
  tagname: ''
  itemtype: method
  name: hasListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 342
  access: private
  tagname: ''
  itemtype: method
  name: listenersFor
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/events.js"
  line: 365
  description: |-
    Define a property as a function that should be executed when
    a specified event or events are triggered.


    ``` javascript
    var Job = Ember.Object.extend({
      logCompleted: Ember.on('completed', function(){
        console.log('Job completed!');
      })
    });
    var job = Job.create();
    Ember.sendEvent(job, 'completed'); // Logs "Job completed!"
     ```
  itemtype: method
  name: 'on'
  params:
  - name: eventNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/expand_properties.js"
  line: 12
  description: |-
    Expands `pattern`, invoking `callback` for each expansion.

    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly. Brace expansion can only appear at the end of a
    pattern, for example as the last item in a chain.

    Example
    ```js
    function echo(arg){ console.log(arg); }

    Ember.expandProperties('foo.bar', echo);        //=> 'foo.bar'
    Ember.expandProperties('{foo,bar}', echo);      //=> 'foo', 'bar'
    Ember.expandProperties('foo.{bar,baz}', echo);  //=> 'foo.bar', 'foo.baz'
    Ember.expandProperties('{foo,bar}.baz', echo);  //=> '{foo,bar}.baz'
    ```
  itemtype: method
  name: ''
  access: private
  tagname: ''
  params:
  - name: pattern
    description: The property pattern to expand.
    type: String
  - name: callback
    description: |-
      The callback to invoke.  It is invoked once per
      expansion, and is passed the expansion.
    type: Function
  class: Ember.Instrumentation
  module: ember-metal
- file: "../packages/ember-metal/lib/get_properties.js"
  line: 6
  description: |-
    To get multiple properties at once, call `Ember.getProperties`
    with an object followed by a list of strings or an array:

    ```javascript
    Ember.getProperties(record, 'firstName', 'lastName', 'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```

    is equivalent to:

    ```javascript
    Ember.getProperties(record, ['firstName', 'lastName', 'zipCode']);  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  itemtype: method
  name: getProperties
  params:
  - name: obj
    description: ''
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Instrumentation
  module: ember-metal
- file: "../packages/ember-metal/lib/instrumentation.js"
  line: 74
  description: Notifies event's subscribers, calls `before` and `after` hooks.
  itemtype: method
  name: instrument
  params:
  - name: name
    description: Namespaced event name.
    type: String
    optional: true
  - name: payload
    description: ''
    type: Object
  - name: callback
    description: Function that you're instrumenting.
    type: Function
  - name: binding
    description: Context that instrument function is called with.
    type: Object
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: "../packages/ember-metal/lib/instrumentation.js"
  line: 133
  description: Subscribes to a particular event or instrumented block of code.
  itemtype: method
  name: subscribe
  params:
  - name: pattern
    description: Namespaced event name.
    type: String
    optional: true
  - name: object
    description: Before and After hooks.
    type: Object
    optional: true
  return:
    description: ''
    type: Subscriber
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: "../packages/ember-metal/lib/instrumentation.js"
  line: 171
  description: Unsubscribes from a particular event or instrumented block of code.
  itemtype: method
  name: unsubscribe
  params:
  - name: subscriber
    description: ''
    type: Object
    optional: true
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: "../packages/ember-metal/lib/instrumentation.js"
  line: 192
  description: Resets `Ember.Instrumentation` by flushing list of subscribers.
  itemtype: method
  name: reset
  class: Ember.Instrumentation
  module: ember-metal
  namespace: Ember.Instrumentation
- file: "../packages/ember-metal/lib/logger.js"
  line: 52
  description: |-
    Logs the arguments to the console.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.log('log value of foo:', foo); // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: log
  params:
  - name: arguments
    description: ''
    type: "*"
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/logger.js"
  line: 67
  description: |-
    Prints the arguments to the console with a warning icon.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     Ember.Logger.warn('Something happened!'); // "Something happened!" will be printed to the console with a warning icon.
     ```
  itemtype: method
  name: warn
  params:
  - name: arguments
    description: ''
    type: "*"
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/logger.js"
  line: 81
  description: |-
    Prints the arguments to the console with an error icon, red text and a stack trace.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     Ember.Logger.error('Danger! Danger!'); // "Danger! Danger!" will be printed to the console in red text.
     ```
  itemtype: method
  name: error
  params:
  - name: arguments
    description: ''
    type: "*"
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/logger.js"
  line: 95
  description: |-
    Logs the arguments to the console.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.info('log value of foo:', foo); // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: info
  params:
  - name: arguments
    description: ''
    type: "*"
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/logger.js"
  line: 110
  description: |-
    Logs the arguments to the console in blue text.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.debug('log value of foo:', foo); // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: debug
  params:
  - name: arguments
    description: ''
    type: "*"
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/logger.js"
  line: 125
  description: |-
    If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.

     ```javascript
     Ember.Logger.assert(true); // undefined
     Ember.Logger.assert(true === false); // Throws an Assertion failed error.
     ```
  itemtype: method
  name: assert
  params:
  - name: bool
    description: Value to test
    type: Boolean
  class: Ember.Logger
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 69
  itemtype: method
  name: create
  static: 1
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 80
  itemtype: method
  name: clear
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 88
  itemtype: method
  name: add
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 103
  itemtype: method
  name: remove
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 120
  itemtype: method
  name: isEmpty
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 128
  itemtype: method
  name: has
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 140
  itemtype: method
  name: forEach
  params:
  - name: fn
    description: ''
    type: Function
  - name: self
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 154
  itemtype: method
  name: toArray
  return:
    description: ''
    type: Array
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 162
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 201
  itemtype: method
  name: create
  static: 1
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 210
  description: This property will change as the number of objects in the map changes.
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 220
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: the value associated with the key, or `undefined`
    type: "*"
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 234
  description: |-
    Adds a value to the map. If a value for the given key has already been
    provided, the new value will replace the old value.
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: "*"
  - name: value
    description: ''
    type: "*"
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 252
  description: Removes a value from the map for an associated key.
  itemtype: method
  name: remove
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: true if an item was removed, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 276
  description: Check whether a key is present.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: true if the item was present, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 290
  description: |-
    Iterate over all the keys and values. Calls the function once
    for each key, passing in the key and value, in that order.

    The keys are guaranteed to be iterated over in insertion order.
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: ''
    type: Function
  - name: self
    description: |-
      if passed, the `this` value inside the
        callback. By default, `this` is the map.
    type: "*"
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 311
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Map
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 334
  itemtype: method
  name: create
  static: 1
  params:
  - name: options
    description: ''
    optional: true
    props:
    - name: defaultValue
      description: ''
      type: "*"
      optional: true
  return:
    description: |-
      If options are passed, returns
        `Ember.MapWithDefault` otherwise returns `Ember.Map`
    type: Ember.MapWithDefault|Ember.Map
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 352
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: the value associated with the key, or the default value
    type: "*"
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/map.js"
  line: 371
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.MapWithDefault
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/mixin.js"
  line: 361
  itemtype: method
  name: mixin
  params:
  - name: obj
    description: ''
  - name: mixins
    description: ''
    multiple: true
  return:
    description: obj
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/mixin.js"
  line: 449
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/mixin.js"
  line: 462
  itemtype: method
  name: reopen
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/mixin.js"
  line: 497
  itemtype: method
  name: apply
  params:
  - name: obj
    description: ''
  return:
    description: applied object
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/mixin.js"
  line: 524
  itemtype: method
  name: detect
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/mixin.js"
  line: 590
  description: Denotes a required property for a mixin
  itemtype: method
  name: required
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/mixin.js"
  line: 605
  description: |-
    Makes a method available via an additional name.

    ```javascript
    App.Person = Ember.Object.extend({
      name: function() {
        return 'Tomhuda Katzdale';
      },
      moniker: Ember.aliasMethod('name')
    });

    var goodGuy = App.Person.create()
    ```
  itemtype: method
  name: aliasMethod
  params:
  - name: methodName
    description: name of the method to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/mixin.js"
  line: 632
  description: |-
    Specify a method that observes property changes.

    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```

    In the future this method may become asynchronous. If you want to ensure
    synchronous behavior, use `immediateObserver`.

    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  itemtype: method
  name: observer
  params:
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/mixin.js"
  line: 683
  description: |-
    Specify a method that observes property changes.

    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.immediateObserver('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```

    In the future, `Ember.observer` may become asynchronous. In this event,
    `Ember.immediateObserver` will maintain the synchronous behavior.

    Also available as `Function.prototype.observesImmediately` if prototype extensions are
    enabled.
  itemtype: method
  name: immediateObserver
  params:
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/mixin.js"
  line: 715
  description: |-
    When observers fire, they are called with the arguments `obj`, `keyName`.

    Note, `@each.property` observer is called per each add or replace of an element
    and it's not called with a specific enumeration item.

    A `beforeObserver` fires before a property changes.

    A `beforeObserver` is an alternative form of `.observesBefore()`.

    ```javascript
    App.PersonView = Ember.View.extend({

      friends: [{ name: 'Tom' }, { name: 'Stefan' }, { name: 'Kris' }],

      valueWillChange: Ember.beforeObserver('content.value', function(obj, keyName) {
        this.changingFrom = obj.get(keyName);
      }),

      valueDidChange: Ember.observer('content.value', function(obj, keyName) {
          // only run if updating a value already in the DOM
          if (this.get('state') === 'inDOM') {
            var color = obj.get(keyName) > this.changingFrom ? 'green' : 'red';
            // logic
          }
      }),

      friendsDidChange: Ember.observer('friends.@each.name', function(obj, keyName) {
        // some logic
        // obj.get(keyName) returns friends array
      })
    });
    ```

    Also available as `Function.prototype.observesBefore` if prototype extensions are
    enabled.
  itemtype: method
  name: beforeObserver
  params:
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  class: Ember
  module: ember
  submodule: ember-metal
- file: "../packages/ember-metal/lib/observer.js"
  line: 22
  itemtype: method
  name: addObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: "../packages/ember-metal/lib/observer.js"
  line: 40
  itemtype: method
  name: removeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: "../packages/ember-metal/lib/observer.js"
  line: 54
  itemtype: method
  name: addBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: "../packages/ember-metal/lib/observer.js"
  line: 96
  itemtype: method
  name: removeBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: "../packages/ember-metal/lib/platform.js"
  line: 19
  description: Identical to `Object.create()`. Implements if not available natively.
  itemtype: method
  name: create
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/platform.js"
  line: 130
  description: |-
    Identical to `Object.defineProperty()`. Implements as much functionality
    as possible if not available natively.
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: The object to modify
    type: Object
  - name: keyName
    description: property name to modify
    type: String
  - name: desc
    description: descriptor hash
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/platform.js"
  line: 142
  description: Set to true if the platform supports native getters and setters.
  itemtype: property
  name: hasPropertyAccessors
  final: 1
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/properties.js"
  line: 48
  description: |-
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `Ember.mixin()` to define new properties.

    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.

    Normally this method takes only three parameters. However if you pass an
    instance of `Ember.Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.

    ## Examples

    ```javascript
    // ES5 compatible mode
    Ember.defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });

    // define a simple property
    Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');

    // define a computed property
    Ember.defineProperty(contact, 'fullName', Ember.computed(function() {
      return this.firstName+' '+this.lastName;
    }).property('firstName', 'lastName'));
    ```
  access: private
  tagname: ''
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: the object to define this property on. This may be a prototype.
    type: Object
  - name: keyName
    description: the name of the property
    type: String
  - name: desc
    description: |-
      an instance of `Ember.Descriptor` (typically a
        computed property) or an ES5 descriptor.
        You must provide this or `data` but not both.
    type: Ember.Descriptor
    optional: true
  - name: data
    description: |-
      something other than a descriptor, that will
        become the explicit value of this property.
    type: "*"
    optional: true
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_events.js"
  line: 20
  description: |-
    This function is called just before an object property is about to change.
    It will notify any before observers and prepare caches among other things.

    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyDidChange()` which you should call just
    after the property value changes.
  itemtype: method
  name: propertyWillChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_events.js"
  line: 50
  description: |-
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.

    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyWillChange()` which you should call just
    before the property value changes.
  itemtype: method
  name: propertyDidChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_events.js"
  line: 168
  itemtype: method
  name: beginPropertyChanges
  chainable: 1
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_events.js"
  line: 179
  itemtype: method
  name: endPropertyChanges
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_events.js"
  line: 193
  description: |-
    Make a series of property changes together in an
    exception-safe way.

    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  itemtype: method
  name: changeProperties
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    optional: true
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_get.js"
  line: 24
  description: |-
    Gets the value of a property on an object. If the property is computed,
    the function will be invoked. If the property is not defined but the
    object implements the `unknownProperty` method then that will be invoked.

    If you plan to run on IE8 and older browsers then you should use this
    method anytime you want to retrieve a property on an object that you don't
    know for sure is private. (Properties beginning with an underscore '_'
    are considered private.)

    On all newer browsers, you only need to use this method to retrieve
    properties if the property might not be defined on the object and you want
    to respect the `unknownProperty` handler. Otherwise you can ignore this
    method.

    Note that if the object itself is `undefined`, this method will throw
    an error.
  itemtype: method
  name: get
  params:
  - name: obj
    description: The object to retrieve from.
    type: Object
  - name: keyName
    description: The property key to retrieve
    type: String
  return:
    description: the property value or `null`.
    type: Object
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_get.js"
  line: 92
  description: |-
    Normalizes a target/path pair to reflect that actual target/path that should
    be observed, etc. This takes into account passing in global property
    paths (i.e. a path beginning with a captial letter not defined on the
    target) and * separators.
  access: private
  tagname: ''
  itemtype: method
  name: normalizeTuple
  params:
  - name: target
    description: The current target. May be `null`.
    type: Object
  - name: path
    description: A path on the target or a global property path.
    type: String
  return:
    description: a temporary array with the normalized target/path pair.
    type: Array
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_set.js"
  line: 10
  description: |-
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change. If the
    property is not defined but the object implements the `setUnknownProperty`
    method then that will be invoked as well.
  itemtype: method
  name: set
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  return:
    description: the passed value.
    type: Object
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/property_set.js"
  line: 115
  description: |-
    Error-tolerant form of `Ember.set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.

    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  itemtype: method
  name: trySet
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: path
    description: The property path to set
    type: String
  - name: value
    description: The value to set
    type: Object
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 71
  description: |-
    If no run-loop is present, it creates a new one. If a run loop is
    present it will queue itself to run on the existing run-loops action
    queue.

    Please note: This is not for normal usage, and should be used sparingly.

    If invoked when not within a run loop:

    ```javascript
    Ember.run.join(function() {
      // creates a new run-loop
    });
    ```

    Alternatively, if called within an existing run loop:

    ```javascript
    Ember.run(function() {
      // creates a new run-loop
      Ember.run.join(function() {
        // joins with the existing run-loop, and queues for invocation on
        // the existing run-loops action queue.
      });
    });
    ```
  itemtype: method
  name: join
  params:
  - name: target
    description: target of method to call
    type: Object
    optional: true
  - name: method
    description: |-
      Method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Any additional arguments you wish to pass to the method.
    type: Object
    optional: true
  return:
    description: |-
      Return value from invoking the passed function. Please note,
      when called within an existing loop, no return value is possible.
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 118
  description: |-
    Provides a useful utility for when integrating with non-Ember libraries
    that provide asynchronous callbacks.

    Ember utilizes a run-loop to batch and coalesce changes. This works by
    marking the start and end of Ember-related Javascript execution.

    When using events such as a View's click handler, Ember wraps the event
    handler in a run-loop, but when integrating with non-Ember libraries this
    can be tedious.

    For example, the following is rather verbose but is the correct way to combine
    third-party events and Ember code.

    ```javascript
    var that = this;
    jQuery(window).on('resize', function(){
      Ember.run(function(){
        that.handleResize();
      });
    });
    ```

    To reduce the boilerplate, the following can be used to construct a
    run-loop-wrapped callback handler.

    ```javascript
    jQuery(window).on('resize', Ember.run.bind(this, this.triggerResize));
    ```
  itemtype: method
  name: bind
  params:
  - name: target
    description: target of method to call
    type: Object
    optional: true
  - name: method
    description: |-
      Method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Any additional arguments you wish to pass to the method.
    type: Object
    optional: true
  return:
    description: |-
      return value from invoking the passed function. Please note,
      when called within an existing loop, no return value is possible.
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 173
  description: |-
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `Ember.run.end()`. This is
    a lower-level way to use a RunLoop instead of using `Ember.run()`.

    ```javascript
    Ember.run.begin();
    // code to be execute within a RunLoop
    Ember.run.end();
    ```
  itemtype: method
  name: begin
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 191
  description: |-
    Ends a RunLoop. This must be called sometime after you call
    `Ember.run.begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `Ember.run()`.

    ```javascript
    Ember.run.begin();
    // code to be execute within a RunLoop
    Ember.run.end();
    ```
  itemtype: method
  name: end
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 209
  description: |-
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  itemtype: property
  name: queues
  type: Array
  default: "['sync', 'actions', 'destroy']"
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 220
  description: |-
    Adds the passed target/method and any optional arguments to the named
    queue to be executed at the end of the RunLoop. If you have not already
    started a RunLoop when calling this method one will be started for you
    automatically.

    At the end of a RunLoop, any methods scheduled in this way will be invoked.
    Methods will be invoked in an order matching the named queues defined in
    the `Ember.run.queues` property.

    ```javascript
    Ember.run.schedule('sync', this, function() {
      // this will be executed in the first RunLoop queue, when bindings are synced
      console.log("scheduled on sync queue");
    });

    Ember.run.schedule('actions', this, function() {
      // this will be executed in the 'actions' queue, after bindings have synced.
      console.log("scheduled on actions queue");
    });

    // Note the functions will be run in order based on the run queues order.
    // Output would be:
    //   scheduled on sync queue
    //   scheduled on actions queue
    ```
  itemtype: method
  name: schedule
  params:
  - name: queue
    description: |-
      The name of the queue to schedule against.
        Default queues are 'sync' and 'actions'
    type: String
  - name: target
    description: target object to use as the context when invoking a method.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke. If you pass a string it
        will be resolved on the target object at the time the scheduled item is
        invoked allowing you to change the target function.
    type: String|Function
  - name: arguments*
    description: Optional arguments to be passed to the queued method.
    type: Object
    optional: true
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 272
  description: |-
    Immediately flushes any events scheduled in the 'sync' queue. Bindings
    use this queue so this method is a useful way to immediately force all
    bindings in the application to sync.

    You should call this method anytime you need any changed state to propagate
    throughout the app immediately without repainting the UI (which happens
    in the later 'render' queue added by the `ember-views` package).

    ```javascript
    Ember.run.sync();
    ```
  itemtype: method
  name: sync
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 294
  description: |-
    Invokes the passed target/method and optional arguments after a specified
    period if time. The last parameter of this method must always be a number
    of milliseconds.

    You should use this method whenever you need to run some action after a
    period of time instead of using `setTimeout()`. This method will ensure that
    items that expire during the same script execution cycle all execute
    together, which is often more efficient than using a real setTimeout.

    ```javascript
    Ember.run.later(myContext, function() {
      // code here will execute within a RunLoop in about 500ms with this == myContext
    }, 500);
    ```
  itemtype: method
  name: later
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  return:
    description: |-
      a string you can use to cancel the timer in
        `Ember.run.cancel` later.
    type: String
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 324
  description: |-
    Schedule a function to run one time during the current RunLoop. This is equivalent
    to calling `scheduleOnce` with the "actions" queue.
  itemtype: method
  name: once
  params:
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `Ember.run.cancel`.
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 343
  description: |-
    Schedules a function to run one time in a given queue of the current RunLoop.
    Calling this method with the same queue/target/method combination will have
    no effect (past the initial call).

    Note that although you can pass optional arguments these will not be
    considered when looking for duplicates. New arguments will replace previous
    calls.

    ```javascript
    Ember.run(function() {
      var sayHi = function() { console.log('hi'); }
      Ember.run.scheduleOnce('afterRender', myContext, sayHi);
      Ember.run.scheduleOnce('afterRender', myContext, sayHi);
      // sayHi will only be executed once, in the afterRender queue of the RunLoop
    });
    ```

    Also note that passing an anonymous function to `Ember.run.scheduleOnce` will
    not prevent additional calls with an identical anonymous function from
    scheduling the items multiple times, e.g.:

    ```javascript
    function scheduleIt() {
      Ember.run.scheduleOnce('actions', myContext, function() { console.log("Closure"); });
    }
    scheduleIt();
    scheduleIt();
    // "Closure" will print twice, even though we're using `Ember.run.scheduleOnce`,
    // because the function we pass to it is anonymous and won't match the
    // previously scheduled operation.
    ```

    Available queues, and their order, can be found at `Ember.run.queues`
  itemtype: method
  name: scheduleOnce
  params:
  - name: queue
    description: The name of the queue to schedule against. Default queues are 'sync'
      and 'actions'.
    type: String
    optional: true
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `Ember.run.cancel`.
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 392
  description: |-
    Schedules an item to run from within a separate run loop, after
    control has been returned to the system. This is equivalent to calling
    `Ember.run.later` with a wait time of 1ms.

    ```javascript
    Ember.run.next(myContext, function() {
      // code to be executed in the next run loop,
      // which will be scheduled after the current one
    });
    ```

    Multiple operations scheduled with `Ember.run.next` will coalesce
    into the same later run loop, along with any other operations
    scheduled by `Ember.run.later` that expire right around the same
    time that `Ember.run.next` operations will fire.

    Note that there are often alternatives to using `Ember.run.next`.
    For instance, if you'd like to schedule an operation to happen
    after all DOM element operations have completed within the current
    run loop, you can make use of the `afterRender` run loop queue (added
    by the `ember-views` package, along with the preceding `render` queue
    where all the DOM element operations happen). Example:

    ```javascript
    App.MyCollectionView = Ember.CollectionView.extend({
      didInsertElement: function() {
        Ember.run.scheduleOnce('afterRender', this, 'processChildElements');
      },
      processChildElements: function() {
        // ... do something with collectionView's child view
        // elements after they've finished rendering, which
        // can't be done within the CollectionView's
        // `didInsertElement` hook because that gets run
        // before the child elements have been added to the DOM.
      }
    });
    ```

    One benefit of the above approach compared to using `Ember.run.next` is
    that you will be able to perform DOM/CSS operations before unprocessed
    elements are rendered to the screen, which may prevent flickering or
    other artifacts caused by delaying processing until after rendering.

    The other major benefit to the above approach is that `Ember.run.next`
    introduces an element of non-determinism, which can make things much
    harder to test, due to its reliance on `setTimeout`; it's much harder
    to guarantee the order of scheduled operations when they are scheduled
    outside of the current run loop, i.e. with `Ember.run.next`.
  itemtype: method
  name: next
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `Ember.run.cancel`.
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 456
  description: |-
    Cancels a scheduled item. Must be a value returned by `Ember.run.later()`,
    `Ember.run.once()`, `Ember.run.next()`, `Ember.run.debounce()`, or
    `Ember.run.throttle()`.

    ```javascript
    var runNext = Ember.run.next(myContext, function() {
      // will not be executed
    });
    Ember.run.cancel(runNext);

    var runLater = Ember.run.later(myContext, function() {
      // will not be executed
    }, 500);
    Ember.run.cancel(runLater);

    var runOnce = Ember.run.once(myContext, function() {
      // will not be executed
    });
    Ember.run.cancel(runOnce);

    var throttle = Ember.run.throttle(myContext, function() {
      // will not be executed
    }, 1);
    Ember.run.cancel(throttle);

    var debounce = Ember.run.debounce(myContext, function() {
      // will not be executed
    }, 1);
    Ember.run.cancel(debounce);

    var debounceImmediate = Ember.run.debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
    // the 100ms delay until this method can be called again will be cancelled
    Ember.run.cancel(debounceImmediate);
    ```
    ```
    ```
  itemtype: method
  name: cancel
  params:
  - name: timer
    description: Timer object to cancel
    type: Object
  return:
    description: true if cancelled or false/undefined if it wasn't found
    type: Boolean
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 504
  description: |-
    Delay calling the target method until the debounce period has elapsed
    with no additional debounce calls. If `debounce` is called again before
    the specified time has elapsed, the timer is reset and the entire period
    must pass again before the target method is called.

    This method should be used when an event may be called multiple times
    but the action should only be called once when the event is done firing.
    A common example is for scroll events where you only want updates to
    happen once scrolling has ceased.

    ```javascript
      var myFunc = function() { console.log(this.name + ' ran.'); };
      var myContext = {name: 'debounce'};

      Ember.run.debounce(myContext, myFunc, 150);

      // less than 150ms passes

      Ember.run.debounce(myContext, myFunc, 150);

      // 150ms passes
      // myFunc is invoked with context myContext
      // console logs 'debounce ran.' one time.
    ```

    Immediate allows you to run the function immediately, but debounce
    other calls for this function until the wait time has elapsed. If
    `debounce` is called again before the specified time has elapsed,
    the timer is reset and the entire period msut pass again before
    the method can be called again.

    ```javascript
      var myFunc = function() { console.log(this.name + ' ran.'); };
      var myContext = {name: 'debounce'};

      Ember.run.debounce(myContext, myFunc, 150, true);

      // console logs 'debounce ran.' one time immediately.
      // 100ms passes

      Ember.run.debounce(myContext, myFunc, 150, true);

      // 150ms passes and nothing else is logged to the console and
      // the debouncee is no longer being watched

      Ember.run.debounce(myContext, myFunc, 150, true);

      // console logs 'debounce ran.' one time immediately.
      // 150ms passes and nothing else is logged tot he console and
      // the debouncee is no longer being watched

    ```
  itemtype: method
  name: debounce
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  - name: immediate
    description: Trigger the function on the leading instead of the trailing edge
      of the wait interval.
    type: Boolean
  return:
    description: Timer information for use in cancelling, see `Ember.run.cancel`.
    type: Array
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/run_loop.js"
  line: 572
  description: |-
    Ensure that the target method is never called more frequently than
    the specified spacing period.

    ```javascript
      var myFunc = function() { console.log(this.name + ' ran.'); };
      var myContext = {name: 'throttle'};

      Ember.run.throttle(myContext, myFunc, 150);

      // 50ms passes
      Ember.run.throttle(myContext, myFunc, 150);

      // 50ms passes
      Ember.run.throttle(myContext, myFunc, 150);

      // 50ms passes
      Ember.run.throttle(myContext, myFunc, 150);

      // 150ms passes
      // myFunc is invoked with context myContext
      // console logs 'throttle ran.' twice, 150ms apart.
    ```
  itemtype: method
  name: throttle
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: spacing
    description: Number of milliseconds to space out requests.
    type: Number
  return:
    description: Timer information for use in cancelling, see `Ember.run.cancel`.
    type: Array
  class: Ember.run
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/set_properties.js"
  line: 7
  description: |-
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.

    ```javascript
    anObject.setProperties({
      firstName: "Stanley",
      lastName: "Stuart",
      age: "21"
    })
    ```
  itemtype: method
  name: setProperties
  params:
  - name: self
    description: ''
  - name: hash
    description: ''
    type: Object
  return:
    description: self
  class: Ember
  module: ember-metal
  namespace: Ember.run
- file: "../packages/ember-metal/lib/utils.js"
  line: 10
  description: Prefix used for guids through out Ember.
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 27
  description: |-
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.

    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  access: private
  tagname: ''
  itemtype: property
  name: GUID_KEY
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 50
  description: |-
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `Ember.guidFor(obj)`, which return an existing guid if available.
  access: private
  tagname: ''
  itemtype: method
  name: generateGuid
  params:
  - name: obj
    description: |-
      Object the guid will be used for. If passed in, the guid will
        be saved on the object and reused whenever you pass the same object
        again.

        If no object is passed, just generate a new guid.
    type: Object
    optional: true
  - name: prefix
    description: |-
      Prefix to place in front of the guid. Useful when you want to
        separate the guid into separate namespaces.
    type: String
    optional: true
  return:
    description: the guid
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 77
  description: |-
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `Ember.Object`-based or not, but be aware that it will add a `_guid`
    property.

    You can also use this method on DOM Element objects.
  access: private
  tagname: ''
  itemtype: method
  name: guidFor
  params:
  - name: obj
    description: any object, string, number, Element, or primitive
    type: Object
  return:
    description: the unique guid for this instance.
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 139
  description: The key used to store meta information on object for property observing.
  itemtype: property
  name: META_KEY
  access: private
  tagname: ''
  final: 1
  type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 193
  description: |-
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.

    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  itemtype: method
  name: meta
  access: private
  tagname: ''
  params:
  - name: obj
    description: The object to retrieve meta for
    type: Object
  - name: writable
    description: |-
      Pass `false` if you do not intend to modify
        the meta hash, allowing the method to avoid making an unnecessary copy.
    type: Boolean
    optional: true
    optdefault: 'true'
  return:
    description: the meta hash for an object
    type: Object
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 255
  deprecated: true
  access: private
  tagname: |-
    In order to store defaults for a class, a prototype may need to create
    a default meta object, which will be inherited by any objects instantiated
    from the class's constructor.

    However, the properties of that meta object are only shallow-cloned,
    so if a property is a hash (like the event system's `listeners` hash),
    it will by default be shared across all instances of that class.

    This method allows extensions to deeply clone a series of nested hashes or
    other complex objects. For instance, the event system might pass
    `['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`, which will
    walk down the keys provided.

    For each key, if the key does not exist, it is created. If it already
    exists and it was inherited from its constructor, the constructor's
    key is cloned.

    You can also pass false for `writable`, which will simply return
    undefined if `prepareMetaPath` discovers any part of the path that
    shared or undefined.
  itemtype: method
  name: metaPath
  params:
  - name: obj
    description: The object whose meta we are examining
    type: Object
  - name: path
    description: An array of keys to walk down
    type: Array
  - name: writable
    description: |-
      whether or not to create a new meta
        (or meta property) if one does not already exist or if it's
        shared with its constructor
    type: Boolean
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 311
  description: |-
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  access: private
  tagname: ''
  itemtype: method
  name: wrap
  params:
  - name: func
    description: The function to call
    type: Function
  - name: superFunc
    description: The super function.
    type: Function
  return:
    description: wrapped function.
    type: Function
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 342
  description: |-
    Returns true if the passed object is an array or Array-like.

    Ember Array Protocol:

      - the object has an objectAt property
      - the object is a native Array
      - the object is an Object, and has a length property

    Unlike `Ember.typeOf` this method returns true even if the passed object is
    not formally array but appears to be array-like (i.e. implements `Ember.Array`)

    ```javascript
    Ember.isArray();                                            // false
    Ember.isArray([]);                                          // true
    Ember.isArray( Ember.ArrayProxy.create({ content: [] }) );  // true
    ```
  itemtype: method
  name: isArray
  params:
  - name: obj
    description: The object to test
    type: Object
  return:
    description: true if the passed object is an array or Array-like
    type: Boolean
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 373
  description: |-
    Forces the passed object to be part of an array. If the object is already
    an array or array-like, returns the object. Otherwise adds the object to
    an array. If obj is `null` or `undefined`, returns an empty array.

    ```javascript
    Ember.makeArray();                           // []
    Ember.makeArray(null);                       // []
    Ember.makeArray(undefined);                  // []
    Ember.makeArray('lindsay');                  // ['lindsay']
    Ember.makeArray([1,2,42]);                   // [1,2,42]

    var controller = Ember.ArrayProxy.create({ content: [] });
    Ember.makeArray(controller) === controller;  // true
    ```
  itemtype: method
  name: makeArray
  params:
  - name: obj
    description: the object
    type: Object
  return:
    description: ''
    type: Array
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 403
  description: |-
    Checks to see if the `methodName` exists on the `obj`.

    ```javascript
    var foo = {bar: Ember.K, baz: null};
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  itemtype: method
  name: canInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 421
  description: |-
    Checks to see if the `methodName` exists on the `obj`,
    and if it does, invokes it with the arguments passed.

    ```javascript
    var d = new Date('03/15/2013');
    Ember.tryInvoke(d, 'getTime'); // 1363320000000
    Ember.tryInvoke(d, 'setFullYear', [2014]); // 1394856000000
    Ember.tryInvoke(d, 'noSuchMethod', [2014]); // undefined
    ```
  itemtype: method
  name: tryInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  - name: args
    description: The arguments to pass to the method
    type: Array
    optional: true
  return:
    description: the return value of the invoked method or undefined if it cannot
      be invoked
    type: "*"
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 459
  description: |-
    Provides try { } finally { } functionality, while working
    around Safari's double finally bug.

    ```javascript
    var tryable = function() {
      someResource.lock();
      runCallback(); // May throw error.
    };
    var finalizer = function() {
      someResource.unlock();
    };
    Ember.tryFinally(tryable, finalizer);
    ```
  itemtype: method
  name: tryFinally
  params:
  - name: tryable
    description: The function to run the try callback
    type: Function
  - name: finalizer
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: The optional calling object. Defaults to 'this'
    type: Object
    optional: true
  return:
    description: |-
      The return value is the that of the finalizer,
      unless that value is undefined, in which case it is the return value
      of the tryable
    type: "*"
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 520
  description: |-
    Provides try { } catch finally { } functionality, while working
    around Safari's double finally bug.

    ```javascript
    var tryable = function() {
      for (i=0, l=listeners.length; i<l; i++) {
        listener = listeners[i];
        beforeValues[i] = listener.before(name, time(), payload);
      }

      return callback.call(binding);
    };

    var catchable = function(e) {
      payload = payload || {};
      payload.exception = e;
    };

    var finalizer = function() {
      for (i=0, l=listeners.length; i<l; i++) {
        listener = listeners[i];
        listener.after(name, time(), payload, beforeValues[i]);
      }
    };
    Ember.tryCatchFinally(tryable, catchable, finalizer);
    ```
  itemtype: method
  name: tryCatchFinally
  params:
  - name: tryable
    description: The function to run the try callback
    type: Function
  - name: catchable
    description: The function to run the catchable callback
    type: Function
  - name: finalizer
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: The optional calling object. Defaults to 'this'
    type: Object
    optional: true
  return:
    description: |-
      The return value is the that of the finalizer,
      unless that value is undefined, in which case it is the return value
      of the tryable.
    type: "*"
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 610
  description: |-
    Returns a consistent type for the passed item.

    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:

        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'class'       | An Ember class (created using Ember.Object.extend()) |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from Ember.Object |

    Examples:

    ```javascript
    Ember.typeOf();                       // 'undefined'
    Ember.typeOf(null);                   // 'null'
    Ember.typeOf(undefined);              // 'undefined'
    Ember.typeOf('michael');              // 'string'
    Ember.typeOf(new String('michael'));  // 'string'
    Ember.typeOf(101);                    // 'number'
    Ember.typeOf(new Number(101));        // 'number'
    Ember.typeOf(true);                   // 'boolean'
    Ember.typeOf(new Boolean(true));      // 'boolean'
    Ember.typeOf(Ember.makeArray);        // 'function'
    Ember.typeOf([1,2,90]);               // 'array'
    Ember.typeOf(/abc/);                  // 'regexp'
    Ember.typeOf(new Date());             // 'date'
    Ember.typeOf(Ember.Object.extend());  // 'class'
    Ember.typeOf(Ember.Object.create());  // 'instance'
    Ember.typeOf(new Error('teamocil'));  // 'error'

    // "normal" JavaScript object
    Ember.typeOf({a: 'b'});              // 'object'
    ```
  itemtype: method
  name: typeOf
  params:
  - name: item
    description: the item to check
    type: Object
  return:
    description: the type
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/utils.js"
  line: 678
  description: |-
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.

    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  itemtype: method
  name: inspect
  params:
  - name: obj
    description: The object you want to inspect.
    type: Object
  return:
    description: A description of the object
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/watching.js"
  line: 30
  description: |-
    Starts watching a property on an object. Whenever the property changes,
    invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the
    primitive used by observers and dependent keys; usually you will never call
    this method directly but instead use higher level methods like
    `Ember.addObserver()`
  access: private
  tagname: ''
  itemtype: method
  name: watch
  params:
  - name: obj
    description: ''
  - name: keyName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/watching.js"
  line: 72
  description: |-
    Call on an object when you first beget it from another object. This will
    setup any chained watchers on the object instance as needed. This method is
    safe to call multiple times.
  access: private
  tagname: ''
  itemtype: method
  name: rewatch
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: "../packages/ember-metal/lib/watching.js"
  line: 98
  description: |-
    Tears down the meta on an object so that it can be garbage collected.
    Multiple calls will have no effect.
  itemtype: method
  name: destroy
  params:
  - name: obj
    description: the object to destroy
    type: Object
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: "../packages/ember-routing/lib/ext/controller.js"
  line: 12
  description: |-
    Transition the application into another route. The route may
    be either a single route or route path:

    ```javascript
    aController.transitionToRoute('blogPosts');
    aController.transitionToRoute('blogPosts.recentEntries');
    ```

    Optionally supply a model for the route in question. The model
    will be serialized into the URL using the `serialize` hook of
    the route:

    ```javascript
    aController.transitionToRoute('blogPost', aPost);
    ```

    Multiple models will be applied last to first recursively up the
    resource tree.

    ```javascript
    this.resource('blogPost', {path:':blogPostId'}, function(){
      this.resource('blogComment', {path: ':blogCommentId'});
    });

    aController.transitionToRoute('blogComment', aPost, aComment);
    ```

    See also 'replaceRoute'.
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  itemtype: method
  name: transitionToRoute
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/ext/controller.js"
  line: 55
  deprecated: true
  itemtype: method
  name: transitionTo
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/ext/controller.js"
  line: 65
  description: |-
    Transition into another route while replacing the current URL, if possible.
    This will replace the current history entry instead of adding a new one.
    Beside that, it is identical to `transitionToRoute` in all other respects.

    ```javascript
    aController.replaceRoute('blogPosts');
    aController.replaceRoute('blogPosts.recentEntries');
    ```

    Optionally supply a model for the route in question. The model
    will be serialized into the URL using the `serialize` hook of
    the route:

    ```javascript
    aController.replaceRoute('blogPost', aPost);
    ```

    Multiple models will be applied last to first recursively up the
    resource tree.

    ```javascript
    this.resource('blogPost', {path:':blogPostId'}, function(){
      this.resource('blogComment', {path: ':blogCommentId'});
    });

    aController.replaceRoute('blogComment', aPost, aComment);
    ```
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  itemtype: method
  name: replaceRoute
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/ext/controller.js"
  line: 107
  deprecated: true
  itemtype: method
  name: replaceWith
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/ext/view.js"
  line: 10
  description: Sets the private `_outlets` object on the view.
  itemtype: method
  name: init
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/ext/view.js"
  line: 20
  description: |-
    Manually fill any of a view's `{{outlet}}` areas with the
    supplied view.

    Example

    ```javascript
    var MyView = Ember.View.extend({
      template: Ember.Handlebars.compile('Child view: {{outlet "main"}} ')
    });
    var myView = MyView.create();
    myView.appendTo('body');
    // The html for myView now looks like:
    // <div id="ember228" class="ember-view">Child view: </div>

    var FooView = Ember.View.extend({
      template: Ember.Handlebars.compile('<h1>Foo</h1> ')
    });
    var fooView = FooView.create();
    myView.connectOutlet('main', fooView);
    // The html for myView now looks like:
    // <div id="ember228" class="ember-view">Child view:
    //   <div id="ember234" class="ember-view"><h1>Foo</h1> </div>
    // </div>
    ```
  itemtype: method
  name: connectOutlet
  params:
  - name: outletName
    description: A unique name for the outlet
    type: String
  - name: view
    description: An Ember.View
    type: Object
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/ext/view.js"
  line: 71
  description: |-
    Determines if the view has already been created by checking if
    the view has the same constructor, template, and context as the
    view in the `_outlets` object.
  access: private
  tagname: ''
  itemtype: method
  name: _hasEquivalentView
  params:
  - name: outletName
    description: The name of the outlet we are checking
    type: String
  - name: view
    description: An Ember.View
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/ext/view.js"
  line: 90
  description: |-
    Removes an outlet from the view.

    Example

    ```javascript
    var MyView = Ember.View.extend({
      template: Ember.Handlebars.compile('Child view: {{outlet "main"}} ')
    });
    var myView = MyView.create();
    myView.appendTo('body');
    // myView's html:
    // <div id="ember228" class="ember-view">Child view: </div>

    var FooView = Ember.View.extend({
      template: Ember.Handlebars.compile('<h1>Foo</h1> ')
    });
    var fooView = FooView.create();
    myView.connectOutlet('main', fooView);
    // myView's html:
    // <div id="ember228" class="ember-view">Child view:
    //   <div id="ember234" class="ember-view"><h1>Foo</h1> </div>
    // </div>

    myView.disconnectOutlet('main');
    // myView's html:
    // <div id="ember228" class="ember-view">Child view: </div>
    ```
  itemtype: method
  name: disconnectOutlet
  params:
  - name: outletName
    description: The name of the outlet to be removed
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/ext/view.js"
  line: 130
  description: |-
    Gets an outlet that is pending disconnection and then
    nullifys the object on the `_outlet` object.
  access: private
  tagname: ''
  itemtype: method
  name: _finishDisconnections
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/helpers/action.js"
  line: 109
  description: |-
    The `{{action}}` helper registers an HTML element within a template for DOM
    event handling and forwards that interaction to the templates's controller
    or supplied `target` option (see 'Specifying a Target').

    If the controller does not implement the event, the event is sent
    to the current route, and it bubbles up the route hierarchy from there.

    User interaction with that element will invoke the supplied action name on
    the appropriate target.

    Given the following application Handlebars template on the page

    ```handlebars
    <div {{action 'anActionName'}}>
      click me
    </div>
    ```

    And application code

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      actions: {
        anActionName: function() {
        }
      }
    });
    ```

    Will result in the following rendered HTML

    ```html
    <div class="ember-view">
      <div data-ember-action="1">
        click me
      </div>
    </div>
    ```

    Clicking "click me" will trigger the `anActionName` action of the
    `App.ApplicationController`. In this case, no additional parameters will be passed.

    If you provide additional parameters to the helper:

    ```handlebars
    <button {{action 'edit' post}}>Edit</button>
    ```

    Those parameters will be passed along as arguments to the JavaScript
    function implementing the action.

    ### Event Propagation

    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:

    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```

    To disable bubbling, pass `bubbles=false` to the helper:

    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```

    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)
    'Responding to Browser Events' for more information.

    ### Specifying DOM event type

    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:

    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```

    See `Ember.View` 'Responding to Browser Events' for a list of
    acceptable DOM event names.

    NOTE: Because `{{action}}` depends on Ember's event dispatch system it will
    only function if an `Ember.EventDispatcher` instance is available. An
    `Ember.EventDispatcher` instance will be created when a new `Ember.Application`
    is created. Having an instance of `Ember.Application` will satisfy this
    requirement.

    ### Specifying whitelisted modifier keys

    By default the `{{action}}` helper will ignore click event with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.

    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```

    This way the `{{action}}` will fire when clicking with the alt key pressed down.

    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.

    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```

    ### Specifying a Target

    There are several possible target objects for `{{action}}` helpers:

    In a typical Ember application, where views are managed through use of the
    `{{outlet}}` helper, actions will bubble to the current controller, then
    to the current route, and then up the route hierarchy.

    Alternatively, a `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:

    ```handlebars
    {{! the application template }}
    <div {{action "anActionName" target=view}}>
      click me
    </div>
    ```

    ```javascript
    App.ApplicationView = Ember.View.extend({
      actions: {
        anActionName: function(){}
      }
    });

    ```

    ### Additional Parameters

    You may specify additional parameters to the `{{action}}` helper. These
    parameters are passed along as the arguments to the JavaScript function
    implementing the action.

    ```handlebars
    {{#each person in people}}
      <div {{action "edit" person}}>
        click me
      </div>
    {{/each}}
    ```

    Clicking "click me" will trigger the `edit` method on the current controller
    with the value of `person` as a parameter.
  itemtype: method
  name: action
  params:
  - name: actionName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 63
  description: Sets the `title` attribute of the `LinkView`'s HTML element.
  itemtype: property
  name: title
  default: 'null'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 71
  description: Sets the `rel` attribute of the `LinkView`'s HTML element.
  itemtype: property
  name: rel
  default: 'null'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 79
  description: |-
    The CSS class to apply to `LinkView`'s element when its `active`
    property is `true`.
  itemtype: property
  name: activeClass
  type: String
  default: active
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 89
  description: |-
    The CSS class to apply to `LinkView`'s element when its `loading`
    property is `true`.
  itemtype: property
  name: loadingClass
  type: String
  default: loading
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 99
  description: |-
    The CSS class to apply to a `LinkView`'s element when its `disabled`
    property is `true`.
  itemtype: property
  name: disabledClass
  type: String
  default: disabled
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 110
  description: |-
    Determines whether the `LinkView` will trigger routing via
    the `replaceWith` routing strategy.
  itemtype: property
  name: replace
  type: Boolean
  default: 'false'
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 120
  description: |-
    By default the `{{link-to}}` helper will bind to the `href` and
    `title` attributes. It's discourage that you override these defaults,
    however you can push onto the array if needed.
  itemtype: property
  name: attributeBindings
  type: Array | String
  default: "['href', 'title', 'rel']"
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 131
  description: |-
    By default the `{{link-to}}` helper will bind to the `active`, `loading`, and
    `disabled` classes. It is discouraged to override these directly.
  itemtype: property
  name: classNameBindings
  type: Array
  default: "['active', 'loading', 'disabled']"
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 141
  description: |-
    By default the `{{link-to}}` helper responds to the `click` event. You
    can override this globally by setting this property to your custom
    event name.

    This is particularly useful on mobile when one wants to avoid the 300ms
    click delay using some sort of custom `tap` event.
  itemtype: property
  name: eventName
  type: String
  default: click
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 158
  description: |-
    Triggers the `LinkView`'s routing behavior. If
    `eventName` is changed to a value other than `click`
    the routing behavior will trigger on that custom event
    instead.
  itemtype: event
  name: click
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 167
  description: |-
    An overridable method called when LinkView objects are instantiated.

    Example:

    ```javascript
    App.MyLinkView = Ember.LinkView.extend({
      init: function() {
        this._super();
        Ember.Logger.log('Event is ' + this.get('eventName'));
      }
    });
    ```

    NOTE: If you do override `init` for a framework class like `Ember.View` or
    `Ember.ArrayController`, be sure to call `this._super()` in your
    `init` declaration! If you don't, Ember may not have an opportunity to
    do important setup work, and you'll see strange behavior in your
    application.
  itemtype: method
  name: init
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 197
  description: |-
    This method is invoked by observers installed during `init` that fire
    whenever the params change
  access: private
  tagname: ''
  itemtype: method
  name: _paramsChanged
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 208
  description: This is called to setup observers that will trigger a rerender.
  access: private
  tagname: ''
  itemtype: method
  name: _setupPathObservers
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 259
  description: |-
    Even though this isn't a virtual view, we want to treat it as if it is
    so that you can access the parent with {{view.prop}}
  access: private
  tagname: ''
  itemtype: method
  name: concreteView
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 270
  description: |-
    Accessed as a classname binding to apply the `LinkView`'s `disabledClass`
          CSS `class` to the element when the link is disabled.
    When `true` interactions with the element will not trigger route changes.
  itemtype: property
  name: disabled
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 284
  description: |-
    Accessed as a classname binding to apply the `LinkView`'s `activeClass`
    CSS `class` to the element when the link is active.

    A `LinkView` is considered active when its `currentWhen` property is `true`
    or the application's current route is the route the `LinkView` would trigger
    transitions into.
  itemtype: property
  name: active
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 309
  description: |-
    Accessed as a classname binding to apply the `LinkView`'s `loadingClass`
    CSS `class` to the element when the link is loading.

    A `LinkView` is considered loading when it has at least one
    parameter whose value is currently null or undefined. During
    this time, clicking the link will perform no transition and
    emit a warning that the link is still in a loading state.
  itemtype: property
  name: loading
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 324
  description: Returns the application's main router from the container.
  access: private
  tagname: ''
  itemtype: property
  name: router
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 334
  description: Event handler that invokes the link, activating the associated route.
  access: private
  tagname: ''
  itemtype: method
  name: _invoke
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 364
  description: |-
    Computed property that returns an array of the
    resolved parameters passed to the `link-to` helper,
    e.g.:

    ```hbs
    {{link-to a b '123' c}}
    ```

    will generate a `resolvedParams` of:

    ```js
    [aObject, bObject, '123', cObject]
    ```
  access: private
  tagname: ''
  itemtype: property
  name: ''
  return:
    description: ''
    type: Array
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 400
  description: |-
    Computed property that returns the current route name and
    any dynamic segments.
  access: private
  tagname: ''
  itemtype: property
  name: ''
  return:
    description: An array with the route name and any dynamic segments
    type: Array
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 479
  description: |-
    Sets the element's `href` attribute to the url for
    the `LinkView`'s targeted route.

    If the `LinkView`'s `tagName` is changed to a value other
    than `a`, this property will be ignored.
  itemtype: property
  name: href
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 497
  description: |-
    The default href value to use while a link-to is loading.
    Only applies when tagName is 'a'
  itemtype: property
  name: loadingHref
  type: String
  default: "#"
  class: Ember.LinkView
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 510
  description: |-
    The `{{link-to}}` helper renders a link to the supplied
    `routeName` passing an optionally supplied model to the
    route as its `model` context of the route. The block
    for `{{link-to}}` becomes the innerHTML of the rendered
    element:

    ```handlebars
    {{#link-to 'photoGallery'}}
      Great Hamster Photos
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```

    ### Supplying a tagName
    By default `{{link-to}}` renders an `<a>` element. This can
    be overridden for a single use of `{{link-to}}` by supplying
    a `tagName` option:

    ```handlebars
    {{#link-to 'photoGallery' tagName="li"}}
      Great Hamster Photos
    {{/link-to}}
    ```

    ```html
    <li>
      Great Hamster Photos
    </li>
    ```

    To override this option for your entire application, see
    "Overriding Application-wide Defaults".

    ### Disabling the `link-to` helper
    By default `{{link-to}}` is enabled.
    any passed value to `disabled` helper property will disable the `link-to` helper.

    static use: the `disabled` option:

    ```handlebars
    {{#link-to 'photoGallery' disabled=true}}
      Great Hamster Photos
    {{/link-to}}
    ```

    dynamic use: the `disabledWhen` option:

    ```handlebars
    {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}
      Great Hamster Photos
    {{/link-to}}
    ```

    any passed value to `disabled` will disable it except `undefined`.
    to ensure that only `true` disable the `link-to` helper you can
    override the global behaviour of `Ember.LinkView`.

    ```javascript
    Ember.LinkView.reopen({
      disabled: Ember.computed(function(key, value) {
        if (value !== undefined) {
          this.set('_isDisabled', value === true);
        }
        return value === true ? get(this, 'disabledClass') : false;
      })
    });
    ```

    see "Overriding Application-wide Defaults" for more.

    ### Handling `href`
    `{{link-to}}` will use your application's Router to
    fill the element's `href` property with a url that
    matches the path to the supplied `routeName` for your
    routers's configured `Location` scheme, which defaults
    to Ember.HashLocation.

    ### Handling current route
    `{{link-to}}` will apply a CSS class name of 'active'
    when the application's current route matches
    the supplied routeName. For example, if the application's
    current route is 'photoGallery.recent' the following
    use of `{{link-to}}`:

    ```handlebars
    {{#link-to 'photoGallery.recent'}}
      Great Hamster Photos from the last week
    {{/link-to}}
    ```

    will result in

    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```

    The CSS class name used for active classes can be customized
    for a single use of `{{link-to}}` by passing an `activeClass`
    option:

    ```handlebars
    {{#link-to 'photoGallery.recent' activeClass="current-url"}}
      Great Hamster Photos from the last week
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```

    To override this option for your entire application, see
    "Overriding Application-wide Defaults".

    ### Supplying a model
    An optional model argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:

    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```

    ```handlebars
    {{#link-to 'photoGallery' aPhoto}}
      {{aPhoto.title}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```

    ### Supplying multiple models
    For deep-linking to route paths that contain multiple
    dynamic segments, multiple model arguments can be used.
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:

    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"}, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
    This argument will become the model context of the linked route:

    ```handlebars
    {{#link-to 'photoGallery.comment' aPhoto comment}}
      {{comment.body}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42/comment/718">
      A+++ would snuggle again.
    </a>
    ```

    ### Supplying an explicit dynamic segment value
    If you don't have a model object available to pass to `{{link-to}}`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:

    ```javascript
    App.Router.map(function() {
      this.resource("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```

    ```handlebars
    {{#link-to 'photoGallery' aPhotoId}}
      {{aPhoto.title}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```

    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.

    ### Allowing Default Action

       By default the `{{link-to}}` helper prevents the default browser action
       by calling `preventDefault()` as this sort of action bubbling is normally
       handled internally and we do not want to take the browser to a new URL (for
       example).

       If you need to override this behavior specify `preventDefault=false` in
       your template:

    ```handlebars
    {{#link-to 'photoGallery' aPhotoId preventDefault=false}}
      {{aPhotoId.title}}
    {{/link-to}}
    ```

    ### Overriding attributes
    You can override any given property of the Ember.LinkView
    that is generated by the `{{link-to}}` helper by passing
    key/value pairs, like so:

    ```handlebars
    {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}
      Uh-mazing!
    {{/link-to}}
    ```

    See [Ember.LinkView](/api/classes/Ember.LinkView.html) for a
    complete list of overrideable properties. Be sure to also
    check out inherited properties of `LinkView`.

    ### Overriding Application-wide Defaults
    ``{{link-to}}`` creates an instance of Ember.LinkView
    for rendering. To override options for your entire
    application, reopen Ember.LinkView and supply the
    desired values:

    ``` javascript
    Ember.LinkView.reopen({
      activeClass: "is-active",
      tagName: 'li'
    })
    ```

    It is also possible to override the default event in
    this manner:

    ``` javascript
    Ember.LinkView.reopen({
      eventName: 'customEventName'
    });
    ```
  itemtype: method
  name: link-to
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: Handlebars key/value pairs of options, you can override any property
      of Ember.LinkView
    type: Object
    optional: true
  return:
    description: HTML string
    type: String
  see:
  - "{Ember.LinkView}"
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: "../packages/ember-routing/lib/helpers/link_to.js"
  line: 820
  description: See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)
  itemtype: method
  name: linkTo
  deprecated: true
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: "../packages/ember-routing/lib/helpers/outlet.js"
  line: 18
  description: |-
    The `outlet` helper is a placeholder that the router will fill in with
    the appropriate template based on the current state of the application.

    ``` handlebars
    {{outlet}}
    ```

    By default, a template based on Ember's naming conventions will be rendered
    into the `outlet` (e.g. `App.PostsRoute` will render the `posts` template).

    You can render a different template by using the `render()` method in the
    route's `renderTemplate` hook. The following will render the `favoritePost`
    template into the `outlet`.

    ``` javascript
    App.PostsRoute = Ember.Route.extend({
      renderTemplate: function() {
        this.render('favoritePost');
      }
    });
    ```

    You can create custom named outlets for more control.

    ``` handlebars
    {{outlet 'favoritePost'}}
    {{outlet 'posts'}}
    ```

    Then you can define what template is rendered into each outlet in your
    route.


    ``` javascript
    App.PostsRoute = Ember.Route.extend({
      renderTemplate: function() {
        this.render('favoritePost', { outlet: 'favoritePost' });
        this.render('posts', { outlet: 'posts' });
      }
    });
    ```

    You can specify the view that the outlet uses to contain and manage the
    templates rendered into it.

    ``` handlebars
    {{outlet view='sectionContainer'}}
    ```

    ``` javascript
    App.SectionContainer = Ember.ContainerView.extend({
      tagName: 'section',
      classNames: ['special']
    });
    ```
  itemtype: method
  name: outlet
  params:
  - name: property
    description: |-
      the property on the controller
        that holds the view for this outlet
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: "../packages/ember-routing/lib/helpers/render.js"
  line: 12
  description: |-
    Calling ``{{render}}`` from within a template will insert another
    template that matches the provided name. The inserted template will
    access its properties on its own controller (rather than the controller
    of the parent template).

    If a view class with the same name exists, the view class also will be used.

    Note: A given controller may only be used *once* in your app in this manner.
    A singleton instance of the controller will be created for you.

    Example:

    ```javascript
    App.NavigationController = Ember.Controller.extend({
      who: "world"
    });
    ```

    ```handlebars
    <!-- navigation.hbs -->
    Hello, {{who}}.
    ```

    ```handelbars
    <!-- application.hbs -->
    <h1>My great app</h1>
    {{render "navigation"}}
    ```

    ```html
    <h1>My great app</h1>
    <div class='ember-view'>
      Hello, world.
    </div>
    ```

    Optionally you may provide a second argument: a property path
    that will be bound to the `model` property of the controller.

    If a `model` property path is specified, then a new instance of the
    controller will be created and `{{render}}` can be used multiple times
    with the same name.

       For example if you had this `author` template.

       ```handlebars
    <div class="author">
      Written by {{firstName}} {{lastName}}.
      Total Posts: {{postCount}}
    </div>
      ```

      You could render it inside the `post` template using the `render` helper.

      ```handlebars
    <div class="post">
      <h1>{{title}}</h1>
      <div>{{body}}</div>
      {{render "author" author}}
    </div>
       ```
  itemtype: method
  name: render
  params:
  - name: name
    description: ''
    type: String
  - name: contextString
    description: ''
    type: Object?
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
  namespace: Ember.Handlebars
- file: "../packages/ember-routing/lib/location/api.js"
  line: 84
  description: |-
    This is deprecated in favor of using the container to lookup the location
    implementation as desired.

    For example:

    ```javascript
    // Given a location registered as follows:
    container.register('location:history-test', HistoryTestLocation);

    // You could create a new instance via:
    container.lookup('location:history-test');
    ```
  itemtype: method
  name: create
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an instance of an implementation of the `location` API
    type: Object
  deprecated: true
  deprecationMessage: |-
    Use the container to lookup the location implementation that you
     need.
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/api.js"
  line: 114
  description: |-
    This is deprecated in favor of using the container to register the
    location implementation as desired.

    Example:

    ```javascript
    Application.initializer({
     name: "history-test-location",

     initialize: function(container, application) {
       application.register('location:history-test', HistoryTestLocation);
     }
    });
    ```
  itemtype: method
  name: registerImplementation
  params:
  - name: name
    description: ''
    type: String
  - name: implementation
    description: of the `location` API
    type: Object
  deprecated: true
  deprecationMessage: |-
    Register your custom location implementation with the
    container directly.
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/api.js"
  line: 144
  description: "Returns the current `location.hash` by parsing location.href since
    browsers\ninconsistently URL-decode `location.hash`.\n  \nhttps://bugzilla.mozilla.org/show_bug.cgi?id=483304"
  access: private
  tagname: ''
  itemtype: method
  name: getHash
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 25
  description: Returns the current `location.hash`, minus the '#' at the front.
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 35
  description: |-
    Set the `location.hash` and remembers what was set. This prevents
    `onUpdateURL` callbacks from triggering when the hash was set by
    `HashLocation`.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 49
  description: |-
    Uses location.replace to update the url without a page reload
    or history modification.
  access: private
  tagname: ''
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 62
  description: |-
    Register a callback to be invoked when the hash changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 87
  description: |-
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.

    This is used, for example, when using the {{action}} helper
    to generate a URL based on an event.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/hash_location.js"
  line: 102
  description: Cleans up the HashLocation event listener.
  access: private
  tagname: ''
  itemtype: method
  name: willDestroy
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 26
  description: Used to set state on first call to setURL
  access: private
  tagname: ''
  itemtype: method
  name: initState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 37
  description: Will be pre-pended to path upon state change
  itemtype: property
  name: rootURL
  default: "'/'"
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 45
  description: Returns the current `location.pathname` without `rootURL`.
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  return:
    description: url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 70
  description: Uses `history.pushState` to update the url without a page reload.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 86
  description: |-
    Uses `history.replaceState` to update the url without a page reload
    or history modification.
  access: private
  tagname: ''
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 103
  description: |-
    Get the current `history.state`
    Polyfill checks for native browser support and falls back to retrieving
    from a private _historyState variable
  access: private
  tagname: ''
  itemtype: method
  name: getState
  return:
    description: state
    type: Object
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 116
  description: Pushes a new state.
  access: private
  tagname: ''
  itemtype: method
  name: pushState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 137
  description: Replaces the current state.
  access: private
  tagname: ''
  itemtype: method
  name: replaceState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 158
  description: |-
    Register a callback to be invoked whenever the browser
    history changes, including using forward and back buttons.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 180
  description: Used when using `{{action}}` helper.  The url is always appended to
    the rootURL.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: formatted url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/history_location.js"
  line: 202
  description: Cleans up the HistoryLocation event listener.
  access: private
  tagname: ''
  itemtype: method
  name: willDestroy
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/none_location.js"
  line: 22
  description: Returns the current path.
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  return:
    description: path
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/none_location.js"
  line: 33
  description: |-
    Set the path and remembers what was set. Using this method
    to change the path will not invoke the `updateURL` callback.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/none_location.js"
  line: 45
  description: |-
    Register a callback to be invoked when the path changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/none_location.js"
  line: 58
  description: Sets the path and calls the `updateURL` callback.
  access: private
  tagname: ''
  itemtype: method
  name: handleURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/location/none_location.js"
  line: 70
  description: |-
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.

    This is used, for example, when using the {{action}} helper
    to generate a URL based on an event.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: url
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/controller_for.js"
  line: 8
  description: Finds a controller instance.
  itemtype: method
  name: controllerFor
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/system/controller_for.js"
  line: 20
  description: |-
    Generates a controller factory

    The type of the generated controller factory is derived
    from the context. If the context is an array an array controller
    is generated, if an object, an object controller otherwise, a basic
    controller is generated.

    You can customize your generated controllers by defining
    `App.ObjectController` or `App.ArrayController`.
  itemtype: method
  name: generateControllerFactory
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/system/controller_for.js"
  line: 62
  description: |-
    Generates and instantiates a controller.

    The type of the generated controller factory is derived
    from the context. If the context is an array an array controller
    is generated, if an object, an object controller otherwise, a basic
    controller is generated.
  itemtype: method
  name: generateController
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: "../packages/ember-routing/lib/system/route.js"
  line: 25
  access: private
  tagname: ''
  itemtype: method
  name: exit
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 38
  access: private
  tagname: ''
  itemtype: method
  name: enter
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 47
  description: |-
    The name of the view to use by default when rendering this routes template.

    When rendering a template, the route will, by default, determine the
    template and view to use from the name of the route itself. If you need to
    define a specific view, set this property.

    This is useful when multiple routes would benefit from using the same view
    because it doesn't require a custom `renderTemplate` method. For example,
    the following routes will all render using the `App.PostsListView` view:

    ```js
    var PostsList = Ember.Route.extend({
      viewName: 'postsList',
    });

    App.PostsIndexRoute = PostsList.extend();
    App.PostsArchivedRoute = PostsList.extend();
    ```
  itemtype: property
  name: viewName
  type: String
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 73
  description: |-
    The name of the template to use by default when rendering this routes
    template.

    This is similar with `viewName`, but is useful when you just want a custom
    template without a view.

    ```js
    var PostsList = Ember.Route.extend({
      templateName: 'posts/list'
    });

    App.PostsIndexRoute = PostsList.extend();
    App.PostsArchivedRoute = PostsList.extend();
    ```
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 95
  description: |-
    The name of the controller to associate with this route.

    By default, Ember will lookup a route's controller that matches the name
    of the route (i.e. `App.PostController` for `App.PostRoute`). However,
    if you would like to define a specific controller to use, you can do so
    using this property.

    This is useful in many ways, as the controller specified will be:

    * passed to the `setupController` method.
    * used as the controller for the view being rendered by the route.
    * returned from a call to `controllerFor` for the route.
  itemtype: property
  name: controllerName
  type: String
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 115
  description: |-
    The collection of functions, keyed by name, available on this route as
    action targets.

    These functions will be invoked when a matching `{{action}}` is triggered
    from within a template and the application's current route is this route.

    Actions can also be invoked from other parts of your application via `Route#send`
    or `Controller#send`.

    The `actions` hash will inherit action handlers from
    the `actions` hash defined on extended Route parent classes
    or mixins rather than just replace the entire hash, e.g.:

    ```js
    App.CanDisplayBanner = Ember.Mixin.create({
      actions: {
        displayBanner: function(msg) {
          // ...
        }
      }
    });

    App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {
      actions: {
        playMusic: function() {
          // ...
        }
      }
    });

    // `WelcomeRoute`, when active, will be able to respond
    // to both actions, since the actions hash is merged rather
    // then replaced when extending mixins / parent classes.
    this.send('displayBanner');
    this.send('playMusic');
    ```

    Within a route's action handler, the value of the `this` context
    is the Route object:

    ```js
    App.SongRoute = Ember.Route.extend({
      actions: {
        myAction: function() {
          this.controllerFor("song");
          this.transitionTo("other.route");
          ...
        }
      }
    });
    ```

    It is also possible to call `this._super()` from within an
    action handler if it overrides a handler defined on a parent
    class or mixin:

    Take for example the following routes:

    ```js
    App.DebugRoute = Ember.Mixin.create({
      actions: {
        debugRouteInformation: function() {
          console.debug("trololo");
        }
      }
    });

    App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {
      actions: {
        debugRouteInformation: function() {
          // also call the debugRouteInformation of mixed in App.DebugRoute
          this._super();

          // show additional annoyance
          window.alert(...);
        }
      }
    });
    ```

    ## Bubbling

    By default, an action will stop bubbling once a handler defined
    on the `actions` hash handles it. To continue bubbling the action,
    you must return `true` from the handler:

    ```js
    App.Router.map(function() {
      this.resource("album", function() {
        this.route("song");
      });
    });

    App.AlbumRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
        }
      }
    });

    App.AlbumSongRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
          // ...

          if (actionShouldAlsoBeTriggeredOnParentRoute) {
            return true;
          }
        }
      }
    });
    ```

    ## Built-in actions

    There are a few built-in actions pertaining to transitions that you
    can use to customize transition behavior: `willTransition` and
    `error`.

    ### `willTransition`

    The `willTransition` action is fired at the beginning of any
    attempted transition with a `Transition` object as the sole
    argument. This action can be used for aborting, redirecting,
    or decorating the transition from the currently active routes.

    A good example is preventing navigation when a form is
    half-filled out:

    ```js
    App.ContactFormRoute = Ember.Route.extend({
      actions: {
        willTransition: function(transition) {
          if (this.controller.get('userHasEnteredData')) {
            this.controller.displayNavigationConfirm();
            transition.abort();
          }
        }
      }
    });
    ```

    You can also redirect elsewhere by calling
    `this.transitionTo('elsewhere')` from within `willTransition`.
    Note that `willTransition` will not be fired for the
    redirecting `transitionTo`, since `willTransition` doesn't
    fire when there is already a transition underway. If you want
    subsequent `willTransition` actions to fire for the redirecting
    transition, you must first explicitly call
    `transition.abort()`.

    ### `error`

    When attempting to transition into a route, any of the hooks
    may return a promise that rejects, at which point an `error`
    action will be fired on the partially-entered routes, allowing
    for per-route error handling logic, or shared error handling
    logic defined on a parent route.

    Here is an example of an error handler that will be invoked
    for rejected promises from the various hooks on the route,
    as well as any unhandled errors from child routes:

    ```js
    App.AdminRoute = Ember.Route.extend({
      beforeModel: function() {
        return Ember.RSVP.reject("bad things!");
      },

      actions: {
        error: function(error, transition) {
          // Assuming we got here due to the error in `beforeModel`,
          // we can expect that error === "bad things!",
          // but a promise model rejecting would also
          // call this hook, as would any errors encountered
          // in `afterModel`.

          // The `error` hook is also provided the failed
          // `transition`, which can be stored and later
          // `.retry()`d if desired.

          this.transitionTo('login');
        }
      }
    });
    ```

    `error` actions that bubble up all the way to `ApplicationRoute`
    will fire a default error handler that logs the error. You can
    specify your own global default error handler by overriding the
    `error` handler on `ApplicationRoute`:

    ```js
    App.ApplicationRoute = Ember.Route.extend({
      actions: {
        error: function(error, transition) {
          this.controllerFor('banner').displayError(error.message);
        }
      }
    });
    ```
  itemtype: property
  name: actions
  type: Hash
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 379
  deprecated: true
  deprecationMessage: Please use `actions` instead.
  itemtype: method
  name: events
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 389
  description: |-
    This hook is executed when the router completely exits this route. It is
    not executed when the model for the route changes.
  itemtype: method
  name: deactivate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 397
  description: |-
    This hook is executed when the router enters the route. It is not executed
    when the model for the route changes.
  itemtype: method
  name: activate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 405
  description: |-
    Transition into another route. Optionally supply model(s) for the
    route in question. If multiple models are supplied they will be applied
    last to first recursively up the resource tree (see Multiple Models Example
    below). The model(s) will be serialized into the URL using the appropriate
    route's `serialize` hook. See also 'replaceWith'.

    Simple Transition Example

    ```javascript
    App.Router.map(function() {
      this.route("index");
      this.route("secret");
      this.route("fourOhFour", { path: "*:"});
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        moveToSecret: function(context){
          if (authorized()){
            this.transitionTo('secret', context);
          }
            this.transitionTo('fourOhFour');
        }
      }
    });
    ```

       Transition to a nested route

       ```javascript
       App.Router.map(function() {
     this.resource('articles', { path: '/articles' }, function() {
       this.route('new');
     });
       });

       App.IndexRoute = Ember.Route.extend({
     actions: {
       transitionToNewArticle: function() {
         this.transitionTo('articles.new');
       }
     }
       });
       ```

    Multiple Models Example

    ```javascript
    App.Router.map(function() {
      this.route("index");
      this.resource('breakfast', {path:':breakfastId'}, function(){
        this.resource('cereal', {path: ':cerealId'});
      });
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        moveToChocolateCereal: function(){
          var cereal = { cerealId: "ChocolateYumminess"},
              breakfast = {breakfastId: "CerealAndMilk"};

          this.transitionTo('cereal', breakfast, cereal);
        }
      }
    });
  itemtype: method
  name: transitionTo
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 484
  description: |-
    Perform a synchronous transition into another route without attempting
    to resolve promises, update the URL, or abort any currently active
    asynchronous transitions (i.e. regular transitions caused by
    `transitionTo` or URL changes).

    This method is handy for performing intermediate transitions on the
    way to a final destination route, and is called internally by the
    default implementations of the `error` and `loading` handlers.
  itemtype: method
  name: intermediateTransitionTo
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 504
  description: |-
    Refresh the model on this route and any child routes, firing the
    `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
    to how routes are entered when transitioning in from other route.
    The current route params (e.g. `article_id`) will be passed in
    to the respective model hooks, and if a different model is returned,
    `setupController` and associated route hooks will re-fire as well.

    An example usage of this method is re-querying the server for the
    latest information using the same parameters as when the route
    was first entered.

    Note that this will cause `model` hooks to fire even on routes
    that were provided a model object when the route was initially
    entered.
  itemtype: method
  name: refresh
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 528
  description: |-
    Transition into another route while replacing the current URL, if possible.
    This will replace the current history entry instead of adding a new one.
    Beside that, it is identical to `transitionTo` in all other respects. See
    'transitionTo' for additional information regarding multiple models.

    Example

    ```javascript
    App.Router.map(function() {
      this.route("index");
      this.route("secret");
    });

    App.SecretRoute = Ember.Route.extend({
      afterModel: function() {
        if (!authorized()){
          this.replaceWith('index');
        }
      }
    });
    ```
  itemtype: method
  name: replaceWith
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 563
  description: |-
    Sends an action to the router, which will delegate it to the currently
    active route hierarchy per the bubbling rules explained under `actions`.

    Example

    ```javascript
    App.Router.map(function() {
      this.route("index");
    });

    App.ApplicationRoute = Ember.Route.extend({
      actions: {
        track: function(arg) {
          console.log(arg, 'was clicked');
        }
      }
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        trackIfDebug: function(arg) {
          if (debug) {
            this.send('track', arg);
          }
        }
      }
    });
    ```
  itemtype: method
  name: send
  params:
  - name: name
    description: the name of the action to trigger
    type: String
  - name: args
    description: ''
    type: "...*"
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 601
  description: This hook is the entry point for router.js
  access: private
  tagname: ''
  itemtype: method
  name: setup
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 653
  description: |-
    This hook is the first of the route entry validation hooks
    called when an attempt is made to transition into a route
    or one of its children. It is called before `model` and
    `afterModel`, and is appropriate for cases when:

    1) A decision can be made to redirect elsewhere without
       needing to resolve the model first.
    2) Any async operations need to occur first before the
       model is attempted to be resolved.

    This hook is provided the current `transition` attempt
    as a parameter, which can be used to `.abort()` the transition,
    save it for a later `.retry()`, or retrieve values set
    on it from a previous hook. You can also just call
    `this.transitionTo` to another route to implicitly
    abort the `transition`.

    You can return a promise from this hook to pause the
    transition until the promise resolves (or rejects). This could
    be useful, for instance, for retrieving async code from
    the server that is required to enter a route.

    ```js
    App.PostRoute = Ember.Route.extend({
      beforeModel: function(transition) {
        if (!App.Post) {
          return Ember.$.getScript('/models/post.js');
        }
      }
    });
    ```

    If `App.Post` doesn't exist in the above example,
    `beforeModel` will use jQuery's `getScript`, which
    returns a promise that resolves after the server has
    successfully retrieved and executed the code from the
    server. Note that if an error were to occur, it would
    be passed to the `error` hook on `Ember.Route`, but
    it's also possible to handle errors specific to
    `beforeModel` right from within the hook (to distinguish
    from the shared error handling behavior of the `error`
    hook):

    ```js
    App.PostRoute = Ember.Route.extend({
      beforeModel: function(transition) {
        if (!App.Post) {
          var self = this;
          return Ember.$.getScript('post.js').then(null, function(e) {
            self.transitionTo('help');

            // Note that the above transitionTo will implicitly
            // halt the transition. If you were to return
            // nothing from this promise reject handler,
            // according to promise semantics, that would
            // convert the reject into a resolve and the
            // transition would continue. To propagate the
            // error so that it'd be handled by the `error`
            // hook, you would have to either
            return Ember.RSVP.reject(e);
          });
        }
      }
    });
    ```
  itemtype: method
  name: beforeModel
  params:
  - name: transition
    description: ''
    type: Transition
  - name: queryParams
    description: the active query params for this route
    type: Object
  return:
    description: |-
      if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
    type: Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 730
  description: |-
    This hook is called after this route's model has resolved.
    It follows identical async/promise semantics to `beforeModel`
    but is provided the route's resolved model in addition to
    the `transition`, and is therefore suited to performing
    logic that can only take place after the model has already
    resolved.

    ```js
    App.PostsRoute = Ember.Route.extend({
      afterModel: function(posts, transition) {
        if (posts.length === 1) {
          this.transitionTo('post.show', posts[0]);
        }
      }
    });
    ```

    Refer to documentation for `beforeModel` for a description
    of transition-pausing semantics when a promise is returned
    from this hook.
  itemtype: method
  name: afterModel
  params:
  - name: resolvedModel
    description: |-
      the value returned from `model`,
        or its resolved value if it was a promise
    type: Object
  - name: transition
    description: ''
    type: Transition
  - name: queryParams
    description: the active query params for this handler
    type: Object
  return:
    description: |-
      if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
    type: Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 764
  description: |-
    A hook you can implement to optionally redirect to another route.

    If you call `this.transitionTo` from inside of this hook, this route
    will not be entered in favor of the other hook.

    `redirect` and `afterModel` behave very similarly and are
    called almost at the same time, but they have an important
    distinction in the case that, from one of these hooks, a
    redirect into a child route of this route occurs: redirects
    from `afterModel` essentially invalidate the current attempt
    to enter this route, and will result in this route's `beforeModel`,
    `model`, and `afterModel` hooks being fired again within
    the new, redirecting transition. Redirects that occur within
    the `redirect` hook, on the other hand, will _not_ cause
    these hooks to be fired again the second time around; in
    other words, by the time the `redirect` hook has been called,
    both the resolved model and attempted entry into this route
    are considered to be fully validated.
  itemtype: method
  name: redirect
  params:
  - name: model
    description: the model for this route
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 789
  description: Called when the context is changed by router.js.
  access: private
  tagname: ''
  itemtype: method
  name: contextDidChange
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 799
  description: |-
    A hook you can implement to convert the URL into the model for
    this route.

    ```js
    App.Router.map(function() {
      this.resource('post', {path: '/posts/:post_id'});
    });
    ```

    The model for the `post` route is `App.Post.find(params.post_id)`.

    By default, if your route has a dynamic segment ending in `_id`:

    * The model class is determined from the segment (`post_id`'s
      class is `App.Post`)
    * The find method is called on the model class with the value of
      the dynamic segment.

    Note that for routes with dynamic segments, this hook is only
    executed when entered via the URL. If the route is entered
    through a transition (e.g. when using the `link-to` Handlebars
    helper), then a model context is already provided and this hook
    is not called. Routes without dynamic segments will always
    execute the model hook.

    This hook follows the asynchronous/promise semantics
    described in the documentation for `beforeModel`. In particular,
    if a promise returned from `model` fails, the error will be
    handled by the `error` hook on `Ember.Route`.

    Example

    ```js
    App.PostRoute = Ember.Route.extend({
      model: function(params) {
        return App.Post.find(params.post_id);
      }
    });
    ```
  itemtype: method
  name: model
  params:
  - name: params
    description: the parameters extracted from the URL
    type: Object
  - name: transition
    description: ''
    type: Transition
  - name: queryParams
    description: the query params for this route
    type: Object
  return:
    description: |-
      the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
    type: Object|Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 868
  access: private
  tagname: Router.js hook.
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 881
  itemtype: method
  name: findModel
  params:
  - name: type
    description: the model type
    type: String
  - name: value
    description: the value passed to find
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 892
  description: |-
    Store property provides a hook for data persistence libraries to inject themselves.

    By default, this store property provides the exact same functionality previously
    in the model hook.

    Currently, the required interface is:

    `store.find(modelName, findArguments)`
  itemtype: method
  name: store
  params:
  - name: store
    description: ''
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 926
  description: |-
    A hook you can implement to convert the route's model into parameters
    for the URL.

    ```js
    App.Router.map(function() {
      this.resource('post', {path: '/posts/:post_id'});
    });

    App.PostRoute = Ember.Route.extend({
      model: function(params) {
        // the server returns `{ id: 12 }`
        return jQuery.getJSON("/posts/" + params.post_id);
      },

      serialize: function(model) {
        // this will make the URL `/posts/12`
        return { post_id: model.id };
      }
    });
    ```

    The default `serialize` method will insert the model's `id` into the
    route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
    If the route has multiple dynamic segments or does not contain '_id', `serialize`
    will return `Ember.getProperties(model, params)`

    This method is called when `transitionTo` is called with a context
    in order to populate the URL.
  itemtype: method
  name: serialize
  params:
  - name: model
    description: the route's model
    type: Object
  - name: params
    description: |-
      an Array of parameter names for the current
        route (in the example, `['post_id']`.
    type: Array
  return:
    description: the serialized parameters
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 977
  description: |-
    A hook you can use to setup the controller for the current route.

    This method is called with the controller for the current route and the
    model supplied by the `model` hook.

    By default, the `setupController` hook sets the `content` property of
    the controller to the `model`.

    This means that your template will get a proxy for the model as its
    context, and you can act as though the model itself was the context.

    The provided controller will be one resolved based on the name
    of this route.

    If no explicit controller is defined, Ember will automatically create
    an appropriate controller for the model.

    * if the model is an `Ember.Array` (including record arrays from Ember
      Data), the controller is an `Ember.ArrayController`.
    * otherwise, the controller is an `Ember.ObjectController`.

    As an example, consider the router:

    ```js
    App.Router.map(function() {
      this.resource('post', {path: '/posts/:post_id'});
    });
    ```

    For the `post` route, a controller named `App.PostController` would
    be used if it is defined. If it is not defined, an `Ember.ObjectController`
    instance would be used.

    Example

    ```js
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, model) {
        controller.set('model', model);
      }
    });
    ```
  itemtype: method
  name: setupController
  params:
  - name: controller
    description: instance
    type: Controller
  - name: model
    description: ''
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1031
  description: |-
    Returns the controller for a particular route or name.

    The controller instance must already have been created, either through entering the
    associated route or using `generateController`.

    ```js
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, post) {
        this._super(controller, post);
        this.controllerFor('posts').set('currentPost', post);
      }
    });
    ```
  itemtype: method
  name: controllerFor
  params:
  - name: name
    description: the name of the route or controller
    type: String
  return:
    description: ''
    type: Ember.Controller
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1073
  description: |-
    Generates a controller for a route.

    If the optional model is passed then the controller type is determined automatically,
    e.g., an ArrayController for arrays.

    Example

    ```js
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, post) {
        this._super(controller, post);
        this.generateController('posts', post);
      }
    });
    ```
  itemtype: method
  name: generateController
  params:
  - name: name
    description: the name of the controller
    type: String
  - name: model
    description: the model to infer the type of the controller (optional)
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1102
  description: |-
    Returns the model of a parent (or any ancestor) route
    in a route hierarchy.  During a transition, all routes
    must resolve a model object, and if a route
    needs access to a parent route's model in order to
    resolve a model (or just reuse the model from a parent),
    it can call `this.modelFor(theNameOfParentRoute)` to
    retrieve it.

    Example

    ```js
    App.Router.map(function() {
        this.resource('post', { path: '/post/:post_id' }, function() {
            this.resource('comments');
        });
    });

    App.CommentsRoute = Ember.Route.extend({
        afterModel: function() {
            this.set('post', this.modelFor('post'));
        }
    });
    ```
  itemtype: method
  name: modelFor
  params:
  - name: name
    description: the name of the route
    type: String
  return:
    description: the model object
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1148
  description: |-
    A hook you can use to render the template for the current route.

    This method is called with the controller for the current route and the
    model supplied by the `model` hook. By default, it renders the route's
    template, configured with the controller for the route.

    This method can be overridden to set up and render additional or
    alternative templates.

    ```js
    App.PostsRoute = Ember.Route.extend({
      renderTemplate: function(controller, model) {
        var favController = this.controllerFor('favoritePost');

        // Render the `favoritePost` template into
        // the outlet `posts`, and display the `favoritePost`
        // controller.
        this.render('favoritePost', {
          outlet: 'posts',
          controller: favController
        });
      }
    });
    ```
  itemtype: method
  name: renderTemplate
  params:
  - name: controller
    description: the route's controller
    type: Object
  - name: model
    description: the route's model
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1182
  description: |-
    Renders a template into an outlet.

    This method has a number of defaults, based on the name of the
    route specified in the router.

    For example:

    ```js
    App.Router.map(function() {
      this.route('index');
      this.resource('post', {path: '/posts/:post_id'});
    });

    App.PostRoute = App.Route.extend({
      renderTemplate: function() {
        this.render();
      }
    });
    ```

    The name of the `PostRoute`, as defined by the router, is `post`.

    By default, render will:

    * render the `post` template
    * with the `post` view (`PostView`) for event handling, if one exists
    * and the `post` controller (`PostController`), if one exists
    * into the `main` outlet of the `application` template

    You can override this behavior:

    ```js
    App.PostRoute = App.Route.extend({
      renderTemplate: function() {
        this.render('myPost', {   // the template to render
          into: 'index',          // the template to render into
          outlet: 'detail',       // the name of the outlet in that template
          controller: 'blogPost'  // the controller to use for the template
        });
      }
    });
    ```

    Remember that the controller's `content` will be the route's model. In
    this case, the default model will be `App.Post.find(params.post_id)`.
  itemtype: method
  name: render
  params:
  - name: name
    description: the name of the template to render
    type: String
  - name: options
    description: the options
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1281
  description: |-
    Disconnects a view that has been rendered into an outlet.

    You may pass any or all of the following options to `disconnectOutlet`:

    * `outlet`: the name of the outlet to clear (default: 'main')
    * `parentView`: the name of the view containing the outlet to clear
       (default: the view rendered by the parent route)

    Example:

    ```js
    App.ApplicationRoute = App.Route.extend({
      actions: {
        showModal: function(evt) {
          this.render(evt.modalName, {
            outlet: 'modal',
            into: 'application'
          });
        },
        hideModal: function(evt) {
          this.disconnectOutlet({
            outlet: 'modal',
            parentView: 'application'
          });
        }
      }
    });
    ```
  itemtype: method
  name: disconnectOutlet
  params:
  - name: options
    description: the options
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/route.js"
  line: 1327
  access: private
  tagname: ''
  itemtype: method
  name: teardownViews
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 27
  description: |-
    The `location` property determines the type of URL's that your
    application will use.

    The following location types are currently available:

    * `hash`
    * `history`
    * `none`
  itemtype: property
  name: location
  default: "'hash'"
  see:
  - "{Ember.Location}"
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 53
  description: Represents the current URL.
  itemtype: method
  name: url
  return:
    description: The current URL.
    type: String
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 63
  description: |-
    Initializes the current router instance and sets up the change handling
    event listeners used by the instances `location` implementation.

    A property named `initialURL` will be used to determine the initial URL.
    If no value is found `/` will be used.
  itemtype: method
  name: startRouting
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 98
  description: |-
    Handles updating the paths and notifying any listeners of the URL
    change.

    Triggers the router level `didTransition` hook.
  itemtype: method
  name: didTransition
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 151
  description: Determines if the supplied route is currently active.
  itemtype: method
  name: isActive
  params:
  - name: routeName
    description: ''
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 168
  description: Does this router instance have the given route.
  itemtype: method
  name: hasRoute
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 179
  description: |-
    Resets the state of the router by clearing the current route
    handlers and deactivating them.
  access: private
  tagname: ''
  itemtype: method
  name: reset
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 409
  access: private
  tagname: |-
    Utility function for fetching all the current query params
    values from a controller.
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 433
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-routing/lib/system/router.js"
  line: 465
  description: |-
    Helper function for iterating root-ward, starting
    from (but not including) the provided `originRoute`.

    Returns true if the last callback fired requested
    to bubble upward.
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: "../packages/ember-runtime/lib/computed/array_computed.js"
  line: 49
  description: |-
    Creates a computed property which operates on dependent arrays and
    is updated with "one at a time" semantics. When items are added or
    removed from the dependent array(s) an array computed only operates
    on the change instead of re-evaluating the entire array. This should
    return an array, if you'd like to use "one at a time" semantics and
    compute some value other then an array look at
    `Ember.reduceComputed`.

    If there are more than one arguments the first arguments are
    considered to be dependent property keys. The last argument is
    required to be an options object. The options object can have the
    following three properties.

    `initialize` - An optional initialize function. Typically this will be used
    to set up state on the instanceMeta object.

    `removedItem` - A function that is called each time an element is
    removed from the array.

    `addedItem` - A function that is called each time an element is
    added to the array.


    The `initialize` function has the following signature:

    ```javascript
     function (array, changeMeta, instanceMeta)
    ```

    `array` - The initial value of the arrayComputed, an empty array.

    `changeMeta` - An object which contains meta information about the
    computed. It contains the following properties:

       - `property` the computed property
       - `propertyName` the name of the property on the object

    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.


    The `removedItem` and `addedItem` functions both have the following signature:

    ```javascript
    function (accumulatedValue, item, changeMeta, instanceMeta)
    ```

    `accumulatedValue` - The value returned from the last time
    `removedItem` or `addedItem` was called or an empty array.

    `item` - the element added or removed from the array

    `changeMeta` - An object which contains meta information about the
    change. It contains the following properties:

      - `property` the computed property
      - `propertyName` the name of the property on the object
      - `index` the index of the added or removed item
      - `item` the added or removed item: this is exactly the same as
        the second arg
      - `arrayChanged` the array that triggered the change. Can be
        useful when depending on multiple arrays.

    For property changes triggered on an item property change (when
    depKey is something like `someArray.@each.someProperty`),
    `changeMeta` will also contain the following property:

      - `previousValues` an object whose keys are the properties that changed on
      the item, and whose values are the item's previous values.

    `previousValues` is important Ember coalesces item property changes via
    Ember.run.once. This means that by the time removedItem gets called, item has
    the new values, but you may need the previous value (eg for sorting &
    filtering).

    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.

    The `removedItem` and `addedItem` functions should return the accumulated
    value. It is acceptable to not return anything (ie return undefined)
    to invalidate the computation. This is generally not a good idea for
    arrayComputed but it's used in eg max and min.

    Example

    ```javascript
    Ember.computed.map = function(dependentKey, callback) {
      var options = {
        addedItem: function(array, item, changeMeta, instanceMeta) {
          var mapped = callback(item);
          array.insertAt(changeMeta.index, mapped);
          return array;
        },
        removedItem: function(array, item, changeMeta, instanceMeta) {
          array.removeAt(changeMeta.index, 1);
          return array;
        }
      };

      return Ember.arrayComputed(dependentKey, options);
    };
    ```
  itemtype: method
  name: arrayComputed
  params:
  - name: dependentKeys*
    description: ''
    type: String
    optional: true
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.ComputedProperty
  class: Ember
  module: ember
- file: "../packages/ember-runtime/lib/computed/reduce_computed.js"
  line: 626
  description: |-
    Creates a computed property which operates on dependent arrays and
    is updated with "one at a time" semantics. When items are added or
    removed from the dependent array(s) a reduce computed only operates
    on the change instead of re-evaluating the entire array.

    If there are more than one arguments the first arguments are
    considered to be dependent property keys. The last argument is
    required to be an options object. The options object can have the
    following four properties:

    `initialValue` - A value or function that will be used as the initial
    value for the computed. If this property is a function the result of calling
    the function will be used as the initial value. This property is required.

    `initialize` - An optional initialize function. Typically this will be used
    to set up state on the instanceMeta object.

    `removedItem` - A function that is called each time an element is removed
    from the array.

    `addedItem` - A function that is called each time an element is added to
    the array.


    The `initialize` function has the following signature:

    ```javascript
     function (initialValue, changeMeta, instanceMeta)
    ```

    `initialValue` - The value of the `initialValue` property from the
    options object.

    `changeMeta` - An object which contains meta information about the
    computed. It contains the following properties:

       - `property` the computed property
       - `propertyName` the name of the property on the object

    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.


    The `removedItem` and `addedItem` functions both have the following signature:

    ```javascript
    function (accumulatedValue, item, changeMeta, instanceMeta)
    ```

    `accumulatedValue` - The value returned from the last time
    `removedItem` or `addedItem` was called or `initialValue`.

    `item` - the element added or removed from the array

    `changeMeta` - An object which contains meta information about the
    change. It contains the following properties:

      - `property` the computed property
      - `propertyName` the name of the property on the object
      - `index` the index of the added or removed item
      - `item` the added or removed item: this is exactly the same as
        the second arg
      - `arrayChanged` the array that triggered the change. Can be
        useful when depending on multiple arrays.

    For property changes triggered on an item property change (when
    depKey is something like `someArray.@each.someProperty`),
    `changeMeta` will also contain the following property:

      - `previousValues` an object whose keys are the properties that changed on
      the item, and whose values are the item's previous values.

    `previousValues` is important Ember coalesces item property changes via
    Ember.run.once. This means that by the time removedItem gets called, item has
    the new values, but you may need the previous value (eg for sorting &
    filtering).

    `instanceMeta` - An object that can be used to store meta
    information needed for calculating your computed. For example a
    unique computed might use this to store the number of times a given
    element is found in the dependent array.

    The `removedItem` and `addedItem` functions should return the accumulated
    value. It is acceptable to not return anything (ie return undefined)
    to invalidate the computation. This is generally not a good idea for
    arrayComputed but it's used in eg max and min.

    Note that observers will be fired if either of these functions return a value
    that differs from the accumulated value.  When returning an object that
    mutates in response to array changes, for example an array that maps
    everything from some other array (see `Ember.computed.map`), it is usually
    important that the *same* array be returned to avoid accidentally triggering observers.

    Example

    ```javascript
    Ember.computed.max = function (dependentKey) {
      return Ember.reduceComputed(dependentKey, {
        initialValue: -Infinity,

        addedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
          return Math.max(accumulatedValue, item);
        },

        removedItem: function (accumulatedValue, item, changeMeta, instanceMeta) {
          if (item < accumulatedValue) {
            return accumulatedValue;
          }
        }
      });
    };
    ```

    Dependent keys may refer to `@this` to observe changes to the object itself,
    which must be array-like, rather than a property of the object.  This is
    mostly useful for array proxies, to ensure objects are retrieved via
    `objectAtContent`.  This is how you could sort items by properties defined on an item controller.

    Example

    ```javascript
    App.PeopleController = Ember.ArrayController.extend({
      itemController: 'person',

      sortedPeople: Ember.computed.sort('@this.@each.reversedName', function(personA, personB) {
        // `reversedName` isn't defined on Person, but we have access to it via
        // the item controller App.PersonController.  If we'd used
        // `content.@each.reversedName` above, we would be getting the objects
        // directly and not have access to `reversedName`.
        //
        var reversedNameA = get(personA, 'reversedName'),
            reversedNameB = get(personB, 'reversedName');

        return Ember.compare(reversedNameA, reversedNameB);
      })
    });

    App.PersonController = Ember.ObjectController.extend({
      reversedName: function () {
        return reverse(get(this, 'name'));
      }.property('name')
    })
    ```

    Dependent keys whose values are not arrays are treated as regular
    dependencies: when they change, the computed property is completely
    recalculated.  It is sometimes useful to have dependent arrays with similar
    semantics.  Dependent keys which end in `.[]` do not use "one at a time"
    semantics.  When an item is added or removed from such a dependency, the
    computed property is completely recomputed.

    Example

    ```javascript
    Ember.Object.extend({
      // When `string` is changed, `computed` is completely recomputed.
      string: 'a string',

      // When an item is added to `array`, `addedItem` is called.
      array: [],

      // When an item is added to `anotherArray`, `computed` is completely
      // recomputed.
      anotherArray: [],

      computed: Ember.reduceComputed('string', 'array', 'anotherArray.[]', {
        addedItem: addedItemCallback,
        removedItem: removedItemCallback
      })
    });
    ```
  itemtype: method
  name: reduceComputed
  params:
  - name: dependentKeys*
    description: ''
    type: String
    optional: true
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.ComputedProperty
  class: Ember
  module: ember
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 20
  description: |-
    A computed property that returns the sum of the value
    in the dependent array.
  itemtype: method
  name: computed.sum
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the sum of all values in the dependentKey's array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 44
  description: |-
    A computed property that calculates the maximum value in the
    dependent array. This will return `-Infinity` when the dependent
    array is empty.

    ```javascript
    App.Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      maxChildAge: Ember.computed.max('childAges')
    });

    var lordByron = App.Person.create({children: []});
    lordByron.get('maxChildAge'); // -Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('maxChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('maxChildAge'); // 8
    ```
  itemtype: method
  name: computed.max
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the largest value in the dependentKey's array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 92
  description: |-
    A computed property that calculates the minimum value in the
    dependent array. This will return `Infinity` when the dependent
    array is empty.

    ```javascript
    App.Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      minChildAge: Ember.computed.min('childAges')
    });

    var lordByron = App.Person.create({children: []});
    lordByron.get('minChildAge'); // Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('minChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('minChildAge'); // 5
    ```
  itemtype: method
  name: computed.min
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the smallest value in the dependentKey's array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 140
  description: |-
    Returns an array mapped via the callback

    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.

    ```javascript
    function(item);
    ```

    Example

    ```javascript
    App.Hamster = Ember.Object.extend({
      excitingChores: Ember.computed.map('chores', function(chore) {
        return chore.toUpperCase() + '!';
      })
    });

    var hamster = App.Hamster.create({
      chores: ['clean', 'write more unit tests']
    });
    hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']
    ```
  itemtype: method
  name: computed.map
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: an array mapped via the callback
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 187
  description: |-
    Returns an array mapped to the specified key.

    ```javascript
    App.Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age')
    });

    var lordByron = App.Person.create({children: []});
    lordByron.get('childAges'); // []
    lordByron.get('children').pushObject({name: 'Augusta Ada Byron', age: 7});
    lordByron.get('childAges'); // [7]
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('childAges'); // [7, 5, 8]
    ```
  itemtype: method
  name: computed.mapBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  return:
    description: an array mapped to the specified key
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 220
  itemtype: method
  name: computed.mapProperty
  deprecated: true
  deprecationMessage: Use `Ember.computed.mapBy` instead
  params:
  - name: dependentKey
    description: ''
  - name: propertyKey
    description: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 229
  description: |-
    Filters the array by the callback.

    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.

    ```javascript
    function(item);
    ```

    ```javascript
    App.Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filter('chores', function(chore) {
        return !chore.done;
      })
    });

    var hamster = App.Hamster.create({chores: [
      {name: 'cook', done: true},
      {name: 'clean', done: true},
      {name: 'write more unit tests', done: false}
    ]});
    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    ```
  itemtype: method
  name: computed.filter
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 291
  description: |-
    Filters the array by the property and value

    ```javascript
    App.Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filterBy('chores', 'done', false)
    });

    var hamster = App.Hamster.create({chores: [
      {name: 'cook', done: true},
      {name: 'clean', done: true},
      {name: 'write more unit tests', done: false}
    ]});
    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    ```
  itemtype: method
  name: computed.filterBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  - name: value
    description: ''
    type: String
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 330
  itemtype: method
  name: computed.filterProperty
  params:
  - name: dependentKey
    description: ''
  - name: propertyKey
    description: ''
  - name: value
    description: ''
  deprecated: true
  deprecationMessage: Use `Ember.computed.filterBy` instead
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 340
  description: |-
    A computed property which returns a new array with all the unique
    elements from one or more dependent arrays.

    Example

    ```javascript
    App.Hamster = Ember.Object.extend({
      uniqueFruits: Ember.computed.uniq('fruits')
    });

    var hamster = App.Hamster.create({fruits: [
      'banana',
      'grape',
      'kale',
      'banana'
    ]});
    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']
    ```
  itemtype: method
  name: computed.uniq
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      unique elements from the dependent array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 397
  description: Alias for [Ember.computed.uniq](/api/#method_computed_uniq).
  itemtype: method
  name: computed.union
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      unique elements from the dependent array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 408
  description: |-
    A computed property which returns a new array with all the duplicated
    elements from two or more dependent arrays.

    Example

    ```javascript
    var obj = Ember.Object.createWithMixins({
      adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock'],
      friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')
    });

    obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']
    ```
  itemtype: method
  name: computed.intersect
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      duplicated elements from the dependent arrays
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 484
  description: |-
    A computed property which returns a new array with all the
    properties from the first dependent array that are not in the second
    dependent array.

    Example

    ```javascript
    App.Hamster = Ember.Object.extend({
      likes: ['banana', 'grape', 'kale'],
      wants: Ember.computed.setDiff('likes', 'fruits')
    });

    var hamster = App.Hamster.create({fruits: [
      'grape',
      'kale',
    ]});
    hamster.get('wants'); // ['banana']
    ```
  itemtype: method
  name: computed.setDiff
  params:
  - name: setAProperty
    description: ''
    type: String
  - name: setBProperty
    description: ''
    type: String
  return:
    description: |-
      computes a new array with all the
      items from the first dependent array that are not in the second
      dependent array
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/computed/reduce_computed_macros.js"
  line: 592
  description: |-
    A computed property which returns a new array with all the
    properties from the first dependent array sorted based on a property
    or sort function.

    The callback method you provide should have the following signature:

    ```javascript
    function(itemA, itemB);
    ```

    - `itemA` the first item to compare.
    - `itemB` the second item to compare.

    This function should return `-1` when `itemA` should come before
    `itemB`. It should return `1` when `itemA` should come after
    `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.

    Example

    ```javascript
    var ToDoList = Ember.Object.extend({
      todosSorting: ['name'],
      sortedTodos: Ember.computed.sort('todos', 'todosSorting'),
      priorityTodos: Ember.computed.sort('todos', function(a, b){
        if (a.priority > b.priority) {
          return 1;
        } else if (a.priority < b.priority) {
          return -1;
        }
        return 0;
      }),
    });
    var todoList = ToDoList.create({todos: [
      {name: 'Unit Test', priority: 2},
      {name: 'Documentation', priority: 3},
      {name: 'Release', priority: 1}
    ]});

    todoList.get('sortedTodos'); // [{name:'Documentation', priority:3}, {name:'Release', priority:1}, {name:'Unit Test', priority:2}]
    todoList.get('priorityTodos'); // [{name:'Release', priority:1}, {name:'Unit Test', priority:2}, {name:'Documentation', priority:3}]
    ```
  itemtype: method
  name: computed.sort
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: sortDefinition
    description: |-
      a dependent key to an
      array of sort properties or a function to use when sorting
    type: String or Function
  return:
    description: |-
      computes a new sorted array based
      on the sort property array or callback function
    type: Ember.ComputedProperty
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/controllers/array_controller.js"
  line: 103
  description: The controller used to wrap items, if any.
  itemtype: property
  name: itemController
  type: String
  default: 'null'
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/controllers/array_controller.js"
  line: 112
  description: |-
    Return the name of the controller to wrap items, or `null` if items should
    be returned directly.  The default implementation simply returns the
    `itemController` property, but subclasses can override this method to return
    different controllers for different objects.

    For example:

    ```javascript
    App.MyArrayController = Ember.ArrayController.extend({
      lookupItemController: function( object ) {
        if (object.get('isSpecial')) {
          return "special"; // use App.SpecialController
        } else {
          return "regular"; // use App.RegularController
        }
      }
    });
    ```
  itemtype: method
  name: lookupItemController
  params:
  - name: object
    description: ''
    type: Object
  return:
    description: ''
    type: String
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/controllers/array_controller.js"
  line: 192
  description: |-
    Flag to mark as being "virtual". Used to keep this instance
    from participating in the parentController hierarchy.
  access: private
  tagname: ''
  type: Boolean
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/controllers/controller.js"
  line: 24
  description: |-
    The object to which actions from the view should be sent.

    For example, when a Handlebars template uses the `{{action}}` helper,
    it will attempt to send the action to the view's controller's `target`.

    By default, a controller's `target` is set to the router after it is
    instantiated by `Ember.Application#initialize`.
  itemtype: property
  name: target
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/ext/function.js"
  line: 15
  description: |-
    The `property` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    `true`, which is the default.

    Computed properties allow you to treat a function like a property:

    ```javascript
    MyApp.President = Ember.Object.extend({
      firstName: '',
      lastName:  '',

      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');

        // Call this flag to mark the function as a property
      }.property()
    });

    var president = MyApp.President.create({
      firstName: "Barack",
      lastName: "Obama"
    });

    president.get('fullName');    // "Barack Obama"
    ```

    Treating a function like a property is useful because they can work with
    bindings, just like any other property.

    Many computed properties have dependencies on other properties. For
    example, in the above example, the `fullName` property depends on
    `firstName` and `lastName` to determine its value. You can tell Ember
    about these dependencies like this:

    ```javascript
    MyApp.President = Ember.Object.extend({
      firstName: '',
      lastName:  '',

      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');

        // Tell Ember.js that this computed property depends on firstName
        // and lastName
      }.property('firstName', 'lastName')
    });
    ```

    Make sure you list these dependencies so Ember knows when to update
    bindings that connect to a computed property. Changing a dependency
    will not immediately trigger an update of the computed property, but
    will instead clear the cache so that it is updated when the next `get`
    is called on the property.

    See [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).
  itemtype: method
  name: property
  class: Function
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/function.js"
  line: 82
  description: |-
    The `observes` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    true, which is the default.

    You can observe property changes simply by adding the `observes`
    call to the end of your method declarations in classes that you write.
    For example:

    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes whenever the "value" property changes
      }.observes('value')
    });
    ```

    In the future this method may become asynchronous. If you want to ensure
    synchronous behavior, use `observesImmediately`.

    See `Ember.observer`.
  itemtype: method
  name: observes
  class: Function
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/function.js"
  line: 120
  description: |-
    The `observesImmediately` extension of Javascript's Function prototype is
    available when `Ember.EXTEND_PROTOTYPES` or
    `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.

    You can observe property changes simply by adding the `observesImmediately`
    call to the end of your method declarations in classes that you write.
    For example:

    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes immediately after the "value" property changes
      }.observesImmediately('value')
    });
    ```

    In the future, `observes` may become asynchronous. In this event,
    `observesImmediately` will maintain the synchronous behavior.

    See `Ember.immediateObserver`.
  itemtype: method
  name: observesImmediately
  class: Function
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/function.js"
  line: 155
  description: |-
    The `observesBefore` extension of Javascript's Function prototype is
    available when `Ember.EXTEND_PROTOTYPES` or
    `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.

    You can get notified when a property change is about to happen by
    by adding the `observesBefore` call to the end of your method
    declarations in classes that you write. For example:

    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes whenever the "value" property is about to change
      }.observesBefore('value')
    });
    ```

    See `Ember.beforeObserver`.
  itemtype: method
  name: observesBefore
  class: Function
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/function.js"
  line: 190
  description: |-
    The `on` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    true, which is the default.

    You can listen for events simply by adding the `on` call to the end of
    your method declarations in classes or mixins that you write. For example:

    ```javascript
    Ember.Mixin.create({
      doSomethingWithElement: function() {
        // Executes whenever the "didInsertElement" event fires
      }.on('didInsertElement')
    });
    ```

    See `Ember.on`.
  itemtype: method
  name: 'on'
  class: Function
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 27
  description: See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).
  itemtype: method
  name: fmt
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 37
  description: See [Ember.String.w](/api/classes/Ember.String.html#method_w).
  itemtype: method
  name: w
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 47
  description: See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).
  itemtype: method
  name: loc
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 57
  description: See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).
  itemtype: method
  name: camelize
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 67
  description: See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).
  itemtype: method
  name: decamelize
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 77
  description: See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).
  itemtype: method
  name: dasherize
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 87
  description: See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).
  itemtype: method
  name: underscore
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 97
  description: See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).
  itemtype: method
  name: classify
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 107
  description: See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).
  itemtype: method
  name: capitalize
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/ext/string.js"
  line: 118
  description: See [Ember.String.parameterize](/api/classes/Ember.String.html#method_parameterize).
  itemtype: method
  name: parameterize
  class: String
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/action_handler.js"
  line: 22
  description: |-
    The collection of functions, keyed by name, available on this
    `ActionHandler` as action targets.

    These functions will be invoked when a matching `{{action}}` is triggered
    from within a template and the application's current route is this route.

    Actions can also be invoked from other parts of your application
    via `ActionHandler#send`.

    The `actions` hash will inherit action handlers from
    the `actions` hash defined on extended parent classes
    or mixins rather than just replace the entire hash, e.g.:

    ```js
    App.CanDisplayBanner = Ember.Mixin.create({
      actions: {
        displayBanner: function(msg) {
          // ...
        }
      }
    });

    App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {
      actions: {
        playMusic: function() {
          // ...
        }
      }
    });

    // `WelcomeRoute`, when active, will be able to respond
    // to both actions, since the actions hash is merged rather
    // then replaced when extending mixins / parent classes.
    this.send('displayBanner');
    this.send('playMusic');
    ```

    Within a Controller, Route, View or Component's action handler,
    the value of the `this` context is the Controller, Route, View or
    Component object:

    ```js
    App.SongRoute = Ember.Route.extend({
      actions: {
        myAction: function() {
          this.controllerFor("song");
          this.transitionTo("other.route");
          ...
        }
      }
    });
    ```

    It is also possible to call `this._super()` from within an
    action handler if it overrides a handler defined on a parent
    class or mixin:

    Take for example the following routes:

    ```js
    App.DebugRoute = Ember.Mixin.create({
      actions: {
        debugRouteInformation: function() {
          console.debug("trololo");
        }
      }
    });

    App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {
      actions: {
        debugRouteInformation: function() {
          // also call the debugRouteInformation of mixed in App.DebugRoute
          this._super();

          // show additional annoyance
          window.alert(...);
        }
      }
    });
    ```

    ## Bubbling

    By default, an action will stop bubbling once a handler defined
    on the `actions` hash handles it. To continue bubbling the action,
    you must return `true` from the handler:

    ```js
    App.Router.map(function() {
      this.resource("album", function() {
        this.route("song");
      });
    });

    App.AlbumRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
        }
      }
    });

    App.AlbumSongRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
          // ...

          if (actionShouldAlsoBeTriggeredOnParentRoute) {
            return true;
          }
        }
      }
    });
    ```
  itemtype: property
  name: actions
  type: Hash
  default: 'null'
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/action_handler.js"
  line: 142
  description: |-
    Moves `actions` to `_actions` at extend time. Note that this currently
    modifies the mixin themselves, which is technically dubious but
    is practically of little consequence. This may change in the future.
  access: private
  tagname: ''
  itemtype: method
  name: willMergeMixin
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/action_handler.js"
  line: 171
  description: |-
    Triggers a named action on the `ActionHandler`. Any parameters
    supplied after the `actionName` string will be passed as arguments
    to the action target function.

    If the `ActionHandler` has its `target` property set, actions may
    bubble to the `target`. Bubbling happens when an `actionName` can
    not be found in the `ActionHandler`'s `actions` hash or if the
    action target function returns `true`.

    Example

    ```js
    App.WelcomeRoute = Ember.Route.extend({
      actions: {
        playTheme: function() {
           this.send('playMusic', 'theme.mp3');
        },
        playMusic: function(track) {
          // ...
        }
      }
    });
    ```
  itemtype: method
  name: send
  params:
  - name: actionName
    description: The action to trigger
    type: String
  - name: context
    description: a context to send with the action
    type: "*"
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 51
  description: |-
    Your array must support the `length` property. Your replace methods should
    set this property whenever it changes.
  itemtype: property
  name: length
  type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 59
  description: |-
    Returns the object at the given `index`. If the given `index` is negative
    or is greater or equal than the array length, returns `undefined`.

    This is one of the primitives you must implement to support `Ember.Array`.
    If your object supports retrieving the value of an array item using `get()`
    (i.e. `myArray.get(0)`), then you do not need to implement this method
    yourself.

    ```javascript
    var arr = ['a', 'b', 'c', 'd'];
    arr.objectAt(0);   // "a"
    arr.objectAt(3);   // "d"
    arr.objectAt(-1);  // undefined
    arr.objectAt(4);   // undefined
    arr.objectAt(5);   // undefined
    ```
  itemtype: method
  name: objectAt
  params:
  - name: idx
    description: The index of the item to return.
    type: Number
  return:
    description: item at index or undefined
    type: "*"
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 86
  description: |-
    This returns the objects at the specified indexes, using `objectAt`.

    ```javascript
    var arr = ['a', 'b', 'c', 'd'];
    arr.objectsAt([0, 1, 2]);  // ["a", "b", "c"]
    arr.objectsAt([2, 3, 4]);  // ["c", "d", undefined]
    ```
  itemtype: method
  name: objectsAt
  params:
  - name: indexes
    description: An array of indexes of items to return.
    type: Array
  return:
    description: ''
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 109
  description: |-
    This is the handler for the special array content property. If you get
    this property, it will return this. If you set this property it a new
    array, it will replace the current content.

    This property overrides the default property defined in `Ember.Enumerable`.
  itemtype: property
  name: "[]"
  return:
    description: this
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 138
  description: |-
    Returns a new array that is a slice of the receiver. This implementation
    uses the observable array methods to retrieve the objects for the new
    slice.

    ```javascript
    var arr = ['red', 'green', 'blue'];
    arr.slice(0);       // ['red', 'green', 'blue']
    arr.slice(0, 2);    // ['red', 'green']
    arr.slice(1, 100);  // ['green', 'blue']
    ```
  itemtype: method
  name: slice
  params:
  - name: beginIndex
    description: "(Optional) index to begin slicing from."
    type: Integer
  - name: endIndex
    description: "(Optional) index to end the slice at (but not included)."
    type: Integer
  return:
    description: New array with specified slice
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 170
  description: |-
    Returns the index of the given object's first occurrence.
    If no `startAt` argument is given, the starting location to
    search is 0. If it's negative, will count backward from
    the end of the array. Returns -1 if no match is found.

    ```javascript
    var arr = ["a", "b", "c", "d", "a"];
    arr.indexOf("a");       //  0
    arr.indexOf("z");       // -1
    arr.indexOf("a", 2);    //  4
    arr.indexOf("a", -1);   //  4
    arr.indexOf("b", 3);    // -1
    arr.indexOf("a", 100);  // -1
    ```
  itemtype: method
  name: indexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 203
  description: |-
    Returns the index of the given object's last occurrence.
    If no `startAt` argument is given, the search starts from
    the last position. If it's negative, will count backward
    from the end of the array. Returns -1 if no match is found.

    ```javascript
    var arr = ["a", "b", "c", "d", "a"];
    arr.lastIndexOf("a");       //  4
    arr.lastIndexOf("z");       // -1
    arr.lastIndexOf("a", 2);    //  0
    arr.lastIndexOf("a", -1);   //  4
    arr.lastIndexOf("b", 3);    //  1
    arr.lastIndexOf("a", 100);  //  4
    ```
  itemtype: method
  name: lastIndexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 240
  description: |-
    Adds an array observer to the receiving array. The array observer object
    normally must implement two methods:

    * `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be
      called just before the array is modified.
    * `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be
      called just after the array is modified.

    Both callbacks will be passed the observed object, starting index of the
    change as well a a count of the items to be removed and added. You can use
    these callbacks to optionally inspect the array during the change, clear
    caches, or do any other bookkeeping necessary.

    In addition to passing a target, you can also include an options hash
    which you can use to override the method names that will be invoked on the
    target.
  itemtype: method
  name: addArrayObserver
  params:
  - name: target
    description: The observer object.
    type: Object
  - name: opts
    description: |-
      Optional hash of configuration options including
        `willChange` and `didChange` option.
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 276
  description: |-
    Removes an array observer from the object if the observer is current
    registered. Calling this method multiple times with the same object will
    have no effect.
  itemtype: method
  name: removeArrayObserver
  params:
  - name: target
    description: The object observing the array.
    type: Object
  - name: opts
    description: |-
      Optional hash of configuration options including
        `willChange` and `didChange` option.
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 299
  description: |-
    Becomes true whenever the array currently has observers watching changes
    on the array.
  itemtype: property
  name: hasArrayObservers
  type: Boolean
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 309
  description: |-
    If you are implementing an object that supports `Ember.Array`, call this
    method just before the array content changes to notify any observers and
    invalidate any related properties. Pass the starting index of the change
    as well as a delta of the amounts to change.
  itemtype: method
  name: arrayContentWillChange
  params:
  - name: startIdx
    description: The starting index in the array that will change.
    type: Number
  - name: removeAmt
    description: |-
      The number of items that will be removed. If you
        pass `null` assumes 0
    type: Number
  - name: addAmt
    description: |-
      The number of items that will be added. If you
        pass `null` assumes 0.
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 353
  description: |-
    If you are implementing an object that supports `Ember.Array`, call this
    method just after the array content changes to notify any observers and
    invalidate any related properties. Pass the starting index of the change
    as well as a delta of the amounts to change.
  itemtype: method
  name: arrayContentDidChange
  params:
  - name: startIdx
    description: The starting index in the array that did change.
    type: Number
  - name: removeAmt
    description: |-
      The number of items that were removed. If you
        pass `null` assumes 0
    type: Number
  - name: addAmt
    description: |-
      The number of items that were added. If you
        pass `null` assumes 0.
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/array.js"
  line: 409
  description: |-
    Returns a special object that can be used to observe individual properties
    on the array. Just get an equivalent property on this object and it will
    return an enumerable that maps automatically to the named key on the
    member objects.

    If you merely want to watch for any items being added or removed to the array,
    use the `[]` property instead of `@each`.
  itemtype: property
  name: "@each"
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/comparable.js"
  line: 21
  description: |-
    Override to return the result of the comparison of the two parameters. The
    compare method should return:

    - `-1` if `a < b`
    - `0` if `a == b`
    - `1` if `a > b`

    Default implementation raises an exception.
  itemtype: method
  name: compare
  params:
  - name: a
    description: the first object to compare
    type: Object
  - name: b
    description: the second object to compare
    type: Object
  return:
    description: the result of the comparison
    type: Integer
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/copyable.js"
  line: 29
  description: |-
    Override to return a copy of the receiver. Default implementation raises
    an exception.
  itemtype: method
  name: copy
  params:
  - name: deep
    description: if `true`, a deep copy of the object should be made
    type: Boolean
  return:
    description: copy of receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/copyable.js"
  line: 39
  description: |-
    If the object implements `Ember.Freezable`, then this will return a new
    copy if the object is not frozen and the receiver if the object is frozen.

    Raises an exception if you try to call this method on a object that does
    not support freezing.

    You should use this method whenever you want a copy of a freezable object
    since a freezable object can simply return itself without actually
    consuming more memory.
  itemtype: method
  name: frozenCopy
  return:
    description: copy of receiver or receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/deferred.js"
  line: 24
  description: Add handlers to be called when the Deferred object is resolved or rejected.
  itemtype: method
  name: then
  params:
  - name: resolve
    description: a callback function to be called when done
    type: Function
  - name: reject
    description: a callback function to be called when failed
    type: Function
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/deferred.js"
  line: 49
  description: Resolve a Deferred object and call any `doneCallbacks` with the given
    args.
  itemtype: method
  name: resolve
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/deferred.js"
  line: 67
  description: Reject a Deferred object and call any `failCallbacks` with the given
    args.
  itemtype: method
  name: reject
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 74
  description: |-
    Implement this method to make your class enumerable.

    This method will be call repeatedly during enumeration. The index value
    will always begin with 0 and increment monotonically. You don't have to
    rely on the index value to determine what object to return, but you should
    always check the value and start from the beginning when you see the
    requested index is 0.

    The `previousObject` is the object that was returned from the last call
    to `nextObject` for the current iteration. This is a useful way to
    manage iteration if you are tracing a linked list, for example.

    Finally the context parameter will always contain a hash you can use as
    a "scratchpad" to maintain any other state you need in order to iterate
    properly. The context object is reused and is not reset between
    iterations so make sure you setup the context with a fresh state whenever
    the index parameter is 0.

    Generally iterators will continue to call `nextObject` until the index
    reaches the your current length-1. If you run out of data before this
    time for some reason, you should simply return undefined.

    The default implementation of this method simply looks up the index.
    This works great on any Array-like objects.
  itemtype: method
  name: nextObject
  params:
  - name: index
    description: the current index of the iteration
    type: Number
  - name: previousObject
    description: |-
      the value returned by the last call to
        `nextObject`.
    type: Object
  - name: context
    description: a context object you can use to maintain state.
    type: Object
  return:
    description: the next object in the iteration or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 109
  description: |-
    Helper method returns the first object from a collection. This is usually
    used by bindings and other parts of the framework to extract a single
    object if the enumerable contains only one item.

    If you override this method, you should implement it so that it will
    always return the same value each time it is called. If your enumerable
    contains only one object, this method should always return that object.
    If your enumerable is empty, this method should return `undefined`.

    ```javascript
    var arr = ["a", "b", "c"];
    arr.get('firstObject');  // "a"

    var arr = [];
    arr.get('firstObject');  // undefined
    ```
  itemtype: property
  name: firstObject
  return:
    description: the object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 140
  description: |-
    Helper method returns the last object from a collection. If your enumerable
    contains only one object, this method should always return that object.
    If your enumerable is empty, this method should return `undefined`.

    ```javascript
    var arr = ["a", "b", "c"];
    arr.get('lastObject');  // "c"

    var arr = [];
    arr.get('lastObject');  // undefined
    ```
  itemtype: property
  name: lastObject
  return:
    description: the last object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 168
  description: |-
    Returns `true` if the passed object can be found in the receiver. The
    default version will iterate through the enumerable until the object
    is found. You may want to override this with a more efficient version.

    ```javascript
    var arr = ["a", "b", "c"];
    arr.contains("a"); // true
    arr.contains("z"); // false
    ```
  itemtype: method
  name: contains
  params:
  - name: obj
    description: The object to search for.
    type: Object
  return:
    description: "`true` if object is found in enumerable."
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 187
  description: |-
    Iterates through the enumerable, calling the passed function on each
    item. This method corresponds to the `forEach()` method defined in
    JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 228
  description: Alias for `mapBy`
  itemtype: method
  name: getEach
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 239
  description: |-
    Sets the value on the named property for each member. This is more
    efficient than using other methods defined on this helper. If the object
    implements Ember.Observable, the value will be changed to `set(),` otherwise
    it will be set directly. `null` objects are skipped.
  itemtype: method
  name: setEach
  params:
  - name: key
    description: The key to set
    type: String
  - name: value
    description: The object to set
    type: Object
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 256
  description: |-
    Maps all of the items in the enumeration to another value, returning
    a new array. This method corresponds to `map()` defined in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the mapped value.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: map
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 290
  description: |-
    Similar to map, this specialized function returns the value of the named
    property on all items in the enumeration.
  itemtype: method
  name: mapBy
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 304
  description: |-
    Similar to map, this specialized function returns the value of the named
    property on all items in the enumeration.
  itemtype: method
  name: mapProperty
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  deprecated: true
  deprecationMessage: Use `mapBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 316
  description: |-
    Returns an array with all of the items in the enumeration that the passed
    function returns true for. This method corresponds to `filter()` defined in
    JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: filter
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 352
  description: |-
    Returns an array with all of the items in the enumeration where the passed
    function returns false for. This method is the inverse of filter().

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - *item* is the current item in the iteration.
    - *index* is the current index in the iteration
    - *enumerable* is the enumerable object itself.

    It should return the a falsey value to include the item in the results.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as "this" on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: reject
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A rejected array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 384
  description: |-
    Returns an array with just the items with the matched property. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.
  itemtype: method
  name: filterBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 398
  description: |-
    Returns an array with just the items with the matched property. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.
  itemtype: method
  name: filterProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  deprecated: true
  deprecationMessage: Use `filterBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 411
  description: |-
    Returns an array with the items that do not have truthy values for
    key.  You can pass an optional second argument with the target value.  Otherwise
    this will match any property that evaluates to false.
  itemtype: method
  name: rejectBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 429
  description: |-
    Returns an array with the items that do not have truthy values for
    key.  You can pass an optional second argument with the target value.  Otherwise
    this will match any property that evaluates to false.
  itemtype: method
  name: rejectProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  deprecated: true
  deprecationMessage: Use `rejectBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 442
  description: |-
    Returns the first item in the array for which the callback returns true.
    This method works similar to the `filter()` method defined in JavaScript 1.6
    except that it will stop working on the array once a match is found.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: find
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: Found item or `undefined`.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 486
  description: |-
    Returns the first item with a property matching the passed value. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.

    This method works much like the more generic `find()` method.
  itemtype: method
  name: findBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 502
  description: |-
    Returns the first item with a property matching the passed value. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.

    This method works much like the more generic `find()` method.
  itemtype: method
  name: findProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  deprecated: true
  deprecationMessage: Use `findBy` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 517
  description: |-
    Returns `true` if the passed function returns true for every item in the
    enumeration. This corresponds with the `every()` method in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` or `false`.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.

    Example Usage:

    ```javascript
    if (people.every(isEngineer)) { Paychecks.addBigBonus(); }
    ```
  itemtype: method
  name: every
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 555
  itemtype: method
  name: everyBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  deprecated: true
  deprecationMessage: Use `isEvery` instead
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 564
  itemtype: method
  name: everyProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  deprecated: true
  deprecationMessage: Use `isEvery` instead
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 573
  description: |-
    Returns `true` if the passed property resolves to `true` for all items in
    the enumerable. This method is often simpler/faster than using a callback.
  itemtype: method
  name: isEvery
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 586
  description: |-
    Returns `true` if the passed function returns true for any item in the
    enumeration. This corresponds with the `some()` method in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.

    Usage Example:

    ```javascript
    if (people.any(isManager)) { Paychecks.addBiggerBonus(); }
    ```
  itemtype: method
  name: any
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 639
  description: |-
    Returns `true` if the passed function returns true for any item in the
    enumeration. This corresponds with the `some()` method in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.

    Usage Example:

    ```javascript
    if (people.some(isManager)) { Paychecks.addBiggerBonus(); }
    ```
  itemtype: method
  name: some
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  deprecated: true
  deprecationMessage: Use `any` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 675
  description: |-
    Returns `true` if the passed property resolves to `true` for any item in
    the enumerable. This method is often simpler/faster than using a callback.
  itemtype: method
  name: isAny
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 688
  itemtype: method
  name: anyBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  deprecated: true
  deprecationMessage: Use `isAny` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 697
  itemtype: method
  name: someProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  deprecated: true
  deprecationMessage: Use `isAny` instead
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 706
  description: |-
    This will combine the values of the enumerator into a single value. It
    is a useful way to collect a summary value from an enumeration. This
    corresponds to the `reduce()` method defined in JavaScript 1.8.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(previousValue, item, index, enumerable);
    ```

    - `previousValue` is the value returned by the last call to the iterator.
    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    Return the new cumulative value.

    In addition to the callback you can also pass an `initialValue`. An error
    will be raised if you do not pass an initial value and the enumerator is
    empty.

    Note that unlike the other methods, this method does not allow you to
    pass a target object to set as this for the callback. It's part of the
    spec. Sorry.
  itemtype: method
  name: reduce
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: initialValue
    description: Initial value for the reduce
    type: Object
  - name: reducerProperty
    description: internal use only.
    type: String
  return:
    description: The reduced value.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 751
  description: |-
    Invokes the named method on every object in the receiver that
    implements it. This method corresponds to the implementation in
    Prototype 1.6.
  itemtype: method
  name: invoke
  params:
  - name: methodName
    description: the name of the method
    type: String
  - name: args
    description: optional arguments to pass as well.
    type: Object...
  return:
    description: return values from calling invoke.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 775
  description: |-
    Simply converts the enumerable into a genuine array. The order is not
    guaranteed. Corresponds to the method implemented by Prototype.
  itemtype: method
  name: toArray
  return:
    description: the enumerable as an array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 788
  description: |-
    Returns a copy of the array with all null and undefined elements removed.

    ```javascript
    var arr = ["a", null, "c", undefined];
    arr.compact();  // ["a", "c"]
    ```
  itemtype: method
  name: compact
  return:
    description: the array without null and undefined elements.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 803
  description: |-
    Returns a new enumerable that excludes the passed value. The default
    implementation returns an array regardless of the receiver type unless
    the receiver does not contain the value.

    ```javascript
    var arr = ["a", "b", "a", "c"];
    arr.without("a");  // ["b", "c"]
    ```
  itemtype: method
  name: without
  params:
  - name: value
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 826
  description: |-
    Returns a new enumerable that contains only unique values. The default
    implementation returns an array regardless of the receiver type.

    ```javascript
    var arr = ["a", "a", "b", "b"];
    arr.uniq();  // ["a", "b"]
    ```
  itemtype: method
  name: uniq
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 846
  description: |-
    This property will trigger anytime the enumerable's content changes.
    You can observe this property to be notified of changes to the enumerables
    content.

    For plain enumerables, this property is read only. `Ember.Array` overrides
    this method.
  itemtype: property
  name: "[]"
  type: Ember.Array
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 866
  description: |-
    Registers an enumerable observer. Must implement `Ember.EnumerableObserver`
    mixin.
  itemtype: method
  name: addEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 887
  description: Removes a registered enumerable observer.
  itemtype: method
  name: removeEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  return:
    description: this
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 907
  description: |-
    Becomes true whenever the array currently has observers watching changes
    on the array.
  itemtype: property
  name: hasEnumerableObservers
  type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 919
  description: |-
    Invoke this method just before the contents of your enumerable will
    change. You can either omit the parameters completely or pass the objects
    to be removed or added if available or just a count.
  itemtype: method
  name: enumerableContentWillChange
  params:
  - name: removing
    description: |-
      An enumerable of the objects to
        be removed or the number of items to be removed.
    type: Ember.Enumerable|Number
  - name: adding
    description: |-
      An enumerable of the objects to be
        added or the number of items to be added.
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 955
  description: |-
    Invoke this method when the contents of your enumerable has changed.
    This will notify any observers watching for content changes. If your are
    implementing an ordered enumerable (such as an array), also pass the
    start and end values where the content changed so that it can be used to
    notify range observers.
  itemtype: method
  name: enumerableContentDidChange
  params:
  - name: removing
    description: |-
      An enumerable of the objects to
        be removed or the number of items to be removed.
    type: Ember.Enumerable|Number
  - name: adding
    description: |-
      An enumerable of the objects to
        be added or the number of items to be added.
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/enumerable.js"
  line: 992
  description: |-
    Converts the enumerable into an array and sorts by the keys
    specified in the argument.

    You may provide multiple arguments to sort by multiple properties.
  itemtype: method
  name: sortBy
  params:
  - name: property
    description: name(s) to sort on
    type: String
  return:
    description: The sorted array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/evented.js"
  line: 43
  description: |-
    Subscribes to a named event with given function.

    ```javascript
    person.on('didLoad', function() {
      // fired once the person has loaded
    });
    ```

    An optional target can be passed in as the 2nd argument that will
    be set as the "this" for the callback. This is a good way to give your
    function access to the object triggering the event. When the target
    parameter is used the callback becomes the third argument.
  itemtype: method
  name: 'on'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/evented.js"
  line: 68
  description: |-
    Subscribes a function to a named event and then cancels the subscription
    after the first time the event is triggered. It is good to use ``one`` when
    you only care about the first time an event has taken place.

    This function takes an optional 2nd argument that will become the "this"
    value for the callback. If this argument is passed then the 3rd argument
    becomes the function.
  itemtype: method
  name: one
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/evented.js"
  line: 93
  description: |-
    Triggers a named event for the object. Any additional arguments
    will be passed as parameters to the functions that are subscribed to the
    event.

    ```javascript
    person.on('didEat', function(food) {
      console.log('person ate some ' + food);
    });

    person.trigger('didEat', 'broccoli');

    // outputs: person ate some broccoli
    ```
  itemtype: method
  name: trigger
  params:
  - name: name
    description: The name of the event
    type: String
  - name: args
    description: Optional arguments to pass on
    type: Object...
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/evented.js"
  line: 119
  description: Cancels subscription for given name, target, and method.
  itemtype: method
  name: 'off'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The target of the subscription
    type: Object
  - name: method
    description: The function of the subscription
    type: Function
  return:
    description: this
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/evented.js"
  line: 133
  description: Checks to see if object has any subscriptions for named event.
  itemtype: method
  name: has
  params:
  - name: name
    description: The name of the event
    type: String
  return:
    description: does the object have a subscription for event
    type: Boolean
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/freezable.js"
  line: 67
  description: |-
    Set to `true` when the object is frozen. Use this property to detect
    whether your object is frozen or not.
  itemtype: property
  name: isFrozen
  type: Boolean
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/freezable.js"
  line: 76
  description: |-
    Freezes the object. Once this method has been called the object should
    no longer allow any properties to be edited.
  itemtype: method
  name: freeze
  return:
    description: receiver
    type: Object
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 38
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    This is one of the primitives you must implement to support `Ember.Array`.
    You should replace amt objects started at idx with the objects in the
    passed array. You should also call `this.enumerableContentDidChange()`
  itemtype: method
  name: replace
  params:
  - name: idx
    description: |-
      Starting index in the array to replace. If
        idx >= length, then append to the end of the array.
    type: Number
  - name: amt
    description: |-
      Number of elements that should be removed from
        the array, starting at *idx*.
    type: Number
  - name: objects
    description: |-
      An array of zero or more objects that should be
        inserted into the array at *idx*
    type: Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 55
  description: |-
    Remove all elements from self. This is useful if you
    want to reuse an existing array without having to recreate it.

    ```javascript
    var colors = ["red", "green", "blue"];
    color.length();   //  3
    colors.clear();   //  []
    colors.length();  //  0
    ```
  itemtype: method
  name: clear
  return:
    description: An empty Array.
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 76
  description: |-
    This will use the primitive `replace()` method to insert an object at the
    specified index.

    ```javascript
    var colors = ["red", "green", "blue"];
    colors.insertAt(2, "yellow");  // ["red", "green", "yellow", "blue"]
    colors.insertAt(5, "orange");  // Error: Index out of range
    ```
  itemtype: method
  name: insertAt
  params:
  - name: idx
    description: index of insert the object at.
    type: Number
  - name: object
    description: object to insert
    type: Object
  return:
    description: this
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 97
  description: |-
    Remove an object at the specified index using the `replace()` primitive
    method. You can pass either a single index, or a start and a length.

    If you pass a start and length that is beyond the
    length this method will throw an `OUT_OF_RANGE_EXCEPTION`.

    ```javascript
    var colors = ["red", "green", "blue", "yellow", "orange"];
    colors.removeAt(0);     // ["green", "blue", "yellow", "orange"]
    colors.removeAt(2, 2);  // ["green", "blue"]
    colors.removeAt(4, 2);  // Error: Index out of range
    ```
  itemtype: method
  name: removeAt
  params:
  - name: start
    description: index, start of range
    type: Number
  - name: len
    description: length of passing range
    type: Number
  return:
    description: receiver
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 131
  description: |-
    Push the object onto the end of the array. Works just like `push()` but it
    is KVO-compliant.

    ```javascript
    var colors = ["red", "green"];
    colors.pushObject("black");     // ["red", "green", "black"]
    colors.pushObject(["yellow"]);  // ["red", "green", ["yellow"]]
    ```
  itemtype: method
  name: pushObject
  params:
  - name: obj
    description: object to push
    type: "*"
  return:
    description: The same obj passed as param
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 150
  description: |-
    Add the objects in the passed numerable to the end of the array. Defers
    notifying observers of the change until all objects are added.

    ```javascript
    var colors = ["red"];
    colors.pushObjects(["yellow", "orange"]);  // ["red", "yellow", "orange"]
    ```
  itemtype: method
  name: pushObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 171
  description: |-
    Pop object from array or nil if none are left. Works just like `pop()` but
    it is KVO-compliant.

    ```javascript
    var colors = ["red", "green", "blue"];
    colors.popObject();   // "blue"
    console.log(colors);  // ["red", "green"]
    ```
  itemtype: method
  name: popObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 193
  description: |-
    Shift an object from start of array or nil if none are left. Works just
    like `shift()` but it is KVO-compliant.

    ```javascript
    var colors = ["red", "green", "blue"];
    colors.shiftObject();  // "red"
    console.log(colors);   // ["green", "blue"]
    ```
  itemtype: method
  name: shiftObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 213
  description: |-
    Unshift an object to start of array. Works just like `unshift()` but it is
    KVO-compliant.

    ```javascript
    var colors = ["red"];
    colors.unshiftObject("yellow");    // ["yellow", "red"]
    colors.unshiftObject(["black"]);   // [["black"], "yellow", "red"]
    ```
  itemtype: method
  name: unshiftObject
  params:
  - name: obj
    description: object to unshift
    type: "*"
  return:
    description: The same obj passed as param
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 232
  description: |-
    Adds the named objects to the beginning of the array. Defers notifying
    observers until all objects have been added.

    ```javascript
    var colors = ["red"];
    colors.unshiftObjects(["black", "white"]);   // ["black", "white", "red"]
    colors.unshiftObjects("yellow"); // Type Error: 'undefined' is not a function
    ```
  itemtype: method
  name: unshiftObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 251
  description: |-
    Reverse objects in the array. Works just like `reverse()` but it is
    KVO-compliant.
  itemtype: method
  name: reverseObjects
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_array.js"
  line: 266
  description: |-
    Replace all the the receiver's content with content of the argument.
    If argument is an empty array receiver will be cleared.

    ```javascript
    var colors = ["red", "green", "blue"];
    colors.setObjects(["black", "white"]);  // ["black", "white"]
    colors.setObjects([]);                  // []
    ```
  itemtype: method
  name: setObjects
  params:
  - name: objects
    description: |-
      array whose content will be used for replacing
          the content of the receiver
    type: Ember.Array
  return:
    description: receiver with the new content
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
  line: 51
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Attempts to add the passed object to the receiver if the object is not
    already present in the collection. If the object is present, this method
    has no effect.

    If the passed object is of a type not supported by the receiver,
    then this method should raise an exception.
  itemtype: method
  name: addObject
  params:
  - name: object
    description: The object to add to the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
  line: 67
  description: Adds each object in the passed enumerable to the receiver.
  itemtype: method
  name: addObjects
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
  line: 81
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Attempts to remove the passed object from the receiver collection if the
    object is present in the collection. If the object is not present,
    this method has no effect.

    If the passed object is of a type not supported by the receiver,
    then this method should raise an exception.
  itemtype: method
  name: removeObject
  params:
  - name: object
    description: The object to remove from the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/mutable_enumerable.js"
  line: 98
  description: Removes each object in the passed enumerable from the receiver.
  itemtype: method
  name: removeObjects
  params:
  - name: objects
    description: the objects to remove
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 78
  description: |-
    Retrieves the value of a property from the object.

    This method is usually similar to using `object[keyName]` or `object.keyName`,
    however it supports both computed properties and the unknownProperty
    handler.

    Because `get` unifies the syntax for accessing all these kinds
    of properties, it can make many refactorings easier, such as replacing a
    simple property with a computed property, or vice versa.

    ### Computed Properties

    Computed properties are methods defined with the `property` modifier
    declared at the end, such as:

    ```javascript
    fullName: function() {
      return this.get('firstName') + ' ' + this.get('lastName');
    }.property('firstName', 'lastName')
    ```

    When you call `get` on a computed property, the function will be
    called and the return value will be returned instead of the function
    itself.

    ### Unknown Properties

    Likewise, if you try to call `get` on a property whose value is
    `undefined`, the `unknownProperty()` method will be called on the object.
    If this method returns any value other than `undefined`, it will be returned
    instead. This allows you to implement "virtual" properties that are
    not defined upfront.
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The property to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 120
  description: |-
    To get multiple properties at once, call `getProperties`
    with a list of strings or an array:

    ```javascript
    record.getProperties('firstName', 'lastName', 'zipCode');  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```

    is equivalent to:

    ```javascript
    record.getProperties(['firstName', 'lastName', 'zipCode']);  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  itemtype: method
  name: getProperties
  params:
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 142
  description: |-
    Sets the provided key or path to the value.

    This method is generally very similar to calling `object[key] = value` or
    `object.key = value`, except that it provides support for computed
    properties, the `setUnknownProperty()` method and property observers.

    ### Computed Properties

    If you try to set a value on a key that has a computed property handler
    defined (see the `get()` method for an example), then `set()` will call
    that method, passing both the value and key instead of simply changing
    the value itself. This is useful for those times when you need to
    implement a property that is composed of one or more member
    properties.

    ### Unknown Properties

    If you try to set a value on a key that is undefined in the target
    object, then the `setUnknownProperty()` handler will be called instead. This
    gives you an opportunity to implement complex "virtual" properties that
    are not predefined on the object. If `setUnknownProperty()` returns
    undefined, then `set()` will simply set the value on the object.

    ### Property Observers

    In addition to changing the property, `set()` will also register a property
    change with the object. Unless you have placed this call inside of a
    `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
    (i.e. observer methods declared on the same object), will be called
    immediately. Any "remote" observers (i.e. observer methods declared on
    another object) will be placed in a queue and called at a later time in a
    coalesced manner.

    ### Chaining

    In addition to property changes, `set()` returns the value of the object
    itself so you can do chaining like this:

    ```javascript
    record.set('firstName', 'Charles').set('lastName', 'Jolley');
    ```
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The property to set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 196
  description: |-
    Sets a list of properties at once. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.

    ```javascript
    record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
    ```
  itemtype: method
  name: setProperties
  params:
  - name: hash
    description: the hash of keys and values to set
    type: Hash
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 213
  description: |-
    Begins a grouping of property changes.

    You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call this
    method at the beginning of the changes to begin deferring change
    notifications. When you are done making changes, call
    `endPropertyChanges()` to deliver the deferred change notifications and end
    deferring.
  itemtype: method
  name: beginPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 232
  description: |-
    Ends a grouping of property changes.

    You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call
    `beginPropertyChanges()` at the beginning of the changes to defer change
    notifications. When you are done making changes, call this method to
    deliver the deferred change notifications and end deferring.
  itemtype: method
  name: endPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 250
  description: |-
    Notify the observer system that a property is about to change.

    Sometimes you need to change a value directly or indirectly without
    actually calling `get()` or `set()` on it. In this case, you can use this
    method and `propertyDidChange()` instead. Calling these two methods
    together will notify all observers that the property has potentially
    changed value.

    Note that you must always call `propertyWillChange` and `propertyDidChange`
    as a pair. If you do not, it may get the property change groups out of
    order and cause notifications to be delivered more often than you would
    like.
  itemtype: method
  name: propertyWillChange
  params:
  - name: keyName
    description: The property key that is about to change.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 273
  description: |-
    Notify the observer system that a property has just changed.

    Sometimes you need to change a value directly or indirectly without
    actually calling `get()` or `set()` on it. In this case, you can use this
    method and `propertyWillChange()` instead. Calling these two methods
    together will notify all observers that the property has potentially
    changed value.

    Note that you must always call `propertyWillChange` and `propertyDidChange`
    as a pair. If you do not, it may get the property change groups out of
    order and cause notifications to be delivered more often than you would
    like.
  itemtype: method
  name: propertyDidChange
  params:
  - name: keyName
    description: The property key that has just changed.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 296
  description: |-
    Convenience method to call `propertyWillChange` and `propertyDidChange` in
    succession.
  itemtype: method
  name: notifyPropertyChange
  params:
  - name: keyName
    description: The property key to be notified about.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 314
  description: |-
    Adds an observer on a property.

    This is the core method used to register an observer for a property.

    Once you call this method, any time the key's value is set, your observer
    will be notified. Note that the observers are triggered any time the
    value is set, regardless of whether it has actually changed. Your
    observer should be prepared to handle that.

    You can also pass an optional context parameter to this method. The
    context will be passed to your observer method whenever it is triggered.
    Note that if you add the same target/method pair on a key multiple times
    with different context parameters, your observer will only be called once
    with the last context you passed.

    ### Observer Methods

    Observer methods you pass should generally have the following signature if
    you do not pass a `context` parameter:

    ```javascript
    fooDidChange: function(sender, key, value, rev) { };
    ```

    The sender is the object that changed. The key is the property that
    changes. The value property is currently reserved and unused. The rev
    is the last property revision of the object when it changed, which you can
    use to detect if the key value has really changed or not.

    If you pass a `context` parameter, the context will be passed before the
    revision like so:

    ```javascript
    fooDidChange: function(sender, key, value, context, rev) { };
    ```

    Usually you will not need the value, context or revision parameters at
    the end. In this case, it is common to write observer methods that take
    only a sender and key value as parameters or, if you aren't interested in
    any of these values, to write an observer that has no parameters at all.
  itemtype: method
  name: addObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: self
    type: Ember.Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 366
  description: |-
    Remove an observer you have previously registered on this object. Pass
    the same key, target, and method you passed to `addObserver()` and your
    target will no longer receive notifications.
  itemtype: method
  name: removeObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: receiver
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 381
  description: |-
    Returns `true` if the object currently has observers registered for a
    particular key. You can use this method to potentially defer performing
    an expensive action until someone begins observing a particular property
    on the object.
  itemtype: method
  name: hasObserverFor
  params:
  - name: key
    description: Key to check
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 395
  description: |-
    Retrieves the value of a property, or a default value in the case that the
    property returns `undefined`.

    ```javascript
    person.getWithDefault('lastName', 'Doe');
    ```
  itemtype: method
  name: getWithDefault
  params:
  - name: keyName
    description: The name of the property to retrieve
    type: String
  - name: defaultValue
    description: The value to return if the property value is undefined
    type: Object
  return:
    description: The property value or the defaultValue.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 412
  description: |-
    Set the value of a property to the current value plus some amount.

    ```javascript
    person.incrementProperty('age');
    team.incrementProperty('score', 2);
    ```
  itemtype: method
  name: incrementProperty
  params:
  - name: keyName
    description: The name of the property to increment
    type: String
  - name: increment
    description: The amount to increment by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 432
  description: |-
    Set the value of a property to the current value minus some amount.

    ```javascript
    player.decrementProperty('lives');
    orc.decrementProperty('health', 5);
    ```
  itemtype: method
  name: decrementProperty
  params:
  - name: keyName
    description: The name of the property to decrement
    type: String
  - name: decrement
    description: The amount to decrement by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 452
  description: |-
    Set the value of a boolean property to the opposite of it's
    current value.

    ```javascript
    starship.toggleProperty('warpDriveEngaged');
    ```
  itemtype: method
  name: toggleProperty
  params:
  - name: keyName
    description: The name of the property to toggle
    type: String
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/observable.js"
  line: 469
  description: |-
    Returns the cached value of a computed property, if it exists.
    This allows you to inspect the value of a computed property
    without accidentally invoking it if it is intended to be
    generated lazily.
  itemtype: method
  name: cacheFor
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The cached value of the computed property, if any
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 88
  description: |-
    If the proxied promise is rejected this will contain the reason
    provided.
  itemtype: property
  name: reason
  default: 'null'
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 97
  description: Once the proxied promise has settled this will become `false`.
  itemtype: property
  name: isPending
  default: 'true'
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 105
  description: Once the proxied promise has settled this will become `true`.
  itemtype: property
  name: isSettled
  default: 'false'
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 113
  description: Will become `true` if the proxied promise is rejected.
  itemtype: property
  name: isRejected
  default: 'false'
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 121
  description: Will become `true` if the proxied promise is fulfilled.
  itemtype: property
  name: isFullfilled
  default: 'false'
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 129
  description: |-
    The promise whose fulfillment value is being proxied by this object.

    This property must be specified upon creation, and should not be
    changed once created.

    Example:

    ```javascript
    Ember.ObjectController.extend(Ember.PromiseProxyMixin).create({
      promise: <thenable>
    });
    ```
  itemtype: property
  name: promise
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 153
  description: |-
    An alias to the proxied promise's `then`.

    See RSVP.Promise.then.
  itemtype: method
  name: then
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 164
  description: |-
    An alias to the proxied promise's `catch`.

    See RSVP.Promise.catch.
  itemtype: method
  name: catch
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/promise_proxy.js"
  line: 175
  description: |-
    An alias to the proxied promise's `finally`.

    See RSVP.Promise.finally.
  itemtype: method
  name: finally
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/mixins/sortable.js"
  line: 62
  description: |-
    Specifies which properties dictate the arrangedContent's sort order.

    When specifying multiple properties the sorting will use properties
    from the `sortProperties` array prioritized from first to last.
  itemtype: property
  name: sortProperties
  type: Array
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/sortable.js"
  line: 72
  description: Specifies the arrangedContent's sort direction
  itemtype: property
  name: sortAscending
  type: Boolean
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/sortable.js"
  line: 79
  description: |-
    The function used to compare two values. You can override this if you
    want to do custom comparisons. Functions must be of the type expected by
    Array#sort, i.e.
      return 0 if the two parameters are equal,
      return a negative value if the first parameter is smaller than the second or
      return a positive value otherwise:

    ```javascript
    function(x,y) { // These are assumed to be integers
      if (x === y)
        return 0;
      return x < y ? -1 : 1;
    }
    ```
  itemtype: property
  name: sortFunction
  type: "{Function}"
  default: Ember.compare
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/sortable.js"
  line: 138
  description: |-
    Overrides the default arrangedContent from arrayProxy in order to sort by sortFunction.
    Also sets up observers for each sortProperty on each item in the content Array.
  itemtype: property
  name: arrangedContent
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/mixins/target_action_support.js"
  line: 51
  description: |-
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      action: 'save',
      actionContext: Ember.computed.alias('context'),
      click: function() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```

    The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click: function() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context'),
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```

    The `actionContext` defaults to the object you mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      click: function() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
  itemtype: method
  name: triggerAction
  params:
  - name: opts
    description: "(optional, with the optional keys action, target and/or actionContext)"
    type: Hash
  return:
    description: true if the action was sent successfully and did not return false
    type: Boolean
  class: Ember.TargetActionSupport
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 54
  description: |-
    The content array. Must be an object that implements `Ember.Array` and/or
    `Ember.MutableArray.`
  itemtype: property
  name: content
  type: Ember.Array
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 63
  description: |-
    The array that the proxy pretends to be. In the default `ArrayProxy`
    implementation, this and `content` are the same. Subclasses of `ArrayProxy`
    can override this property to provide things like sorting and filtering.
  itemtype: property
  name: arrangedContent
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 72
  description: |-
    Should actually retrieve the object at the specified index from the
    content. You can override this method in subclasses to transform the
    content item to something new.

    This method will only be called if content is non-`null`.
  itemtype: method
  name: objectAtContent
  params:
  - name: idx
    description: The index to retrieve.
    type: Number
  return:
    description: the value or undefined if none found
    type: Object
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 87
  description: |-
    Should actually replace the specified objects on the content array.
    You can override this method in subclasses to transform the content item
    into something new.

    This method will only be called if content is non-`null`.
  itemtype: method
  name: replaceContent
  params:
  - name: idx
    description: The starting index
    type: Number
  - name: amt
    description: The number of items to remove from the content.
    type: Number
  - name: objects
    description: |-
      Optional array of objects to insert or null if no
        objects.
    type: Array
  return:
    description: ''
    type: Void
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 105
  description: |-
    Invoked when the content property is about to change. Notifies observers that the
    entire array content will change.
  access: private
  tagname: ''
  itemtype: method
  name: _contentWillChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/array_proxy.js"
  line: 130
  description: |-
    Invoked when the content property changes. Notifies observers that the
    entire array content has changed.
  access: private
  tagname: ''
  itemtype: method
  name: _contentDidChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 183
  description: |-
    An overridable method called when objects are instantiated. By default,
    does nothing unless it is overridden during class definition.

    Example:

    ```javascript
    App.Person = Ember.Object.extend({
      init: function() {
        alert('Name is ' + this.get('name'));
      }
    });

    var steve = App.Person.create({
      name: "Steve"
    });

    // alerts 'Name is Steve'.
    ```

    NOTE: If you do override `init` for a framework class like `Ember.View` or
    `Ember.ArrayController`, be sure to call `this._super()` in your
    `init` declaration! If you don't, Ember may not have an opportunity to
    do important setup work, and you'll see strange behavior in your
    application.
  itemtype: method
  name: init
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 213
  description: |-
    Defines the properties that will be concatenated from the superclass
    (instead of overridden).

    By default, when you extend an Ember class a property defined in
    the subclass overrides a property with the same name that is defined
    in the superclass. However, there are some cases where it is preferable
    to build up a property's value by combining the superclass' property
    value with the subclass' value. An example of this in use within Ember
    is the `classNames` property of `Ember.View`.

    Here is some sample code showing the difference between a concatenated
    property and a normal one:

    ```javascript
    App.BarView = Ember.View.extend({
      someNonConcatenatedProperty: ['bar'],
      classNames: ['bar']
    });

    App.FooBarView = App.BarView.extend({
      someNonConcatenatedProperty: ['foo'],
      classNames: ['foo'],
    });

    var fooBarView = App.FooBarView.create();
    fooBarView.get('someNonConcatenatedProperty'); // ['foo']
    fooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']
    ```

    This behavior extends to object creation as well. Continuing the
    above example:

    ```javascript
    var view = App.FooBarView.create({
      someNonConcatenatedProperty: ['baz'],
      classNames: ['baz']
    })
    view.get('someNonConcatenatedProperty'); // ['baz']
    view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
    ```
    Adding a single property that is not an array will just add it in the array:

    ```javascript
    var view = App.FooBarView.create({
      classNames: 'baz'
    })
    view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
    ```

    Using the `concatenatedProperties` property, we can tell to Ember that mix
    the content of the properties.

    In `Ember.View` the `classNameBindings` and `attributeBindings` properties
    are also concatenated, in addition to `classNames`.

    This feature is available for you to use throughout the Ember object model,
    although typical app developers are likely to use it infrequently. Since
    it changes expectations about behavior of properties, you should properly
    document its usage in each individual concatenated property (to not
    mislead your users to think they can override the property in a subclass).
  itemtype: property
  name: concatenatedProperties
  type: Array
  default: 'null'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 281
  description: |-
    Destroyed object property flag.

    if this property is `true` the observers and bindings were already
    removed by the effect of calling the `destroy()` method.
  itemtype: property
  name: isDestroyed
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 292
  description: |-
    Destruction scheduled flag. The `destroy()` method has been called.

    The object stays intact until the end of the run loop at which point
    the `isDestroyed` flag is set.
  itemtype: property
  name: isDestroying
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 303
  description: |-
    Destroys an object by setting the `isDestroyed` flag and removing its
    metadata, which effectively destroys observers and bindings.

    If you try to set a property on a destroyed object, an exception will be
    raised.

    Note that destruction is scheduled for the end of the run loop and does not
    happen immediately.  It will set an isDestroying flag immediately.
  itemtype: method
  name: destroy
  return:
    description: receiver
    type: Ember.Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 325
  description: Override to implement teardown.
  itemtype: method
  name: willDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 332
  description: |-
    Invoked by the run loop to actually destroy the object. This is
    scheduled for execution by the `destroy` method.
  access: private
  tagname: ''
  itemtype: method
  name: _scheduledDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 351
  description: |-
    Returns a string representation which attempts to provide more information
    than Javascript's `toString` typically does, in a generic way for all Ember
    objects.

    ```javascript
    App.Person = Em.Object.extend()
    person = App.Person.create()
    person.toString() //=> "<App.Person:ember1024>"
    ```

    If the object's class is not defined on an Ember namespace, it will
    indicate it is a subclass of the registered superclass:

       ```javascript
    Student = App.Person.extend()
    student = Student.create()
    student.toString() //=> "<(subclass of App.Person):ember1025>"
    ```

    If the method `toStringExtension` is defined, its return value will be
    included in the output.

    ```javascript
    App.Teacher = App.Person.extend({
      toStringExtension: function() {
        return this.get('fullName');
      }
    });
    teacher = App.Teacher.create()
    teacher.toString(); //=> "<App.Teacher:ember1026:Tom Dale>"
    ```
  itemtype: method
  name: toString
  return:
    description: string representation
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 418
  description: |-
    Creates a new subclass.

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        alert(thing);
       }
    });
    ```

    This defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.

    You can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:

    ```javascript
    App.PersonView = Ember.View.extend({
      tagName: 'li',
      classNameBindings: ['isAdministrator']
    });
    ```

    When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        var name = this.get('name');
        alert(name + ' says: ' + thing);
      }
    });

    App.Soldier = App.Person.extend({
      say: function(thing) {
        this._super(thing + ", sir!");
      },
      march: function(numberOfHours) {
        alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')
      }
    });

    var yehuda = App.Soldier.create({
      name: "Yehuda Katz"
    });

    yehuda.say("Yes");  // alerts "Yehuda Katz says: Yes, sir!"
    ```

    The `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.

    You can also pass `Ember.Mixin` classes to add additional properties to the subclass.

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        alert(this.get('name') + ' says: ' + thing);
      }
    });

    App.SingingMixin = Ember.Mixin.create({
      sing: function(thing){
        alert(this.get('name') + ' sings: la la la ' + thing);
      }
    });

    App.BroadwayStar = App.Person.extend(App.SingingMixin, {
      dance: function() {
        alert(this.get('name') + ' dances: tap tap tap tap ');
      }
    });
    ```

    The `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.
  itemtype: method
  name: extend
  static: 1
  params:
  - name: mixins
    description: One or more Ember.Mixin classes
    type: Ember.Mixin
    optional: true
    multiple: true
  - name: arguments
    description: Object containing values to use within the new class
    type: Object
    optional: true
    multiple: true
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 520
  description: |-
    Equivalent to doing `extend(arguments).create()`.
    If possible use the normal `create` method instead.
  itemtype: method
  name: createWithMixins
  static: 1
  params:
  - name: arguments
    description: ''
    optional: true
    multiple: true
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 534
  description: |-
    Creates an instance of a class. Accepts either no arguments, or an object
    containing values to initialize the newly instantiated object with.

    ```javascript
    App.Person = Ember.Object.extend({
      helloWorld: function() {
        alert("Hi, my name is " + this.get('name'));
      }
    });

    var tom = App.Person.create({
      name: 'Tom Dale'
    });

    tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
    ```

    `create` will call the `init` function if defined during
    `Ember.AnyObject.extend`

    If no arguments are passed to `create`, it will not set values to the new
    instance during initialization:

    ```javascript
    var noName = App.Person.create();
    noName.helloWorld(); // alerts undefined
    ```

    NOTE: For performance reasons, you cannot declare methods or computed
    properties during `create`. You should instead declare methods and computed
    properties when using `extend` or use the `createWithMixins` shorthand.
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    optional: true
    multiple: true
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 577
  description: |-
    Augments a constructor's prototype with additional
    properties and functions:

    ```javascript
    MyObject = Ember.Object.extend({
      name: 'an object'
    });

    o = MyObject.create();
    o.get('name'); // 'an object'

    MyObject.reopen({
      say: function(msg){
        console.log(msg);
      }
    })

    o2 = MyObject.create();
    o2.say("hello"); // logs "hello"

    o.say("goodbye"); // logs "goodbye"
    ```

    To add functions and properties to the constructor itself,
    see `reopenClass`
  itemtype: method
  name: reopen
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 612
  description: |-
    Augments a constructor's own properties and functions:

    ```javascript
    MyObject = Ember.Object.extend({
      name: 'an object'
    });

    MyObject.reopenClass({
      canBuild: false
    });

    MyObject.canBuild; // false
    o = MyObject.create();
    ```

    In other words, this creates static properties and functions for the class. These are only available on the class
    and not on any instance of that class.

    ```javascript
    App.Person = Ember.Object.extend({
      name : "",
      sayHello : function(){
        alert("Hello. My name is " + this.get('name'));
      }
    });

    App.Person.reopenClass({
      species : "Homo sapiens",
      createPerson: function(newPersonsName){
        return App.Person.create({
          name:newPersonsName
        });
      }
    });

    var tom = App.Person.create({
      name : "Tom Dale"
    });
    var yehuda = App.Person.createPerson("Yehuda Katz");

    tom.sayHello(); // "Hello. My name is Tom Dale"
    yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
    alert(App.Person.species); // "Homo sapiens"
    ```

    Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
    variables. They are only valid on `App.Person`.

    To add functions and properties to instances of
    a constructor by extending the constructor's prototype
    see `reopen`
  itemtype: method
  name: reopenClass
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 686
  description: |-
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For
    example, computed property functions may close over variables that are then
    no longer available for introspection.

    You can pass a hash of these values to a computed property like this:

    ```javascript
    person: function() {
      var personId = this.get('personId');
      return App.Person.create({ id: personId });
    }.property().meta({ type: App.Person })
    ```

    Once you've done this, you can retrieve the values saved to the computed
    property from your class like this:

    ```javascript
    MyClass.metaForProperty('person');
    ```

    This will return the original hash that was passed to `meta()`.
  itemtype: method
  name: metaForProperty
  params:
  - name: key
    description: property name
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/core_object.js"
  line: 721
  description: |-
    Iterate over each computed property for the class, passing its name
    and any associated metadata (see `metaForProperty`) to the callback.
  itemtype: method
  name: eachComputedProperty
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/each_proxy.js"
  line: 99
  description: |-
    You can directly access mapped properties by simply requesting them.
    The `unknownProperty` handler will generate an EachArray of each item.
  itemtype: method
  name: unknownProperty
  params:
  - name: keyName
    description: ''
    type: String
  - name: value
    description: ''
    type: "*"
  class: Ember.EachProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/lazy_load.js"
  line: 11
  description: |-
    Detects when a specific package of Ember (e.g. 'Ember.Handlebars')
    has fully loaded and is available for extension.

    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:

    ``` javascript
    Ember.onLoad('Ember.Handlebars' function(hbars){
      hbars.registerHelper(...);
    });
    ```
  itemtype: method
  name: onLoad
  params:
  - name: name
    description: name of hook
    type: String
  - name: callback
    description: callback to be called
    type: Function
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/system/lazy_load.js"
  line: 40
  description: |-
    Called when an Ember.js package (e.g Ember.Handlebars) has finished
    loading. Triggers any callbacks registered for this event.
  itemtype: method
  name: runLoadHooks
  params:
  - name: name
    description: name of hook
    type: String
  - name: object
    description: object to pass to callbacks
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/system/native_array.js"
  line: 124
  description: |-
    Creates an `Ember.NativeArray` from an Array like object.
    Does not modify the original object. Ember.A is not needed if
    `Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,
    it is recommended that you use Ember.A when creating addons for
    ember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`
    will be `true`.

    Example

    ```js
    var Pagination = Ember.CollectionView.extend({
      tagName: 'ul',
      classNames: ['pagination'],
      init: function() {
        this._super();
        if (!this.get('content')) {
          this.set('content', Ember.A([]));
        }
      }
    });
    ```
  itemtype: method
  name: A
  return:
    description: ''
    type: Ember.NativeArray
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/system/native_array.js"
  line: 156
  description: |-
    Activates the mixin on the Array.prototype if not already applied. Calling
    this method more than once is safe. This will be called when ember is loaded
    unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`
    set to `false`.

    Example

    ```js
    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {
      Ember.NativeArray.activate();
    }
    ```
  itemtype: method
  name: activate
  static: 1
  return:
    description: ''
    type: Void
  class: Ember.NativeArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/object_proxy.js"
  line: 100
  description: The object whose properties will be forwarded.
  itemtype: property
  name: content
  type: Ember.Object
  default: 'null'
  class: Ember.ObjectProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 118
  description: This property will change as the number of objects in the set changes.
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 127
  description: |-
    Clears the set. This is useful if you want to reuse an existing set
    without having to recreate it.

    ```javascript
    var colors = new Ember.Set(["red", "green", "blue"]);
    colors.length;  // 3
    colors.clear();
    colors.length;  // 0
    ```
  itemtype: method
  name: clear
  return:
    description: An empty Set
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 168
  description: |-
    Returns true if the passed object is also an enumerable that contains the
    same objects as the receiver.

    ```javascript
    var colors = ["red", "green", "blue"],
        same_colors = new Ember.Set(colors);

    same_colors.isEqual(colors);               // true
    same_colors.isEqual(["purple", "brown"]);  // false
    ```
  itemtype: method
  name: isEqual
  params:
  - name: obj
    description: the other object.
    type: Ember.Set
  return:
    description: ''
    type: Boolean
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 198
  description: |-
    Adds an object to the set. Only non-`null` objects can be added to a set
    and those can only be added once. If the object is already in the set or
    the passed value is null this method will have no effect.

    This is an alias for `Ember.MutableEnumerable.addObject()`.

    ```javascript
    var colors = new Ember.Set();
    colors.add("blue");     // ["blue"]
    colors.add("blue");     // ["blue"]
    colors.add("red");      // ["blue", "red"]
    colors.add(null);       // ["blue", "red"]
    colors.add(undefined);  // ["blue", "red"]
    ```
  itemtype: method
  name: add
  params:
  - name: obj
    description: The object to add.
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 220
  description: |-
    Removes the object from the set if it is found. If you pass a `null` value
    or an object that is already not in the set, this method will have no
    effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.

    ```javascript
    var colors = new Ember.Set(["red", "green", "blue"]);
    colors.remove("red");     // ["blue", "green"]
    colors.remove("purple");  // ["blue", "green"]
    colors.remove(null);      // ["blue", "green"]
    ```
  itemtype: method
  name: remove
  params:
  - name: obj
    description: The object to remove
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 238
  description: |-
    Removes the last element from the set and returns it, or `null` if it's empty.

    ```javascript
    var colors = new Ember.Set(["green", "blue"]);
    colors.pop();  // "blue"
    colors.pop();  // "green"
    colors.pop();  // null
    ```
  itemtype: method
  name: pop
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 258
  description: |-
    Inserts the given object on to the end of the set. It returns
    the set itself.

    This is an alias for `Ember.MutableEnumerable.addObject()`.

    ```javascript
    var colors = new Ember.Set();
    colors.push("red");   // ["red"]
    colors.push("green"); // ["red", "green"]
    colors.push("blue");  // ["red", "green", "blue"]
    ```
  itemtype: method
  name: push
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 276
  description: |-
    Removes the last element from the set and returns it, or `null` if it's empty.

    This is an alias for `Ember.Set.pop()`.

    ```javascript
    var colors = new Ember.Set(["green", "blue"]);
    colors.shift();  // "blue"
    colors.shift();  // "green"
    colors.shift();  // null
    ```
  itemtype: method
  name: shift
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 293
  description: |-
    Inserts the given object on to the end of the set. It returns
    the set itself.

    This is an alias of `Ember.Set.push()`

    ```javascript
    var colors = new Ember.Set();
    colors.unshift("red");    // ["red"]
    colors.unshift("green");  // ["red", "green"]
    colors.unshift("blue");   // ["red", "green", "blue"]
    ```
  itemtype: method
  name: unshift
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 311
  description: |-
    Adds each object in the passed enumerable to the set.

    This is an alias of `Ember.MutableEnumerable.addObjects()`

    ```javascript
    var colors = new Ember.Set();
    colors.addEach(["red", "green", "blue"]);  // ["red", "green", "blue"]
    ```
  itemtype: method
  name: addEach
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/set.js"
  line: 327
  description: |-
    Removes each object in the passed enumerable to the set.

    This is an alias of `Ember.MutableEnumerable.removeObjects()`

    ```javascript
    var colors = new Ember.Set(["red", "green", "blue"]);
    colors.removeEach(["red", "blue"]);  //  ["green"]
    ```
  itemtype: method
  name: removeEach
  params:
  - name: objects
    description: the objects to remove.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 17
  description: |-
    Defines the hash of localized strings for the current language. Used by
    the `Ember.String.loc()` helper. To localize, add string values to this
    hash.
  itemtype: property
  name: STRINGS
  type: Hash
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 39
  description: |-
    Apply formatting options to the string. This will look for occurrences
    of "%@" in your string and substitute them with the arguments you pass into
    this method. If you want to control the specific order of replacement,
    you can add a number after the key as well to indicate which argument
    you want to insert.

    Ordered insertions are most useful when building loc strings where values
    you need to insert may appear in different orders.

    ```javascript
    "Hello %@ %@".fmt('John', 'Doe');     // "Hello John Doe"
    "Hello %@2, %@1".fmt('John', 'Doe');  // "Hello Doe, John"
    ```
  itemtype: method
  name: fmt
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: An array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 69
  description: |-
    Formats the passed string, but first looks up the string in the localized
    strings hash. This is a convenient way to localize text. See
    `Ember.String.fmt()` for more information on formatting.

    Note that it is traditional but not required to prefix localized string
    keys with an underscore or other character so you can easily identify
    localized strings.

    ```javascript
    Ember.STRINGS = {
      '_Hello World': 'Bonjour le monde',
      '_Hello %@ %@': 'Bonjour %@ %@'
    };

    Ember.String.loc("_Hello World");  // 'Bonjour le monde';
    Ember.String.loc("_Hello %@ %@", ["John", "Smith"]);  // "Bonjour John Smith";
    ```
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: Optional array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 98
  description: |-
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process. This is a convenience method for split that
    is mostly useful when applied to the `String.prototype`.

    ```javascript
    Ember.String.w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });

    // > alpha
    // > beta
    // > gamma
    ```
  itemtype: method
  name: w
  params:
  - name: str
    description: The string to split
    type: String
  return:
    description: split string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 119
  description: |-
    Converts a camelized string into all lower case separated by underscores.

    ```javascript
    'innerHTML'.decamelize();           // 'inner_html'
    'action_name'.decamelize();        // 'action_name'
    'css-class-name'.decamelize();     // 'css-class-name'
    'my favorite items'.decamelize();  // 'my favorite items'
    ```
  itemtype: method
  name: decamelize
  params:
  - name: str
    description: The string to decamelize.
    type: String
  return:
    description: the decamelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 137
  description: |-
    Replaces underscores, spaces, or camelCase with dashes.

    ```javascript
    'innerHTML'.dasherize();          // 'inner-html'
    'action_name'.dasherize();        // 'action-name'
    'css-class-name'.dasherize();     // 'css-class-name'
    'my favorite items'.dasherize();  // 'my-favorite-items'
    ```
  itemtype: method
  name: dasherize
  params:
  - name: str
    description: The string to dasherize.
    type: String
  return:
    description: the dasherized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 166
  description: |-
    Returns the lowerCamelCase form of a string.

    ```javascript
    'innerHTML'.camelize();          // 'innerHTML'
    'action_name'.camelize();        // 'actionName'
    'css-class-name'.camelize();     // 'cssClassName'
    'my favorite items'.camelize();  // 'myFavoriteItems'
    'My Favorite Items'.camelize();  // 'myFavoriteItems'
    ```
  itemtype: method
  name: camelize
  params:
  - name: str
    description: The string to camelize.
    type: String
  return:
    description: the camelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 189
  description: |-
    Returns the UpperCamelCase form of a string.

    ```javascript
    'innerHTML'.classify();          // 'InnerHTML'
    'action_name'.classify();        // 'ActionName'
    'css-class-name'.classify();     // 'CssClassName'
    'my favorite items'.classify();  // 'MyFavoriteItems'
    ```
  itemtype: method
  name: classify
  params:
  - name: str
    description: the string to classify
    type: String
  return:
    description: the classified string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 215
  description: |-
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.

    ```javascript
    'innerHTML'.underscore();          // 'inner_html'
    'action_name'.underscore();        // 'action_name'
    'css-class-name'.underscore();     // 'css_class_name'
    'my favorite items'.underscore();  // 'my_favorite_items'
    ```
  itemtype: method
  name: underscore
  params:
  - name: str
    description: The string to underscore.
    type: String
  return:
    description: the underscored string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 235
  description: |-
    Returns the Capitalized form of a string

    ```javascript
    'innerHTML'.capitalize()         // 'InnerHTML'
    'action_name'.capitalize()       // 'Action_name'
    'css-class-name'.capitalize()    // 'Css-class-name'
    'my favorite items'.capitalize() // 'My favorite items'
    ```
  itemtype: method
  name: capitalize
  params:
  - name: str
    description: The string to capitalize.
    type: String
  return:
    description: The capitalized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/string.js"
  line: 255
  description: |-
    Transforms a string so that it may be used as part of a 'pretty' / SEO friendly URL.

    ```javascript
    'My favorite items.'.parameterize();                        // 'my-favorite-items'
    'action_name'.parameterize();                               // 'action-name'
    '100 ways Ember.js is better than Angular.'.parameterize(); // '100-ways-emberjs-is-better-than-angular'
    ```
  itemtype: method
  name: parameterize
  params:
  - name: str
    description: The string to parameterize.
    type: String
  return:
    description: the parameterized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/subarray.js"
  line: 30
  description: Track that an item was added to the tracked array.
  itemtype: method
  name: addItem
  params:
  - name: index
    description: The index of the item in the tracked array.
    type: Number
  - name: match
    description: "`true` iff the item is included in the subarray."
    type: Boolean
  return:
    description: The index of the item in the subarray.
    type: Number
  class: Ember.SubArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/subarray.js"
  line: 83
  description: Track that an item was removed from the tracked array.
  itemtype: method
  name: removeItem
  params:
  - name: index
    description: The index of the item in the tracked array.
    type: Number
  return:
    description: |-
      The index of the item in the subarray, or `-1` if the item
      was not in the subarray.
    type: Number
  class: Ember.SubArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 35
  description: Track that `newItems` were added to the tracked array at `index`.
  itemtype: method
  name: addItems
  params:
  - name: index
    description: ''
  - name: newItems
    description: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 76
  description: Track that `count` items were removed at `index`.
  itemtype: method
  name: removeItems
  params:
  - name: index
    description: ''
  - name: count
    description: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 106
  description: |-
    Apply all operations, reducing them to retain:n, for `n`, the number of
    items in the array.

    `callback` will be called for each operation and will be passed the following arguments:

    * {array} items The items for the given operation
    * {number} offset The computed offset of the items, ie the index in the
    array of the first item for this operation.
    * {string} operation The type of the operation.  One of
    `Ember.TrackedArray.{RETAIN, DELETE, INSERT}`
  itemtype: method
  name: apply
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 137
  description: Return an `ArrayOperationMatch` for the operation that contains the
    item at `index`.
  itemtype: method
  name: _findArrayOperation
  params:
  - name: index
    description: |-
      the index of the item whose operation information
      should be returned.
    type: Number
  access: private
  tagname: ''
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 295
  description: Internal data structure to represent an array operation.
  itemtype: method
  name: ArrayOperation
  access: private
  tagname: ''
  params:
  - name: type
    description: |-
      The type of the operation.  One of
      `Ember.TrackedArray.{RETAIN, INSERT, DELETE}`
    type: String
  - name: count
    description: The number of items in this operation.
    type: Number
  - name: items
    description: |-
      The items of the operation, if included.  RETAIN and
      INSERT include their items, DELETE does not.
    type: Array
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/system/tracked_array.js"
  line: 312
  description: |-
    Internal data structure used to include information when looking up operations
    by item index.
  itemtype: method
  name: ArrayOperationMatch
  access: private
  tagname: ''
  params:
  - name: operation
    description: ''
    type: ArrayOperation
  - name: index
    description: The index of `operation` in the array of operations.
    type: Number
  - name: split
    description: |-
      Whether or not the item index searched for would
      require a split for a new operation type.
    type: Boolean
  - name: rangeStart
    description: |-
      The index of the first item in the operation,
      with respect to the tracked array.  The index of the last item can be computed
      from `rangeStart` and `operation.count`.
    type: Number
  class: Ember.TrackedArray
  module: ember
  namespace: Ember
- file: "../packages/ember-runtime/lib/core.js"
  line: 12
  description: |-
    This will compare two javascript values of possibly different types.
    It will tell you which one is greater than the other by returning:

     - -1 if the first is smaller than the second,
     - 0 if both are equal,
     - 1 if the first is greater than the second.

    The order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.
    In case they have the same type an appropriate comparison for this type is made.

     ```javascript
     Ember.compare('hello', 'hello');  // 0
     Ember.compare('abc', 'dfg');      // -1
     Ember.compare(2, 1);              // 1
     ```
  itemtype: method
  name: compare
  params:
  - name: v
    description: First value to compare
    type: Object
  - name: w
    description: Second value to compare
    type: Object
  return:
    description: "-1 if v < w, 0 if v = w and 1 if v > w."
    type: Number
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/core.js"
  line: 166
  description: |-
    Creates a clone of the passed object. This function can take just about
    any type of object and create a clone of it, including primitive values
    (which are not actually cloned because they are immutable).

    If the passed object implements the `clone()` method, then this function
    will simply call that method and return the result.
  itemtype: method
  name: copy
  params:
  - name: obj
    description: The object to clone
    type: Object
  - name: deep
    description: If true, a deep copy of the object is made
    type: Boolean
  return:
    description: The cloned object
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/core.js"
  line: 187
  description: |-
    Compares two objects, returning true if they are logically equal. This is
    a deeper comparison than a simple triple equal. For sets it will compare the
    internal objects. For any other object that implements `isEqual()` it will
    respect that method.

    ```javascript
    Ember.isEqual('hello', 'hello');  // true
    Ember.isEqual(1, 2);              // false
    Ember.isEqual([4,2], [4,2]);      // false
    ```
  itemtype: method
  name: isEqual
  params:
  - name: a
    description: first object to compare
    type: Object
  - name: b
    description: second object to compare
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-runtime/lib/core.js"
  line: 225
  description: |-
    Returns all of the keys defined on an object or hash. This is useful
    when inspecting objects for debugging. On browsers that support it, this
    uses the native `Object.keys` implementation.
  itemtype: method
  name: keys
  params:
  - name: obj
    description: ''
    type: Object
  return:
    description: Array containing keys of obj
    type: Array
  class: Ember
  module: ember
  submodule: ember-runtime
- file: "../packages/ember-testing/lib/adapters.js"
  line: 18
  description: |-
    This callback will be called whenever an async operation is about to start.

    Override this to call your framework's methods that handle async
    operations.
  access: public
  tagname: ''
  itemtype: method
  name: asyncStart
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: "../packages/ember-testing/lib/adapters.js"
  line: 29
  description: This callback will be called whenever an async operation has completed.
  access: public
  tagname: ''
  itemtype: method
  name: asyncEnd
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: "../packages/ember-testing/lib/adapters.js"
  line: 37
  description: |-
    Override this method with your testing framework's false assertion.
    This function is called whenever an exception occurs causing the testing
    promise to fail.

    QUnit example:

    ```javascript
      exception: function(error) {
        ok(false, error);
      };
    ```
  access: public
  tagname: ''
  itemtype: method
  name: exception
  params:
  - name: error
    description: The exception to be raised.
    type: String
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: "../packages/ember-testing/lib/helpers.js"
  line: 187
  description: |-
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.

    Example:

    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: visit
  params:
  - name: url
    description: the name of the route
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 206
  description: |-
    Clicks an element and triggers any actions triggered by the element's `click`
    event.

    Example:

    ```javascript
    click('.some-jQuery-selector').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: click
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 224
  description: |-
    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode

    Example:

    ```javascript
    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {
     // assert something
    });
    ```
  itemtype: method
  name: keyEvent
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  - name: the
    description: type of key event, e.g. `keypress`, `keydown`, `keyup`
    type: String
  - name: the
    description: keyCode of the simulated key event
    type: Number
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 243
  description: |-
    Fills in an input element with some text.

    Example:

    ```javascript
    fillIn('#email', 'you@example.com').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: fillIn
  params:
  - name: selector
    description: |-
      jQuery selector finding an input element on the DOM
      to fill text with
    type: String
  - name: text
    description: text to place inside the input element
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 262
  description: |-
    Finds an element in the context of the app's container element. A simple alias
    for `app.$(selector)`.

    Example:

    ```javascript
    var $el = find('.my-selector');
    ```
  itemtype: method
  name: find
  params:
  - name: selector
    description: jQuery string selector for element lookup
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 278
  description: |-
    Like `find`, but throws an error if the element selector returns no results.

    Example:

    ```javascript
    var $el = findWithAssert('.doesnt-exist'); // throws error
    ```
  itemtype: method
  name: findWithAssert
  params:
  - name: selector
    description: |-
      jQuery selector string for finding an element within
      the DOM
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  throws:
  - "{Error} throws error if jQuery object returned has a length of 0"
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 295
  description: |-
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.

    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc).

    Example:

    ```javascript
    Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
      .fillIn('#username', username)
      .fillIn('#password', username)
      .click('.submit')

      return wait();
    });
  itemtype: method
  name: wait
  params:
  - name: value
    description: The value to be returned.
    type: Object
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 323
  description: |-
    Returns the currently active route name.

    Example:

    ```javascript
    function validateRouteName(){
      equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
    }

    visit('/some/path').then(validateRouteName)
    ```
  itemtype: method
  name: currentRouteName
  return:
    description: The name of the currently active route.
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 341
  description: |-
    Returns the current path.

    Example:

    ```javascript
    function validateURL(){
      equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
    }

    click('#some-link-id').then(validateURL);
    ```
  itemtype: method
  name: currentPath
  return:
    description: The currently active path.
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 359
  description: |-
    Returns the current URL.

    Example:

    ```javascript
    function validateURL(){
      equal(currentURL(), '/some/path', "correct URL was transitioned into.");
    }

    click('#some-link-id').then(validateURL);
    ```
  itemtype: method
  name: currentURL
  return:
    description: The currently active URL.
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/helpers.js"
  line: 379
  description: |-
    Triggers the given event on the element identified by the provided selector.

    Example:

    ```javascript
    triggerEvent('#some-elem-id', 'blur');
    ```
  itemtype: method
  name: triggerEvent
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  - name: event
    description: The event to be triggered.
    type: String
  return:
    description: ''
    type: RSVP.Promise
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/support.js"
  line: 8
  description: |-
    This method creates a checkbox and triggers the click event to fire the
    passed in handler. It is used to correct for a bug in older versions
    of jQuery (e.g 1.8.3).
  access: private
  tagname: ''
  itemtype: method
  name: testCheckboxClick
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: "../packages/ember-testing/lib/test.js"
  line: 22
  description: |-
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.

    The helper method will always be called with the current Application as
    the first parameter.

    For example:

    ```javascript
    Ember.Test.registerHelper('boot', function(app) {
      Ember.run(app, app.advanceReadiness);
    });
    ```

    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.

    ```javascript
    App = Ember.Application.create();
    App.injectTestHelpers();
    boot();
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerHelper
  params:
  - name: name
    description: The name of the helper method to add.
    type: String
  - name: helperMethod
    description: ''
    type: Function
  - name: options
    description: ''
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 59
  description: |-
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.

    The helper method will always be called with the current Application as
    the first parameter.

    For example:

    ```javascript
    Ember.Test.registerAsyncHelper('boot', function(app) {
      Ember.run(app, app.advanceReadiness);
    });
    ```

    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.


    For example:

    ```javascript
    Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });

    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerAsyncHelper
  params:
  - name: name
    description: The name of the helper method to add.
    type: String
  - name: helperMethod
    description: ''
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 105
  description: |-
    Remove a previously added helper method.

    Example:

    ```javascript
    Ember.Test.unregisterHelper('wait');
    ```
  access: public
  tagname: ''
  itemtype: method
  name: unregisterHelper
  params:
  - name: name
    description: The helper to remove.
    type: String
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 123
  description: |-
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.

    The callback will receive the current application as an argument.

    Example:

    ```javascript
    Ember.Test.onInjectHelpers(function() {
      Ember.$(document).ajaxStart(function() {
        Test.pendingAjaxRequests++;
      });

      Ember.$(document).ajaxStop(function() {
        Test.pendingAjaxRequests--;
      });
    });
    ```
  access: public
  tagname: ''
  itemtype: method
  name: onInjectHelpers
  params:
  - name: callback
    description: The function to be called.
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 151
  description: |-
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.

    This method should be returned by async helpers such as `wait`.
  access: public
  tagname: ''
  itemtype: method
  name: promise
  params:
  - name: resolver
    description: The function used to resolve the promise.
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 166
  description: |-
    Used to allow ember-testing to communicate with a specific testing
    framework.

    You can manually set it before calling `App.setupForTesting()`.

    Example:

    ```javascript
    Ember.Test.adapter = MyCustomAdapter.create()
    ```

    If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  access: public
  tagname: ''
  itemtype: property
  name: adapter
  type: "{Class} The adapter to be used."
  default: Ember.Test.QUnitAdapter
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 187
  description: |-
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    and instance of `Ember.Test.Promise`
  access: public
  tagname: ''
  itemtype: method
  name: resolve
  params:
  - name: The
    description: value to resolve
    type: Mixed
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 202
  description: |-
    This allows ember-testing to play nicely with other asynchronous
    events, such as an application that is waiting for a CSS3
    transition or an IndexDB transaction.

    For example:

    ```javascript
    Ember.Test.registerWaiter(function() {
      return myPendingTransactions() == 0;
    });
    ```
    The `context` argument allows you to optionally specify the `this`
    with which your callback will be invoked.

    For example:

    ```javascript
    Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerWaiter
  params:
  - name: context
    description: "(optional)"
    type: Object
  - name: callback
    description: ''
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 238
  description: |-
    `unregisterWaiter` is used to unregister a callback that was
    registered with `registerWaiter`.
  access: public
  tagname: ''
  itemtype: method
  name: unregisterWaiter
  params:
  - name: context
    description: "(optional)"
    type: Object
  - name: callback
    description: ''
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 304
  description: |-
    This property contains the testing helpers for the current application. These
    are created once you call `injectTestHelpers` on your `Ember.Application`
    instance. The included helpers are also available on the `window` object by
    default, but can be used from this object on the individual application also.
  itemtype: property
  name: testHelpers
  type: "{Object}"
  default: "{}"
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 316
  description: |-
    This property will contain the original methods that were registered
    on the `helperContainer` before `injectTestHelpers` is called.

    When `removeTestHelpers` is called, these methods are restored to the
    `helperContainer`.
  itemtype: property
  name: originalMethods
  type: "{Object}"
  default: "{}"
  access: private
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 331
  description: |-
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
  itemtype: property
  name: testing
  type: "{Boolean}"
  default: 'false'
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 342
  description: |-
    This hook defers the readiness of the application, so that you can start
    the app when your tests are ready to run. It also sets the router's
    location to 'none', so that the window's location will not be modified
    (preventing both accidental leaking of state between tests and interference
    with your testing framework).

    Example:

      ```
      App.setupForTesting();
      ```
  itemtype: method
  name: setupForTesting
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 376
  description: |-
    This will be used as the container to inject the test helpers into. By
    default the helpers are injected into `window`.
  itemtype: property
  name: helperContainer
  type: "{Object} The object to be used for test helpers."
  default: window
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 386
  description: |-
    This injects the test helpers into the `helperContainer` object. If an object is provided
    it will be used as the helperContainer. If `helperContainer` is not set it will default
    to `window`. If a function of the same name has already been defined it will be cached
    (so that it can be reset if the helper is removed with `unregisterHelper` or
    `removeTestHelpers`).

       Any callbacks registered with `onInjectHelpers` will be called once the
       helpers have been injected.

      Example:
      ```
      App.injectTestHelpers();
      ```
  itemtype: method
  name: injectTestHelpers
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-testing/lib/test.js"
  line: 418
  description: |-
    This removes all helpers that have been registered, and resets and functions
    that were overridden by the helpers.

    Example:

    ```javascript
    App.removeTestHelpers();
    ```
  access: public
  tagname: ''
  itemtype: method
  name: removeTestHelpers
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: "../packages/ember-views/lib/mixins/component_template_deprecation.js"
  line: 14
  access: private
  tagname: |-
    Moves `templateName` to `layoutName` and `template` to `layout` at extend
    time if a layout is not also specified.

    Note that this currently modifies the mixin themselves, which is technically
    dubious but is practically of little consequence. This may change in the
    future.
  itemtype: method
  name: willMergeMixin
  class: Ember.ComponentTemplateDeprecation
  module: ember
  namespace: Ember
- file: "../packages/ember-views/lib/mixins/view_target_action_support.js"
  line: 43
  itemtype: property
  name: target
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: "../packages/ember-views/lib/mixins/view_target_action_support.js"
  line: 47
  itemtype: property
  name: actionContext
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: "../packages/ember-views/lib/system/event_dispatcher.js"
  line: 21
  description: |-
    The set of events names (and associated handler function names) to be setup
    and dispatched by the `EventDispatcher`. Custom events can added to this list at setup
    time, generally via the `Ember.Application.customEvents` hash. Only override this
    default set to prevent the EventDispatcher from listening on some events all together.

    This set will be modified by `setup` to also include any events added at that time.
  itemtype: property
  name: events
  type: Object
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/event_dispatcher.js"
  line: 62
  description: |-
    The root DOM element to which event listeners should be attached. Event
    listeners will be attached to the document unless this is overridden.

    Can be specified as a DOMElement or a selector string.

    The default body is a string since this may be evaluated before document.body
    exists in the DOM.
  access: private
  tagname: ''
  itemtype: property
  name: rootElement
  type: DOMElement
  default: "'body'"
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/event_dispatcher.js"
  line: 78
  description: |-
    Sets up event listeners for standard browser events.

    This will be called after the browser sends a `DOMContentReady` event. By
    default, it will set up all of the listeners on the document body. If you
    would like to register the listeners on a different element, set the event
    dispatcher's `root` property.
  access: private
  tagname: ''
  itemtype: method
  name: setup
  params:
  - name: addedEvents
    description: ''
    type: Hash
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/event_dispatcher.js"
  line: 117
  description: |-
    Registers an event listener on the document. If the given event is
    triggered, the provided event handler will be triggered on the target view.

    If the target view does not implement the event handler, or if the handler
    returns `false`, the parent view will be called. The event will continue to
    bubble to each successive parent view until it reaches the top.

    For example, to have the `mouseDown` method called on the target view when
    a `mousedown` event is received from the browser, do the following:

    ```javascript
    setupHandler('mousedown', 'mouseDown');
    ```
  access: private
  tagname: ''
  itemtype: method
  name: setupHandler
  params:
  - name: rootElement
    description: ''
    type: Element
  - name: event
    description: the browser-originated event to listen to
    type: String
  - name: eventName
    description: the name of the method to call on the view
    type: String
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 108
  description: |-
    An internal set used to de-dupe class names when `addClass()` is
    used. After each call to `addClass()`, the `classes` property
    will be updated.
  access: private
  tagname: ''
  itemtype: property
  name: elementClasses
  type: Array
  default: "[]"
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 120
  description: |-
    Array of class names which will be applied in the class attribute.

    You can use `setClasses()` to set this property directly. If you
    use `addClass()`, it will be maintained for you.
  itemtype: property
  name: classes
  type: Array
  default: "[]"
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 132
  description: |-
    The id in of the element, to be applied in the id attribute.

    You should not set this property yourself, rather, you should use
    the `id()` method of `Ember.RenderBuffer`.
  itemtype: property
  name: elementId
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 144
  description: |-
    A hash keyed on the name of the attribute and whose value will be
    applied to that attribute. For example, if you wanted to apply a
    `data-view="Foo.bar"` property to an element, you would set the
    elementAttributes hash to `{'data-view':'Foo.bar'}`.

    You should not maintain this hash yourself, rather, you should use
    the `attr()` method of `Ember.RenderBuffer`.
  itemtype: property
  name: elementAttributes
  type: Hash
  default: "{}"
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 159
  description: |-
    A hash keyed on the name of the properties and whose value will be
    applied to that property. For example, if you wanted to apply a
    `checked=true` property to an element, you would set the
    elementProperties hash to `{'checked':true}`.

    You should not maintain this hash yourself, rather, you should use
    the `prop()` method of `Ember.RenderBuffer`.
  itemtype: property
  name: elementProperties
  type: Hash
  default: "{}"
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 174
  description: |-
    The tagname of the element an instance of `Ember.RenderBuffer` represents.

    Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For
    example, if you wanted to create a `p` tag, then you would call

    ```javascript
    Ember.RenderBuffer('p')
    ```
  itemtype: property
  name: elementTag
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 190
  description: |-
    A hash keyed on the name of the style attribute and whose value will
    be applied to that attribute. For example, if you wanted to apply a
    `background-color:black;` style to an element, you would set the
    elementStyle hash to `{'background-color':'black'}`.

    You should not maintain this hash yourself, rather, you should use
    the `style()` method of `Ember.RenderBuffer`.
  itemtype: property
  name: elementStyle
  type: Hash
  default: "{}"
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 205
  description: |-
    Nested `RenderBuffers` will set this to their parent `RenderBuffer`
    instance.
  itemtype: property
  name: parentBuffer
  type: Ember._RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 214
  description: Adds a string of HTML to the `RenderBuffer`.
  itemtype: method
  name: push
  params:
  - name: string
    description: HTML to push into the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 226
  description: Adds a class to the buffer, which will be rendered to the class attribute.
  itemtype: method
  name: addClass
  params:
  - name: className
    description: Class name to add to the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 250
  description: Sets the elementID to be used for the element.
  itemtype: method
  name: id
  params:
  - name: id
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 265
  description: Adds an attribute which will be rendered to the element.
  itemtype: method
  name: attr
  params:
  - name: name
    description: The name of the attribute
    type: String
  - name: value
    description: The value to add to the attribute
    type: String
  chainable: 1
  return:
    description: this or the current attribute value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 286
  description: Remove an attribute from the list of attributes to render.
  itemtype: method
  name: removeAttr
  params:
  - name: name
    description: The name of the attribute
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 300
  description: Adds a property which will be rendered to the element.
  itemtype: method
  name: prop
  params:
  - name: name
    description: The name of the property
    type: String
  - name: value
    description: The value to add to the property
    type: String
  chainable: 1
  return:
    description: this or the current property value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 321
  description: Remove an property from the list of properties to render.
  itemtype: method
  name: removeProp
  params:
  - name: name
    description: The name of the property
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 335
  description: Adds a style to the style attribute which will be rendered to the element.
  itemtype: method
  name: style
  params:
  - name: name
    description: Name of the style
    type: String
  - name: value
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 502
  itemtype: method
  name: element
  return:
    description: |-
      The element corresponding to the generated HTML
        of this buffer
    type: DOMElement
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/system/render_buffer.js"
  line: 517
  description: Generates the HTML content for this buffer.
  itemtype: method
  name: string
  return:
    description: The generated HTML
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 161
  description: A list of items to be displayed by the `Ember.CollectionView`.
  itemtype: property
  name: content
  type: Ember.Array
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 170
  description: |-
    This provides metadata about what kind of empty view class this
    collection would like if it is being instantiated from another
    system (like Handlebars)
  access: private
  tagname: ''
  itemtype: property
  name: emptyViewClass
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 180
  description: An optional view to display if content is set to an empty array.
  itemtype: property
  name: emptyView
  type: Ember.View
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 189
  itemtype: property
  name: itemViewClass
  type: Ember.View
  default: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 196
  description: Setup a CollectionView
  itemtype: method
  name: init
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 207
  description: |-
    Invoked when the content property is about to change. Notifies observers that the
    entire array content will change.
  access: private
  tagname: ''
  itemtype: method
  name: _contentWillChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 222
  description: |-
    Check to make sure that the content has changed, and if so,
    update the children directly. This is always scheduled
    asynchronously, to allow the element to be created before
    bindings have synchronized and vice versa.
  access: private
  tagname: ''
  itemtype: method
  name: _contentDidChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 243
  description: Ensure that the content implements Ember.Array
  access: private
  tagname: ''
  itemtype: method
  name: _assertArrayLike
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 253
  description: Removes the content and content observers.
  itemtype: method
  name: destroy
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 271
  description: |-
    Called when a mutation to the underlying content array will occur.

    This method will remove any views that are no longer in the underlying
    content array.

    Invokes whenever the content array itself will change.
  itemtype: method
  name: arrayWillChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes will occurr
    type: Number
  - name: removed
    description: number of object to be removed from content
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 314
  description: |-
    Called when a mutation to the underlying content array occurs.

    This method will replay that mutation against the views that compose the
    `Ember.CollectionView`, ensuring that the view reflects the model.

    This array observer is added in `contentDidChange`.
  itemtype: method
  name: arrayDidChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes occurred
    type: Number
  - name: removed
    description: number of object removed from content
    type: Number
  - name: added
    description: number of object added to content
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 374
  description: |-
    Instantiates a view to be added to the childViews array during view
    initialization. You generally will not call this method directly unless
    you are overriding `createChildViews()`. Note that this method will
    automatically configure the correct settings on the new view instance to
    act as a child of the parent.

    The tag name for the view will be set to the tagName of the viewClass
    passed in.
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/collection_view.js"
  line: 403
  description: |-
    A map of parent tags to their default child tags. You can add
    additional parent tags if you want collection views that use
    a particular parent tag to default to a child tag.
  itemtype: property
  name: CONTAINER_MAP
  type: Hash
  static: 1
  final: 1
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/component.js"
  line: 109
  description: |-
    A components template property is set by passing a block
    during its invocation. It is executed within the parent context.

    Example:

    ```handlebars
    {{#my-component}}
      // something that is run in the context
      // of the parent context
    {{/my-component}}
    ```

    Specifying a template directly to a component is deprecated without
    also specifying the layout property.
  deprecated: true
  itemtype: property
  name: template
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/component.js"
  line: 139
  description: |-
    Specifying a components `templateName` is deprecated without also
    providing the `layout` or `layoutName` properties.
  deprecated: true
  itemtype: property
  name: templateName
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/component.js"
  line: 176
  description: |-
    If the component is currently inserted into the DOM of a parent view, this
    property will point to the controller of the parent view.
  itemtype: property
  name: targetObject
  type: Ember.Controller
  default: 'null'
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/component.js"
  line: 189
  description: "Triggers a named action on the controller context where the component
    is used if\nthis controller has registered for notifications of the action.\n\nFor
    example a component for playing or pausing music may translate click events\ninto
    action notifications of \"play\" or \"stop\" depending on some internal state\nof
    the component:\n\n\n```javascript\nApp.PlayButtonComponent = Ember.Component.extend({\n
    \ click: function(){\n    if (this.get('isPlaying')) {\n      this.sendAction('play');\n
    \   } else {\n      this.sendAction('stop');\n    }\n  }\n});\n```\n\nWhen used
    inside a template these component actions are configured to\ntrigger actions in
    the outer application context:\n\n```handlebars\n{{! application.hbs }}\n{{play-button
    play=\"musicStarted\" stop=\"musicStopped\"}}\n```\n\nWhen the component receives
    a browser `click` event it translate this\ninteraction into application-specific
    semantics (\"play\" or \"stop\") and\ntriggers the specified action name on the
    controller for the template\nwhere the component is used: \n\n\n```javascript\nApp.ApplicationController
    = Ember.Controller.extend({\n  actions: {\n    musicStarted: function(){\n      //
    called when the play button is clicked\n      // and the music started playing\n
    \   },\n    musicStopped: function(){\n      // called when the play button is
    clicked\n      // and the music stopped playing\n    }\n  }\n});\n```\n\nIf no
    action name is passed to `sendAction` a default name of \"action\"\nis assumed.\n\n```javascript\nApp.NextButtonComponent
    = Ember.Component.extend({\n  click: function(){\n    this.sendAction();\n  }\n});\n```\n\n```handlebars\n{{!
    application.hbs }}\n{{next-button action=\"playNextSongInAlbum\"}}\n```\n\n```javascript\nApp.ApplicationController
    = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum: function(){\n
    \     ...\n    }\n  }\n});\n```"
  itemtype: method
  name: sendAction
  params:
  - name: action
    description: the action to trigger
    type: String
    optional: true
  - name: context
    description: a context to send with the action
    type: "*"
    optional: true
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/container_view.js"
  line: 230
  description: Instructs each child view to render to the passed render buffer.
  access: private
  tagname: ''
  itemtype: method
  name: render
  params:
  - name: buffer
    description: the buffer to render to
    type: Ember.RenderBuffer
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/container_view.js"
  line: 245
  description: |-
    When a child view is removed, destroy its element so that
    it is removed from the DOM.

    The array observer that triggers this action is set up in the
    `renderToBuffer` method.
  access: private
  tagname: ''
  itemtype: method
  name: childViewsWillChange
  params:
  - name: views
    description: the child views array before mutation
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/container_view.js"
  line: 274
  description: |-
    When a child view is added, make sure the DOM gets updated appropriately.

    If the view has already rendered an element, we tell the child view to
    create an element and insert it into the DOM. If the enclosing container
    view has already written to a buffer, but not yet converted that buffer
    into an element, we insert the string representation of the child into the
    appropriate place in the buffer.
  access: private
  tagname: ''
  itemtype: method
  name: childViewsDidChange
  params:
  - name: views
    description: the array of child views afte the mutation has occurred
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  - name: the
    description: number of child views added
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 43
  description: |-
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
  itemtype: property
  name: TEMPLATES
  type: Hash
  class: Ember
  module: ember
  submodule: ember-views
- file: "../packages/ember-views/lib/views/view.js"
  line: 80
  description: |-
    If the view is currently inserted into the DOM of a parent view, this
    property will point to the parent of the view.
  itemtype: property
  name: parentView
  type: Ember.View
  default: 'null'
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 114
  description: |-
    Invoked by the view system when this view needs to produce an HTML
    representation. This method will create a new render buffer, if needed,
    then apply any default attributes, such as class names and visibility.
    Finally, the `render()` method is invoked, which is responsible for
    doing the bulk of the rendering.

    You should not need to override this method; instead, implement the
    `template` property, or if you need more control, override the `render`
    method.
  itemtype: method
  name: renderToBuffer
  params:
  - name: buffer
    description: |-
      the render buffer. If no buffer is
        passed, a default buffer, using the current view's `tagName`, will
        be used.
    type: Ember.RenderBuffer
  access: private
  tagname: ''
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 163
  description: |-
    Override the default event firing from `Ember.Evented` to
    also call methods with the given name.
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.CoreView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 859
  itemtype: property
  name: isView
  type: Boolean
  default: 'true'
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 871
  description: |-
    The name of the template to lookup if no template is provided.

    By default `Ember.View` will lookup a template with this name in
    `Ember.TEMPLATES` (a shared global object).
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 883
  description: |-
    The name of the layout to lookup if no layout is provided.

    By default `Ember.View` will lookup a template with this name in
    `Ember.TEMPLATES` (a shared global object).
  itemtype: property
  name: layoutName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 895
  description: |-
    The template used to render the view. This should be a function that
    accepts an optional context parameter and returns a string of HTML that
    will be inserted into the DOM relative to its parent view.

    In general, you should set the `templateName` property instead of setting
    the template yourself.
  itemtype: property
  name: template
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 917
  description: |-
    The controller managing this view. If this property is set, it will be
    made available for use by the template.
  itemtype: property
  name: controller
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 929
  description: |-
    A view may contain a layout. A layout is a regular template but
    supersedes the `template` property during rendering. It is the
    responsibility of the layout template to retrieve the `template`
    property from the view (or alternatively, call `Handlebars.helpers.yield`,
    `{{yield}}`) to render it in the correct location.

    This is useful for a view that has a shared wrapper, but which delegates
    the rendering of the contents of the wrapper to the `template` property
    on a subclass.
  itemtype: property
  name: layout
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 966
  description: |-
    The object from which templates should access properties.

    This object will be passed to the template function each time the render
    method is called, but it is up to the individual function to decide what
    to do with it.

    By default, this will be the view's controller.
  itemtype: property
  name: context
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 987
  description: |-
    Private copy of the view's template context. This can be set directly
    by Handlebars without triggering the observer that causes the view
    to be re-rendered.

    The context of a view is looked up as follows:

    1. Supplied context (usually by Handlebars)
    2. Specified controller
    3. `parentView`'s context (for a child of a ContainerView)

    The code in Handlebars that overrides the `_context` property first
    checks to see whether the view has a specified controller. This is
    something of a hack and should be revisited.
  itemtype: property
  name: _context
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1020
  description: |-
    If a value that affects template rendering changes, the view should be
    re-rendered to reflect the new value.
  itemtype: method
  name: _contextDidChange
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1031
  description: If `false`, the view will appear hidden in DOM.
  itemtype: property
  name: isVisible
  type: Boolean
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1040
  description: |-
    Array of child views. You should never edit this array directly.
    Instead, use `appendChild` and `removeFromParent`.
  itemtype: property
  name: childViews
  type: Array
  default: "[]"
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1071
  description: |-
    Return the nearest ancestor that is an instance of the provided
    class.
  itemtype: property
  name: nearestInstanceOf
  return:
    description: Ember.View
  deprecated: true
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: "../packages/ember-views/lib/views/view.js"
  line: 1090
  description: |-
    Return the nearest ancestor that is an instance of the provided
    class or mixin.
  itemtype: property
  name: nearestOfType
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: |-
      Subclass of Ember.View (or Ember.View itself),
             or an instance of Ember.Mixin.
    type: Class,Mixin
- file: "../packages/ember-views/lib/views/view.js"
  line: 1111
  description: Return the nearest ancestor that has a given property.
  itemtype: method
  name: nearestWithProperty
  params:
  - name: property
    description: A property name
    type: String
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1127
  description: |-
    Return the nearest ancestor whose parent is an instance of
    `klass`.
  itemtype: method
  name: nearestChildOf
  params:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1144
  description: When the parent view changes, recursively invalidate `controller`
  itemtype: method
  name: _parentViewDidChange
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1181
  description: |-
    Called on your view when it should push strings of HTML into a
    `Ember.RenderBuffer`. Most users will want to override the `template`
    or `templateName` properties instead of this method.

    By default, `Ember.View` will look for a function in the `template`
    property and invoke it with the value of `context`. The value of
    `context` will be the view's controller unless you override it.
  itemtype: method
  name: render
  params:
  - name: buffer
    description: The render buffer
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1227
  description: |-
    Renders the view again. This will work regardless of whether the
    view is already in the DOM or not. If the view is in the DOM, the
    rendering process will be deferred to give bindings a chance
    to synchronize.

    If children were added during the rendering process using `appendChild`,
    `rerender` will remove them, because they will be added again
    if needed by the next `render`.

    In general, if the display of your view changes, you should modify
    the DOM element directly instead of manually calling `rerender`, which can
    be slow.
  itemtype: method
  name: rerender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1262
  description: |-
    Iterates over the view's `classNameBindings` array, inserts the value
    of the specified property into the `classNames` array, then creates an
    observer to update the view's element if the bound property ever changes
    in the future.
  itemtype: method
  name: _applyClassNameBindings
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1341
  description: |-
    Iterates through the view's attribute bindings, sets up observers for each,
    then applies the current value of the attributes to the passed render buffer.
  itemtype: method
  name: _applyAttributeBindings
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1376
  description: |-
    Given a property name, returns a dasherized version of that
    property name if the property evaluates to a non-falsy value.

    For example, if the view has property `isUrgent` that evaluates to true,
    passing `isUrgent` to this method will return `"is-urgent"`.
  itemtype: method
  name: _classStringForProperty
  params:
  - name: property
    description: ''
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1403
  description: Returns the current DOM element for the view.
  itemtype: property
  name: element
  type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1417
  description: |-
    Returns a jQuery object for this view's element. If you pass in a selector
    string, this method will return a jQuery object, using the current element
    as its buffer.

    For example, calling `view.$('li')` will return a jQuery object containing
    all of the `li` elements inside the DOM element of this view.
  itemtype: method
  name: "$"
  params:
  - name: selector
    description: a jQuery-compatible selector string
    type: String
    optional: true
  return:
    description: the jQuery object for the DOM node
    type: JQuery
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1462
  description: |-
    Appends the view's element to the specified parent element.

    If the view does not have an HTML representation yet, `createElement()`
    will be called automatically.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the given element until all bindings have
    finished synchronizing.

    This is not typically a function that you will need to call directly when
    building your application. You might consider using `Ember.ContainerView`
    instead. If you do need to use `appendTo`, be sure that the target element
    you are providing is associated with an `Ember.Application` and does not
    have an ancestor element that is associated with an Ember view.
  itemtype: method
  name: appendTo
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1494
  description: |-
    Replaces the content of the specified parent element with this view's
    element. If the view does not have an HTML representation yet,
    `createElement()` will be called automatically.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the given element until all bindings have
    finished synchronizing
  itemtype: method
  name: replaceIn
  params:
  - name: target
    description: A selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: received
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1519
  description: |-
    Schedules a DOM operation to occur during the next render phase. This
    ensures that all bindings have finished synchronizing before the view is
    rendered.

    To use, pass a function that performs a DOM operation.

    Before your function is called, this view and all child views will receive
    the `willInsertElement` event. After your function is invoked, this view
    and all of its child views will receive the `didInsertElement` event.

    ```javascript
    view._insertElementLater(function() {
      this.createElement();
      this.$().appendTo('body');
    });
    ```
  itemtype: method
  name: _insertElementLater
  params:
  - name: fn
    description: the function that inserts the element into the DOM
    type: Function
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1550
  description: |-
    Appends the view's element to the document body. If the view does
    not have an HTML representation yet, `createElement()` will be called
    automatically.

    If your application uses the `rootElement` property, you must append
    the view within that element. Rendering views outside of the `rootElement`
    is not supported.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the document body until all bindings have
    finished synchronizing.
  itemtype: method
  name: append
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1570
  description: Removes the view's element from the element to which it is attached.
  itemtype: method
  name: remove
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1590
  description: |-
    Attempts to discover the element in the parent element. The default
    implementation looks for an element with an ID of `elementId` (or the
    view's guid if `elementId` is null). You can override this method to
    provide your own form of lookup. For example, if you want to discover your
    element using a CSS class name instead of an ID.
  itemtype: method
  name: findElementInParentElement
  params:
  - name: parentElement
    description: The parent's DOM element
    type: DOMElement
  return:
    description: The discovered element
    type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1606
  description: |-
    Creates a DOM representation of the view and all of its
    child views by recursively calling the `render()` method.

    After the element has been created, `didInsertElement` will
    be called on this view and all of its child views.
  itemtype: method
  name: createElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1625
  description: Called when a view is going to insert an element into the DOM.
  itemtype: event
  name: willInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1632
  description: |-
    Called when the element of the view has been inserted into the DOM
    or after the view was re-rendered. Override this function to do any
    set up that requires an element in the document body.
  itemtype: event
  name: didInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1641
  description: |-
    Called when the view is about to rerender, but before anything has
    been torn down. This is a good opportunity to tear down any manual
    observers you have installed based on the DOM state
  itemtype: event
  name: willClearRender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1650
  description: Run this callback on the current view (unless includeSelf is false)
    and recursively on child views.
  itemtype: method
  name: invokeRecursively
  params:
  - name: fn
    description: ''
    type: Function
  - name: includeSelf
    description: Includes itself if true.
    type: Boolean
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1709
  description: |-
    Destroys any existing element along with the element for any child views
    as well. If the view does not currently have a element, then this method
    will do nothing.

    If you implement `willDestroyElement()` on your view, then this method will
    be invoked on your view before your element is destroyed to give you a
    chance to clean up any event handlers, etc.

    If you write a `willDestroyElement()` handler, you can assume that your
    `didInsertElement()` handler was called earlier for the same element.

    You should not call or override this method yourself, but you may
    want to implement the above callbacks.
  itemtype: method
  name: destroyElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1731
  description: |-
    Called when the element of the view is going to be destroyed. Override
    this function to do any teardown that requires an element, like removing
    event listeners.
  itemtype: event
  name: willDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1740
  description: |-
    Triggers the `willDestroyElement` event (which invokes the
    `willDestroyElement()` method if it exists) on this view and all child
    views.

    Before triggering `willDestroyElement`, it first triggers the
    `willClearRender` event recursively.
  itemtype: method
  name: _notifyWillDestroyElement
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1758
  description: |-
    If this view's element changes, we need to invalidate the caches of our
    child views so that we do not retain references to DOM elements that are
    no longer needed.
  itemtype: method
  name: _elementDidChange
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1772
  description: Called when the parentView property has changed.
  itemtype: event
  name: parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1840
  description: |-
    Tag name for the view's outer element. The tag name is only used when an
    element is first created. If you change the `tagName` for an element, you
    must destroy and recreate the view element.

    By default, the render buffer will use a `<div>` tag for views.
  itemtype: property
  name: tagName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1856
  description: |-
    The WAI-ARIA role of the control represented by this view. For example, a
    button may have a role of type 'button', or a pane may have a role of
    type 'alertdialog'. This property is used by assistive software to help
    visually challenged users navigate rich web applications.

    The full list of valid WAI-ARIA roles is available at:
    [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)
  itemtype: property
  name: ariaRole
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1871
  description: |-
    Standard CSS class names to apply to the view's outer element. This
    property automatically inherits any class names defined by the view's
    superclasses as well.
  itemtype: property
  name: classNames
  type: Array
  default: "['ember-view']"
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1882
  description: |-
    A list of properties of the view to apply as class names. If the property
    is a string value, the value of that string will be applied as a class
    name.

    ```javascript
    // Applies the 'high' class to the view element
    Ember.View.extend({
      classNameBindings: ['priority']
      priority: 'high'
    });
    ```

    If the value of the property is a Boolean, the name of that property is
    added as a dasherized class name.

    ```javascript
    // Applies the 'is-urgent' class to the view element
    Ember.View.extend({
      classNameBindings: ['isUrgent']
      isUrgent: true
    });
    ```

    If you would prefer to use a custom value instead of the dasherized
    property name, you can pass a binding like this:

    ```javascript
    // Applies the 'urgent' class to the view element
    Ember.View.extend({
      classNameBindings: ['isUrgent:urgent']
      isUrgent: true
    });
    ```

    This list of properties is inherited from the view's superclasses as well.
  itemtype: property
  name: classNameBindings
  type: Array
  default: "[]"
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1925
  description: |-
    A list of properties of the view to apply as attributes. If the property is
    a string value, the value of that string will be applied as the attribute.

    ```javascript
    // Applies the type attribute to the element
    // with the value "button", like <div type="button">
    Ember.View.extend({
      attributeBindings: ['type'],
      type: 'button'
    });
    ```

    If the value of the property is a Boolean, the name of that property is
    added as an attribute.

    ```javascript
    // Renders something like <div enabled="enabled">
    Ember.View.extend({
      attributeBindings: ['enabled'],
      enabled: true
    });
    ```
  itemtype: property
  name: attributeBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1957
  description: |-
    Setup a view, but do not finish waking it up.

    * configure `childViews`
    * register the view with the global views hash, which is used for event
      dispatch
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 1986
  description: Removes the child view from the parent view.
  itemtype: method
  name: removeChild
  params:
  - name: view
    description: ''
    type: Ember.View
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2012
  description: Removes all children from the `parentView`.
  itemtype: method
  name: removeAllChildren
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2030
  description: |-
    Removes the view from its `parentView`, if one is found. Otherwise
    does nothing.
  itemtype: method
  name: removeFromParent
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2047
  description: |-
    You must call `destroy` on a view to destroy the view (and all of its
    child views). This will remove the view from any parent node, then make
    sure that the DOM element managed by the view can be released by the
    memory manager.
  itemtype: method
  name: destroy
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2082
  description: |-
    Instantiates a view to be added to the childViews array during view
    initialization. You generally will not call this method directly unless
    you are overriding `createChildViews()`. Note that this method will
    automatically configure the correct settings on the new view instance to
    act as a child of the parent.
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class|String
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2143
  description: |-
    When the view's `isVisible` property changes, toggle the visibility
    element of the actual DOM element.
  itemtype: method
  name: _isVisibleDidChange
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2228
  description: Handle events from `Ember.EventDispatcher`
  itemtype: method
  name: handleEvent
  params:
  - name: eventName
    description: ''
    type: String
  - name: evt
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2342
  description: |-
    Parse a path and return an object which holds the parsed properties.

    For example a path like "content.isEnabled:enabled:disabled" will return the
    following object:

    ```javascript
    {
      path: "content.isEnabled",
      className: "enabled",
      falsyClassName: "disabled",
      classNames: ":enabled:disabled"
    }
    ```
  itemtype: method
  name: _parsePropertyPath
  static: 1
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2385
  description: |-
    Get the class name for a given value, based on the path, optional
    `className` and optional `falsyClassName`.

    - if a `className` or `falsyClassName` has been specified:
      - if the value is truthy and `className` has been specified,
        `className` is returned
      - if the value is falsy and `falsyClassName` has been specified,
        `falsyClassName` is returned
      - otherwise `null` is returned
    - if the value is `true`, the dasherized last part of the supplied path
      is returned
    - if the value is not `false`, `undefined` or `null`, the `value`
      is returned
    - if none of the above rules apply, `null` is returned
  itemtype: method
  name: _classStringForValue
  params:
  - name: path
    description: ''
  - name: val
    description: ''
  - name: className
    description: ''
  - name: falsyClassName
    description: ''
  static: 1
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/views/view.js"
  line: 2459
  description: Global views hash
  itemtype: property
  name: views
  static: 1
  type: Hash
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: "../packages/ember-views/lib/core.js"
  line: 13
  description: Alias for jQuery
  itemtype: method
  name: "$"
  class: Ember
  module: ember
  submodule: ember-views
- file: "../packages/metamorph/lib/main.js"
  line: 130
  access: public
  tagname: |-
    Remove this object (including starting and ending
    placeholders).
  itemtype: method
  name: remove
  class: Ember.RSVP
  module: ember
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 11
  description: This is a convenient alias for `RSVP.Promise.all`.
  itemtype: method
  name: all
  params:
  - name: array
    description: Array of promises.
    type: Array
  - name: label
    description: |-
      An optional label. This is useful
      for tooling.
    type: String
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 33
  description: |-
    `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
    a fail-fast method, it waits until all the promises have returned and
    shows you all the results. This is useful if you want to handle multiple
    promises' failure states together as a set.

    Returns a promise that is fulfilled when all the given promises have been
    settled. The return promise is fulfilled with an array of the states of
    the promises passed into the `promises` array argument.

    Each state object will either indicate fulfillment or rejection, and
    provide the corresponding value or reason. The states will take one of
    the following formats:

    ```javascript
    { state: 'fulfilled', value: value }
      or
    { state: 'rejected', reason: reason }
    ```

    Example:

    ```javascript
    var promise1 = RSVP.Promise.resolve(1);
    var promise2 = RSVP.Promise.reject(new Error('2'));
    var promise3 = RSVP.Promise.reject(new Error('3'));
    var promises = [ promise1, promise2, promise3 ];

    RSVP.allSettled(promises).then(function(array){
      // array == [
      //   { state: 'fulfilled', value: 1 },
      //   { state: 'rejected', reason: Error },
      //   { state: 'rejected', reason: Error }
      // ]
      // Note that for the second item, reason.message will be "2", and for the
      // third item, reason.message will be "3".
    }, function(error) {
      // Not run. (This block would only be called if allSettled had failed,
      // for instance if passed an incorrect argument type.)
    });
    ```
  itemtype: method
  name: allSettled
  params:
  - name: promises
    description: ''
    type: Array
  - name: label
    description: |-
      - optional string that describes the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled with an array of the settled
      states of the constituent promises.
    type: Promise
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 177
  description: |-
    `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.
    `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `RSVP.Promise` constructor instead.

    The object returned from `RSVP.defer` is a plain object with three properties:

    * promise - an `RSVP.Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.

    Example:

     ```javascript
     var deferred = RSVP.defer();

     deferred.resolve("Success!");

     defered.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  itemtype: method
  name: defer
  params:
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Object
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 247
  description: |-
    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For
    Example:

    ```javascript
    var object = {};

    RSVP.EventTarget.mixin(object);

    object.on("finished", function(event) {
      // handle event
    });

    object.trigger("finished", { detail: value });
    ```

    `EventTarget.mixin` also works with prototypes:

    ```javascript
    var Person = function() {};
    RSVP.EventTarget.mixin(Person.prototype);

    var yehuda = new Person();
    var tom = new Person();

    yehuda.on("poke", function(event) {
      console.log("Yehuda says OW");
    });

    tom.on("poke", function(event) {
      console.log("Tom says OW");
    });

    yehuda.trigger("poke");
    tom.trigger("poke");
    ```
  itemtype: method
  name: mixin
  params:
  - name: object
    description: object to extend with EventTarget methods
    type: Object
  access: private
  tagname: ''
  class: Ember.RSVP.EventTarget
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 296
  description: |-
    Registers a callback to be executed when `eventName` is triggered

    ```javascript
    object.on('event', function(eventInfo){
      // handle the event
    });

    object.trigger('event');
    ```
  itemtype: method
  name: 'on'
  params:
  - name: eventName
    description: name of the event to listen for
    type: String
  - name: callback
    description: function to be called when the event is triggered.
    type: Function
  access: private
  tagname: ''
  class: Ember.RSVP.EventTarget
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 326
  description: |-
    You can use `off` to stop firing a particular callback for an event:

    ```javascript
    function doStuff() { // do stuff! }
    object.on('stuff', doStuff);

    object.trigger('stuff'); // doStuff will be called

    // Unregister ONLY the doStuff callback
    object.off('stuff', doStuff);
    object.trigger('stuff'); // doStuff will NOT be called
    ```

    If you don't pass a `callback` argument to `off`, ALL callbacks for the
    event will not be executed when the event fires. For example:

    ```javascript
    var callback1 = function(){};
    var callback2 = function(){};

    object.on('stuff', callback1);
    object.on('stuff', callback2);

    object.trigger('stuff'); // callback1 and callback2 will be executed.

    object.off('stuff');
    object.trigger('stuff'); // callback1 and callback2 will not be executed!
    ```
  itemtype: method
  name: 'off'
  params:
  - name: eventName
    description: event to stop listening to
    type: String
  - name: callback
    description: |-
      optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    type: Function
  access: private
  tagname: ''
  class: Ember.RSVP.EventTarget
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 380
  description: |-
    Use `trigger` to fire custom events. For example:

    ```javascript
    object.on('foo', function(){
      console.log('foo event happened!');
    });
    object.trigger('foo');
    // 'foo event happened!' logged to the console
    ```

    You can also pass a value as a second argument to `trigger` that will be
    passed as an argument to all event listeners for the event:

    ```javascript
    object.on('foo', function(value){
      console.log(value.name);
    });

    object.trigger('foo', { name: 'bar' });
    // 'bar' logged to the console
    ```
  itemtype: method
  name: trigger
  params:
  - name: eventName
    description: name of the event to be triggered
    type: String
  - name: options
    description: |-
      optional value to be passed to any event handlers for
      the given `eventName`
    type: Any
  access: private
  tagname: ''
  class: Ember.RSVP.EventTarget
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 433
  description: |-
    `RSVP.filter` is similar to JavaScript's native `filter` method, except that it
     waits for all promises to become fulfilled before running the `filterFn` on
     each item in given to `promises`. `RSVP.filter` returns a promise that will
     become fulfilled with the result of running `filterFn` on the values the
     promises become fulfilled with.

     For example:

     ```javascript

     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.resolve(2);
     var promise3 = RSVP.resolve(3);

     var filterFn = function(item){
       return item > 1;
     };

     RSVP.filter(promises, filterFn).then(function(result){
       // result is [ 2, 3 ]
     });
     ```

     If any of the `promises` given to `RSVP.filter` are rejected, the first promise
     that is rejected will be given as an argument to the returned promise's
     rejection handler. For example:

     ```javascript
     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.reject(new Error("2"));
     var promise3 = RSVP.reject(new Error("3"));
     var promises = [ promise1, promise2, promise3 ];

     var filterFn = function(item){
       return item > 1;
     };

     RSVP.filter(promises, filterFn).then(function(array){
       // Code here never runs because there are rejected promises!
     }, function(reason) {
       // reason.message === "2"
     });
     ```

     `RSVP.filter` will also wait for any promises returned from `filterFn`.
     For instance, you may want to fetch a list of users then return a subset
     of those users based on some asynchronous operation:

     ```javascript

     var alice = { name: 'alice' };
     var bob   = { name: 'bob' };
     var users = [ alice, bob ];

     var promises = users.map(function(user){
       return RSVP.resolve(user);
     });

     var filterFn = function(user){
       // Here, Alice has permissions to create a blog post, but Bob does not.
       return getPrivilegesForUser(user).then(function(privs){
         return privs.can_create_blog_post === true;
       });
     };
     RSVP.filter(promises, filterFn).then(function(users){
       // true, because the server told us only Alice can create a blog post.
       users.length === 1;
       // false, because Alice is the only user present in `users`
       users[0] === bob;
     });
     ```
  itemtype: method
  name: filter
  params:
  - name: promises
    description: ''
    type: Array
  - name: filterFn
    description: |-
      - function to be called on each resolved value to
       filter the final results.
    type: Function
  - name: label
    description: |-
      optional string describing the promise. Useful for
       tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 548
  description: |-
    `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array
    for its `promises` argument.

    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      yourPromise: RSVP.resolve(2),
      theirPromise: RSVP.resolve(3),
      notAPromise: 4
    };

    RSVP.hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ````

    If any of the `promises` given to `RSVP.hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      rejectedPromise: RSVP.reject(new Error("rejectedPromise")),
      anotherRejectedPromise: RSVP.reject(new Error("anotherRejectedPromise")),
    };

    RSVP.hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === "rejectedPromise"
    });
    ```

    An important note: `RSVP.hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `RSVP.hash` will NOT preserve prototype
    chains.

    Example:

    ```javascript
    function MyConstructor(){
      this.example = RSVP.resolve("Example");
    }

    MyConstructor.prototype = {
      protoProperty: RSVP.resolve("Proto Property")
    };

    var myObject = new MyConstructor();

    RSVP.hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: "Example"
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  itemtype: method
  name: hash
  params:
  - name: promises
    description: ''
    type: Object
  - name: label
    description: |-
      optional string that describes the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled when all properties of `promises`
      have been fulfilled, or rejected if any of them become rejected.
    type: Promise
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 713
  description: |-
    `RSVP.map` is similar to JavaScript's native `map` method, except that it
     waits for all promises to become fulfilled before running the `mapFn` on
     each item in given to `promises`. `RSVP.map` returns a promise that will
     become fulfilled with the result of running `mapFn` on the values the promises
     become fulfilled with.

     For example:

     ```javascript

     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.resolve(2);
     var promise3 = RSVP.resolve(3);
     var promises = [ promise1, promise2, promise3 ];

     var mapFn = function(item){
       return item + 1;
     };

     RSVP.map(promises, mapFn).then(function(result){
       // result is [ 2, 3, 4 ]
     });
     ```

     If any of the `promises` given to `RSVP.map` are rejected, the first promise
     that is rejected will be given as an argument to the returned promise's
     rejection handler. For example:

     ```javascript
     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.reject(new Error("2"));
     var promise3 = RSVP.reject(new Error("3"));
     var promises = [ promise1, promise2, promise3 ];

     var mapFn = function(item){
       return item + 1;
     };

     RSVP.map(promises, mapFn).then(function(array){
       // Code here never runs because there are rejected promises!
     }, function(reason) {
       // reason.message === "2"
     });
     ```

     `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,
     say you want to get all comments from a set of blog posts, but you need
     the blog posts first becuase they contain a url to those comments.

     ```javscript

     var mapFn = function(blogPost){
       // getComments does some ajax and returns an RSVP.Promise that is fulfilled
       // with some comments data
       return getComments(blogPost.comments_url);
     };

     // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled
     // with some blog post data
     RSVP.map(getBlogPosts(), mapFn).then(function(comments){
       // comments is the result of asking the server for the comments
       // of all blog posts returned from getBlogPosts()
     });
     ```
  itemtype: method
  name: map
  params:
  - name: promises
    description: ''
    type: Array
  - name: mapFn
    description: function to be called on each fulfilled promise.
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
       Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled with the result of calling
       `mapFn` on each fulfilled promise or value when they become fulfilled.
        The promise will be rejected if any of the given `promises` become rejected.
    type: Promise
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 833
  description: |-
    `RSVP.denodeify` takes a "node-style" function and returns a function that
    will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:

    ```javascript
    var fs = require('fs');

    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```

    into:

    ```javascript
    var fs = require('fs');

    var readFile = RSVP.denodeify(fs.readFile);

    readFile('myfile.txt').then(handleData, handleError);
    ```

    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:

    ```javascript
    var fs = require('fs');
    var log = require('some-async-logger');

    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) throw err;
        log('success', function(err) {
          if (err) throw err;
        });
      });
    });
    ```

    You can chain the operations together using `then` from the returned promise:

    ```javascript
    var fs = require('fs');
    var denodeify = RSVP.denodeify;
    var readFile = denodeify(fs.readFile);
    var writeFile = denodeify(fs.writeFile);
    var log = denodeify(require('some-async-logger'));

    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      return log('SUCCESS');
    }).then(function(){
      // success handler
    }, function(reason){
      // rejection handler
    });
    ```
  itemtype: method
  name: denodeify
  params:
  - name: nodeFunc
    description: |-
      a "node-style" function that takes a callback as
      its last argument. The callback expects an error to be passed as its first
      argument (if an error occurred, otherwise null), and the value from the
      operation as its second argument ("function(err, value){ }").
    type: Function
  - name: binding
    description: |-
      optional argument for binding the "this" value when
      calling the `nodeFunc` function.
    type: Any
  return:
    description: |-
      a function that wraps `nodeFunc` to return an
      `RSVP.Promise`
    type: Function
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1145
  description: |-
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.

    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```

    Chaining
    --------

    The return value of `then` is itself a promise.  This second, "downstream"
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.

    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return "default name";
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `"default name"`
    });

    findUser().then(function (user) {
      throw new Error("Found user, but still unhappy");
    }, function (reason) {
      throw new Error("`findUser` rejected and we're unhappy");
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be "Found user, but still unhappy".
      // If `findUser` rejected, `reason` will be "`findUser` rejected and we're unhappy".
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

    ```js
    findUser().then(function (user) {
      throw new PedagogicalException("Upstream error");
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```

    Assimilation
    ------------

    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.

    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```

    If the assimliated promise rejects, then the downstream promise will also reject.

    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```

    Simple Example
    --------------

    Synchronous Example

    ```javascript
    var result;

    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```

    Errback Example

    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```

    Promise Example;

    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```

    Advanced Example
    --------------

    Synchronous Example

    ```javascript
    var author, books;

    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```

    Errback Example

    ```js

    function foundBooks(books) {

    }

    function failure(reason) {

    }

    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```

    Promise Example;

    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  itemtype: method
  name: then
  params:
  - name: onFulfilled
    description: ''
    type: Function
  - name: onRejected
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1361
  description: |-
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.

    ```js
    function findAuthor(){
      throw new Error("couldn't find that author");
    }

    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }

    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  itemtype: method
  name: catch
  params:
  - name: onRejection
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1393
  description: |-
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves

    Synchronous example:

    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }

    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```

    Asynchronous example:

    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  itemtype: method
  name: finally
  params:
  - name: callback
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1562
  description: |-
    `RSVP.Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.

    Example:

    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.resolve(2);
    var promise3 = RSVP.resolve(3);
    var promises = [ promise1, promise2, promise3 ];

    RSVP.Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```

    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:

    Example:

    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.reject(new Error("2"));
    var promise3 = RSVP.reject(new Error("3"));
    var promises = [ promise1, promise2, promise3 ];

    RSVP.Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  itemtype: method
  name: all
  params:
  - name: entries
    description: array of promises
    type: Array
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled when all `promises` have been
      fulfilled, or rejected if any of them become rejected.
    type: Promise
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1660
  description: |-
    `RSVP.Promise.cast` coerces its argument to a promise, or returns the
    argument if it is already a promise which shares a constructor with the caster.

    Example:

    ```javascript
    var promise = RSVP.Promise.resolve(1);
    var casted = RSVP.Promise.cast(promise);

    console.log(promise === casted); // true
    ```

    In the case of a promise whose constructor does not match, it is assimilated.
    The resulting promise will fulfill or reject based on the outcome of the
    promise being casted.

    Example:

    ```javascript
    var thennable = $.getJSON('/api/foo');
    var casted = RSVP.Promise.cast(thennable);

    console.log(thennable === casted); // false
    console.log(casted instanceof RSVP.Promise) // true

    casted.then(function(data) {
      // data is the value getJSON fulfills with
    });
    ```

    In the case of a non-promise, a promise which will fulfill with that value is
    returned.

    Example:

    ```javascript
    var value = 1; // could be a number, boolean, string, undefined...
    var casted = RSVP.Promise.cast(value);

    console.log(value === casted); // false
    console.log(casted instanceof RSVP.Promise) // true

    casted.then(function(val) {
      val === value // => true
    });
    ```

    `RSVP.Promise.cast` is similar to `RSVP.Promise.resolve`, but `RSVP.Promise.cast` differs in the
    following ways:

    * `RSVP.Promise.cast` serves as a memory-efficient way of getting a promise, when you
    have something that could either be a promise or a value. RSVP.resolve
    will have the same effect but will create a new promise wrapper if the
    argument is a promise.
    * `RSVP.Promise.cast` is a way of casting incoming thenables or promise subclasses to
    promises of the exact class specified, so that the resulting object's `then` is
    ensured to have the behavior of the constructor you are calling cast on (i.e., RSVP.Promise).
  itemtype: method
  name: cast
  params:
  - name: object
    description: to be casted
    type: Object
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: promise
    type: Promise
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1750
  description: |-
    `RSVP.Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.

    Example:

    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve("promise 1");
      }, 200);
    });

    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve("promise 2");
      }, 100);
    });

    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // result === "promise 2" because it was resolved before promise1
      // was resolved.
    });
    ```

    `RSVP.Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:

    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve("promise 1");
      }, 200);
    });

    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error("promise 2"));
      }, 100);
    });

    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === "promise2" because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```

    An example real-world use case is implementing timeouts:

    ```javascript
    RSVP.Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  itemtype: method
  name: race
  params:
  - name: promises
    description: array of promises to observe
    type: Array
  - name: label
    description: |-
      optional string for describing the promise returned.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise which settles in the same way as the first passed
      promise to settle.
    type: Promise
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1847
  description: |-
    `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:

    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    var promise = RSVP.Promise.reject(new Error('WHOOPS'));

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  itemtype: method
  name: reject
  params:
  - name: reason
    description: value that the returned promise will be rejected with.
    type: Any
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: a promise rejected with the given `reason`.
    type: Promise
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1895
  description: |-
    `RSVP.Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:

    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      resolve(1);
    });

    promise.then(function(value){
      // value === 1
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    var promise = RSVP.Promise.resolve(1);

    promise.then(function(value){
      // value === 1
    });
    ```
  itemtype: method
  name: resolve
  params:
  - name: value
    description: value that the returned promise will be resolved with
    type: Any
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise that will become fulfilled with the given
      `value`
    type: Promise
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1942
  description: This is a convenient alias for `RSVP.Promise.race`.
  itemtype: method
  name: race
  params:
  - name: array
    description: Array of promises.
    type: Array
  - name: label
    description: |-
      An optional label. This is useful
      for tooling.
    type: String
  static: 1
  class: Ember.RSVP.Promise
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1961
  description: This is a convenient alias for `RSVP.Promise.reject`.
  itemtype: method
  name: reject
  params:
  - name: reason
    description: value that the returned promise will be rejected with.
    type: Any
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: a promise rejected with the given `reason`.
    type: Promise
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 1982
  description: This is a convenient alias for `RSVP.Promise.resolve`.
  itemtype: method
  name: resolve
  params:
  - name: value
    description: value that the returned promise will be resolved with
    type: Any
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise that will become fulfilled with the given
      `value`
    type: Promise
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
- file: "../packages/rsvp/lib/main.js"
  line: 2002
  description: |-
    `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.

    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `RSVP.rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.

    ```javascript
    function throws(){
      throw new Error('Whoops!');
    }

    var promise = new RSVP.Promise(function(resolve, reject){
      throws();
    });

    promise.catch(RSVP.rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```

    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  itemtype: method
  name: rethrow
  params:
  - name: reason
    description: reason the promise became rejected.
    type: Error
  throws:
  - Error
  static: 1
  class: Ember.RSVP
  module: RSVP
  namespace: Ember
warnings:
- message: 'unknown tag: version'
  line: " ../packages/ember-metal/lib/core.js:8"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-routing/lib/system/router.js:53"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-routing/lib/system/router.js:151"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-routing/lib/system/router.js:168"
- message: 'replacing incorrect tag: function with method'
  line: " ../packages/ember-views/lib/views/view.js:1111"
- message: 'param name missing: {function}'
  line: " ../packages/rsvp/lib/main.js:950"
- message: |-
    Missing item type
    Public api for the container is still in flux.
    The public api, specified on the application namespace should be considered the stable api.
    // @module container
  line: " ../packages/container/lib/main.js:1"
- message: |-
    Missing item type
    Clear all observers before destruction
  line: " ../packages/ember-extension-support/lib/data_adapter.js:196"
- message: |-
    Missing item type
    Prefix used for guids through out Ember.
  line: " ../packages/ember-metal/lib/utils.js:10"
- message: Missing item type
  line: " ../packages/ember-routing/lib/system/route.js:868"
- message: Missing item type
  line: " ../packages/ember-routing/lib/system/router.js:409"
- message: Missing item type
  line: " ../packages/ember-routing/lib/system/router.js:433"
- message: |-
    Missing item type
    Helper function for iterating root-ward, starting
    from (but not including) the provided `originRoute`.

    Returns true if the last callback fired requested
    to bubble upward.
  line: " ../packages/ember-routing/lib/system/router.js:465"
- message: |-
    Missing item type
    Flag to mark as being "virtual". Used to keep this instance
    from participating in the parentController hierarchy.
  line: " ../packages/ember-runtime/lib/controllers/array_controller.js:192"
