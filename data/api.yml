---
project:
  name: The Ember API
  description: ! 'The Ember API: a framework for building ambitious web applications'
  version: 1.0 pre
  url: http://emberjs.com/
  sha: b5cee6e
files:
  ../packages/ember-application/lib/system/application.js:
    name: ../packages/ember-application/lib/system/application.js
    modules:
      ember-application: 1
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-application/lib/main.js:
    name: ../packages/ember-application/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-debug/lib/main.js:
    name: ../packages/ember-debug/lib/main.js
    modules:
      ember-debug: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars/lib/controls/tabs/tab_container_view.js:
    name: ../packages/ember-handlebars/lib/controls/tabs/tab_container_view.js
    modules:
      ember-handlebars: 1
    classes:
      Ember.TabContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/tabs/tab_pane_view.js:
    name: ../packages/ember-handlebars/lib/controls/tabs/tab_pane_view.js
    modules: {}
    classes:
      Ember.TabPaneView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/tabs/tab_view.js:
    name: ../packages/ember-handlebars/lib/controls/tabs/tab_view.js
    modules: {}
    classes:
      Ember.TabView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/button.js:
    name: ../packages/ember-handlebars/lib/controls/button.js
    modules: {}
    classes:
      Ember.Button: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/checkbox.js:
    name: ../packages/ember-handlebars/lib/controls/checkbox.js
    modules: {}
    classes:
      Ember.Checkbox: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/select.js:
    name: ../packages/ember-handlebars/lib/controls/select.js
    modules: {}
    classes:
      Ember.Select: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_area.js:
    name: ../packages/ember-handlebars/lib/controls/text_area.js
    modules: {}
    classes:
      Ember.TextArea: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_field.js:
    name: ../packages/ember-handlebars/lib/controls/text_field.js
    modules: {}
    classes:
      Ember.TextField: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_support.js:
    name: ../packages/ember-handlebars/lib/controls/text_support.js
    modules: {}
    classes:
      Ember.TextSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/helpers/action.js:
    name: ../packages/ember-handlebars/lib/helpers/action.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/binding.js:
    name: ../packages/ember-handlebars/lib/helpers/binding.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/collection.js:
    name: ../packages/ember-handlebars/lib/helpers/collection.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/debug.js:
    name: ../packages/ember-handlebars/lib/helpers/debug.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/each.js:
    name: ../packages/ember-handlebars/lib/helpers/each.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/outlet.js:
    name: ../packages/ember-handlebars/lib/helpers/outlet.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/template.js:
    name: ../packages/ember-handlebars/lib/helpers/template.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/unbound.js:
    name: ../packages/ember-handlebars/lib/helpers/unbound.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/view.js:
    name: ../packages/ember-handlebars/lib/helpers/view.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/yield.js:
    name: ../packages/ember-handlebars/lib/helpers/yield.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/views/handlebars_bound_view.js:
    name: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    modules: {}
    classes:
      Ember._HandlebarsBoundView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/views/metamorph_view.js:
    name: ../packages/ember-handlebars/lib/views/metamorph_view.js
    modules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/ext.js:
    name: ../packages/ember-handlebars/lib/ext.js
    modules: {}
    classes:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors:
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars: 1
      Ember: 1
      Ember.Handlebars.helpers: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
  ../packages/ember-handlebars/lib/loader.js:
    name: ../packages/ember-handlebars/lib/loader.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/main.js:
    name: ../packages/ember-handlebars/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars/lib/string.js:
    name: ../packages/ember-handlebars/lib/string.js
    modules: {}
    classes: {}
    fors:
      Ember.String: 1
      String: 1
    namespaces: {}
  ../packages/ember-metal/lib/accessors.js:
    name: ../packages/ember-metal/lib/accessors.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/array.js:
    name: ../packages/ember-metal/lib/array.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/binding.js:
    name: ../packages/ember-metal/lib/binding.js
    modules: {}
    classes:
      Ember.Binding: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/computed.js:
    name: ../packages/ember-metal/lib/computed.js
    modules: {}
    classes:
      Ember.ComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/core.js:
    name: ../packages/ember-metal/lib/core.js
    modules: {}
    classes:
      Ember: 1
      Ember.Logger: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/events.js:
    name: ../packages/ember-metal/lib/events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/instrumentation.js:
    name: ../packages/ember-metal/lib/instrumentation.js
    modules: {}
    classes:
      Ember.Instrumentation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/main.js:
    name: ../packages/ember-metal/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/map.js:
    name: ../packages/ember-metal/lib/map.js
    modules:
      ember-metal: 1
    classes:
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/mixin.js:
    name: ../packages/ember-metal/lib/mixin.js
    modules: {}
    classes:
      Ember.Mixin: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/observer.js:
    name: ../packages/ember-metal/lib/observer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/platform.js:
    name: ../packages/ember-metal/lib/platform.js
    modules: {}
    classes:
      Ember.platform: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/properties.js:
    name: ../packages/ember-metal/lib/properties.js
    modules: {}
    classes:
      Ember.Descriptor: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/run_loop.js:
    name: ../packages/ember-metal/lib/run_loop.js
    modules: {}
    classes:
      Ember.RunLoop: 1
      Ember.run: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/utils.js:
    name: ../packages/ember-metal/lib/utils.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/watching.js:
    name: ../packages/ember-metal/lib/watching.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-routing/lib/location/api.js:
    name: ../packages/ember-routing/lib/location/api.js
    modules:
      ember-routing: 1
    classes:
      Ember.Location: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/hash_location.js:
    name: ../packages/ember-routing/lib/location/hash_location.js
    modules: {}
    classes:
      Ember.HashLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/history_location.js:
    name: ../packages/ember-routing/lib/location/history_location.js
    modules: {}
    classes:
      Ember.HistoryLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/none_location.js:
    name: ../packages/ember-routing/lib/location/none_location.js
    modules: {}
    classes:
      Ember.NoneLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/main.js:
    name: ../packages/ember-routing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/routable.js:
    name: ../packages/ember-routing/lib/routable.js
    modules: {}
    classes:
      Ember.Routable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/route.js:
    name: ../packages/ember-routing/lib/route.js
    modules: {}
    classes:
      Ember.Route: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/route_matcher.js:
    name: ../packages/ember-routing/lib/route_matcher.js
    modules: {}
    classes:
      Ember._RouteMatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/router.js:
    name: ../packages/ember-routing/lib/router.js
    modules: {}
    classes:
      Ember.Router: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/array_controller.js:
    name: ../packages/ember-runtime/lib/controllers/array_controller.js
    modules:
      ember-runtime: 1
    classes:
      Ember.ArrayController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/controller.js:
    name: ../packages/ember-runtime/lib/controllers/controller.js
    modules: {}
    classes:
      Ember.Controller: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/object_controller.js:
    name: ../packages/ember-runtime/lib/controllers/object_controller.js
    modules: {}
    classes:
      Ember.ObjectController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/ext/function.js:
    name: ../packages/ember-runtime/lib/ext/function.js
    modules: {}
    classes: {}
    fors:
      Function: 1
    namespaces: {}
  ../packages/ember-runtime/lib/ext/string.js:
    name: ../packages/ember-runtime/lib/ext/string.js
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  ../packages/ember-runtime/lib/mixins/array.js:
    name: ../packages/ember-runtime/lib/mixins/array.js
    modules: {}
    classes:
      Ember.Array: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/comparable.js:
    name: ../packages/ember-runtime/lib/mixins/comparable.js
    modules: {}
    classes:
      Ember.Comparable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/copyable.js:
    name: ../packages/ember-runtime/lib/mixins/copyable.js
    modules: {}
    classes:
      Ember.Copyable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/deferred.js:
    name: ../packages/ember-runtime/lib/mixins/deferred.js
    modules: {}
    classes:
      Ember.Deferred: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/enumerable.js
    modules: {}
    classes:
      Ember.Enumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/evented.js:
    name: ../packages/ember-runtime/lib/mixins/evented.js
    modules: {}
    classes:
      Ember.Evented: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/freezable.js:
    name: ../packages/ember-runtime/lib/mixins/freezable.js
    modules: {}
    classes:
      Ember.Freezable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_array.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_array.js
    modules: {}
    classes:
      Ember.MutableArray: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    modules: {}
    classes:
      Ember.MutableEnumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/observable.js:
    name: ../packages/ember-runtime/lib/mixins/observable.js
    modules: {}
    classes:
      Ember.Observable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/sortable.js:
    name: ../packages/ember-runtime/lib/mixins/sortable.js
    modules: {}
    classes:
      Ember.SortableMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/target_action_support.js:
    name: ../packages/ember-runtime/lib/mixins/target_action_support.js
    modules: {}
    classes:
      Ember.TargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/application.js:
    name: ../packages/ember-runtime/lib/system/application.js
    modules: {}
    classes:
      Ember.Application: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/array_proxy.js:
    name: ../packages/ember-runtime/lib/system/array_proxy.js
    modules: {}
    classes:
      Ember.ArrayProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/core_object.js:
    name: ../packages/ember-runtime/lib/system/core_object.js
    modules: {}
    classes:
      Ember.CoreObject: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/each_proxy.js:
    name: ../packages/ember-runtime/lib/system/each_proxy.js
    modules: {}
    classes:
      Ember.EachProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/lazy_load.js:
    name: ../packages/ember-runtime/lib/system/lazy_load.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-runtime/lib/system/namespace.js:
    name: ../packages/ember-runtime/lib/system/namespace.js
    modules: {}
    classes:
      Ember.Namespace: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/native_array.js:
    name: ../packages/ember-runtime/lib/system/native_array.js
    modules: {}
    classes:
      Ember.NativeArray: 1
    fors:
      Ember: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object.js:
    name: ../packages/ember-runtime/lib/system/object.js
    modules: {}
    classes:
      Ember.Object: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object_proxy.js:
    name: ../packages/ember-runtime/lib/system/object_proxy.js
    modules: {}
    classes:
      Ember.ObjectProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/promise_chain.js:
    name: ../packages/ember-runtime/lib/system/promise_chain.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-runtime/lib/system/set.js:
    name: ../packages/ember-runtime/lib/system/set.js
    modules: {}
    classes:
      Ember.Set: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/string.js:
    name: ../packages/ember-runtime/lib/system/string.js
    modules: {}
    classes:
      Ember.String: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/core.js:
    name: ../packages/ember-runtime/lib/core.js
    modules: {}
    classes:
      Ember.Error: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/main.js:
    name: ../packages/ember-runtime/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-states/lib/main.js:
    name: ../packages/ember-states/lib/main.js
    modules:
      ember-states: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-states/lib/state.js:
    name: ../packages/ember-states/lib/state.js
    modules: {}
    classes:
      Ember.State: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-states/lib/state_manager.js:
    name: ../packages/ember-states/lib/state_manager.js
    modules: {}
    classes:
      Transition: 1
      Ember.StateManager: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/controller.js:
    name: ../packages/ember-views/lib/system/controller.js
    modules:
      ember-views: 1
    classes:
      Ember.ControllerMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/event_dispatcher.js:
    name: ../packages/ember-views/lib/system/event_dispatcher.js
    modules: {}
    classes:
      Ember.EventDispatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/ext.js:
    name: ../packages/ember-views/lib/system/ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/jquery_ext.js:
    name: ../packages/ember-views/lib/system/jquery_ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/render_buffer.js:
    name: ../packages/ember-views/lib/system/render_buffer.js
    modules: {}
    classes:
      Ember.RenderBuffer: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/states/default.js:
    name: ../packages/ember-views/lib/views/states/default.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/destroyed.js:
    name: ../packages/ember-views/lib/views/states/destroyed.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_buffer.js:
    name: ../packages/ember-views/lib/views/states/in_buffer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_dom.js:
    name: ../packages/ember-views/lib/views/states/in_dom.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/pre_render.js:
    name: ../packages/ember-views/lib/views/states/pre_render.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/collection_view.js:
    name: ../packages/ember-views/lib/views/collection_view.js
    modules: {}
    classes:
      Ember.CollectionView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/container_view.js:
    name: ../packages/ember-views/lib/views/container_view.js
    modules: {}
    classes:
      Ember.ContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/view.js:
    name: ../packages/ember-views/lib/views/view.js
    modules: {}
    classes:
      Ember.View: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/core.js:
    name: ../packages/ember-views/lib/core.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-views/lib/main.js:
    name: ../packages/ember-views/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember/lib/main.js:
    name: ../packages/ember/lib/main.js
    modules:
      ember: 1
    classes: {}
    fors: {}
    namespaces: {}
modules:
  ember:
    name: ember
    submodules:
      ember-application: 1
      ember-debug: 1
      ember-handlebars: 1
      ember-routing: 1
      ember-runtime: 1
      ember-states: 1
      ember-views: 1
    classes:
      Ember.Application: 1
      Ember: 1
      Ember.TabContainerView: 1
      Ember.TabPaneView: 1
      Ember.TabView: 1
      Ember.Button: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
      Ember.String: 1
      String: 1
      Ember.Logger: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Routable: 1
      Ember.Route: 1
      Ember._RouteMatcher: 1
      Ember.Router: 1
      Ember.ArrayController: 1
      Ember.ControllerMixin: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.Error: 1
      Ember.State: 1
      Transition: 1
      Ember.StateManager: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.View: 1
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember.Handlebars.Compiler: 1
      Ember: 1
      Ember.String: 1
      String: 1
      Function: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
    tag: module
    file: ../packages/ember-views/lib/views/view.js
    line: 231
    description: Ember
  ember-application:
    name: ember-application
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-application/lib/system/application.js
    line: 1
    description: Ember Application
    requires:
    - name: ember-views
    - name: ember-states
    - name: ember-routing
  ember-debug:
    name: ember-debug
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: ../packages/ember-debug/lib/main.js
    line: 3
    description: Ember Debug
  ember-handlebars:
    name: ember-handlebars
    submodules: {}
    classes:
      Ember.TabContainerView: 1
      Ember.TabPaneView: 1
      Ember.TabView: 1
      Ember.Button: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
      Ember.Handlebars.Compiler: 1
      Ember.Handlebars.JavaScriptCompiler: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
      Ember.Handlebars: 1
    module: ember
    namespace: ''
    file: ../packages/ember-handlebars/lib/ext.js
    line: 52
    description: Ember Handlebars
    requires:
    - name: ember-views
  ember-metal:
    name: ember-metal
    submodules: {}
    classes:
      Ember: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.Logger: 1
      Ember.Instrumentation: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Ember.platform: 1
      Ember.Descriptor: 1
      Ember.RunLoop: 1
      Ember.run: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
    tag: module
    file: ../packages/ember-metal/lib/run_loop.js
    line: 189
    description: ! 'All Ember methods and functions are defined inside of this namespace.

      You generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand "Em" instead of "Ember".


      Ember-Runtime is a framework that provides core functions for

      Ember including cross-platform functions, support for property

      observing and objects. Its focus is on small size and performance. You can

      use this in place of or along-side other cross-platform libraries such as

      jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    module: ember
  ember-routing:
    name: ember-routing
    submodules: {}
    classes:
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Routable: 1
      Ember.Route: 1
      Ember.Router: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-routing/lib/router.js
    line: 21
    description: Ember Routing
    requires:
    - name: ember-states
  ember-runtime:
    name: ember-runtime
    submodules: {}
    classes:
      Ember.Application: 1
      Ember.String: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.Error: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-runtime/lib/core.js
    line: 381
    description: Ember Runtime
    requires:
    - name: ember-metal
  ember-states:
    name: ember-states
    submodules: {}
    classes:
      Ember.State: 1
      Transition: 1
      Ember.StateManager: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-states/lib/state_manager.js
    line: 170
    description: Ember States
    requires:
    - name: ember-runtime
  ember-views:
    name: ember-views
    submodules: {}
    classes:
      Ember.ControllerMixin: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.View: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-views/lib/views/view.js
    line: 231
    description: Ember Views
    require: ember-runtime
    tag: main
    itemtype: main
classes:
  Ember.Application:
    name: Ember.Application
    shortname: Ember.Application
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/application.js
    line: 8
    description: ! "Defines a namespace that will contain an executable application.
      \ This is\nvery similar to a normal namespace except that it is expected to
      include at\nleast a 'ready' function which can be run to initialize the application.\n\nCurrently
      Ember.Application is very similar to Ember.Namespace.  However, this\nclass
      may be augmented by additional frameworks so it is important to use\nthis instance
      when building new applications.\n\n# Example Usage\n\n    MyApp = Ember.Application.create({\n
      \     VERSION: '1.0.0',\n      store: Ember.Store.create().from(Ember.fixtures)\n
      \   });\n\n    MyApp.ready = function() {\n      //..init code goes here...\n
      \   }"
    extends: Ember.Namespace
  Ember:
    name: Ember
    shortname: Ember
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: ../packages/ember-metal/lib/core.js
    line: 8
    description: ! 'All Ember methods and functions are defined inside of this namespace.

      You generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand "Em" instead of "Ember".


      Ember-Runtime is a framework that provides core functions for

      Ember including cross-platform functions, support for property

      observing and objects. Its focus is on small size and performance. You can

      use this in place of or along-side other cross-platform libraries such as

      jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    static: 1
    version: 1.0.pre
  Ember.TabContainerView:
    name: Ember.TabContainerView
    shortname: Ember.TabContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/tabs/tab_container_view.js
    line: 6
    deprecated: true
    extends: Ember.View
  Ember.TabPaneView:
    name: Ember.TabPaneView
    shortname: Ember.TabPaneView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/tabs/tab_pane_view.js
    line: 8
    extends: Ember.View
    deprecated: true
  Ember.TabView:
    name: Ember.TabView
    shortname: Ember.TabView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/tabs/tab_view.js
    line: 8
    extends: Ember.View
    deprecated: true
  Ember.Button:
    name: Ember.Button
    shortname: Ember.Button
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/button.js
    line: 10
    extends: Ember.View
    uses:
    - Ember.TargetActionSupport
    deprecated: true
  Ember.Checkbox:
    name: Ember.Checkbox
    shortname: Ember.Checkbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/checkbox.js
    line: 11
    description: ! "The `Ember.Checkbox` view class renders a checkbox [input](https://developer.mozilla.org/en/HTML/Element/Input)
      \nelement. It allows for binding an Ember property (`checked`) to the status
      of the checkbox.\n\nExample:\n\n``` handlebars\n{{view Ember.Checkbox checkedBinding=\"receiveEmail\"}}\n```\n\nYou
      can add a `label` tag yourself in the template where the Ember.Checkbox is being
      used.\n\n``` html\n<label>        \n  {{view Ember.Checkbox classNames=\"applicaton-specific-checkbox\"}}\n
      \ Some Title\n</label>\n```\n\n\nThe `checked` attribute of an Ember.Checkbox
      object should always be set\nthrough the Ember object or by interacting with
      its rendered element representation\nvia the mouse, keyboard, or touch.  Updating
      the value of the checkbox via jQuery will\nresult in the checked value of the
      object and its element losing synchronization.\n\n## Layout and LayoutName properties\nBecause
      HTML `input` elements are self closing `layout` and `layoutName` properties
      will\nnot be applied. See `Ember.View`'s layout section for more information."
    extends: Ember.View
  Ember.Select:
    name: Ember.Select
    shortname: Ember.Select
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/select.js
    line: 15
    description: ! "The Ember.Select view class renders a\n[select](https://developer.mozilla.org/en/HTML/Element/select)
      HTML element,\nallowing the user to choose from a list of options. \n\nThe text
      and `value` property of each `<option>` element within the `<select>` element\nare
      populated from the objects in the Element.Select's `content` property. The\nunderlying
      data object of the selected `<option>` is stored in the\nElement.Select's `value`
      property.\n\n### `content` as an array of Strings\nThe simplest version of an
      Ember.Select takes an array of strings as its `content` property.\nThe string
      will be used as both the `value` property and the inner text of each `<option>`\nelement
      inside the rendered `<select>`.\n\nExample:\n\n``` javascript\nApp.names = [\"Yehuda\",
      \"Tom\"];\n```\n\n``` handlebars\n{{view Ember.Select contentBinding=\"App.names\"}}\n```\n\nWould
      result in the following HTML:\n\n``` html\n<select class=\"ember-select\">\n
      \ <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nYou
      can control which `<option>` is selected through the Ember.Select's\n`value`
      property directly or as a binding:\n\n``` javascript\nApp.names = Ember.Object.create({\n
      \ selected: 'Tom',\n  content: [\"Yehuda\", \"Tom\"]\n});\n```\n\n``` handlebars\n{{view
      Ember.Select\n       contentBinding=\"App.names.content\"\n       valueBinding=\"App.names.selected\"\n}}\n```\n\nWould
      result in the following HTML with the `<option>` for 'Tom' selected:\n\n```
      html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n
      \ <option value=\"Tom\" selected=\"selected\">Tom</option>\n</select>\n```\n\nA
      user interacting with the rendered `<select>` to choose \"Yehuda\" would update\nthe
      value of `App.names.selected` to \"Yehuda\".\n\n### `content` as an Array of
      Objects\nAn Ember.Select can also take an array of JavaScript or Ember objects\nas
      its `content` property.\n\nWhen using objects you need to tell the Ember.Select
      which property should be\naccessed on each object to supply the `value` attribute
      of the `<option>`\nand which property should be used to supply the element text.\n\nThe
      `optionValuePath` option is used to specify the path on each object to\nthe
      desired property for the `value` attribute.  The `optionLabelPath` \nspecifies
      the path on each object to the desired property for the \nelement's text. Both
      paths must reference each object itself as 'content':\n\n``` javascript\nApp.programmers
      = [\n    Ember.Object.create({firstName: \"Yehuda\", id: 1}),\n    Ember.Object.create({firstName:
      \"Tom\",    id: 2})\n  ];\n```\n\n``` handlebars\n{{view Ember.Select\n       contentBinding=\"App.programmers\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"}}\n```\n\nWould
      result in the following HTML:\n\n``` html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\">Tom</option>\n</select>\n```\n\n\nThe `value` attribute
      of the selected `<option>` within an Ember.Select\ncan be bound to a property
      on another object by providing a\n`valueBinding` option:\n\n``` javascript\nApp.programmers
      = [\n    Ember.Object.create({firstName: \"Yehuda\", id: 1}),\n    Ember.Object.create({firstName:
      \"Tom\",    id: 2})\n  ];\n\nApp.currentProgrammer = Ember.Object.create({\n
      \ id: 2\n});\n```\n\n``` handlebars\n{{view Ember.Select\n       contentBinding=\"App.programmers\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n
      \      valueBinding=\"App.currentProgrammer.id\"}}\n```\n\nWould result in the
      following HTML with a selected option:\n\n``` html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `id` value of `App.currentProgrammer`\nto match the `value` property of
      the newly selected `<option>`.\n\nAlternatively, you can control selection through
      the underlying objects\nused to render each object providing a `selectionBinding`.
      When the selected\n`<option>` is changed, the property path provided to `selectionBinding`\nwill
      be updated to match the content object of the rendered `<option>`\nelement:
      \n\n``` javascript\nApp.controller = Ember.Object.create({\n  selectedPerson:
      null,\n  content: [\n    Ember.Object.create({firstName: \"Yehuda\", id: 1}),\n
      \   Ember.Object.create({firstName: \"Tom\",    id: 2})\n  ]\n});\n```\n\n```
      handlebars\n{{view Ember.Select\n       contentBinding=\"App.controller.content\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n
      \      selectionBinding=\"App.controller.selectedPerson\"}}\n```\n\nWould result
      in the following HTML with a selected option:\n\n``` html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `selectedPerson` value of `App.controller`\nto match the content object
      of the newly selected `<option>`. In this\ncase it is the first object in the
      `App.content.content` \n\n### Supplying a Prompt\n\nA `null` value for the Ember.Select's
      `value` or `selection` property\nresults in there being no `<option>` with a
      `selected` attribute:\n\n``` javascript\nApp.controller = Ember.Object.create({\n
      \ selected: null,\n  content: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```
      handlebars\n{{view Ember.Select\n       contentBinding=\"App.controller.content\"\n
      \      valueBinding=\"App.controller.selected\"\n}}\n```\n\nWould result in
      the following HTML:\n\n``` html\n<select class=\"ember-select\">\n  <option
      value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nAlthough
      `App.controller.selected` is `null` and no `<option>`\nhas a `selected` attribute
      the rendered HTML will display the\nfirst item as though it were selected. You
      can supply a string\nvalue for the Ember.Select to display when there is no
      selection\nwith the `prompt` option:\n\n``` javascript\nApp.controller = Ember.Object.create({\n
      \ selected: null,\n  content: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```
      handlebars\n{{view Ember.Select\n       contentBinding=\"App.controller.content\"\n
      \      valueBinding=\"App.controller.selected\"\n       prompt=\"Please select
      a name\"\n}}\n```\n\nWould result in the following HTML:\n\n``` html\n<select
      class=\"ember-select\">\n  <option>Please select a name</option>\n  <option
      value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```"
    extends: Ember.View
  Ember.TextArea:
    name: Ember.TextArea
    shortname: Ember.TextArea
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_area.js
    line: 12
    description: ! "The `Ember.TextArea` view class renders a\n[textarea](https://developer.mozilla.org/en/HTML/Element/textarea)
      element.\nIt allows for binding Ember properties to the text area contents (`value`),\nlive-updating
      as the user inputs text.\n\n## Layout and LayoutName properties\n\nBecause HTML
      `textarea` elements do not contain inner HTML the `layout` and `layoutName`
      \nproperties will not be applied. See `Ember.View`'s layout section for more
      information.\n\n## HTML Attributes\n\nBy default `Ember.TextArea` provides support
      for `rows`, `cols`, `placeholder`, `disabled`,\n`maxlength` and `tabindex` attributes
      on a textarea. If you need to support  more\nattributes have a look at the `attributeBindings`
      property in `Ember.View`'s HTML Attributes section.\n\nTo globally add support
      for additional attributes you can reopen `Ember.TextArea` or `Ember.TextSupport`.\n\n```
      javascript\nEmber.TextSupport.reopen({\n  attributeBindings: [\"required\"]\n})\n```"
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextField:
    name: Ember.TextField
    shortname: Ember.TextField
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_field.js
    line: 12
    description: ! "The `Ember.TextField` view class renders a text\n[input](https://developer.mozilla.org/en/HTML/Element/Input)
      element. It\nallows for binding Ember properties to the text field contents
      (`value`),\nlive-updating as the user inputs text.\n\nExample:\n\n``` handlebars\n{{view
      Ember.TextField valueBinding=\"firstName\"}}\n```\n\n## Layout and LayoutName
      properties\nBecause HTML `input` elements are self closing `layout` and `layoutName`
      properties will\nnot be applied. See `Ember.View`'s layout section for more
      information.\n\n## HTML Attributes\n\nBy default `Ember.TextField` provides
      support for `type`, `value`, `size`, `placeholder`,\n`disabled`, `maxlength`
      and `tabindex` attributes on a textarea. If you need to support\nmore attributes
      have a look at the `attributeBindings` property in `Ember.View`'s\nHTML Attributes
      section.\n\nTo globally add support for additional attributes you can reopen
      `Ember.TextField` or\n`Ember.TextSupport`.\n\n``` javascript\nEmber.TextSupport.reopen({\n
      \ attributeBindings: [\"required\"]\n})\n```"
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextSupport:
    name: Ember.TextSupport
    shortname: Ember.TextSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextArea
    - Ember.TextField
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_support.js
    line: 11
    description: Shared mixin used by Ember.TextField and Ember.TextArea.
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember.Handlebars.helpers:
    name: Ember.Handlebars.helpers
    shortname: Ember.Handlebars.helpers
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars/lib/ext.js
    line: 29
  Ember.Handlebars:
    name: Ember.Handlebars
    shortname: Ember.Handlebars
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/ext.js
    line: 13
    description: ! 'Prepares the Handlebars templating library for use inside Ember''s
      view

      system.


      The Ember.Handlebars object is the standard Handlebars library, extended to
      use

      Ember''s get() method instead of direct property access, which allows

      computed properties to be used inside templates.


      To create an Ember.Handlebars template, call Ember.Handlebars.compile().  This
      will

      return a function that can be used by Ember.View for rendering.'
  Ember._HandlebarsBoundView:
    name: Ember._HandlebarsBoundView
    shortname: Ember._HandlebarsBoundView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    line: 73
    description: ! 'Ember._HandlebarsBoundView is a private view created by the Handlebars
      `{{bind}}`

      helpers that is used to keep track of bound properties.


      Every time a property is bound using a `{{mustache}}`, an anonymous subclass

      of Ember._HandlebarsBoundView is created with the appropriate sub-template and

      context set up. When the associated property changes, just the template for

      this view will re-render.'
    extends: Ember._MetamorphView
    access: private
    tagname: ''
  Ember._Metamorph:
    name: Ember._Metamorph
    shortname: Ember._Metamorph
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember._MetamorphView
    - Ember._SimpleMetamorphView
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 57
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember._MetamorphView:
    name: Ember._MetamorphView
    shortname: Ember._MetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 91
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember._SimpleMetamorphView:
    name: Ember._SimpleMetamorphView
    shortname: Ember._SimpleMetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 100
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember.Handlebars.Compiler:
    name: Ember.Handlebars.Compiler
    shortname: Ember.Handlebars.Compiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars/lib/ext.js
    line: 35
    description: Override the the opcode compiler and JavaScript compiler for Handlebars.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.Handlebars.JavaScriptCompiler:
    name: Ember.Handlebars.JavaScriptCompiler
    shortname: Ember.Handlebars.JavaScriptCompiler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember.Handlebars
    file: ../packages/ember-handlebars/lib/ext.js
    line: 52
    access: private
    tagname: ''
    is_constructor: 1
  Ember.String:
    name: Ember.String
    shortname: Ember.String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/string.js
    line: 24
    description: ! 'Defines string helper methods including string formatting and
      localization.

      Unless Ember.EXTEND_PROTOTYPES.String is false these methods will also be added

      to the String.prototype as well.'
    submodule: ember-runtime
    static: 1
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: ''
  Ember.Binding:
    name: Ember.Binding
    shortname: Ember.Binding
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/binding.js
    line: 306
    description: ! "An Ember.Binding connects the properties of two objects so that
      whenever the\nvalue of one property changes, the other property will be changed
      also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties\nYou
      do not usually create Binding objects directly but instead describe\nbindings
      in your class or object definition using automatic binding detection.\n\nProperties
      ending in a `Binding` suffix will be converted to Ember.Binding instances.\nThe
      value of this property should be a string representing a path to another object
      or\na custom binding instanced created using Binding helpers (see \"Customizing
      Your Bindings\"):\n\n    valueBinding: \"MyApp.someController.title\"\n\nThis
      will create a binding from `MyApp.someController.title` to the `value`\nproperty
      of your object instance automatically. Now the two values will be\nkept in sync.\n\n##
      One Way Bindings\n\nOne especially useful binding customization you can use
      is the `oneWay()`\nhelper. This helper tells Ember that you are only interested
      in\nreceiving changes on the object you are binding from. For example, if you\nare
      binding to a preference and you want to be notified if the preference\nhas changed,
      but your object will not be changing the preference itself, you\ncould do:\n\n
      \   bigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n\nThis
      way if the value of MyApp.preferencesController.bigTitles changes the\n\"bigTitles\"
      property of your object will change also. However, if you\nchange the value
      of your \"bigTitles\" property, it will not update the\npreferencesController.\n\nOne
      way bindings are almost twice as fast to setup and twice as fast to\nexecute
      because the binding only has to worry about changes to one side.\n\nYou should
      consider using one way bindings anytime you have an object that\nmay be created
      frequently and you do not intend to change a property; only\nto monitor it for
      changes. (such as in the example above).\n\n## Adding Bindings Manually\n\nAll
      of the examples above show you how to configure a custom binding, but\nthe result
      of these customizations will be a binding template, not a fully\nactive Binding
      instance. The binding will actually become active only when you\ninstantiate
      the object the binding belongs to. It is useful however, to\nunderstand what
      actually happens when the binding is activated.\n\nFor a binding to function
      it must have at least a \"from\" property and a \"to\"\nproperty. The from property
      path points to the object/key that you want to\nbind from while the to path
      points to the object/key you want to bind to.\n\nWhen you define a custom binding,
      you are usually describing the property\nyou want to bind from (such as \"MyApp.someController.value\"
      in the examples\nabove). When your object is created, it will automatically
      assign the value\nyou want to bind \"to\" based on the name of your binding
      key. In the\nexamples above, during init, Ember objects will effectively call\nsomething
      like this on your binding:\n\n    binding = Ember.Binding.from(this.valueBinding).to(\"value\");\n\nThis
      creates a new binding instance based on the template you provide, and\nsets
      the to path to the \"value\" property of the new object. Now that the\nbinding
      is fully configured with a \"from\" and a \"to\", it simply needs to be\nconnected
      to become active. This is done through the connect() method:\n\n    binding.connect(this);\n\nNote
      that when you connect a binding you pass the object you want it to be\nconnected
      to.  This object will be used as the root for both the from and\nto side of
      the binding when inspecting relative paths.  This allows the\nbinding to be
      automatically inherited by subclassed objects as well.\n\nNow that the binding
      is connected, it will observe both the from and to side\nand relay changes.\n\nIf
      you ever needed to do so (you almost never will, but it is useful to\nunderstand
      this anyway), you could manually create an active binding by\nusing the Ember.bind()
      helper method. (This is the same method used by\nto setup your bindings on objects):\n\n
      \   Ember.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n\nBoth
      of these code fragments have the same effect as doing the most friendly\nform
      of binding creation like so:\n\n    MyApp.anotherObject = Ember.Object.create({\n
      \     valueBinding: \"MyApp.someController.value\",\n\n      // OTHER CODE FOR
      THIS OBJECT...\n\n    });\n\nEmber's built in binding creation method makes
      it easy to automatically\ncreate bindings for you. You should always use the
      highest-level APIs\navailable, even if you understand how it works underneath."
    since: Ember 0.9
  Ember.ComputedProperty:
    name: Ember.ComputedProperty
    shortname: Ember.ComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/computed.js
    line: 114
    extends: Ember.Descriptor
    is_constructor: 1
  Ember.Logger:
    name: Ember.Logger
    shortname: Ember.Logger
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/core.js
    line: 145
    description: ! 'Inside Ember-Metal, simply uses the imports.console object.

      Override this to provide more robust logging functionality.'
  Ember.Instrumentation:
    name: Ember.Instrumentation
    shortname: Ember.Instrumentation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/instrumentation.js
    line: 1
    description: ! "The purpose of the Ember Instrumentation module is\nto provide
      efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener
      by using `Ember.subscribe`:\n\n    Ember.subscribe(\"render\", {\n      before:
      function(name, timestamp, payload) {\n\n      },\n\n      after: function(name,
      timestamp, payload) {\n\n      }\n    });\n\nIf you return a value from the
      `before` callback, that same\nvalue will be passed as a fourth parameter to
      the `after`\ncallback.\n\nInstrument a block of code by using `Ember.instrument`:\n\n
      \   Ember.instrument(\"render.handlebars\", payload, function() {\n      //
      rendering logic\n    }, binding);\n\nEvent names passed to `Ember.instrument`
      are namespaced\nby periods, from more general to more specific. Subscribers\ncan
      listen for events by whatever level of granularity they\nare interested in.\n\nIn
      the above example, the event is `render.handlebars`,\nand the subscriber listened
      for all events beginning with\n`render`. It would receive callbacks for events
      named\n`render`, `render.handlebars`, `render.container`, or\neven `render.handlebars.layout`."
    static: 1
  Ember.OrderedSet:
    name: Ember.OrderedSet
    shortname: Ember.OrderedSet
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 52
    description: ! 'This class is used internally by Ember.js and Ember Data.

      Please do not use it at this time. We plan to clean it up

      and add many tests soon.'
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Map:
    name: Ember.Map
    shortname: Ember.Map
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 173
    description: ! "A Map stores values indexed by keys. Unlike JavaScript's\ndefault
      Objects, the keys of a Map can be any JavaScript\nobject.\n\nInternally, a Map
      has two data structures:\n\n  `keys`: an OrderedSet of all of the existing keys\n
      \ `values`: a JavaScript Object indexed by the\n    Ember.guidFor(key)\n\nWhen
      a key/value pair is added for the first time, we\nadd the key to the `keys`
      OrderedSet, and create or\nreplace an entry in `values`. When an entry is deleted,\nwe
      delete its entry in `keys` and `values`."
    access: private
    tagname: ''
    is_constructor: 1
  Ember.MapWithDefault:
    name: Ember.MapWithDefault
    shortname: Ember.MapWithDefault
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 308
    extends: Ember.Map
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: options
      description: ''
      optional: true
      props:
      - name: defaultValue
        description: ''
        type: Anything
        optional: true
  Ember.Mixin:
    name: Ember.Mixin
    shortname: Ember.Mixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/mixin.js
    line: 306
    description: ! "The `Ember.Mixin` class allows you to create mixins, whose properties
      can be\nadded to other classes. For instance,\n\n    App.Editable = Ember.Mixin.create({\n
      \     edit: function() {\n        console.log('starting to edit');\n        this.set('isEditing',
      true);\n      },\n      isEditing: false\n    });\n\n    // Mix mixins into
      classes by passing them as the first arguments to\n    // .extend or .create.\n
      \   App.CommentView = Ember.View.extend(App.Editable, {\n      template: Ember.Handlebars.compile('{{#if
      isEditing}}...{{else}}...{{/if}}')\n    });\n\n    commentView = App.CommentView.create();\n
      \   commentView.edit(); // => outputs 'starting to edit'\n\nNote that Mixins
      are created with `Ember.Mixin.create`, not\n`Ember.Mixin.extend`."
  Ember.platform:
    name: Ember.platform
    shortname: Ember.platform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/platform.js
    line: 115
    description: Platform specific methods and feature detectors needed by the framework.
    static: 1
  Ember.Descriptor:
    name: Ember.Descriptor
    shortname: Ember.Descriptor
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/properties.js
    line: 23
    description: ! 'Objects of this type can implement an interface to responds requests
      to

      get and set.  The default implementation handles simple properties.


      You generally won''t need to create or subclass this directly.'
    access: private
    tagname: ''
    is_constructor: 1
  Ember.RunLoop:
    name: Ember.RunLoop
    shortname: Ember.RunLoop
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/run_loop.js
    line: 44
    description: Ember RunLoop (Private)
    access: private
    tagname: ''
    is_constructor: 1
  Ember.run:
    name: Ember.run
    shortname: Ember.run
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/run_loop.js
    line: 189
    description: ! "Runs the passed target and method inside of a RunLoop, ensuring
      any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally
      you should not need to invoke this method yourself.  However if\nyou are implementing
      raw event handlers when interfacing with other\nlibraries or plugins, you should
      probably wrap all of your code inside this\ncall.\n\n    Ember.run(function(){\n
      \     // code to be execute within a RunLoop \n    });"
    static: 1
    is_constructor: 1
    params:
    - name: target
      description: target of method to call
      type: Object
      optional: true
    - name: method
      description: ! "Method to invoke.\n  May be a function or a string.  If you
        pass a string\n  then it will be looked up on the passed target."
      type: Function|String
    - name: args*
      description: Any additional arguments you wish to pass to the method.
      type: Object
      optional: true
    return:
      description: return value from invoking the passed function.
      type: Object
  Ember.Location:
    name: Ember.Location
    shortname: Ember.Location
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/api.js
    line: 23
    description: ! 'Ember.Location returns an instance of the correct implementation
      of

      the `location` API.


      You can pass it a `implementation` (''hash'', ''history'', ''none'') to force
      a

      particular implementation.'
    static: 1
  Ember.HashLocation:
    name: Ember.HashLocation
    shortname: Ember.HashLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/hash_location.js
    line: 8
    description: ! 'Ember.HashLocation implements the location API using the browser''s

      hash. At present, it relies on a hashchange event existing in the

      browser.'
    extends: Ember.Object
  Ember.HistoryLocation:
    name: Ember.HistoryLocation
    shortname: Ember.HistoryLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/history_location.js
    line: 9
    description: ! 'Ember.HistoryLocation implements the location API using the browser''s

      history.pushState API.'
    extends: Ember.Object
  Ember.NoneLocation:
    name: Ember.NoneLocation
    shortname: Ember.NoneLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/none_location.js
    line: 8
    description: ! 'Ember.NoneLocation does not interact with the browser. It is useful
      for

      testing, or when you need to manage state with your Router, but temporarily

      don''t want it to muck with the URL (for example when you embed your

      application in a larger page).'
    extends: Ember.Object
  Ember.Routable:
    name: Ember.Routable
    shortname: Ember.Routable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Route
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/routable.js
    line: 36
    extends: Ember.Mixin
  Ember.Route:
    name: Ember.Route
    shortname: Ember.Route
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/route.js
    line: 8
    extends: Ember.State
    uses:
    - Ember.Routable
  Ember._RouteMatcher:
    name: Ember._RouteMatcher
    shortname: Ember._RouteMatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-routing/lib/route_matcher.js
    line: 5
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Router:
    name: Ember.Router
    shortname: Ember.Router
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/router.js
    line: 21
    description: ! "`Ember.Router` is the subclass of `Ember.StateManager` responsible
      for providing URL-based\napplication state detection. The `Ember.Router` instance
      of an application detects the browser URL\nat application load time and attempts
      to match it to a specific application state. Additionally\nthe router will update
      the URL to reflect an application's state changes over time.\n\n## Adding a
      Router Instance to Your Application\nAn instance of Ember.Router can be associated
      with an instance of Ember.Application in one of two ways:\n\nYou can provide
      a subclass of Ember.Router as the `Router` property of your application. An
      instance\nof this Router class will be instantiated and route detection will
      be enabled when the application's\n`initialize` method is called. The Router
      instance will be available as the `router` property\nof the application:\n\n
      \   App = Ember.Application.create({\n      Router: Ember.Router.extend({ ...
      })\n    });\n\n    App.initialize();\n    App.get('router') // an instance of
      App.Router\n\nIf you want to define a Router instance elsewhere, you can pass
      the instance to the application's\n`initialize` method:\n\n    App = Ember.Application.create();\n
      \   aRouter = Ember.Router.create({ ... });\n\n    App.initialize(aRouter);\n
      \   App.get('router') // aRouter\n\n## Adding Routes to a Router\nThe `initialState`
      property of Ember.Router instances is named `root`. The state stored in this\nproperty
      must be a subclass of Ember.Route. The `root` route acts as the container for
      the\nset of routable states but is not routable itself. It should have states
      that are also subclasses\nof Ember.Route which each have a `route` property
      describing the URL pattern you would like to detect.\n\n    App = Ember.Application.create({\n
      \     Router: Ember.Router.extend({\n        root: Ember.Route.extend({\n          index:
      Ember.Route.extend({\n            route: '/'\n          }),\n          ... additional
      Ember.Routes ...\n        })\n      })\n    });\n    App.initialize();\n\n\nWhen
      an application loads, Ember will parse the URL and attempt to find an Ember.Route
      within\nthe application's states that matches. (The example URL-matching below
      will use the default\n'hash syntax' provided by `Ember.HashLocation`.)\n\nIn
      the following route structure:\n\n    App = Ember.Application.create({\n      Router:
      Ember.Router.extend({\n        root: Ember.Route.extend({\n          aRoute:
      Ember.Route.extend({\n            route: '/'\n          }),\n          bRoute:
      Ember.Route.extend({\n            route: '/alphabeta'\n          })\n        })\n
      \     })\n    });\n    App.initialize();\n\nLoading the page at the URL '#/'
      will detect the route property of 'root.aRoute' ('/') and\ntransition the router
      first to the state named 'root' and then to the substate 'aRoute'.\n\nRespectively,
      loading the page at the URL '#/alphabeta' would detect the route property of\n'root.bRoute'
      ('/alphabeta') and transition the router first to the state named 'root' and\nthen
      to the substate 'bRoute'.\n\n## Adding Nested Routes to a Router\nRoutes can
      contain nested subroutes each with their own `route` property describing the
      nested\nportion of the URL they would like to detect and handle. Router, like
      all instances of StateManager,\ncannot call `transitonTo` with an intermediary
      state. To avoid transitioning the Router into an\nintermediary state when detecting
      URLs, a Route with nested routes must define both a base `route`\nproperty for
      itself and a child Route with a `route` property of `'/'` which will be transitioned\nto
      when the base route is detected in the URL:\n\nGiven the following application
      code:\n\n    App = Ember.Application.create({\n      Router: Ember.Router.extend({\n
      \       root: Ember.Route.extend({\n          aRoute: Ember.Route.extend({\n
      \           route: '/theBaseRouteForThisSet',\n\n            indexSubRoute:
      Ember.Route.extend({\n              route: '/'\n            }),\n\n            subRouteOne:
      Ember.Route.extend({\n              route: '/subroute1'\n            }),\n\n
      \           subRouteTwo: Ember.Route.extend({\n              route: '/subRoute2'\n
      \           })\n\n          })\n        })\n      })\n    });\n    App.initialize();\n\nWhen
      the application is loaded at '/theBaseRouteForThisSet' the Router will transition
      to the route\nat path 'root.aRoute' and then transition to state 'indexSubRoute'.\n\nWhen
      the application is loaded at '/theBaseRouteForThisSet/subRoute1' the Router
      will transition to\nthe route at path 'root.aRoute' and then transition to state
      'subRouteOne'.\n\n## Route Transition Events\nTransitioning between Ember.Route
      instances (including the transition into the detected\nroute when loading the
      application)  triggers the same transition events as state transitions for\nbase
      `Ember.State`s. However, the default `setup` transition event is named `connectOutlets`
      on\nEmber.Router instances (see 'Changing View Hierarchy in Response To State
      Change').\n\nThe following route structure when loaded with the URL \"#/\"\n\n
      \   App = Ember.Application.create({\n      Router: Ember.Router.extend({\n
      \       root: Ember.Route.extend({\n          aRoute: Ember.Route.extend({\n
      \           route: '/',\n            enter: function(router) {\n              console.log(\"entering
      root.aRoute from\", router.get('currentState.name'));\n            },\n            connectOutlets:
      function(router) {\n              console.log(\"entered root.aRoute, fully transitioned
      to\", router.get('currentState.path'));\n            }\n          })\n        })\n
      \     })\n    });\n    App.initialize();\n\nWill result in console output of:\n\n
      \   'entering root.aRoute from root'\n    'entered root.aRoute, fully transitioned
      to root.aRoute '\n\nEmber.Route has two additional callbacks for handling URL
      serialization and deserialization. See\n'Serializing/Deserializing URLs'\n\n##
      Routes With Dynamic Segments\nAn Ember.Route's `route` property can reference
      dynamic sections of the URL by prefacing a URL segment\nwith the ':' character.
      \ The values of these dynamic segments will be passed as a hash to the\n`deserialize`
      method of the matching Route (see 'Serializing/Deserializing URLs').\n\n## Serializing/Deserializing
      URLs\nEmber.Route has two callbacks for associating a particular object context
      with a URL: `serialize`\nfor converting an object into a parameters hash to
      fill dynamic segments of a URL and `deserialize`\nfor converting a hash of dynamic
      segments from the URL into the appropriate object.\n\n### Deserializing A URL's
      Dynamic Segments\nWhen an application is first loaded or the URL is changed
      manually (e.g. through the browser's\nback button) the `deserialize` method
      of the URL's matching Ember.Route will be called with\nthe application's router
      as its first argument and a hash of the URL's dynamic segments and values\nas
      its second argument.\n\nThe following route structure when loaded with the URL
      \"#/fixed/thefirstvalue/anotherFixed/thesecondvalue\":\n\n    App = Ember.Application.create({\n
      \     Router: Ember.Router.extend({\n        root: Ember.Route.extend({\n          aRoute:
      Ember.Route.extend({\n            route: '/fixed/:dynamicSectionA/anotherFixed/:dynamicSectionB',\n
      \           deserialize: function(router, params) {}\n          })\n        })\n
      \     })\n    });\n    App.initialize();\n\nWill call the 'deserialize' method
      of the Route instance at the path 'root.aRoute' with the\nfollowing hash as
      its second argument:\n\n    {\n      dynamicSectionA: 'thefirstvalue',\n      dynamicSectionB:
      'thesecondvalue'\n    }\n\nWithin `deserialize` you should use this information
      to retrieve or create an appropriate context\nobject for the given URL (e.g.
      by loading from a remote API or accessing the browser's\n`localStorage`). This
      object must be the `return` value of `deserialize` and will be\npassed to the
      Route's `connectOutlets` and `serialize` methods.\n\nWhen an application's state
      is changed from within the application itself, the context provided for\nthe
      transition will be passed and `deserialize` is not called (see 'Transitions
      Between States').\n\n### Serializing An Object For URLs with Dynamic Segments\nWhen
      transitioning into a Route whose `route` property contains dynamic segments
      the Route's\n`serialize` method is called with the Route's router as the first
      argument and the Route's\ncontext as the second argument.  The return value
      of `serialize` will be used to populate the\ndynamic segments and should be
      an object with keys that match the names of the dynamic sections.\n\nGiven the
      following route structure:\n\n    App = Ember.Application.create({\n      Router:
      Ember.Router.extend({\n        root: Ember.Route.extend({\n          aRoute:
      Ember.Route.extend({\n            route: '/'\n          }),\n          bRoute:
      Ember.Route.extend({\n            route: '/staticSection/:someDynamicSegment',\n
      \           serialize: function(router, context) {\n              return {\n
      \               someDynamicSegment: context.get('name')\n              }\n            }\n
      \         })\n        })\n      })\n    });\n    App.initialize();\n\n\nTransitioning
      to \"root.bRoute\" with a context of `Object.create({name: 'Yehuda'})` will
      call\nthe Route's `serialize` method with the context as its second argument
      and update the URL to\n'#/staticSection/Yehuda'.\n\n## Transitions Between States\nOnce
      a routed application has initialized its state based on the entry URL, subsequent
      transitions to other\nstates will update the URL if the entered Route has a
      `route` property. Given the following route structure\nloaded at the URL '#/':\n\n
      \   App = Ember.Application.create({\n      Router: Ember.Router.extend({\n
      \       root: Ember.Route.extend({\n          aRoute: Ember.Route.extend({\n
      \           route: '/',\n            moveElsewhere: Ember.Route.transitionTo('bRoute')\n
      \         }),\n          bRoute: Ember.Route.extend({\n            route: '/someOtherLocation'\n
      \         })\n        })\n      })\n    });\n    App.initialize();\n\nAnd application
      code:\n\n    App.get('router').send('moveElsewhere');\n\nWill transition the
      application's state to 'root.bRoute' and trigger an update of the URL to\n'#/someOtherLocation'.\n\nFor
      URL patterns with dynamic segments a context can be supplied as the second argument
      to `send`.\nThe router will match dynamic segments names to keys on this object
      and fill in the URL with the\nsupplied values. Given the following state structure
      loaded at the URL '#/':\n\n    App = Ember.Application.create({\n      Router:
      Ember.Router.extend({\n        root: Ember.Route.extend({\n          aRoute:
      Ember.Route.extend({\n            route: '/',\n            moveElsewhere: Ember.Route.transitionTo('bRoute')\n
      \         }),\n          bRoute: Ember.Route.extend({\n            route: '/a/route/:dynamicSection/:anotherDynamicSection',\n
      \           connectOutlets: function(router, context) {},\n          })\n        })\n
      \     })\n    });\n    App.initialize();\n\nAnd application code:\n\n    App.get('router').send('moveElsewhere',
      {\n      dynamicSection: '42',\n      anotherDynamicSection: 'Life'\n    });\n\nWill
      transition the application's state to 'root.bRoute' and trigger an update of
      the URL to\n'#/a/route/42/Life'.\n\nThe context argument will also be passed
      as the second argument to the `serialize` method call.\n\n## Injection of Controller
      Singletons\nDuring application initialization Ember will detect properties of
      the application ending in 'Controller',\ncreate singleton instances of each
      class, and assign them as properties on the router.  The property name\nwill
      be the UpperCamel name converted to lowerCamel format. These controller classes
      should be subclasses\nof Ember.ObjectController, Ember.ArrayController, Ember.Controller,
      or a custom Ember.Object that includes the\nEmber.ControllerMixin mixin.\n\n```
      javascript\nApp = Ember.Application.create({\n  FooController: Ember.Object.create(Ember.ControllerMixin),\n
      \ Router: Ember.Router.extend({ ... })\n});\n\nApp.get('router.fooController');
      // instance of App.FooController\n```\n\nThe controller singletons will have
      their `namespace` property set to the application and their `target`\nproperty
      set to the application's router singleton for easy integration with Ember's
      user event system.\nSee 'Changing View Hierarchy in Response To State Change'
      and 'Responding to User-initiated Events.'\n\n## Responding to User-initiated
      Events\nController instances injected into the router at application initialization
      have their `target` property\nset to the application's router instance. These
      controllers will also be the default `context` for their\nassociated views.
      \ Uses of the `{{action}}` helper will automatically target the application's
      router.\n\nGiven the following application entered at the URL '#/':\n\n``` javascript\nApp
      = Ember.Application.create({\n  Router: Ember.Router.extend({\n    root: Ember.Route.extend({\n
      \     aRoute: Ember.Route.extend({\n        route: '/',\n        anActionOnTheRouter:
      function(router, context) {\n          router.transitionTo('anotherState', context);\n
      \       }\n      })\n      anotherState: Ember.Route.extend({\n        route:
      '/differentUrl',\n        connectOutlets: function(router, context) {\n\n        }\n
      \     })\n    })\n  })\n});\nApp.initialize();\n```\n\nThe following template:\n\n```
      handlebars\n<script type=\"text/x-handlebars\" data-template-name=\"aView\">\n
      \   <h1><a {{action anActionOnTheRouter}}>{{title}}</a></h1>\n</script>\n```\n\nWill
      delegate `click` events on the rendered `h1` to the application's router instance.
      In this case the\n`anActionOnTheRouter` method of the state at 'root.aRoute'
      will be called with the view's controller\nas the context argument. This context
      will be passed to the `connectOutlets` as its second argument.\n\nDifferent
      `context` can be supplied from within the `{{action}}` helper, allowing specific
      context passing\nbetween application states:\n\n``` handlebars\n<script type=\"text/x-handlebars\"
      data-template-name=\"photos\">\n  {{#each photo in controller}}\n    <h1><a
      {{action showPhoto photo}}>{{title}}</a></h1>\n  {{/each}}\n</script>\n```\n\nSee
      `Handlebars.helpers.action` for additional usage examples.\n\n\n## Changing
      View Hierarchy in Response To State Change\n\nChanges in application state that
      change the URL should be accompanied by associated changes in view\nhierarchy.
      \ This can be accomplished by calling 'connectOutlet' on the injected controller
      singletons from\nwithin the 'connectOutlets' event of an Ember.Route:\n\n```
      javascript\nApp = Ember.Application.create({\n  OneController: Ember.ObjectController.extend(),\n
      \ OneView: Ember.View.extend(),\n\n  AnotherController: Ember.ObjectController.extend(),\n
      \ AnotherView: Ember.View.extend(),\n\n  Router: Ember.Router.extend({\n    root:
      Ember.Route.extend({\n      aRoute: Ember.Route.extend({\n        route: '/',\n
      \       connectOutlets: function(router, context) {\n          router.get('oneController').connectOutlet('another');\n
      \       },\n      })\n    })\n  })\n});\nApp.initialize();\n```\n\n\nThis will
      detect the '{{outlet}}' portion of `oneController`'s view (an instance of `App.OneView`)
      and\nfill it with a rendered instance of `App.AnotherView` whose `context` will
      be the single instance of\n`App.AnotherController` stored on the router in the
      `anotherController` property.\n\nFor more information about Outlets, see `Ember.Handlebars.helpers.outlet`.
      For additional information on\nthe `connectOutlet` method, see `Ember.Controller.connectOutlet`.
      For more information on\ncontroller injections, see `Ember.Application#initialize()`.
      For additional information about view context,\nsee `Ember.View`."
    extends: Ember.StateManager
  Ember.ArrayController:
    name: Ember.ArrayController
    shortname: Ember.ArrayController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/array_controller.js
    line: 12
    description: ! "Ember.ArrayController provides a way for you to publish a collection
      of objects\nso that you can easily bind to the collection from a Handlebars
      #each helper,\nan Ember.CollectionView, or other controllers.\n\nThe advantage
      of using an ArrayController is that you only have to set up\nyour view bindings
      once; to change what's displayed, simply swap out the\n`content` property on
      the controller.\n\nFor example, imagine you wanted to display a list of items
      fetched via an XHR\nrequest. Create an Ember.ArrayController and set its `content`
      property:\n\n``` javascript\nMyApp.listController = Ember.ArrayController.create();\n\n$.get('people.json',
      function(data) {\n  MyApp.listController.set('content', data);\n});\n```\n\nThen,
      create a view that binds to your new controller:\n\n``` handlebars\n{{#each
      MyApp.listController}}\n  {{firstName}} {{lastName}}\n{{/each}}\n```\n\nAlthough
      you are binding to the controller, the behavior of this controller\nis to pass
      through any methods or properties to the underlying array. This\ncapability
      comes from `Ember.ArrayProxy`, which this class inherits from.\n\nNote: As of
      this writing, `ArrayController` does not add any functionality\nto its superclass,
      `ArrayProxy`. The Ember team plans to add additional\ncontroller-specific functionality
      in the future, e.g. single or multiple\nselection support. If you are creating
      something that is conceptually a\ncontroller, use this class."
    extends: Ember.ArrayProxy
    uses:
    - Ember.SortableMixin
    - Ember.ControllerMixin
  Ember.ControllerMixin:
    name: Ember.ControllerMixin
    shortname: Ember.ControllerMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    - Ember.Controller
    - Ember.ObjectController
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/controller.js
    line: 11
    description: Additional methods for the ControllerMixin
    extends: Ember.Mixin
  Ember.Controller:
    name: Ember.Controller
    shortname: Ember.Controller
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/controller.js
    line: 54
    extends: Ember.Object
    uses:
    - Ember.ControllerMixin
  Ember.ObjectController:
    name: Ember.ObjectController
    shortname: Ember.ObjectController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/object_controller.js
    line: 9
    description: ! 'Ember.ObjectController is part of Ember''s Controller layer. A
      single

      shared instance of each Ember.ObjectController subclass in your application''s

      namespace will be created at application initialization and be stored on your

      application''s Ember.Router instance.


      Ember.ObjectController derives its functionality from its superclass

      Ember.ObjectProxy and the Ember.ControllerMixin mixin.'
    extends: Ember.ObjectProxy
    uses:
    - Ember.ControllerMixin
  Function:
    name: Function
    shortname: Function
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  Ember.Array:
    name: Ember.Array
    shortname: Ember.Array
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/array.js
    line: 19
    description: ! 'This module implements Observer-friendly Array-like behavior.  This
      mixin is

      picked up by the Array class as well as other controllers, etc. that want to

      appear to be arrays.


      Unlike Ember.Enumerable, this mixin defines methods specifically for

      collections that provide index-ordered access to their contents.  When you

      are designing code that needs to accept any kind of Array-like object, you

      should use these methods instead of Array primitives because these will

      properly notify observers of changes to the array.


      Although these methods are efficient, they do add a layer of indirection to

      your application so it is a good idea to use them only when you need the

      flexibility of using both true JavaScript arrays and "virtual" arrays such

      as controllers and collections.


      You can use the methods defined in this module to access and modify array

      contents in a KVO-friendly way.  You can also be notified whenever the

      membership if an array changes by changing the syntax of the property to

      .observes(''*myProperty.[]'') .


      To support Ember.Array in your own class, you must override two

      primitives to use it: replace() and objectAt().


      Note that the Ember.Array mixin also incorporates the Ember.Enumerable mixin.  All

      Ember.Array-like objects are also enumerable.'
    extends: Ember.Mixin
    uses:
    - Ember.Enumerable
    since: Ember 0.9.0
  Ember.Comparable:
    name: Ember.Comparable
    shortname: Ember.Comparable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/comparable.js
    line: 9
    description: ! 'Implements some standard methods for comparing objects. Add this
      mixin to

      any class you create that can compare its instances.


      You should implement the compare() method.'
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Copyable:
    name: Ember.Copyable
    shortname: Ember.Copyable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/copyable.js
    line: 12
    description: ! 'Implements some standard methods for copying an object.  Add this
      mixin to

      any object you create that can create a copy of itself.  This mixin is

      added automatically to the built-in array.


      You should generally implement the copy() method to return a copy of the

      receiver.


      Note that frozenCopy() will only work if you also implement Ember.Freezable.'
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Deferred:
    name: Ember.Deferred
    shortname: Ember.Deferred
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/deferred.js
    line: 11
    extends: Ember.Mixin
  Ember.Enumerable:
    name: Ember.Enumerable
    shortname: Ember.Enumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Array
    - Ember.MutableEnumerable
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/enumerable.js
    line: 35
    description: ! "This mixin defines the common interface implemented by enumerable
      objects\nin Ember.  Most of these methods follow the standard Array iteration\nAPI
      defined up to JavaScript 1.8 (excluding language-specific features that\ncannot
      be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically
      to the Array class on page load, so you\ncan use any of these methods on simple
      arrays.  If Array already implements\none of these methods, the mixin will not
      override them.\n\nh3. Writing Your Own Enumerable\n\nTo make your own custom
      class enumerable, you need two items:\n\n1. You must have a length property.
      \ This property should change whenever\n   the number of items in your enumerable
      object changes.  If you using this\n   with an Ember.Object subclass, you should
      be sure to change the length\n   property using set().\n\n2. If you must implement
      nextObject().  See documentation.\n\nOnce you have these two methods implement,
      apply the Ember.Enumerable mixin\nto your class and you will be able to enumerate
      the contents of your object\nlike any other collection.\n\nh3. Using Ember Enumeration
      with Other Libraries\n\nMany other libraries provide some kind of iterator or
      enumeration like\nfacility.  This is often where the most common API conflicts
      occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries
      by implementing only methods that mostly correspond to the\nJavaScript 1.8 API."
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Evented:
    name: Ember.Evented
    shortname: Ember.Evented
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.State
    - Ember.View
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/evented.js
    line: 6
    extends: Ember.Mixin
  Ember.Freezable:
    name: Ember.Freezable
    shortname: Ember.Freezable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/freezable.js
    line: 9
    description: ! "The Ember.Freezable mixin implements some basic methods for marking
      an object\nas frozen. Once an object is frozen it should be read only. No changes\nmay
      be made the internal state of the object.\n\n## Enforcement\n\nTo fully support
      freezing in your subclass, you must include this mixin and\noverride any method
      that might alter any property on the object to instead\nraise an exception.
      You can check the state of an object by checking the\nisFrozen property.\n\nAlthough
      future versions of JavaScript may support language-level freezing\nobject objects,
      that is not the case today. Even if an object is freezable,\nit is still technically
      possible to modify the object, even though it could\nbreak other parts of your
      application that do not expect a frozen object to\nchange. It is, therefore,
      very important that you always respect the\nisFrozen property on all freezable
      objects.\n\n## Example Usage\n\nThe example below shows a simple object that
      implement the Ember.Freezable\nprotocol.\n\n      Contact = Ember.Object.extend(Ember.Freezable,
      {\n\n        firstName: null,\n\n        lastName: null,\n\n        // swaps
      the names\n        swapNames: function() {\n          if (this.get('isFrozen'))
      throw Ember.FROZEN_ERROR;\n          var tmp = this.get('firstName');\n          this.set('firstName',
      this.get('lastName'));\n          this.set('lastName', tmp);\n          return
      this;\n        }\n\n      });\n\n      c = Context.create({ firstName: \"John\",
      lastName: \"Doe\" });\n      c.swapNames();  => returns c\n      c.freeze();\n
      \     c.swapNames();  => EXCEPTION\n\n## Copying\n\nUsually the Ember.Freezable
      protocol is implemented in cooperation with the\nEmber.Copyable protocol, which
      defines a frozenCopy() method that will return\na frozen object, if the object
      implements this method as well."
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.MutableArray:
    name: Ember.MutableArray
    shortname: Ember.MutableArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayProxy
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_array.js
    line: 23
    description: ! 'This mixin defines the API for modifying array-like objects.  These
      methods

      can be applied only to a collection that keeps its items in an ordered set.


      Note that an Array can change even if it does not implement this mixin.

      For example, one might implement a SparseArray that cannot be directly

      modified, but if its underlying enumerable changes, it will change also.'
    extends: Ember.Mixin
    uses:
    - Ember.Array
    - Ember.MutableEnumerable
  Ember.MutableEnumerable:
    name: Ember.MutableEnumerable
    shortname: Ember.MutableEnumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    - Ember.SortableMixin
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    line: 10
    description: ! "This mixin defines the API for modifying generic enumerables.
      \ These methods\ncan be applied to an object regardless of whether it is ordered
      or\nunordered.\n\nNote that an Enumerable can change even if it does not implement
      this mixin.\nFor example, a MappedEnumerable cannot be directly modified but
      if its\nunderlying enumerable changes, it will change also.\n\n## Adding Objects\n\nTo
      add an object to an enumerable, use the addObject() method.  This\nmethod will
      only add the object to the enumerable if the object is not\nalready present
      and the object if of a type supported by the enumerable.\n\n    set.addObject(contact);\n\n##
      Removing Objects\n\nTo remove an object form an enumerable, use the removeObject()
      method.  This\nwill only remove the object if it is already in the enumerable,
      otherwise\nthis method has no effect.\n\n    set.removeObject(contact);\n\n##
      Implementing In Your Own Code\n\nIf you are implementing an object and want
      to support this API, just include\nthis mixin in your class and implement the
      required methods.  In your unit\ntests, be sure to apply the Ember.MutableEnumerableTests
      to your object."
    extends: Ember.Mixin
    uses:
    - Ember.Enumerable
  Ember.Observable:
    name: Ember.Observable
    shortname: Ember.Observable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Object
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/observable.js
    line: 8
    description: ! "## Overview\n\nThis mixin provides properties and property observing
      functionality, core\nfeatures of the Ember object model.\n\nProperties and observers
      allow one object to observe changes to a\nproperty on another object. This is
      one of the fundamental ways that\nmodels, controllers and views communicate
      with each other in an Ember\napplication.\n\nAny object that has this mixin
      applied can be used in observer\noperations. That includes Ember.Object and
      most objects you will\ninteract with as you write your Ember application.\n\nNote
      that you will not generally apply this mixin to classes yourself,\nbut you will
      use the features provided by this module frequently, so it\nis important to
      understand how to use it.\n\n## Using get() and set()\n\nBecause of Ember's
      support for bindings and observers, you will always\naccess properties using
      the get method, and set properties using the\nset method. This allows the observing
      objects to be notified and\ncomputed properties to be handled properly.\n\nMore
      documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou
      typically observe property changes simply by adding the `observes`\ncall to
      the end of your method declarations in classes that you write.\nFor example:\n\n
      \   Ember.Object.create({\n      valueObserver: function() {\n        // Executes
      whenever the \"value\" property changes\n      }.observes('value')\n    });\n\nAlthough
      this is the most common way to add an observer, this capability\nis actually
      built into the Ember.Object class on top of two methods\ndefined in this mixin:
      `addObserver` and `removeObserver`. You can use\nthese two methods to add and
      remove observers yourself if you need to\ndo so at runtime.\n\nTo add an observer
      for a property, call:\n\n    object.addObserver('propertyKey', targetObject,
      targetAction)\n\nThis will call the `targetAction` method on the `targetObject`
      to be called\nwhenever the value of the `propertyKey` changes.\n\nNote that
      if `propertyKey` is a computed property, the observer will be\ncalled when any
      of the property dependencies are changed, even if the\nresulting value of the
      computed property is unchanged. This is necessary\nbecause computed properties
      are not computed until `get` is called."
    extends: Ember.Mixin
  Ember.SortableMixin:
    name: Ember.SortableMixin
    shortname: Ember.SortableMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/sortable.js
    line: 8
    description: ! "Ember.SortableMixin provides a standard interface for array proxies\nto
      specify a sort order and maintain this sorting when objects are added,\nremoved,
      or updated without changing the implicit order of their underlying\ncontent
      array:\n\n    songs = [\n      {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n
      \     {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n      {trackNumber:
      3, title: 'Glass Onion'},\n    ];\n\n    songsController = Ember.ArrayController.create({\n
      \     content: songs,\n      sortProperties: ['trackNumber']\n    });\n\n    songsController.get('firstObject');
      // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\n    songsController.addObject({trackNumber:
      1, title: 'Dear Prudence'});\n    songsController.get('firstObject'); // {trackNumber:
      1, title: 'Dear Prudence'}"
    extends: Ember.Mixin
    uses:
    - Ember.MutableEnumerable
  Ember.TargetActionSupport:
    name: Ember.TargetActionSupport
    shortname: Ember.TargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Button
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/target_action_support.js
    line: 8
    extends: Ember.Mixin
  Ember.ArrayProxy:
    name: Ember.ArrayProxy
    shortname: Ember.ArrayProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/array_proxy.js
    line: 12
    description: ! "An ArrayProxy wraps any other object that implements Ember.Array
      and/or\nEmber.MutableArray, forwarding all requests. This makes it very useful
      for\na number of binding use cases or other cases where being able to swap\nout
      the underlying array is useful.\n\nA simple example of usage:\n\n    var pets
      = ['dog', 'cat', 'fish'];\n    var ap = Ember.ArrayProxy.create({ content: Ember.A(pets)
      });\n    ap.get('firstObject'); // => 'dog'\n    ap.set('content', ['amoeba',
      'paramecium']);\n    ap.get('firstObject'); // => 'amoeba'\n\nThis class can
      also be useful as a layer to transform the contents of\nan array, as they are
      accessed. This can be done by overriding\n`objectAtContent`:\n\n    var pets
      = ['dog', 'cat', 'fish'];\n    var ap = Ember.ArrayProxy.create({\n        content:
      Ember.A(pets),\n        objectAtContent: function(idx) {\n            return
      this.get('content').objectAt(idx).toUpperCase();\n        }\n    });\n    ap.get('firstObject');
      // => 'DOG'"
    extends: Ember.Object
    uses:
    - Ember.MutableArray
  Ember.CoreObject:
    name: Ember.CoreObject
    shortname: Ember.CoreObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/core_object.js
    line: 294
  Ember.EachProxy:
    name: Ember.EachProxy
    shortname: Ember.EachProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/each_proxy.js
    line: 73
    description: ! 'This is the object instance returned when you get the @each property
      on an

      array.  It uses the unknownProperty handler to automatically create

      EachArray instances for property names.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Namespace:
    name: Ember.Namespace
    shortname: Ember.Namespace
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/namespace.js
    line: 10
    description: ! "A Namespace is an object usually used to contain other objects
      or methods\nsuch as an application or framework.  Create a namespace anytime
      you want\nto define one of these new containers.\n\n# Example Usage\n\n    MyFramework
      = Ember.Namespace.create({\n      VERSION: '1.0.0'\n    });"
    extends: Ember.Object
  Ember.NativeArray:
    name: Ember.NativeArray
    shortname: Ember.NativeArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/native_array.js
    line: 105
    description: ! 'The NativeArray mixin contains the properties needed to to make
      the native

      Array support Ember.MutableArray and all of its dependent APIs.  Unless you

      have Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Array set to false,
      this

      will be applied automatically. Otherwise you can apply the mixin at anytime
      by

      calling `Ember.NativeArray.activate`.'
    extends: Ember.Mixin
    uses:
    - Ember.MutableArray
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
  Ember.Object:
    name: Ember.Object
    shortname: Ember.Object
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object.js
    line: 10
    description: ! '`Ember.Object` is the main base class for all Ember objects. It
      is a subclass

      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,

      see the documentation for each of these.'
    extends: Ember.CoreObject
    uses:
    - Ember.Observable
  Ember.ObjectProxy:
    name: Ember.ObjectProxy
    shortname: Ember.ObjectProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object_proxy.js
    line: 30
    description: ! "`Ember.ObjectProxy` forwards all properties not defined by the
      proxy itself\nto a proxied `content` object.\n\n    object = Ember.Object.create({\n
      \     name: 'Foo'\n    });\n    proxy = Ember.ObjectProxy.create({\n      content:
      object\n    });\n\n    // Access and change existing properties\n    proxy.get('name')
      // => 'Foo'\n    proxy.set('name', 'Bar');\n    object.get('name') // => 'Bar'\n\n
      \   // Create new 'description' property on `object`\n    proxy.set('description',
      'Foo is a whizboo baz');\n    object.get('description') // => 'Foo is a whizboo
      baz'\n\nWhile `content` is unset, setting a property to be delegated will throw
      an Error.\n\n    proxy = Ember.ObjectProxy.create({\n      content: null,\n
      \     flag: null\n    });\n    proxy.set('flag', true);\n    proxy.get('flag');
      // => true\n    proxy.get('foo'); // => undefined\n    proxy.set('foo', 'data');
      // throws Error\n\nDelegated properties can be bound to and will change when
      content is updated.\n\nComputed properties on the proxy itself can depend on
      delegated properties.\n\n    ProxyWithComputedProperty = Ember.ObjectProxy.extend({\n
      \     fullName: function () {\n        var firstName = this.get('firstName'),\n
      \           lastName = this.get('lastName');\n        if (firstName && lastName)
      {\n          return firstName + ' ' + lastName;\n        }\n        return firstName
      || lastName;\n      }.property('firstName', 'lastName')\n    });\n    proxy
      = ProxyWithComputedProperty.create();\n    proxy.get('fullName'); => undefined\n
      \   proxy.set('content', {\n      firstName: 'Tom', lastName: 'Dale'\n    });
      // triggers property change for fullName on proxy\n    proxy.get('fullName');
      => 'Tom Dale'"
    extends: Ember.Object
  Ember.Set:
    name: Ember.Set
    shortname: Ember.Set
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/set.js
    line: 14
    description: ! "An unordered collection of objects.\n\nA Set works a bit like
      an array except that its items are not ordered.\nYou can create a set to efficiently
      test for membership for an object. You\ncan also iterate through a set just
      like an array, even accessing objects\nby index, however there is no guarantee
      as to their order.\n\nAll Sets are observable via the Enumerable Observer API
      - which works\non any enumerable object including both Sets and Arrays.\n\n##
      Creating a Set\n\nYou can create a set like you would most objects using\n`new
      Ember.Set()`.  Most new sets you create will be empty, but you can\nalso initialize
      the set with some content by passing an array or other\nenumerable of objects
      to the constructor.\n\nFinally, you can pass in an existing set and the set
      will be copied. You\ncan also create a copy of a set by calling `Ember.Set#copy()`.\n\n
      \   #js\n    // creates a new empty set\n    var foundNames = new Ember.Set();\n\n
      \   // creates a set with four names in it.\n    var names = new Ember.Set([\"Charles\",
      \"Tom\", \"Juan\", \"Alex\"]); // :P\n\n    // creates a copy of the names set.\n
      \   var namesCopy = new Ember.Set(names);\n\n    // same as above.\n    var
      anotherNamesCopy = names.copy();\n\n## Adding/Removing Objects\n\nYou generally
      add or remove objects from a set using `add()` or\n`remove()`. You can add any
      type of object including primitives such as\nnumbers, strings, and booleans.\n\nUnlike
      arrays, objects can only exist one time in a set. If you call `add()`\non a
      set with the same object multiple times, the object will only be added\nonce.
      Likewise, calling `remove()` with the same object multiple times will\nremove
      the object the first time and have no effect on future calls until\nyou add
      the object to the set again.\n\nNOTE: You cannot add/remove null or undefined
      to a set. Any attempt to do so\nwill be ignored.\n\nIn addition to add/remove
      you can also call `push()`/`pop()`. Push behaves\njust like `add()` but `pop()`,
      unlike `remove()` will pick an arbitrary\nobject, remove it and return it. This
      is a good way to use a set as a job\nqueue when you don't care which order the
      jobs are executed in.\n\n## Testing for an Object\n\nTo test for an object's
      presence in a set you simply call\n`Ember.Set#contains()`.\n\n## Observing changes\n\nWhen
      using `Ember.Set`, you can observe the `\"[]\"` property to be\nalerted whenever
      the content changes.  You can also add an enumerable\nobserver to the set to
      be notified of specific objects that are added and\nremoved from the set.  See
      `Ember.Enumerable` for more information on\nenumerables.\n\nThis is often unhelpful.
      If you are filtering sets of objects, for instance,\nit is very inefficient
      to re-filter all of the items each time the set\nchanges. It would be better
      if you could just adjust the filtered set based\non what was changed on the
      original set. The same issue applies to merging\nsets, as well.\n\n## Other
      Methods\n\n`Ember.Set` primary implements other mixin APIs.  For a complete
      reference\non the methods you will use with `Ember.Set`, please consult these
      mixins.\nThe most useful ones will be `Ember.Enumerable` and\n`Ember.MutableEnumerable`
      which implement most of the common iterator\nmethods you are used to on Array.\n\nNote
      that you can also use the `Ember.Copyable` and `Ember.Freezable`\nAPIs on `Ember.Set`
      as well.  Once a set is frozen it can no longer be\nmodified.  The benefit of
      this is that when you call frozenCopy() on it,\nEmber will avoid making copies
      of the set.  This allows you to write\ncode that can know with certainty when
      the underlying set data will or\nwill not be modified."
    extends: Ember.CoreObject
    uses:
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
    since: Ember 0.9
  Ember.Error:
    name: Ember.Error
    shortname: Ember.Error
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/core.js
    line: 381
    description: A subclass of the JavaScript Error object for use in Ember.
    extends: Error
    is_constructor: 1
  Ember.State:
    name: Ember.State
    shortname: Ember.State
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: Ember
    file: ../packages/ember-states/lib/state.js
    line: 8
    extends: Ember.Object
    uses:
    - Ember.Evented
  Transition:
    name: Transition
    shortname: Transition
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: ''
    file: ../packages/ember-states/lib/state_manager.js
    line: 11
    description: ! 'A Transition takes the enter, exit and resolve states and normalizes

      them:


      * takes any passed in contexts into consideration

      * adds in `initialState`s'
    access: private
    tagname: ''
  Ember.StateManager:
    name: Ember.StateManager
    shortname: Ember.StateManager
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: Ember
    file: ../packages/ember-states/lib/state_manager.js
    line: 170
    description: ! "StateManager is part of Ember's implementation of a finite state
      machine. A StateManager\ninstance manages a number of properties that are instances
      of `Ember.State`,\ntracks the current active state, and triggers callbacks when
      states have changed.\n\n## Defining States\n\nThe states of StateManager can
      be declared in one of two ways. First, you can define\na `states` property that
      contains all the states:\n\n    managerA = Ember.StateManager.create({\n      states:
      {\n        stateOne: Ember.State.create(),\n        stateTwo: Ember.State.create()\n
      \     }\n    })\n\n    managerA.get('states')\n    // {\n    //   stateOne:
      Ember.State.create(),\n    //   stateTwo: Ember.State.create()\n    // }\n\nYou
      can also add instances of `Ember.State` (or an `Ember.State` subclass) directly
      as properties\nof a StateManager. These states will be collected into the `states`
      property for you.\n\n    managerA = Ember.StateManager.create({\n      stateOne:
      Ember.State.create(),\n      stateTwo: Ember.State.create()\n    })\n\n    managerA.get('states')\n
      \   // {\n    //   stateOne: Ember.State.create(),\n    //   stateTwo: Ember.State.create()\n
      \   // }\n\n## The Initial State\nWhen created a StateManager instance will
      immediately enter into the state\ndefined as its `start` property or the state
      referenced by name in its\n`initialState` property:\n\n    managerA = Ember.StateManager.create({\n
      \     start: Ember.State.create({})\n    })\n\n    managerA.get('currentState.name')
      // 'start'\n\n    managerB = Ember.StateManager.create({\n      initialState:
      'beginHere',\n      beginHere: Ember.State.create({})\n    })\n\n    managerB.get('currentState.name')
      // 'beginHere'\n\nBecause it is a property you may also provide a computed function
      if you wish to derive\nan `initialState` programmatically:\n\n    managerC =
      Ember.StateManager.create({\n      initialState: function(){\n        if (someLogic)
      {\n          return 'active';\n        } else {\n          return 'passive';\n
      \       }\n      }.property(),\n      active: Ember.State.create({}),\n      passive:
      Ember.State.create({})\n    })\n\n## Moving Between States\nA StateManager can
      have any number of Ember.State objects as properties\nand can have a single
      one of these states as its current state.\n\nCalling `transitionTo` transitions
      between states:\n\n    robotManager = Ember.StateManager.create({\n      initialState:
      'poweredDown',\n      poweredDown: Ember.State.create({}),\n      poweredUp:
      Ember.State.create({})\n    })\n\n    robotManager.get('currentState.name')
      // 'poweredDown'\n    robotManager.transitionTo('poweredUp')\n    robotManager.get('currentState.name')
      // 'poweredUp'\n\nBefore transitioning into a new state the existing `currentState`
      will have its\n`exit` method called with the StateManager instance as its first
      argument and\nan object representing the transition as its second argument.\n\nAfter
      transitioning into a new state the new `currentState` will have its\n`enter`
      method called with the StateManager instance as its first argument and\nan object
      representing the transition as its second argument.\n\n    robotManager = Ember.StateManager.create({\n
      \     initialState: 'poweredDown',\n      poweredDown: Ember.State.create({\n
      \       exit: function(stateManager){\n          console.log(\"exiting the poweredDown
      state\")\n        }\n      }),\n      poweredUp: Ember.State.create({\n        enter:
      function(stateManager){\n          console.log(\"entering the poweredUp state.
      Destroy all humans.\")\n        }\n      })\n    })\n\n    robotManager.get('currentState.name')
      // 'poweredDown'\n    robotManager.transitionTo('poweredUp')\n    // will log\n
      \   // 'exiting the poweredDown state'\n    // 'entering the poweredUp state.
      Destroy all humans.'\n\n\nOnce a StateManager is already in a state, subsequent
      attempts to enter that state will\nnot trigger enter or exit method calls. Attempts
      to transition into a state that the\nmanager does not have will result in no
      changes in the StateManager's current state:\n\n    robotManager = Ember.StateManager.create({\n
      \     initialState: 'poweredDown',\n      poweredDown: Ember.State.create({\n
      \       exit: function(stateManager){\n          console.log(\"exiting the poweredDown
      state\")\n        }\n      }),\n      poweredUp: Ember.State.create({\n        enter:
      function(stateManager){\n          console.log(\"entering the poweredUp state.
      Destroy all humans.\")\n        }\n      })\n    })\n\n    robotManager.get('currentState.name')
      // 'poweredDown'\n    robotManager.transitionTo('poweredUp')\n    // will log\n
      \   // 'exiting the poweredDown state'\n    // 'entering the poweredUp state.
      Destroy all humans.'\n    robotManager.transitionTo('poweredUp') // no logging,
      no state change\n\n    robotManager.transitionTo('someUnknownState') // silently
      fails\n    robotManager.get('currentState.name') // 'poweredUp'\n\n\nEach state
      property may itself contain properties that are instances of Ember.State.\nThe
      StateManager can transition to specific sub-states in a series of transitionTo
      method calls or\nvia a single transitionTo with the full path to the specific
      state. The StateManager will also\nkeep track of the full path to its currentState\n\n
      \   robotManager = Ember.StateManager.create({\n      initialState: 'poweredDown',\n
      \     poweredDown: Ember.State.create({\n        charging: Ember.State.create(),\n
      \       charged: Ember.State.create()\n      }),\n      poweredUp: Ember.State.create({\n
      \       mobile: Ember.State.create(),\n        stationary: Ember.State.create()\n
      \     })\n    })\n\n    robotManager.get('currentState.name') // 'poweredDown'\n\n
      \   robotManager.transitionTo('poweredUp')\n    robotManager.get('currentState.name')
      // 'poweredUp'\n\n    robotManager.transitionTo('mobile')\n    robotManager.get('currentState.name')
      // 'mobile'\n\n    // transition via a state path\n    robotManager.transitionTo('poweredDown.charging')\n
      \   robotManager.get('currentState.name') // 'charging'\n\n    robotManager.get('currentState.path')
      // 'poweredDown.charging'\n\nEnter transition methods will be called for each
      state and nested child state in their\nhierarchical order.  Exit methods will
      be called for each state and its nested states in\nreverse hierarchical order.\n\nExit
      transitions for a parent state are not called when entering into one of its
      child states,\nonly when transitioning to a new section of possible states in
      the hierarchy.\n\n    robotManager = Ember.StateManager.create({\n      initialState:
      'poweredDown',\n      poweredDown: Ember.State.create({\n        enter: function(){},\n
      \       exit: function(){\n          console.log(\"exited poweredDown state\")\n
      \       },\n        charging: Ember.State.create({\n          enter: function(){},\n
      \         exit: function(){}\n        }),\n        charged: Ember.State.create({\n
      \         enter: function(){\n            console.log(\"entered charged state\")\n
      \         },\n          exit: function(){\n            console.log(\"exited
      charged state\")\n          }\n        })\n      }),\n      poweredUp: Ember.State.create({\n
      \       enter: function(){\n          console.log(\"entered poweredUp state\")\n
      \       },\n        exit: function(){},\n        mobile: Ember.State.create({\n
      \         enter: function(){\n            console.log(\"entered mobile state\")\n
      \         },\n          exit: function(){}\n        }),\n        stationary:
      Ember.State.create({\n          enter: function(){},\n          exit: function(){}\n
      \       })\n      })\n    })\n\n\n    robotManager.get('currentState.path')
      // 'poweredDown'\n    robotManager.transitionTo('charged')\n    // logs 'entered
      charged state'\n    // but does *not* log  'exited poweredDown state'\n    robotManager.get('currentState.name')
      // 'charged\n\n    robotManager.transitionTo('poweredUp.mobile')\n    // logs\n
      \   // 'exited charged state'\n    // 'exited poweredDown state'\n    // 'entered
      poweredUp state'\n    // 'entered mobile state'\n\nDuring development you can
      set a StateManager's `enableLogging` property to `true` to\nreceive console
      messages of state transitions.\n\n    robotManager = Ember.StateManager.create({\n
      \     enableLogging: true\n    })\n\n## Managing currentState with Actions\nTo
      control which transitions between states are possible for a given state, StateManager\ncan
      receive and route action messages to its states via the `send` method.  Calling
      to `send` with\nan action name will begin searching for a method with the same
      name starting at the current state\nand moving up through the parent states
      in a state hierarchy until an appropriate method is found\nor the StateManager
      instance itself is reached.\n\nIf an appropriately named method is found it
      will be called with the state manager as the first\nargument and an optional
      `context` object as the second argument.\n\n    managerA = Ember.StateManager.create({\n
      \     initialState: 'stateOne.substateOne.subsubstateOne',\n      stateOne:
      Ember.State.create({\n        substateOne: Ember.State.create({\n          anAction:
      function(manager, context){\n            console.log(\"an action was called\")\n
      \         },\n          subsubstateOne: Ember.State.create({})\n        })\n
      \     })\n    })\n\n    managerA.get('currentState.name') // 'subsubstateOne'\n
      \   managerA.send('anAction')\n    // 'stateOne.substateOne.subsubstateOne'
      has no anAction method\n    // so the 'anAction' method of 'stateOne.substateOne'
      is called\n    // and logs \"an action was called\"\n    // with managerA as
      the first argument\n    // and no second argument\n\n    someObject = {}\n    managerA.send('anAction',
      someObject)\n    // the 'anAction' method of 'stateOne.substateOne' is called
      again\n    // with managerA as the first argument and\n    // someObject as
      the second argument.\n\n\nIf the StateManager attempts to send an action but
      does not find an appropriately named\nmethod in the current state or while moving
      upwards through the state hierarchy\nit will throw a new Ember.Error. Action
      detection only moves upwards through the state hierarchy\nfrom the current state.
      It does not search in other portions of the hierarchy.\n\n    managerB = Ember.StateManager.create({\n
      \     initialState: 'stateOne.substateOne.subsubstateOne',\n      stateOne:
      Ember.State.create({\n        substateOne: Ember.State.create({\n          subsubstateOne:
      Ember.State.create({})\n        })\n      }),\n      stateTwo: Ember.State.create({\n
      \      anAction: function(manager, context){\n         // will not be called
      below because it is\n         // not a parent of the current state\n       }\n
      \     })\n    })\n\n    managerB.get('currentState.name') // 'subsubstateOne'\n
      \   managerB.send('anAction')\n    // Error: <Ember.StateManager:ember132> could
      not\n    // respond to event anAction in state stateOne.substateOne.subsubstateOne.\n\nInside
      of an action method the given state should delegate `transitionTo` calls on
      its\nStateManager.\n\n    robotManager = Ember.StateManager.create({\n      initialState:
      'poweredDown.charging',\n      poweredDown: Ember.State.create({\n        charging:
      Ember.State.create({\n          chargeComplete: function(manager, context){\n
      \           manager.transitionTo('charged')\n          }\n        }),\n        charged:
      Ember.State.create({\n          boot: function(manager, context){\n            manager.transitionTo('poweredUp')\n
      \         }\n        })\n      }),\n      poweredUp: Ember.State.create({\n
      \       beginExtermination: function(manager, context){\n          manager.transitionTo('rampaging')\n
      \       },\n        rampaging: Ember.State.create()\n      })\n    })\n\n    robotManager.get('currentState.name')
      // 'charging'\n    robotManager.send('boot') // throws error, no boot action\n
      \                             // in current hierarchy\n    robotManager.get('currentState.name')
      // remains 'charging'\n\n    robotManager.send('beginExtermination') // throws
      error, no beginExtermination\n                                            //
      action in current hierarchy\n    robotManager.get('currentState.name') // remains
      'charging'\n\n    robotManager.send('chargeComplete')\n    robotManager.get('currentState.name')
      // 'charged'\n\n    robotManager.send('boot')\n    robotManager.get('currentState.name')
      // 'poweredUp'\n\n    robotManager.send('beginExtermination', allHumans)\n    robotManager.get('currentState.name')
      // 'rampaging'\n\nTransition actions can also be created using the `transitionTo`
      method of the Ember.State class. The\nfollowing example StateManagers are equivalent:\n\n
      \   aManager = Ember.StateManager.create({\n      stateOne: Ember.State.create({\n
      \       changeToStateTwo: Ember.State.transitionTo('stateTwo')\n      }),\n
      \     stateTwo: Ember.State.create({})\n    })\n\n    bManager = Ember.StateManager.create({\n
      \     stateOne: Ember.State.create({\n        changeToStateTwo: function(manager,
      context){\n          manager.transitionTo('stateTwo', context)\n        }\n
      \     }),\n      stateTwo: Ember.State.create({})\n    })"
    extends: Ember.State
  Ember.EventDispatcher:
    name: Ember.EventDispatcher
    shortname: Ember.EventDispatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/event_dispatcher.js
    line: 8
    description: ! 'Ember.EventDispatcher handles delegating browser events to their
      corresponding

      Ember.Views. For example, when you click on a view, Ember.EventDispatcher ensures

      that that view''s `mouseDown` method gets called.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.RenderBuffer:
    name: Ember.RenderBuffer
    shortname: Ember.RenderBuffer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/render_buffer.js
    line: 27
    description: ! 'Ember.RenderBuffer gathers information regarding the a view and
      generates the

      final representation. Ember.RenderBuffer will generate HTML which can be pushed

      to the DOM.'
    is_constructor: 1
  Ember.CollectionView:
    name: Ember.CollectionView
    shortname: Ember.CollectionView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/collection_view.js
    line: 11
    description: ! "`Ember.CollectionView` is an `Ember.View` descendent responsible
      for managing a\ncollection (an array or array-like object) by maintaing a child
      view object and \nassociated DOM representation for each item in the array and
      ensuring that child\nviews and their associated rendered HTML are updated when
      items in the array\nare added, removed, or replaced.\n\n## Setting content\nThe
      managed collection of objects is referenced as the `Ember.CollectionView` instance's\n`content`
      property.\n\n``` javascript\nsomeItemsView = Ember.CollectionView.create({\n
      \ content: ['A', 'B','C']\n})\n```\n\nThe view for each item in the collection
      will have its `content` property set\nto the item.\n\n## Specifying itemViewClass\nBy
      default the view class for each item in the managed collection will be an instance\nof
      `Ember.View`. You can supply a different class by setting the `CollectionView`'s\n`itemViewClass`
      property.\n\nGiven an empty `<body>` and the following code:\n\n``` javascript
      \nsomeItemsView = Ember.CollectionView.create({\n  classNames: ['a-collection'],\n
      \ content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template:
      Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nsomeItemsView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n``` html\n<div class=\"ember-view
      a-collection\">\n  <div class=\"ember-view\">the letter: A</div>\n  <div class=\"ember-view\">the
      letter: B</div>\n  <div class=\"ember-view\">the letter: C</div>\n</div>\n```\n\n##
      Automatic matching of parent/child tagNames\n\nSetting the `tagName` property
      of a `CollectionView` to any of \n\"ul\", \"ol\", \"table\", \"thead\", \"tbody\",
      \"tfoot\", \"tr\", or \"select\" will result\nin the item views receiving an
      appropriately matched `tagName` property.\n\n\nGiven an empty `<body>` and the
      following code:\n\n``` javascript\nanUndorderedListView = Ember.CollectionView.create({\n
      \ tagName: 'ul',\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n
      \   template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nanUndorderedListView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n``` html\n<ul class=\"ember-view a-collection\">\n
      \ <li class=\"ember-view\">the letter: A</li>\n  <li class=\"ember-view\">the
      letter: B</li>\n  <li class=\"ember-view\">the letter: C</li>\n</ul>\n```\n\nAdditional
      tagName pairs can be provided by adding to `Ember.CollectionView.CONTAINER_MAP
      `\n\n``` javascript\nEmber.CollectionView.CONTAINER_MAP['article'] = 'section'\n```\n\n\n##
      Empty View\nYou can provide an `Ember.View` subclass to the `Ember.CollectionView`
      instance as its\n`emptyView` property. If the `content` property of a `CollectionView`
      is set to `null`\nor an empty array, an instance of this view will be the `CollectionView`s
      only child.\n\n``` javascript\naListWithNothing = Ember.CollectionView.create({\n
      \ classNames: ['nothing']\n  content: null,\n  emptyView: Ember.View.extend({\n
      \   template: Ember.Handlebars.compile(\"The collection is empty\")\n  })\n});\n\naListWithNothing.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n``` html\n<div class=\"ember-view
      nothing\">\n  <div class=\"ember-view\">\n    The collection is empty\n  </div>\n</div>\n```\n\n##
      Adding and Removing items\nThe `childViews` property of a `CollectionView` should
      not be directly manipulated. Instead,\nadd, remove, replace items from its `content`
      property. This will trigger\nappropriate changes to its rendered HTML.\n\n##
      Use in templates via the `{{collection}}` Ember.Handlebars helper\nEmber.Handlebars
      provides a helper specifically for adding `CollectionView`s to templates.\nSee
      `Ember.Handlebars.collection` for more details"
    extends: Ember.ContainerView
    since: Ember 0.9
  Ember.ContainerView:
    name: Ember.ContainerView
    shortname: Ember.ContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/container_view.js
    line: 15
    description: ! "A `ContainerView` is an `Ember.View` subclass that allows for
      manual or programatic\nmanagement of a view's `childViews` array that will correctly
      update the `ContainerView`\ninstance's rendered DOM representation.\n\n## Setting
      Initial Child Views\nThe initial array of child views can be set in one of two
      ways. You can provide\na `childViews` property at creation time that contains
      instance of `Ember.View`:\n\n``` javascript\naContainer = Ember.ContainerView.create({\n
      \ childViews: [Ember.View.create(), Ember.View.create()]\n});\n```\n\nYou can
      also provide a list of property names whose values are instances of `Ember.View`:\n\n```
      javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView',
      'bView', 'cView'],\n  aView: Ember.View.create(),\n  bView: Ember.View.create()\n
      \ cView: Ember.View.create()\n});\n```\n\nThe two strategies can be combined:\n\n```
      javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView',
      Ember.View.create()],\n  aView: Ember.View.create()\n});\n```\n\nEach child
      view's rendering will be inserted into the container's rendered HTML in the
      same\norder as its position in the `childViews` property.\n\n## Adding and Removing
      Child Views\nThe views in a container's `childViews` array should be added and
      removed by manipulating\nthe `childViews` property directly.\n\nTo remove a
      view pass that view into a `removeObject` call on the container's `childViews`
      property.\n\nGiven an empty `<body>` the following code\n\n``` javascript\naContainer
      = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews:
      ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n
      \ }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n``` \n\nResults in the HTML\n\n```
      html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n
      \ <div class=\"ember-view\">B</div>\n</div>\n```\n\nRemoving a view\n\n``` javascript\naContainer.get('childViews');
      // [aContainer.aView, aContainer.bView]\naContainer.get('childViews').removeObject(aContainer.get('bView'));\naContainer.get('childViews');
      // [aContainer.aView]\n```\n\nWill result in the following HTML\n\n``` html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n</div>\n```\n\n\nSimilarly,
      adding a child view is accomplished by adding `Ember.View` instances to the\ncontainer's
      `childViews` property.\n\nGiven an empty `<body>` the following code\n\n```
      javascript\naContainer = Ember.ContainerView.create({\n  classNames: ['the-container'],\n
      \ childViews: ['aView', 'bView'],\n  aView: Ember.View.create({\n    template:
      Ember.Handlebars.compile(\"A\")\n  }),\n  bView: Ember.View.create({\n    template:
      Ember.Handlebars.compile(\"B\")\n  })\n});\n\naContainer.appendTo('body');\n```\n\nResults
      in the HTML\n\n``` html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n
      \ <div class=\"ember-view\">B</div>\n</div>\n```\n\nAdding a view\n\n``` javascript\nAnotherViewClass
      = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Another view\")\n});\n\naContainer.get('childViews');
      // [aContainer.aView, aContainer.bView]\naContainer.get('childViews').pushObject(AnotherViewClass.create());\naContainer.get('childViews');
      // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n```\n\nWill
      result in the following HTML\n\n``` html\n<div class=\"ember-view the-container\">\n
      \ <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n  <div
      class=\"ember-view\">Another view</div>\n</div>\n```\n\n\nDirect manipulation
      of childViews presence or absence in the DOM via calls to\n`remove` or `removeFromParent`
      or calls to a container's `removeChild` may not behave\ncorrectly.\n\nCalling
      `remove()` on a child view will remove the view's HTML, but it will remain as
      part of its\ncontainer's `childView`s property.\n\nCalling `removeChild()` on
      the container will remove the passed view instance from the container's\n`childView`s
      but keep its HTML within the container's rendered view.\n\nCalling `removeFromParent()`
      behaves as expected but should be avoided in favor of direct\nmanipulation of
      a container's `childViews` property.\n\n``` javascript\naContainer = Ember.ContainerView.create({\n
      \ classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView:
      Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n
      \ bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```
      html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n
      \ <div class=\"ember-view\">B</div>\n</div>\n```\n\nCalling `aContainer.get('aView').removeFromParent()`
      will result in the following HTML\n\n``` html\n<div class=\"ember-view the-container\">\n
      \ <div class=\"ember-view\">B</div>\n</div>\n```\n\nAnd the `Ember.View` instance
      stored in `aContainer.aView` will be removed from `aContainer`'s\n`childViews`
      array.\n\n## Templates and Layout\n\nA `template`, `templateName`, `defaultTemplate`,
      `layout`, `layoutName` or `defaultLayout`\nproperty on a container view will
      not result in the template or layout being rendered.\nThe HTML contents of a
      `Ember.ContainerView`'s DOM representation will only be the rendered HTML\nof
      its child views.\n\n## Binding a View to Display\n\nIf you would like to display
      a single view in your ContainerView, you can set its `currentView`\nproperty.
      When the `currentView` property is set to a view instance, it will be added
      to the\nContainerView's `childViews` array. If the `currentView` property is
      later changed to a\ndifferent view, the new view will replace the old view.
      If `currentView` is set to `null`, the\nlast `currentView` will be removed.\n\nThis
      functionality is useful for cases where you want to bind the display of a ContainerView
      to\na controller or state manager. For example, you can bind the `currentView`
      of a container to\na controller like this:\n\n``` javascript\nApp.appController
      = Ember.Object.create({\n  view: Ember.View.create({\n    templateName: 'person_template'\n
      \ })\n});\n```\n\n``` handlebars\n{{view Ember.ContainerView currentViewBinding=\"App.appController.view\"}}\n```\n\n##
      Use lifecycle hooks\n\nThis is an example of how you could implement reusable
      currentView view.\n\n``` javascript\nApp.ContainerView = Ember.ContainerView.extend({\n
      \ appendCurrentView: function(currentView, callback) {\n    currentView.set('isVisible',
      true);\n\n    if (!this.get('childViews').contains(currentView)) {\n      this._super(currentView,
      callback);\n    } else {\n      callback();\n    }\n  },\n  removeCurrentView:
      function(currentView, callback) {\n    if (currentView.get('isShared')) {\n
      \     currentView.set('isVisible', false);\n      callback();\n    } else {\n
      \     this._super(currentView, callback);\n    }\n  }\n});\n````\n\nThis is
      an example of how you could implement animations.\n\n```` javascript\nApp.ContainerView
      = Ember.ContainerView.extend({\n  presentCurrentView: function(currentView,
      callback) {\n    currentView.$().animate({top: '0px'}, callback);\n  },\n  dismissCurrentView:
      function(currentView, callback) {\n    currentView.$().animate({top: '-100px'},
      callback);\n  }\n});\n````"
    extends: Ember.View
  Ember.View:
    name: Ember.View
    shortname: Ember.View
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/view.js
    line: 231
    description: ! "`Ember.View` is the class in Ember responsible for encapsulating
      templates of HTML\ncontent, combining templates with data to render as sections
      of a page's DOM, and\nregistering and responding to user-initiated events.\n\n##
      HTML Tag\nThe default HTML tag name used for a view's DOM representation is
      `div`. This can be\ncustomized by setting the `tagName` property. The following
      view class:\n\n``` javascript\nParagraphView = Ember.View.extend({\n  tagName:
      'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```
      html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n## HTML `class` Attribute\nThe
      HTML `class` attribute of a view's tag can be set by providing a `classNames`
      property\nthat is set to an array of strings:\n\n``` javascript\nMyView = Ember.View.extend({\n
      \ classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\" class=\"ember-view
      my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be
      set by providing a `classNameBindings` property\nset to an array of properties
      names for the view. The return value of these properties \nwill be added as
      part of the value for the view's `class` attribute. These properties\ncan be
      computed properties:\n\n``` javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: function(){\n
      \   if(someLogic){ return 'from-b'; }\n  }.property()\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name
      binding returns a boolean the property name itself\nwill be used as the class
      name if the property is true. The class name will\nnot be added if the value
      is `false` or `undefined`.\n\n``` javascript\nMyView = Ember.View.extend({\n
      \ classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings
      you can supply a string value other than the \nproperty name for use as the
      `class` HTML attribute by appending the preferred value after\na \":\" character
      when defining the binding:\n\n``` javascript\nMyView = Ember.View.extend({\n
      \ classNameBindings: ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view so-very-cool\"></div>\n```\n\n\nBoolean value class name
      bindings whose property names are in a camelCase-style\nformat will be converted
      to a dasherized format:\n\n``` javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill result in view instances with
      an HTML representation of:\n\n``` html\n<div id=\"ember1\" class=\"ember-view
      is-urgent\"></div>\n```\n\n\nClass name bindings can also refer to object values
      that are found by\ntraversing a path relative to the view itself:\n\n``` javascript\nMyView
      = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages:
      Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\" class=\"ember-view
      empty\"></div>\n```\n\n\nIf you want to add a class name for a property which
      evaluates to true and\nand a different class name if it evaluates to false,
      you can pass a binding\nlike this:\n\n```\n// Applies 'enabled' class when isEnabled
      is true and 'disabled' when isEnabled is false\nEmber.View.create({\n  classNameBindings:
      ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n```\n\nWill result in
      view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view enabled\"></div>\n``` \n\nWhen isEnabled is `false`, the
      resulting HTML reprensentation looks like this:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience
      to add a class if a property is `false`:\n\n``` javascript\n// Applies no class
      when isEnabled is true and class 'disabled' when isEnabled is false\nEmber.View.create({\n
      \ classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the view
      is set to `false`, it will result\nin view instances with an HTML representation
      of:\n\n``` html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates
      to the the value of a class name binding will result in automatic update \nof
      the  HTML `class` attribute in the view's rendered HTML representation.\nIf
      the value becomes  `false` or `undefined` the class name will be removed.\n\nBoth
      `classNames` and `classNameBindings` are concatenated properties. \nSee `Ember.Object`
      documentation for more information about concatenated properties.\n\n## HTML
      Attributes\n\nThe HTML attribute section of a view's tag can be set by providing
      an `attributeBindings`\nproperty set to an array of property names on the view.
      The return value of these properties\nwill be used as the value of the view's
      HTML associated attribute:\n\n``` javascript\nAnchorView = Ember.View.extend({\n
      \ tagName: 'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n``` html\n<a id=\"ember1\"
      class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nIf the return value
      of an `attributeBindings` monitored property is a boolean\nthe property will
      follow HTML's pattern of repeating the attribute's name as\nits value:\n\n```
      javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings:
      ['disabled'],\n  disabled: true\n});\n```\n\nWill result in view instances with
      an HTML representation of:\n\n``` html\n<input id=\"ember1\" class=\"ember-view\"
      disabled=\"disabled\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```
      javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings:
      ['disabled'],\n  disabled: function(){\n    if (someLogic) {\n      return true;\n
      \   } else {\n      return false;\n    }\n  }.property()\n});\n```\n\nUpdates
      to the the property of an attribute binding will result in automatic update
      \nof the  HTML attribute in the view's rendered HTML representation.\n\n`attributeBindings`
      is a concatenated property. See `Ember.Object` documentation\nfor more information
      about concatenated properties.\n\n## Templates\nThe HTML contents of a view's
      rendered representation are determined by its template.\nTemplates can be any
      function that accepts an optional context parameter and returns\na string of
      HTML that will be inserted within the view's tag. Most\ntypically in Ember this
      function will be a compiled Ember.Handlebars template.\n\n``` javascript\nAView
      = Ember.View.extend({\n  template: Ember.Handlebars.compile('I am the template')\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view\">I am the template</div>\n``` \n\nThe default context of
      the compiled template will be the view instance itself:\n\n``` javascript\nAView
      = Ember.View.extend({\n  template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n});\n\naView
      = AView.create({\n  content: Ember.Object.create({\n    firstName: 'Barry'\n
      \ })\n  excitedGreeting: function(){\n    return this.get(\"content.firstName\")
      + \"!!!\"\n  }\n});\n```\n\nWill result in an HTML representation of:\n\n```
      html\n<div id=\"ember1\" class=\"ember-view\">Hello Barry!!!</div>\n```\n\nWithin
      an Ember application is more common to define a Handlebars templates as\npart
      of a page:\n\n``` handlebars\n<script type='text/x-handlebars' data-template-name='some-template'>\n
      \ Hello\n</script>\n```\n\nAnd associate it by name using a view's `templateName`
      property:\n\n``` javascript\nAView = Ember.View.extend({\n  templateName: 'some-template'\n});\n```\n\nUsing
      a value for `templateName` that does not have a Handlebars template with a\nmatching
      `data-template-name` attribute will throw an error.\n\nAssigning a value to
      both `template` and `templateName` properties will throw an error.\n\nFor views
      classes that may have a template later defined (e.g. as the block portion of
      a `{{view}}`\nHandlebars helper call in another template or in a subclass),
      you can provide a `defaultTemplate`\nproperty set to compiled template function.
      If a template is not later provided for the view\ninstance the `defaultTemplate`
      value will be used:\n\n``` javascript\nAView = Ember.View.extend({\n  defaultTemplate:
      Ember.Handlebars.compile('I was the default'),\n  template: null,\n  templateName:
      null\n});\n```\n\nWill result in instances with an HTML representation of:\n\n```
      html\n<div id=\"ember1\" class=\"ember-view\">I was the default</div>\n```\n\nIf
      a `template` or `templateName` is provided it will take precedence over `defaultTemplate`:\n\n```
      javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I
      was the default')\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile('I
      was the template, not default')\n});\n```\n\nWill result in the following HTML
      representation when rendered:\n\n``` html\n<div id=\"ember1\" class=\"ember-view\">I
      was the template, not default</div>\n```\n\n## Layouts\n\nViews can have a secondary
      template that wraps their main template. Like\nprimary templates, layouts can
      be any function that  accepts an optional context\nparameter and returns a string
      of HTML that will be inserted inside view's tag. Views whose HTML\nelement is
      self closing (e.g. `<input />`) cannot have a layout and this property will
      be ignored.\n\nMost typically in Ember a layout will be a compiled Ember.Handlebars
      template.\n\nA view's layout can be set directly with the `layout` property
      or reference an\nexisting Handlebars template by name with the `layoutName`
      property.\n\nA template used as a layout must contain a single use of the Handlebars
      `{{yield}}`\nhelper. The HTML contents of a view's rendered `template` will
      be inserted at this location:\n\n``` javascript\nAViewWithLayout = Ember.View.extend({\n
      \ layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\")\n
      \ template: Ember.Handlebars.compile(\"I got wrapped\"),\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n``` html\n<div id=\"ember1\"
      class=\"ember-view\">\n  <div class=\"my-decorative-class\">\n    I got wrapped\n
      \ </div>\n</div>\n```\n\nSee `Handlebars.helpers.yield` for more information.\n\n##
      Responding to Browser Events\n\nViews can respond to user-initiated events in
      one of three ways: method implementation, \nthrough an event manager, and through
      `{{action}}` helper use in their template or layout.\n\n### Method Implementation\n\nViews
      can respond to user-initiated events by implementing a method that matches the\nevent
      name. A `jQuery.Event` object will be passed as the argument to this method.\n\n```
      javascript\nAView = Ember.View.extend({\n  click: function(event){\n    // will
      be called when when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n###
      Event Managers\n\nViews can define an object as their `eventManager` property.
      This object can then\nimplement methods that match the desired event names.
      Matching events that occur\non the view's rendered HTML or the rendered HTML
      of any of its DOM descendants \nwill trigger this method.  A `jQuery.Event`
      object will be passed as the first \nargument to the method and an  `Ember.View`
      object as the second. The `Ember.View`\nwill be the view whose rendered HTML
      was interacted with. This may be the view with\nthe `eventManager` property
      or one of its descendent views.\n\n``` javascript\nAView = Ember.View.extend({\n
      \ eventManager: Ember.Object.create({\n    doubleClick: function(event, view){\n
      \     // will be called when when an instance's\n      // rendered element or
      any rendering\n      // of this views's descendent\n      // elements is clicked\n
      \   }\n  })\n});\n```\n\n\nAn event defined for an event manager takes precedence
      over events of the same\nname handled through methods on the view.\n\n``` javascript\nAView
      = Ember.View.extend({\n  mouseEnter: function(event){\n    // will never trigger.\n
      \ },\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event,
      view){\n      // takes presedence over AView#mouseEnter\n    }\n  })\n});\n```\n\nSimilarly
      a view's event manager will take precedence for events of any views\nrendered
      as a descendent. A method name that matches an event name will not be called\nif
      the view instance was rendered inside the HTML representation of a view that
      has \nan `eventManager` property defined that handles events of the name.  Events
      not handled\nby the event manager will still trigger method calls on the descendent.\n\n```
      javascript\nOuterView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"outer
      {{#view InnerView}}inner{{/view}} outer\"),\n  eventManager: Ember.Object.create({\n
      \   mouseEnter: function(event, view){\n      // view might be instance of either\n
      \     // OutsideView or InnerView depending on\n      // where on the page the
      user interaction occured\n    }\n  })\n});\n\nInnerView = Ember.View.extend({\n
      \ click: function(event){\n    // will be called if rendered inside\n    //
      an OuterView because OuterView's\n    // eventManager doesn't handle click events\n
      \ },\n  mouseEnter: function(event){\n    // will never be called if rendered
      inside \n    // an OuterView.\n  }\n});\n```\n\n### Handlebars `{{action}}`
      Helper\n\nSee `Handlebars.helpers.action`.\n\n### Event Names\n\nPossible events
      names for any of the responding approaches described above are:\n\nTouch events:
      'touchStart', 'touchMove', 'touchEnd', 'touchCancel'\n\nKeyboard events: 'keyDown',
      'keyUp', 'keyPress'\n\nMouse events: 'mouseDown', 'mouseUp', 'contextMenu',
      'click', 'doubleClick', 'mouseMove',\n'focusIn', 'focusOut', 'mouseEnter', 'mouseLeave'\n\nForm
      events: 'submit', 'change', 'focusIn', 'focusOut', 'input'\n\nHTML5 drag and
      drop events: 'dragStart', 'drag', 'dragEnter', 'dragLeave', 'drop', 'dragEnd'\n\n##
      Handlebars `{{view}}` Helper\n\nOther `Ember.View` instances can be included
      as part of a view's template by using the `{{view}}`\nHandlebars helper. See
      `Handlebars.helpers.view` for additional information."
    extends: Ember.Object
    uses:
    - Ember.Evented
classitems:
- file: ../packages/ember-application/lib/system/application.js
  line: 188
  description: ! "/**\n    The root DOM element of the Application. This can be specified
    as an\n    element or a\n    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n
    \ This is the element that will be passed to the Application's,\n    `eventDispatcher`,
    which sets up the listeners for event delegation. Every\n    view in your application
    should be a child of the element you specify here."
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 205
  description: ! 'The `Ember.EventDispatcher` responsible for delegating events to
    this

    application''s views.


    The event dispatcher is created by the application at initialization time

    and sets up event listeners on the DOM element described by the

    application''s `rootElement` property.


    See the documentation for `Ember.EventDispatcher` for more information.'
  itemtype: property
  name: eventDispatcher
  type: Ember.EventDispatcher
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 221
  description: ! "The DOM events for which the event dispatcher should listen.\n\nBy
    default, the application's `Ember.EventDispatcher` listens\nfor a set of standard
    DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's
    `Ember.View`\ninstances.\n\nIf you would like additional events to be delegated
    to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash
    containing the DOM event name as the key and the\ncorresponding view method name
    as the value. For example:\n\n    App = Ember.Application.create({\n      customEvents:
    {\n        // add support for the loadedmetadata media\n        // player event\n
    \       'loadedmetadata': \"loadedMetadata\"\n      }\n    });"
  itemtype: property
  name: customEvents
  type: Object
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 274
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 306
  description: ! "Instantiate all controllers currently available on the namespace\nand
    inject them onto a router.\n\nExample:\n\n    App.PostsController = Ember.ArrayController.extend();\n
    \   App.CommentsController = Ember.ArrayController.extend();\n\n    var router
    = Ember.Router.create({\n      ...\n    });\n\n    App.initialize(router);\n\n
    \   router.get('postsController')     // <App.PostsController:ember1234>\n    router.get('commentsController')
    \ // <App.CommentsController:ember1235>"
  itemtype: method
  name: initialize
  params:
  - name: router
    description: ''
    type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 346
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 367
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 389
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 445
  access: private
  tagname: ! 'If the application has a router, use it to route to the current URL,
    and

    trigger a new call to `route` whenever the URL changes.'
  itemtype: property
  name: router
  type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 466
  description: ! 'Called when the Application has become ready.

    The call will be delayed until the DOM has become ready.'
  itemtype: event
  name: ready
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-debug/lib/main.js
  line: 28
  description: ! "Define an assertion that will throw an exception if the condition
    is not\nmet.  Ember build tools will remove any calls to Ember.assert() when\ndoing
    a production build. Example:\n\n    // Test for truthiness\n    Ember.assert('Must
    pass a valid object', obj);\n    // Fail unconditionally\n    Ember.assert('This
    code path should never be run')"
  itemtype: method
  name: assert
  params:
  - name: desc
    description: ! "A description of the assertion.  This will become\n  the text
      of the Error thrown if the assertion fails."
    type: String
  - name: test
    description: ! "Must be truthy for the assertion to pass. If\n  falsy, an exception
      will be thrown."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 50
  description: ! 'Display a warning with the provided message. Ember build tools will

    remove any calls to Ember.warn() when doing a production build.'
  itemtype: method
  name: warn
  params:
  - name: message
    description: A warning to display.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the warning\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 66
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only). Ember build tools will remove any calls to

    Ember.deprecate() when doing a production build.'
  itemtype: method
  name: deprecate
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the deprecation\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 112
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only) when the wrapped method is called.


    Ember build tools will not remove calls to Ember.deprecateFunc(), though

    no warnings will be shown in production.'
  itemtype: method
  name: deprecateFunc
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: func
    description: The function to be deprecated.
    type: Function
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-handlebars/lib/controls/button.js
  line: 27
  access: private
  tagname: ! 'Overrides TargetActionSupport''s targetObject computed

    property to use Handlebars-specific path resolution.'
  itemtype: property
  name: targetObject
  class: Ember.Button
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 263
  description: ! "tagName: 'select',\n  classNames: ['ember-select'],\n  defaultTemplate:
    Ember.Handlebars.compile('{{#if view.prompt}}<option value>{{view.prompt}}</option>{{/if}}{{#each
    view.content}}{{view Ember.SelectOption contentBinding=\"this\"}}{{/each}}'),\n
    \ attributeBindings: ['multiple', 'tabindex'],\n/**\n    The `multiple` attribute
    of the select element. Indicates whether multiple\n    options can be selected."
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 280
  description: ! "The list of options.\n\nIf `optionLabelPath` and `optionValuePath`
    are not overridden, this should\nbe a list of strings, which will serve simultaneously
    as labels and values.\n\nOtherwise, this should be a list of objects. For instance:\n\n
    \   content: Ember.A([\n        { id: 1, firstName: 'Yehuda' },\n        { id:
    2, firstName: 'Tom' }\n      ]),\n    optionLabelPath: 'content.firstName',\n
    \   optionValuePath: 'content.id'"
  itemtype: property
  name: content
  type: Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 301
  description: ! 'When `multiple` is false, the element of `content` that is currently

    selected, if any.


    When `multiple` is true, an array of such elements.'
  itemtype: property
  name: selection
  type: Object or Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 313
  description: ! 'In single selection mode (when `multiple` is false), value can be
    used to get

    the current selection''s value or set the selection by it''s value.


    It is not currently supported in multiple selection mode.'
  itemtype: property
  name: value
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 330
  description: ! 'If given, a top-most dummy option will be rendered to serve as a
    user

    prompt.'
  itemtype: property
  name: prompt
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 340
  description: The path of the option labels. See `content`.
  itemtype: property
  name: optionLabelPath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 349
  description: The path of the option values. See `content`.
  itemtype: property
  name: optionValuePath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 50
  description: ! "classNames: ['ember-text-field'],\n  tagName: \"input\",\n  attributeBindings:
    ['type', 'value', 'size'],\n/**\n    The value attribute of the input element.
    As the user inputs text, this\n    property is updated live."
  itemtype: property
  name: value
  type: String
  default: ! '""'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 66
  description: The type attribute of the input element.
  itemtype: property
  name: type
  type: String
  default: ! '"text"'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 75
  description: The size of the text field in characters.
  itemtype: property
  name: size
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/helpers/action.js
  line: 63
  description: ! "The `{{action}}` helper registers an HTML element within a template
    for\nDOM event handling and forwards that interaction to the Application's router,\nthe
    template's `Ember.View` instance, or supplied `target` option (see 'Specifying
    a Target').\n\nUser interaction with that element will invoke the supplied action
    name on\nthe appropriate target.\n\nGiven the following Handlebars template on
    the page\n\n``` handlebars\n<script type=\"text/x-handlebars\" data-template-name='a-template'>\n
    \ <div {{action anActionName}}>\n    click me\n  </div>\n</script>\n```\n\nAnd
    application code\n\n``` javascript\nAView = Ember.View.extend({\n  templateName;
    'a-template',\n  anActionName: function(event){}\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill
    results in the following rendered HTML\n\n``` html\n<div class=\"ember-view\">\n
    \ <div data-ember-action=\"1\">\n    click me\n  </div>\n</div>\n```\n\nClicking
    \"click me\" will trigger the `anActionName` method of the `aView`\nobject with
    a  `jQuery.Event` object as its argument. The `jQuery.Event`\nobject will be extended
    to include a `view` property that is set to the\noriginal view interacted with
    (in this case the `aView` object).\n\n### Event Propagation\n\nEvents triggered
    through the action helper will automatically have\n`.preventDefault()` called
    on them. You do not need to do so in your event\nhandlers. To stop propagation
    of the event, simply return `false` from your\nhandler.\n\nIf you need the default
    handler to trigger you should either register your\nown event handler, or use
    event methods on your view class. See Ember.View\n'Responding to Browser Events'
    for more information.\n\n### Specifying DOM event type\n\nBy default the `{{action}}`
    helper registers for DOM `click` events. You can\nsupply an `on` option to the
    helper to specify a different DOM event name:\n\n``` handlebars\n<script type=\"text/x-handlebars\"
    data-template-name='a-template'>\n  <div {{action anActionName on=\"doubleClick\"}}>\n
    \   click me\n  </div>\n</script>\n```\n\nSee Ember.View 'Responding to Browser
    Events' for a list of\nacceptable DOM event names.\n\nBecause `{{action}}` depends
    on Ember's event dispatch system it will only\nfunction if an `Ember.EventDispatcher`
    instance is available. An\n`Ember.EventDispatcher` instance will be created when
    a new\n`Ember.Application` is created. Having an instance of `Ember.Application`\nwill
    satisfy this requirement.\n\n\n### Specifying a Target\nThere are several possible
    target objects for `{{action}}` helpers:\n\nIn a typical `Ember.Router`-backed
    Application where views are managed\nthrough use of the `{{outlet}}` helper, actions
    will be forwarded to the\ncurrent state of the Applications's Router. See Ember.Router
    'Responding\nto User-initiated Events' for more information.\n\nIf you manually
    set the `target` property on the controller of a template's\n`Ember.View` instance,
    the specifed `controller.target` will become the target\nfor any actions. Likely
    custom values for a controller's `target` are the\ncontroller itself or a StateManager
    other than the Application's Router.\n\nIf the templates's view lacks a controller
    property the view itself is the target.\n\nFinally, a `target` option can be provided
    to the helper to change which object\nwill receive the method call. This option
    must be a string representing a\npath to an object:\n\n``` handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  <div {{action anActionName
    target=\"MyApplication.someObject\"}}>\n    click me\n  </div>\n</script>\n```\n\nClicking
    \"click me\" in the rendered HTML of the above template will trigger\nthe  `anActionName`
    method of the object at `MyApplication.someObject`.\nThe first argument to this
    method will be a `jQuery.Event` extended to\ninclude a `view` property that is
    set to the original view interacted with.\n\nA path relative to the template's
    `Ember.View` instance can also be used as\na target:\n\n``` handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  <div {{action anActionName
    target=\"parentView\"}}>\n    click me\n  </div>\n</script>\n```\n\nClicking \"click
    me\" in the rendered HTML of the above template will trigger\nthe `anActionName`
    method of the view's parent view.\n\nThe `{{action}}` helper is `Ember.StateManager`
    aware. If the target of the\naction is an `Ember.StateManager` instance `{{action}}`
    will use the `send`\nfunctionality of StateManagers. The documentation for `Ember.StateManager`\nhas
    additional information about this use.\n\nIf an action's target does not implement
    a method that matches the supplied\naction name an error will be thrown.\n\n```
    handlebars\n<script type=\"text/x-handlebars\" data-template-name='a-template'>\n
    \ <div {{action aMethodNameThatIsMissing}}>\n    click me\n  </div>\n</script>\n```\n\nWith
    the following application code\n\n``` javascript\nAView = Ember.View.extend({\n
    \ templateName; 'a-template',\n  // note: no method 'aMethodNameThatIsMissing'\n
    \ anActionName: function(event){}\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill
    throw `Uncaught TypeError: Cannot call method 'call' of undefined` when\n\"click
    me\" is clicked.\n\n### Specifying a context\n\nBy default the `{{action}}` helper
    passes the current Handlebars context\nalong in the `jQuery.Event` object. You
    may specify an alternate object to\npass as the context by providing a property
    path:\n\n``` handlebars\n<script type=\"text/x-handlebars\" data-template-name='a-template'>\n
    \ {{#each person in people}}\n    <div {{action edit person}}>\n      click me\n
    \   </div>\n  {{/each}}\n</script>\n```"
  itemtype: method
  name: action
  params:
  - name: actionName
    description: ''
    type: String
  - name: contexts
    description: ''
    type: Object...
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 119
  access: private
  tagname: ! '''_triageMustache'' is used internally select between a binding and
    helper for

    the given context. Until this point, it would be hard to determine if the

    mustache is a property reference or a regular helper reference. This triage

    helper resolves that.


    This would not be typically invoked by directly.'
  itemtype: method
  name: _triageMustache
  params:
  - name: property
    description: Property/helperID to triage
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 145
  access: private
  tagname: ! '`bind` can be used to display a value, then update that value if it

    changes. For example, if you wanted to print the `title` property of

    `content`:


    ``` handlebars

    {{bind "content.title"}}

    ```


    This will return the `title` property as a string, then create a new

    observer at the specified path. If it changes, it will update the value in

    DOM. Note that if you need to support IE7 and IE8 you must modify the

    model objects properties using Ember.get() and Ember.set() for this to work as

    it relies on Ember''s KVO system.  For all other browsers this will be handled

    for you automatically.'
  itemtype: method
  name: bind
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 183
  access: private
  tagname: ! "Use the `boundIf` helper to create a conditional that re-evaluates\nwhenever
    the bound value changes.\n\n``` handlebars\n{{#boundIf \"content.shouldDisplayTitle\"}}\n
    \ {{content.title}}\n{{/boundIf}}\n```"
  itemtype: method
  name: boundIf
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 214
  itemtype: method
  name: with
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 260
  itemtype: method
  name: if
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 274
  itemtype: method
  name: unless
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 293
  description: ! '`bindAttr` allows you to create a binding between DOM element attributes
    and

    Ember objects. For example:


    ``` handlebars

    <img {{bindAttr src="imageUrl" alt="imageTitle"}}>

    ```'
  itemtype: method
  name: bindAttr
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 400
  access: private
  tagname: ! 'Helper that, given a space-separated string of property paths and a
    context,

    returns an array of class names. Calling this method also has the side

    effect of setting up observers at those property paths, such that if they

    change, the correct class name will be reapplied to the DOM element.


    For example, if you pass the string "fooBar", it will first look up the

    "fooBar" value of the context. If that value is true, it will add the

    "foo-bar" class to the current element (i.e., the dasherized form of

    "fooBar"). If the value is a string, it will add that string as the class.

    Otherwise, it will not add any new class name.'
  itemtype: method
  name: bindClasses
  params:
  - name: context
    description: The context from which to lookup properties
    type: Ember.Object
  - name: classBindings
    description: A string, space-separated, of class bindings to use
    type: String
  - name: view
    description: The view in which observers should look for the element to update
    type: Ember.View
  - name: bindAttrId
    description: Optional bindAttr id used to lookup elements
    type: Srting
  return:
    description: An array of class names to add
    type: Array
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/collection.js
  line: 14
  description: ! "`{{collection}}` is a `Ember.Handlebars` helper for adding instances
    of\n`Ember.CollectionView` to a template.  See `Ember.CollectionView` for additional\ninformation
    on how a `CollectionView` functions.\n\n`{{collection}}`'s primary use is as a
    block helper with a `contentBinding` option\npointing towards an `Ember.Array`-compatible
    object.  An `Ember.View` instance will\nbe created for each item in its `content`
    property. Each view will have its own\n`content` property set to the appropriate
    item in the collection.\n\nThe provided block will be applied as the template
    for each item's view.\n\nGiven an empty `<body>` the following template:\n\n```
    handlebars\n<script type=\"text/x-handlebars\">\n  {{#collection contentBinding=\"App.items\"}}\n
    \   Hi {{view.content.name}}\n  {{/collection}}\n</script>\n```\n\nAnd the following
    application code\n\n``` javascript\nApp = Ember.Application.create()\nApp.items
    = [\n  Ember.Object.create({name: 'Dave'}),\n  Ember.Object.create({name: 'Mary'}),\n
    \ Ember.Object.create({name: 'Sara'})\n]\n```\n\nWill result in the HTML structure
    below\n\n``` html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Hi
    Dave</div>\n  <div class=\"ember-view\">Hi Mary</div>\n  <div class=\"ember-view\">Hi
    Sara</div>\n</div>\n```\n\n### Blockless Use\nIf you provide an `itemViewClass`
    option that has its own `template` you can omit\nthe block.\n\nThe following template:\n\n```
    handlebars\n<script type=\"text/x-handlebars\">\n  {{collection contentBinding=\"App.items\"
    itemViewClass=\"App.AnItemView\"}}\n</script>\n```\n\nAnd application code\n\n```
    javascript\nApp = Ember.Application.create();\nApp.items = [\n  Ember.Object.create({name:
    'Dave'}),\n  Ember.Object.create({name: 'Mary'}),\n  Ember.Object.create({name:
    'Sara'})\n];\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings
    {{view.content.name}}\")\n});\n```\n\nWill result in the HTML structure below\n\n```
    html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Greetings Dave</div>\n
    \ <div class=\"ember-view\">Greetings Mary</div>\n  <div class=\"ember-view\">Greetings
    Sara</div>\n</div>\n```\n\n### Specifying a CollectionView subclass\n\nBy default
    the `{{collection}}` helper will create an instance of `Ember.CollectionView`.\nYou
    can supply a `Ember.CollectionView` subclass to the helper by passing it\nas the
    first argument:\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n  {{#collection
    App.MyCustomCollectionClass contentBinding=\"App.items\"}}\n    Hi {{view.content.name}}\n
    \ {{/collection}}\n</script>\n```\n\n\n### Forwarded `item.*`-named Options\n\nAs
    with the `{{view}}`, helper options passed to the `{{collection}}` will be set
    on\nthe resulting `Ember.CollectionView` as properties. Additionally, options
    prefixed with\n`item` will be applied to the views rendered for each item (note
    the camelcasing):\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n  {{#collection
    contentBinding=\"App.items\"\n                itemTagName=\"p\"\n                itemClassNames=\"greeting\"}}\n
    \   Howdy {{view.content.name}}\n  {{/collection}}\n</script>\n```\n\nWill result
    in the following HTML structure:\n\n``` html\n<div class=\"ember-view\">\n  <p
    class=\"ember-view greeting\">Howdy Dave</p>\n  <p class=\"ember-view greeting\">Howdy
    Mary</p>\n  <p class=\"ember-view greeting\">Howdy Sara</p>\n</div>\n```"
  itemtype: method
  name: collection
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 12
  description: ! '`log` allows you to output the value of a value in the current rendering

    context.


    ``` handlebars

    {{log myVariable}}

    ```'
  itemtype: method
  name: log
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 33
  description: ! 'The `debugger` helper executes the `debugger` statement in the current

    context.


    ``` handlebars

    {{debugger}}

    ```'
  itemtype: method
  name: debugger
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/each.js
  line: 42
  description: ! "The `{{#each}}` helper loops over elements in a collection, rendering
    its block once for each item:\n\n``` javascript\nDevelopers = [{name: 'Yehuda'},{name:
    'Tom'}, {name: 'Paul'}];\n```\n\n``` handlebars\n{{#each Developers}}\n  {{name}}\n{{/each}}\n```\n\n`{{each}}`
    supports an alternative syntax with element naming:\n\n``` handlebars\n{{#each
    person in Developers}}\n  {{person.name}}\n{{/each}}\n```\n\nWhen looping over
    objects that do not have properties, `{{this}}` can be used to render the object:\n\n```
    javascript\nDeveloperNames = ['Yehuda', 'Tom', 'Paul']\n```\n\n``` handlebars\n{{#each
    DeveloperNames}}\n  {{this}}\n{{/each}}\n```\n\n### Blockless Use\n\nIf you provide
    an `itemViewClass` option that has its own `template` you can omit\nthe block
    in a similar way to how it can be done with the collection helper.\n\nThe following
    template:\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n  {{#view App.MyView
    }}\n    {{each view.items itemViewClass=\"App.AnItemView\"}} \n  {{/view}}\n</script>\n```\n\nAnd
    application code\n\n``` javascript\nApp = Ember.Application.create({\n  MyView:
    Ember.View.extend({\n    items: [\n      Ember.Object.create({name: 'Dave'}),\n
    \     Ember.Object.create({name: 'Mary'}),\n      Ember.Object.create({name: 'Sara'})\n
    \   ]\n  })\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings
    {{name}}\")\n});\n    \nApp.initialize();\n```\n    \nWill result in the HTML
    structure below\n\n``` html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Greetings
    Dave</div>\n  <div class=\"ember-view\">Greetings Mary</div>\n  <div class=\"ember-view\">Greetings
    Sara</div>\n</div>\n```"
  itemtype: method
  name: each
  params:
  - name: name
    description: name for item (used with `in`)
    type: String
    optional: true
  - name: path
    description: path
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/outlet.js
  line: 10
  description: ! 'The `outlet` helper allows you to specify that the current

    view''s controller will fill in the view for a given area.


    ``` handlebars

    {{outlet}}

    ```


    By default, when the the current controller''s `view` property changes, the

    outlet will replace its current view with the new view. You can set the

    `view` property directly, but it''s normally best to use `connectOutlet`.


    ``` javascript

    # Instantiate App.PostsView and assign to `view`, so as to render into outlet.

    controller.connectOutlet(''posts'');

    ```


    You can also specify a particular name other than `view`:


    ``` handlebars

    {{outlet masterView}}

    {{outlet detailView}}

    ```


    Then, you can control several outlets from a single controller.


    ``` javascript

    # Instantiate App.PostsView and assign to controller.masterView.

    controller.connectOutlet(''masterView'', ''posts'');

    # Also, instantiate App.PostInfoView and assign to controller.detailView.

    controller.connectOutlet(''detailView'', ''postInfo'');

    ```'
  itemtype: method
  name: outlet
  params:
  - name: property
    description: ! "the property on the controller\n  that holds the view for this
      outlet"
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/template.js
  line: 8
  description: ! "`template` allows you to render a template from inside another template.\nThis
    allows you to re-use the same template in multiple places. For example:\n\n```
    handlebars\n<script type=\"text/x-handlebars\">\n  {{#with loggedInUser}}\n    Last
    Login: {{lastLogin}}\n    User Info: {{template \"user_info\"}}\n  {{/with}}\n</script>\n\n<script
    type=\"text/x-handlebars\" data-template-name=\"user_info\">\n  Name: <em>{{name}}</em>\n
    \ Karma: <em>{{karma}}</em>\n</script>\n```\n\nThis helper looks for templates
    in the global Ember.TEMPLATES hash. If you\nadd &lt;script&gt; tags to your page
    with the `data-template-name` attribute set,\nthey will be compiled and placed
    in this hash automatically.\n\nYou can also manually register templates by adding
    them to the hash:\n\n``` javascript\nEmber.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n```"
  itemtype: method
  name: template
  params:
  - name: templateName
    description: the template to render
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/unbound.js
  line: 12
  description: ! '`unbound` allows you to output a property without binding. *Important:*
    The

    output will not be updated if the property changes. Use with caution.


    ``` handlebars

    <div>{{unbound somePropertyThatDoesntChange}}</div>

    ```'
  itemtype: method
  name: unbound
  params:
  - name: property
    description: ''
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/view.js
  line: 153
  description: ! "`{{view}}` inserts a new instance of `Ember.View` into a template
    passing its options\nto the `Ember.View`'s `create` method and using the supplied
    block as the view's own template.\n\nAn empty `<body>` and the following template:\n\n```
    handlebars\n<script type=\"text/x-handlebars\">\n  A span:\n  {{#view tagName=\"span\"}}\n
    \   hello.\n  {{/view}}\n</script>\n```\n\nWill result in HTML structure:\n\n```
    html\n<body>\n  <!-- Note: the handlebars template script \n       also results
    in a rendered Ember.View\n       which is the outer <div> here -->\n\n  <div class=\"ember-view\">\n
    \   A span:\n    <span id=\"ember1\" class=\"ember-view\">\n      Hello.\n    </span>\n
    \ </div>\n</body>\n```\n\n### parentView setting\n\nThe `parentView` property
    of the new `Ember.View` instance created through `{{view}}`\nwill be set to the
    `Ember.View` instance of the template where `{{view}}` was called.\n\n``` javascript\naView
    = Ember.View.create({\n  template: Ember.Handlebars.compile(\"{{#view}} my parent:
    {{parentView.elementId}} {{/view}}\")\n});\n\naView.appendTo('body');\n```\n  \nWill
    result in HTML structure:\n\n``` html\n<div id=\"ember1\" class=\"ember-view\">\n
    \ <div id=\"ember2\" class=\"ember-view\">\n    my parent: ember1\n  </div>\n</div>\n```\n\n###
    Setting CSS id and class attributes\n\nThe HTML `id` attribute can be set on the
    `{{view}}`'s resulting element with the `id` option.\nThis option will _not_ be
    passed to `Ember.View.create`.\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n
    \ {{#view tagName=\"span\" id=\"a-custom-id\"}}\n    hello.\n  {{/view}}\n</script>\n```\n\nResults
    in the following HTML structure:\n\n``` html\n<div class=\"ember-view\">\n  <span
    id=\"a-custom-id\" class=\"ember-view\">\n    hello.\n  </span>\n</div>\n```\n\nThe
    HTML `class` attribute can be set on the `{{view}}`'s resulting element with\nthe
    `class` or `classNameBindings` options. The `class` option\nwill directly set
    the CSS `class` attribute and will not be passed to\n`Ember.View.create`. `classNameBindings`
    will be passed to `create` and use\n`Ember.View`'s class name binding functionality:\n\n```
    handlebars\n<script type=\"text/x-handlebars\">\n  {{#view tagName=\"span\" class=\"a-custom-class\"}}\n
    \   hello.\n  {{/view}}\n</script>\n```\n\nResults in the following HTML structure:\n\n```
    html\n<div class=\"ember-view\">\n  <span id=\"ember2\" class=\"ember-view a-custom-class\">\n
    \   hello.\n  </span>\n</div>\n```\n\n### Supplying a different view class\n\n`{{view}}`
    can take an optional first argument before its supplied options to specify a\npath
    to a custom view class.\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n
    \ {{#view \"MyApp.CustomView\"}}\n    hello.\n  {{/view}}\n</script>\n```\n\nThe
    first argument can also be a relative path. Ember will search for the view class\nstarting
    at the `Ember.View` of the template where `{{view}}` was used as the root object:\n\n```
    javascript\nMyApp = Ember.Application.create({});\nMyApp.OuterView = Ember.View.extend({\n
    \ innerViewClass: Ember.View.extend({\n    classNames: ['a-custom-view-class-as-property']\n
    \ }),\n  template: Ember.Handlebars.compile('{{#view \"innerViewClass\"}} hi {{/view}}')\n});\n\nMyApp.OuterView.create().appendTo('body');\n```\n\nWill
    result in the following HTML:\n\n``` html\n<div id=\"ember1\" class=\"ember-view\">\n
    \ <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\"> \n
    \   hi\n  </div>\n</div>\n```\n\n### Blockless use\n\nIf you supply a custom `Ember.View`
    subclass that specifies its own template\nor provide a `templateName` option to
    `{{view}}` it can be used without supplying a block.\nAttempts to use both a `templateName`
    option and supply a block will throw an error.\n\n``` handlebars\n<script type=\"text/x-handlebars\">\n
    \ {{view \"MyApp.ViewWithATemplateDefined\"}}\n</script>\n```\n\n### viewName
    property\n\nYou can supply a `viewName` option to `{{view}}`. The `Ember.View`
    instance will\nbe referenced as a property of its parent view by this name.\n\n```
    javascript\naView = Ember.View.create({\n  template: Ember.Handlebars.compile('{{#view
    viewName=\"aChildByName\"}} hi {{/view}}')\n});\n\naView.appendTo('body');\naView.get('aChildByName')
    // the instance of Ember.View created by {{view}} helper\n```"
  itemtype: method
  name: view
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/yield.js
  line: 8
  description: ! "When used in a Handlebars template that is assigned to an `Ember.View`
    instance's\n  `layout` property Ember will render the layout template first, inserting
    the view's\n  own rendered output at the `{{ yield }}` location.\nAn empty `<body>`
    and the following application code:\n``` javascript\n  AView = Ember.View.extend({\n
    \   classNames: ['a-view-with-layout'],\n    layout: Ember.Handlebars.compile('<div
    class=\"wrapper\">{{ yield }}</div>'),\n    template: Ember.Handlebars.compile('<span>I
    am wrapped</span>')\n  });\naView = AView.create();\n  aView.appendTo('body');\n
    \ ```\nWill result in the following HTML output:\n``` html\n  <body>\n    <div
    class='ember-view a-view-with-layout'>\n      <div class=\"wrapper\">\n        <span>I
    am wrapped</span>\n      </div>\n    </div>\n  </body>\n  ```\nThe yield helper
    cannot be used outside of a template assigned to an `Ember.View`'s `layout` property\n
    \ and will throw an error if attempted.\n``` javascript\n  BView = Ember.View.extend({\n
    \   classNames: ['a-view-with-layout'],\n    template: Ember.Handlebars.compile('{{yield}}')\n
    \ });\nbView = BView.create();\n  bView.appendTo('body');\n// throws\n  // Uncaught
    Error: assertion failed: You called yield in a template that was not a layout\n
    \ ```"
  itemtype: method
  name: yield
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 90
  description: ! 'The function used to determine if the `displayTemplate` or

    `inverseTemplate` should be rendered. This should be a function that takes

    a value and returns a Boolean.'
  itemtype: property
  name: shouldDisplayFunc
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 101
  description: ! 'Whether the template rendered by this view gets passed the context
    object

    of its parent template, or gets passed the value of retrieving `path`

    from the `pathRoot`.


    For example, this is true when using the `{{#if}}` helper, because the

    template inside the helper should look up properties relative to the same

    object as outside the block. This would be false when used with `{{#with

    foo}}` because the template should receive the object found by evaluating

    `foo`.'
  itemtype: property
  name: preserveContext
  type: Boolean
  default: 'false'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 118
  description: ! 'If `preserveContext` is true, this is the object that will be used

    to render the template.'
  itemtype: property
  name: previousContext
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 127
  description: The template to render when `shouldDisplayFunc` evaluates to true.
  itemtype: property
  name: displayTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 136
  description: The template to render when `shouldDisplayFunc` evaluates to false.
  itemtype: property
  name: inverseTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 146
  description: ! 'The path to look up on `pathRoot` that is passed to

    `shouldDisplayFunc` to determine which template to render.


    In addition, if `preserveContext` is false, the object at this path will

    be passed to the template when rendering.'
  itemtype: property
  name: path
  type: String
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 159
  description: ! 'The object from which the `path` will be looked up. Sometimes this
    is the

    same as the `previousContext`, but in cases where this view has been generated

    for paths that start with a keyword such as `view` or `controller`, the

    path root will be that resolved object.'
  itemtype: property
  name: pathRoot
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 196
  description: ! 'Determines which template to invoke, sets up the correct state based
    on

    that logic, then invokes the default Ember.View `render` implementation.


    This method will first look up the `path` key on `pathRoot`,

    then pass that value to the `shouldDisplayFunc` function. If that returns

    true, the `displayTemplate` function will be rendered to DOM. Otherwise,

    `inverseTemplate`, if specified, will be rendered.


    For example, if this Ember._HandlebarsBoundView represented the `{{#with foo}}`

    helper, it would look up the `foo` property of its context, and

    `shouldDisplayFunc` would always return true. The object found by looking

    up `foo` would be passed to `displayTemplate`.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 74
  access: private
  tagname: ! 'Override the default buffer for Ember Handlebars. By default, Handlebars
    creates

    an empty String at the beginning of each invocation and appends to it. Ember''s

    Handlebars overrides this to append to a single shared buffer.'
  itemtype: method
  name: appendToBuffer
  params:
  - name: string
    description: ''
    type: String
  class: Ember.Handlebars.JavaScriptCompiler
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/ext.js
  line: 88
  access: private
  tagname: ! 'Rewrite simple mustaches from `{{foo}}` to `{{bind "foo"}}`. This means
    that all simple

    mustaches in Ember''s Handlebars will also set up an observer to keep the DOM

    up to date when the underlying property changes.'
  itemtype: method
  name: mustache
  params:
  - name: mustache
    description: ''
  class: Ember.Handlebars.Compiler
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/ext.js
  line: 117
  description: ! 'Used for precompilation of Ember Handlebars templates. This will
    not be used during normal

    app execution.'
  itemtype: method
  name: precompile
  static: 1
  params:
  - name: string
    description: The template to precompile
    type: String
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 148
  description: ! 'The entry point for Ember Handlebars. This replaces the default
    Handlebars.compile and turns on

    template-local data and String parameters.'
  itemtype: method
  name: compile
  static: 1
  params:
  - name: string
    description: The template to compile
    type: String
  return:
    description: ''
    type: Function
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 168
  access: private
  tagname: ! 'If a path starts with a reserved keyword, returns the root

    that should be used.'
  itemtype: method
  name: normalizePath
  params:
  - name: root
    description: ''
    type: Object
  - name: path
    description: ''
    type: String
  - name: data
    description: ''
    type: Hash
  class: Ember
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/ext.js
  line: 211
  description: ! 'Lookup both on root and on window. If the path starts with

    a keyword, the corresponding object will be looked up in the

    template''s data hash and used to resolve the path.'
  itemtype: method
  name: getPath
  params:
  - name: root
    description: The object to look up the property on
    type: Object
  - name: path
    description: The path to be lookedup
    type: String
  - name: options
    description: The template's option hash
    type: Object
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 243
  access: private
  tagname: ! 'Registers a helper in Handlebars that will be called if no property
    with the

    given name can be found on the current context object, and no helper with

    that name is registered.


    This throws an exception with a more helpful error message so the user can

    track down where the problem is happening.'
  itemtype: method
  name: helperMissing
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
  namespace: Ember.Handlebars
- file: ../packages/ember-handlebars/lib/loader.js
  line: 10
  access: private
  tagname: ! 'Find templates stored in the head tag as script tags and make them available

    to Ember.CoreView in the global Ember.TEMPLATES object. This will be run as as

    jQuery DOM-ready callback.


    Script tags with "text/x-handlebars" will be compiled

    with Ember''s Handlebars and are suitable for use as a view''s template.

    Those with type="text/x-raw-handlebars" will be compiled with regular

    Handlebars and are suitable for use in views'' computed properties.'
  itemtype: method
  name: bootstrap
  static: 1
  params:
  - name: ctx
    description: ''
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/string.js
  line: 1
  itemtype: method
  name: htmlSafe
  static: 1
  class: Ember.String
  module: ember
- file: ../packages/ember-handlebars/lib/string.js
  line: 14
  description: See {{#crossLink "Ember.String/htmlSafe"}}{{/crossLink}}
  itemtype: method
  name: htmlSafe
  class: String
  module: ember
- file: ../packages/ember-metal/lib/accessors.js
  line: 25
  description: ! 'Gets the value of a property on an object.  If the property is computed,

    the function will be invoked.  If the property is not defined but the

    object implements the unknownProperty() method then that will be invoked.


    If you plan to run on IE8 and older browsers then you should use this

    method anytime you want to retrieve a property on an object that you don''t

    know for sure is private.  (My convention only properties beginning with

    an underscore ''_'' are considered private.)


    On all newer browsers, you only need to use this method to retrieve

    properties if the property might not be defined on the object and you want

    to respect the unknownProperty() handler.  Otherwise you can ignore this

    method.


    Note that if the obj itself is null, this method will simply return

    undefined.'
  itemtype: method
  name: get
  params:
  - name: obj
    description: The object to retrieve from.
    type: Object
  - name: keyName
    description: The property key to retrieve
    type: String
  return:
    description: the property value or null.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 85
  description: ! 'Sets the value of a property on an object, respecting computed properties

    and notifying observers and other listeners of the change.  If the

    property is not defined but the object implements the unknownProperty()

    method then that will be invoked as well.


    If you plan to run on IE8 and older browsers then you should use this

    method anytime you want to set a property on an object that you don''t

    know for sure is private.  (My convention only properties beginning with

    an underscore ''_'' are considered private.)


    On all newer browsers, you only need to use this method to set

    properties if the property might not be defined on the object and you want

    to respect the unknownProperty() handler.  Otherwise you can ignore this

    method.'
  itemtype: method
  name: set
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  return:
    description: the passed value.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 251
  access: private
  tagname: ! 'Normalizes a target/path pair to reflect that actual target/path that
    should

    be observed, etc.  This takes into account passing in global property

    paths (i.e. a path beginning with a captial letter not defined on the

    target) and * separators.'
  itemtype: method
  name: normalizeTuple
  params:
  - name: target
    description: The current target.  May be null.
    type: Object
  - name: path
    description: A path on the target or a global property path.
    type: String
  return:
    description: a temporary array with the normalized target/path pair.
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 283
  description: ! 'Error-tolerant form of Ember.set. Will not blow up if any part of
    the

    chain is undefined, null, or destroyed.


    This is primarily used when syncing bindings, which may try to update after

    an object has been destroyed.'
  itemtype: method
  name: trySet
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 301
  description: ! 'Returns true if the provided path is global (e.g., "MyApp.fooController.bar")

    instead of local ("foo.bar.baz").'
  itemtype: method
  name: isGlobalPath
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  return:
    description: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 16
  description: ! 'Debug parameter you can turn on. This will log all bindings that
    fire to

    the console. This should be disabled in production code. Note that you

    can also enable this from the console or temporarily.'
  itemtype: property
  name: LOG_BINDINGS
  type: Boolean
  default: 'false'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 55
  description: This copies the Binding so it can be connected to another object.
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 71
  description: ! 'This will set "from" property path to the specified value. It will
    not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you connect() the binding.  It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: from
  params:
  - name: propertyPath
    description: the property path to connect to
    type: String
  return:
    description: receiver
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 89
  description: ! 'This will set the "to" property path to the specified value. It
    will not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you connect() the binding.  It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: to
  params:
  - name: propertyPath
    description: A property path or tuple
    type: String|Tuple
  return:
    description: this
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 107
  description: ! 'Configures the binding as one way. A one-way binding will relay
    changes

    on the "from" side to the "to" side, but not the other way around. This

    means that if you change the "to" side directly, the "from" side may have

    a different value.'
  itemtype: method
  name: oneWay
  return:
    description: receiver
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 130
  description: ! 'Attempts to connect this binding instance so that it can receive
    and relay

    changes. This method will raise an exception if you have not set the

    from/to properties yet.'
  itemtype: method
  name: connect
  params:
  - name: obj
    description: The root object for this binding.
    type: Object
  return:
    description: this
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 156
  description: ! 'Disconnects the binding instance. Changes will no longer be relayed.
    You

    will not usually need to call this method.'
  itemtype: method
  name: disconnect
  params:
  - name: obj
    description: The root object you passed when connecting the binding.
    type: Object
  return:
    description: this
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 263
  description: See {{#crossLink "Ember.Binding/from"}}{{/crossLink}}
  itemtype: method
  name: from
  static: 1
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 274
  description: See {{#crossLink "Ember.Binding/to"}}{{/crossLink}}
  itemtype: method
  name: to
  static: 1
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 285
  description: ! 'Creates a new Binding instance and makes it apply in a single direction.

    A one-way binding will relay changes on the "from" side object (supplied

    as the `from` argument) the "to" side, but not the other way around.

    This means that if you change the "to" side directly, the "from" side may have

    a different value.


    See {{#crossLink "Binding/oneWay"}}{{/crossLink}}'
  itemtype: method
  name: oneWay
  params:
  - name: from
    description: from path.
    type: String
  - name: flag
    description: ! "(Optional) passing nothing here will make the binding oneWay.
      \ You can\n  instead pass false to disable oneWay, making the binding two way
      again."
    type: Boolean
    optional: true
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 411
  description: ! 'Global helper method to create a new binding.  Just pass the root
    object

    along with a to and from path to create and connect the binding.'
  itemtype: method
  name: bind
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 431
  itemtype: method
  name: oneWay
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 131
  description: ! "Call on a computed property to set it into cacheable mode.  When
    in this\nmode the computed property will automatically cache the return value
    of\nyour function until one of the dependent keys changes.\n\n    MyApp.president
    = Ember.Object.create({\n      fullName: function() {\n        return this.get('firstName')
    + ' ' + this.get('lastName');\n\n        // After calculating the value of this
    function, Ember.js will\n        // return that value without re-executing this
    function until\n        // one of the dependent properties change.\n      }.property('firstName',
    'lastName')\n    });\n\nProperties are cacheable by default."
  itemtype: method
  name: cacheable
  params:
  - name: aFlag
    description: optional set to false to disable caching
    type: Boolean
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 157
  description: ! "Call on a computed property to set it into non-cached mode.  When
    in this\nmode the computed property will not automatically cache the return value.\n\n
    \   MyApp.outsideService = Ember.Object.create({\n      value: function() {\n
    \       return OutsideService.getValue();\n      }.property().volatile()\n    });"
  itemtype: method
  name: volatile
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 174
  description: ! "Sets the dependent keys on this computed property.  Pass any number
    of\narguments containing key paths that this computed property depends on.\n\n
    \   MyApp.president = Ember.Object.create({\n      fullName: Ember.computed(function()
    {\n        return this.get('firstName') + ' ' + this.get('lastName');\n\n        //
    Tell Ember.js that this computed property depends on firstName\n        // and
    lastName\n      }).property('firstName', 'lastName')\n    });"
  itemtype: method
  name: property
  params:
  - name: path
    description: zero or more property paths
    type: String
    multiple: true
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 200
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For
    example,\ncomputed property functions may close over variables that are then no
    longer\navailable for introspection.\n\nYou can pass a hash of these values to
    a computed property like this:\n\n    person: function() {\n      var personId
    = this.get('personId');\n      return App.Person.create({ id: personId });\n    }.property().meta({
    type: App.Person })\n\nThe hash that you pass to the `meta()` function will be
    saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes
    a public API for retrieving these values from classes,\nvia the `metaForProperty()`
    function."
  itemtype: method
  name: meta
  params:
  - name: meta
    description: ''
    type: Hash
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 344
  description: ! 'This helper returns a new property descriptor that wraps the passed

    computed property function.  You can use this helper to define properties

    with mixins or via Ember.defineProperty().


    The function you pass will be used to both get and set property values.

    The function should accept two parameters, key and value.  If value is not

    undefined you should set the value first.  In either case return the

    current value of the property.'
  itemtype: method
  name: computed
  params:
  - name: func
    description: The computed property function.
    type: Function
  return:
    description: property descriptor instance
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 376
  description: ! 'Returns the cached value for a property, if one exists.

    This can be useful for peeking at the value of a computed

    property that is generated lazily, without accidentally causing

    it to be created.'
  itemtype: method
  name: cacheFor
  params:
  - name: obj
    description: the object whose property you want to check
    type: Object
  - name: key
    description: ! "the name of the property whose cached value you want\n                    to
      return"
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 396
  itemtype: method
  name: computed.not
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 407
  itemtype: method
  name: computed.empty
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 419
  itemtype: method
  name: computed.bool
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 50
  itemtype: property
  name: VERSION
  type: String
  default: ! '''1.0.pre'''
  final: 1
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 58
  description: ! 'Standard environmental variables.  You can define these in a global
    `ENV`

    variable before loading Ember to control various configuration

    settings.'
  itemtype: property
  name: ENV
  type: Hash
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 74
  description: ! 'Determines whether Ember should enhances some built-in object

    prototypes to provide a more friendly API.  If enabled, a few methods

    will be added to Function, String, and Array.  Object.prototype will not be

    enhanced, which is the one that causes most trouble for people.


    In general we recommend leaving this option set to true since it rarely

    conflicts with other code.  If you need to turn it off however, you can

    define an ENV.EXTEND_PROTOTYPES config to disable it.'
  itemtype: property
  name: EXTEND_PROTOTYPES
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 94
  description: Determines whether Ember logs a full stack trace during deprecation
    warnings
  itemtype: property
  name: LOG_STACKTRACE_ON_DEPRECATION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 103
  description: Determines whether Ember should add ECMAScript 5 shims to older browsers.
  itemtype: property
  name: SHIM_ES5
  type: Boolean
  default: Ember.EXTEND_PROTOTYPES
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 112
  description: Empty function.  Useful for some operations.
  itemtype: method
  name: K
  access: private
  tagname: ''
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 159
  description: ! 'A function may be assigned to `Ember.onerror` to be called when
    Ember internals encounter an error.

    This is useful for specialized error handling and reporting code.'
  itemtype: event
  name: onerror
  params:
  - name: error
    description: the error object
    type: Exception
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 169
  access: private
  tagname: Wrap code block in a try/catch if {{#crossLink "Ember/onerror"}}{{/crossLink}}
    is set.
  itemtype: method
  name: handleErrors
  params:
  - name: func
    description: ''
    type: Function
  - name: context
    description: ''
    optional: true
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 95
  description: Add an event listener
  itemtype: method
  name: addListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 127
  description: ! 'Remove an event listener


    Arguments should match those passed to {{#crossLink "Ember/addListener"}}{{/crossLink}}'
  itemtype: method
  name: removeListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 169
  access: private
  tagname: ! 'Suspend listener during callback.


    This should only be used by the target of the event listener

    when it is taking an action that would cause the event, e.g.

    an object might suspend its property change listener while it is

    setting that property.'
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 205
  access: private
  tagname: ! 'Suspend listener during callback.


    This should only be used by the target of the event listener

    when it is taking an action that would cause the event, e.g.

    an object might suspend its property change listener while it is

    setting that property.'
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: Array of event names
    type: Array
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 254
  access: private
  tagname: Return a list of currently watched events
  itemtype: method
  name: watchedEvents
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 276
  itemtype: method
  name: sendEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: ''
    type: Array
  return:
    description: 'true'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 294
  access: private
  tagname: ''
  itemtype: method
  name: deferEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: ''
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 321
  access: private
  tagname: ''
  itemtype: method
  name: hasListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 340
  access: private
  tagname: ''
  itemtype: method
  name: listenersFor
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/map.js
  line: 66
  itemtype: method
  name: create
  static: 1
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 77
  itemtype: method
  name: clear
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 85
  itemtype: method
  name: add
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 100
  itemtype: method
  name: remove
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 117
  itemtype: method
  name: isEmpty
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 125
  itemtype: method
  name: has
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 137
  itemtype: method
  name: forEach
  params:
  - name: function
    description: ''
    type: Function
  - name: target
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 151
  itemtype: method
  name: toArray
  return:
    description: ''
    type: Array
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 159
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 199
  itemtype: method
  name: create
  static: 1
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 208
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: the value associated with the key, or undefined
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 222
  description: ! 'Adds a value to the map. If a value for the given key has already
    been

    provided, the new value will replace the old value.'
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: Anything
  - name: value
    description: ''
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 239
  description: Removes a value from the map for an associated key.
  itemtype: method
  name: remove
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: true if an item was removed, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 264
  description: Check whether a key is present.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: true if the item was present, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 278
  description: ! 'Iterate over all the keys and values. Calls the function once

    for each key, passing in the key and value, in that order.


    The keys are guaranteed to be iterated over in insertion order.'
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: ''
    type: Function
  - name: self
    description: ! "if passed, the `this` value inside the\n  callback. By default,
      `this` is the map."
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 299
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Map
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 322
  itemtype: method
  name: create
  static: 1
  params:
  - name: options
    description: ''
    optional: true
    props:
    - name: defaultValue
      description: ''
      type: Anything
      optional: true
  return:
    description: If options are passed, returns Ember.MapWithDefault otherwise returns
      Ember.Map
    type: Ember.MapWithDefault|Ember.Map
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 339
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: the value associated with the key, or the default value
    type: Anything
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 358
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.MapWithDefault
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 293
  itemtype: method
  name: mixin
  params:
  - name: obj
    description: ''
  - name: mixins
    description: ''
    multiple: true
  return:
    description: obj
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 346
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 359
  itemtype: method
  name: reopen
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 393
  itemtype: method
  name: apply
  params:
  - name: obj
    description: ''
  return:
    description: applied object
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 420
  itemtype: method
  name: detect
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 515
  access: private
  tagname: ''
  itemtype: method
  name: identifyNamespaces
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 586
  description: Denotes a required property for a mixin
  itemtype: method
  name: required
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 601
  description: ! "Makes a property or method available via an additional name.\n\n
    \   App.PaintSample = Ember.Object.extend({\n      color: 'red',\n      colour:
    Ember.alias('color'),\n      name: function(){\n        return \"Zed\";\n      },\n
    \     moniker: Ember.alias(\"name\")\n    });\n    var paintSample = App.PaintSample.create()\n
    \   paintSample.get('colour'); //=> 'red'\n    paintSample.moniker(); //=> 'Zed'"
  itemtype: method
  name: alias
  params:
  - name: methodName
    description: name of the method or property to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 629
  itemtype: method
  name: observer
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 644
  itemtype: method
  name: immediateObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 660
  itemtype: method
  name: beforeObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 86
  itemtype: method
  name: beginPropertyChanges
  chainable: 1
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 95
  itemtype: method
  name: endPropertyChanges
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 103
  description: ! "Make a series of property changes together in an\nexception-safe
    way.\n\n    Ember.changeProperties(function() {\n      obj1.set('foo', mayBlowUpWhenSet);\n
    \     obj2.set('bar', baz);\n    });"
  itemtype: method
  name: changeProperties
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 125
  description: ! 'Set a list of properties on an object. These properties are set
    inside

    a single `beginPropertyChanges` and `endPropertyChanges` batch, so

    observers will be buffered.'
  itemtype: method
  name: setProperties
  params:
  - name: target
    description: ''
  - name: properties
    description: ''
    type: Hash
  return:
    description: target
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 153
  itemtype: method
  name: addObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 170
  itemtype: method
  name: removeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 183
  itemtype: method
  name: addBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 224
  itemtype: method
  name: removeBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 19
  description: Identical to Object.create().  Implements if not available natively.
  itemtype: method
  name: create
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 120
  description: ! 'Identical to Object.defineProperty().  Implements as much functionality

    as possible if not available natively.'
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: The object to modify
    type: Object
  - name: keyName
    description: property name to modify
    type: String
  - name: desc
    description: descriptor hash
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/platform.js
  line: 132
  description: Set to true if the platform supports native getters and setters.
  itemtype: property
  name: hasPropertyAccessors
  final: 1
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/properties.js
  line: 40
  access: private
  tagname: ! "NOTE: This is a low-level method used by other parts of the API.  You
    almost\nnever want to call this method directly.  Instead you should use Ember.mixin()\nto
    define new properties.\n\nDefines a property on an object.  This method works
    much like the ES5\nObject.defineProperty() method except that it can also accept
    computed\nproperties and other special descriptors.\n\nNormally this method takes
    only three parameters.  However if you pass an\ninstance of Ember.Descriptor as
    the third param then you can pass an optional\nvalue as the fourth parameter.
    \ This is often more efficient than creating\nnew descriptor hashes for each property.\n\n##
    Examples\n\n    // ES5 compatible mode\n    Ember.defineProperty(contact, 'firstName',
    {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n
    \     value: 'Charles'\n    });\n\n    // define a simple property\n    Ember.defineProperty(contact,
    'lastName', undefined, 'Jolley');\n\n    // define a computed property\n    Ember.defineProperty(contact,
    'fullName', Ember.computed(function() {\n      return this.firstName+' '+this.lastName;\n
    \   }).property('firstName', 'lastName'));"
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: the object to define this property on. This may be a prototype.
    type: Object
  - name: keyName
    description: the name of the property
    type: String
  - name: desc
    description: ! "an instance of Ember.Descriptor (typically a\n  computed property)
      or an ES5 descriptor.\n  You must provide this or `data` but not both."
    type: Ember.Descriptor
    optional: true
  - name: data
    description: ! "something other than a descriptor, that will\n  become the explicit
      value of this property."
    type: Anything
    optional: true
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/run_loop.js
  line: 58
  itemtype: method
  name: end
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 65
  itemtype: method
  name: prev
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 76
  itemtype: method
  name: schedule
  params:
  - name: queueName
    description: ''
    type: String
  - name: target
    description: ''
  - name: method
    description: ''
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 93
  itemtype: method
  name: flush
  params:
  - name: queueName
    description: ''
    type: String
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 228
  description: ! "Begins a new RunLoop.  Any deferred actions invoked after the begin
    will\nbe buffered until you invoke a matching call to Ember.run.end().  This is\nan
    lower-level way to use a RunLoop instead of using Ember.run().\n\n    Ember.run.begin();\n
    \   // code to be execute within a RunLoop \n    Ember.run.end();"
  itemtype: method
  name: begin
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 244
  description: ! "Ends a RunLoop.  This must be called sometime after you call Ember.run.begin()\nto
    flush any deferred actions.  This is a lower-level way to use a RunLoop\ninstead
    of using Ember.run().\n\n    Ember.run.begin();\n    // code to be execute within
    a RunLoop \n    Ember.run.end();"
  itemtype: method
  name: end
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 266
  description: ! 'Array of named queues.  This array determines the order in which
    queues

    are flushed at the end of the RunLoop.  You can define your own queues by

    simply adding the queue name to this array.  Normally you should not need

    to inspect or modify this property.'
  itemtype: property
  name: queues
  type: Array
  default: ! '[''sync'', ''actions'', ''destroy'', ''timers'']'
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 278
  description: ! "Adds the passed target/method and any optional arguments to the
    named\nqueue to be executed at the end of the RunLoop.  If you have not already\nstarted
    a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt
    the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods
    will be invoked in an order matching the named queues defined in\nthe run.queues
    property.\n\n    Ember.run.schedule('timers', this, function(){\n      // this
    will be executed at the end of the RunLoop, when timers are run\n      console.log(\"scheduled
    on timers queue\");\n    });\n    Ember.run.schedule('sync', this, function(){\n
    \     // this will be executed at the end of the RunLoop, when bindings are synced\n
    \     console.log(\"scheduled on sync queue\");\n    });\n    // Note the functions
    will be run in order based on the run queues order. Output would be:\n    //   scheduled
    on sync queue\n    //   scheduled on timers queue"
  itemtype: method
  name: schedule
  params:
  - name: queue
    description: ! "The name of the queue to schedule against.\n  Default queues are
      'sync' and 'actions'"
    type: String
  - name: target
    description: target object to use as the context when invoking a method.
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.  If you pass a string it\n  will be resolved
      on the target object at the time the scheduled item is\n  invoked allowing you
      to change the target function."
    type: String|Function
  - name: arguments*
    description: Optional arguments to be passed to the queued method.
    type: Object
    optional: true
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 347
  description: ! 'Begins a new RunLoop if necessary and schedules a timer to flush
    the

    RunLoop at a later time.  This method is used by parts of Ember to

    ensure the RunLoop always finishes.  You normally do not need to call this

    method directly.  Instead use Ember.run().'
  itemtype: method
  name: autorun
  example:
  - ! "\n  Ember.run.autorun();"
  return:
    description: the new current RunLoop
    type: Ember.RunLoop
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 373
  description: ! "Immediately flushes any events scheduled in the 'sync' queue.  Bindings\nuse
    this queue so this method is a useful way to immediately force all\nbindings in
    the application to sync.\n\nYou should call this method anytime you need any changed
    state to propagate\nthroughout the app immediately without repainting the UI.\n\n
    \   Ember.run.sync();"
  itemtype: method
  name: sync
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 418
  description: ! "Invokes the passed target/method and optional arguments after a
    specified\nperiod if time.  The last parameter of this method must always be a
    number\nof milliseconds.\n\nYou should use this method whenever you need to run
    some action after a\nperiod of time instead of using setTimeout().  This method
    will ensure that\nitems that expire during the same script execution cycle all
    execute\ntogether, which is often more efficient than using a real setTimeout.\n\n
    \   Ember.run.later(myContext, function(){\n      // code here will execute within
    a RunLoop in about 500ms with this == myContext\n    }, 500);"
  itemtype: method
  name: later
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait!~YUIDOC_LINE~!
    description: Number of milliseconds to wait.
    type: Number
  return:
    description: ! "a string you can use to cancel the timer in\n  {{#crossLink \"Ember/run.cancel\"}}{{/crossLink}}
      later."
    type: String
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 504
  description: ! "Schedules an item to run one time during the current RunLoop.  Calling\nthis
    method with the same target/method combination will have no effect.\n\nNote that
    although you can pass optional arguments these will not be\nconsidered when looking
    for duplicates.  New arguments will replace previous\ncalls.\n\n    Ember.run(function(){\n
    \     var doFoo = function() { foo(); }\n      Ember.run.once(myContext, doFoo);\n
    \     Ember.run.once(myContext, doFoo);\n      // doFoo will only be executed
    once at the end of the RunLoop\n    });"
  itemtype: method
  name: once
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 552
  description: ! "Schedules an item to run after control has been returned to the
    system.\nThis is often equivalent to calling setTimeout(function...,1).\n\n    Ember.run.next(myContext,
    function(){\n      // code to be executed in the next RunLoop, which will be scheduled
    after the current one\n    });"
  itemtype: method
  name: next
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 587
  description: ! "Cancels a scheduled item.  Must be a value returned by `Ember.run.later()`,\n`Ember.run.once()`,
    or `Ember.run.next()`.\n\n    var runNext = Ember.run.next(myContext, function(){\n
    \     // will not be executed\n    });\n    Ember.run.cancel(runNext);\n\n    var
    runLater = Ember.run.later(myContext, function(){\n      // will not be executed\n
    \   }, 500);\n    Ember.run.cancel(runLater);\n\n    var runOnce = Ember.run.once(myContext,
    function(){\n      // will not be executed\n    });\n    Ember.run.cancel(runOnce);"
  itemtype: method
  name: cancel
  params:
  - name: timer
    description: Timer object to cancel
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/utils.js
  line: 18
  access: private
  tagname: ! 'A unique key used to assign guids and other private metadata to objects.

    If you inspect an object in your browser debugger you will often see these.

    They can be safely ignored.


    On browsers that support it, these properties are added with enumeration

    disabled so they won''t show up when you iterate over your properties.'
  itemtype: property
  name: GUID_KEY
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 42
  access: private
  tagname: ! 'Generates a new guid, optionally saving the guid to the object that
    you

    pass in.  You will rarely need to use this method.  Instead you should

    call Ember.guidFor(obj), which return an existing guid if available.'
  itemtype: method
  name: generateGuid
  params:
  - name: obj
    description: ! "Object the guid will be used for.  If passed in, the guid will\n
      \ be saved on the object and reused whenever you pass the same object\n  again.\n\n
      \ If no object is passed, just generate a new guid."
    type: Object
    optional: true
  - name: prefix
    description: ! "Prefix to place in front of the guid.  Useful when you want to\n
      \ separate the guid into separate namespaces."
    type: String
    optional: true
  return:
    description: the guid
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 72
  access: private
  tagname: ! 'Returns a unique id for the object.  If the object does not yet have

    a guid, one will be assigned to it.  You can call this on any object,

    Ember.Object-based or not, but be aware that it will add a _guid property.


    You can also use this method on DOM Element objects.'
  itemtype: method
  name: guidFor
  params:
  - name: obj
    description: any object, string, number, Element, or primitive
    type: Object
  return:
    description: the unique guid for this instance.
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 134
  description: The key used to store meta information on object for property observing.
  itemtype: property
  name: META_KEY
  access: private
  tagname: ''
  final: 1
  type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 174
  description: ! 'Retrieves the meta hash for an object.  If ''writable'' is true
    ensures the

    hash is writable for this object as well.


    The meta object contains information about computed property descriptors as

    well as any watched properties and other information.  You generally will

    not access this information directly but instead work with higher level

    methods that manipulate this hash indirectly.'
  itemtype: method
  name: meta
  access: private
  tagname: ''
  params:
  - name: obj
    description: The object to retrieve meta for
    type: Object
  - name: writable
    description: ! "Pass false if you do not intend to modify\n  the meta hash, allowing
      the method to avoid making an unnecessary copy."
    type: Boolean
    optional: true
    optdefault: 'true'
  return:
    description: ''
    type: Hash
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 238
  access: private
  tagname: ! 'In order to store defaults for a class, a prototype may need to create

    a default meta object, which will be inherited by any objects instantiated

    from the class''s constructor.


    However, the properties of that meta object are only shallow-cloned,

    so if a property is a hash (like the event system''s `listeners` hash),

    it will by default be shared across all instances of that class.


    This method allows extensions to deeply clone a series of nested hashes or

    other complex objects. For instance, the event system might pass

    [''listeners'', ''foo:change'', ''ember157''] to `prepareMetaPath`, which will

    walk down the keys provided.


    For each key, if the key does not exist, it is created. If it already

    exists and it was inherited from its constructor, the constructor''s

    key is cloned.


    You can also pass false for `writable`, which will simply return

    undefined if `prepareMetaPath` discovers any part of the path that

    shared or undefined.'
  itemtype: method
  name: metaPath
  params:
  - name: obj
    description: The object whose meta we are examining
    type: Object
  - name: path
    description: An array of keys to walk down
    type: Array
  - name: writable
    description: ! "whether or not to create a new meta\n  (or meta property) if one
      does not already exist or if it's\n  shared with its constructor"
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 292
  access: private
  tagname: ! 'Wraps the passed function so that `this._super` will point to the superFunc

    when the function is invoked.  This is the primitive we use to implement

    calls to super.'
  itemtype: method
  name: wrap
  params:
  - name: func
    description: The function to call
    type: Function
  - name: superFunc
    description: The super function.
    type: Function
  return:
    description: wrapped function.
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 321
  description: ! "Returns true if the passed object is an array or Array-like.\n\nEmber
    Array Protocol:\n\n  - the object has an objectAt property\n  - the object is
    a native Array\n  - the object is an Object, and has a length property\n\nUnlike
    Ember.typeOf this method returns true even if the passed object is\nnot formally
    array but appears to be array-like (i.e. implements Ember.Array)\n\n    Ember.isArray();
    // false\n    Ember.isArray([]); // true\n    Ember.isArray( Ember.ArrayProxy.create({
    content: [] }) ); // true"
  itemtype: method
  name: isArray
  params:
  - name: obj
    description: The object to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 350
  description: ! "Forces the passed object to be part of an array.  If the object
    is already\nan array or array-like, returns the object.  Otherwise adds the object
    to\nan array.  If obj is null or undefined, returns an empty array.\n\n    Ember.makeArray();
    \         => []\n    Ember.makeArray(null);      => []\n    Ember.makeArray(undefined);
    => []\n    Ember.makeArray('lindsay'); => ['lindsay']\n    Ember.makeArray([1,2,42]);
    \ => [1,2,42]\n\n    var controller = Ember.ArrayProxy.create({ content: [] });\n
    \   Ember.makeArray(controller) === controller;   => true"
  itemtype: method
  name: makeArray
  params:
  - name: obj
    description: the object
    type: Object
  return:
    description: ''
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 378
  description: Checks to see if the `methodName` exists on the `obj`.
  itemtype: method
  name: canInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 388
  description: ! 'Checks to see if the `methodName` exists on the `obj`,

    and if it does, invokes it with the arguments passed.'
  itemtype: method
  name: tryInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  - name: args
    description: The arguments to pass to the method
    type: Array
    optional: true
  return:
    description: the return value of the invoked method or undefined if it cannot
      be invoked
    type: Anything
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 403
  access: private
  tagname: ! 'Starts watching a property on an object.  Whenever the property changes,

    invokes Ember.propertyWillChange and Ember.propertyDidChange.  This is the

    primitive used by observers and dependent keys; usually you will never call

    this method directly but instead use higher level methods like

    Ember.addObserver().'
  itemtype: method
  name: watch
  params:
  - name: obj
    description: ''
  - name: keyName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 502
  access: private
  tagname: ! 'Call on an object when you first beget it from another object.  This
    will

    setup any chained watchers on the object instance as needed.  This method is

    safe to call multiple times.'
  itemtype: method
  name: rewatch
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 543
  description: ! 'This function is called just before an object property is about
    to change.

    It will notify any before observers and prepare caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyDidChange()` which you should call just

    after the property value changes.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 574
  description: ! 'This function is called just after an object property has changed.

    It will notify any observers and clear caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyWilLChange()` which you should call just

    before the property value changes.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 610
  description: ! 'Tears down the meta on an object so that it can be garbage collected.

    Multiple calls will have no effect.'
  itemtype: method
  name: destroy
  params:
  - name: obj
    description: the object to destroy
    type: Object
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 23
  access: private
  tagname: Returns the current `location.hash`, minus the '#' at the front.
  itemtype: method
  name: getURL
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 34
  access: private
  tagname: ! 'Set the `location.hash` and remembers what was set. This prevents

    `onUpdateURL` callbacks from triggering when the hash was set by

    `HashLocation`.'
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 49
  access: private
  tagname: ! 'Register a callback to be invoked when the hash changes. These

    callbacks will execute when the user presses the back or forward

    button, but not after `setURL` is invoked.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 73
  access: private
  tagname: ! 'Given a URL, formats it to be placed into the page as part

    of an element''s `href` attribute.


    This is used, for example, when using the {{action}} helper

    to generate a URL based on an event.'
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 24
  access: private
  tagname: Used to set state on first call to setURL
  itemtype: method
  name: initState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 36
  description: Will be pre-pended to path upon state change
  itemtype: property
  name: rootURL
  default: ! '''/'''
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 44
  access: private
  tagname: Returns the current `location.pathname`.
  itemtype: method
  name: getURL
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 55
  access: private
  tagname: Uses `history.pushState` to update the url without a page reload.
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 72
  access: private
  tagname: Get the current `history.state`
  itemtype: method
  name: getState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 83
  access: private
  tagname: Pushes a new state
  itemtype: method
  name: pushState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 95
  access: private
  tagname: Replaces the current state
  itemtype: method
  name: replaceState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 107
  access: private
  tagname: ! 'Register a callback to be invoked whenever the browser

    history changes, including using forward and back buttons.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 127
  access: private
  tagname: Used when using `{{action}}` helper.  The url is always appended to the
    rootURL.
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 69
  access: private
  tagname: ! 'Whenever a routable state is entered, the context it was entered with

    is stashed so that we can regenerate the state''s `absoluteURL` on

    demand.'
  itemtype: method
  name: stashContext
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: context
    description: ''
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 94
  access: private
  tagname: ! 'Whenever a routable state is entered, the router''s location object

    is notified to set the URL to the current absolute path.


    In general, this will update the browser''s URL.'
  itemtype: method
  name: updateRoute
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: location
    description: ''
    type: Ember.Location
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 113
  access: private
  tagname: ! 'Get the absolute route for the current state and a given

    hash.


    This method is private, as it expects a serialized hash,

    not the original context object.'
  itemtype: method
  name: absoluteRoute
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: hash
    description: ''
    type: Hash
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 153
  access: private
  tagname: ! 'At the moment, a state is routable if it has a string `route`

    property. This heuristic may change.'
  itemtype: property
  name: isRoutable
  type: Boolean
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 166
  access: private
  tagname: Determine if this is the last routeable state
  itemtype: property
  name: isLeafRoute
  type: Boolean
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 179
  access: private
  tagname: ! 'A _RouteMatcher object generated from the current route''s `route`

    string property.'
  itemtype: property
  name: routeMatcher
  type: Ember._RouteMatcher
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 195
  access: private
  tagname: ! 'Check whether the route has dynamic segments and therefore takes

    a context.'
  itemtype: property
  name: hasContext
  type: Boolean
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 211
  access: private
  tagname: ! 'The model class associated with the current state. This property

    uses the `modelType` property, in order to allow it to be

    specified as a String.'
  itemtype: property
  name: modelClass
  type: Ember.Object
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 231
  access: private
  tagname: ! 'Get the model class for the state. The heuristic is:


    * The state must have a single dynamic segment

    * The dynamic segment must end in `_id`

    * A dynamic segment like `blog_post_id` is converted into `BlogPost`

    * The name is then looked up on the passed in namespace


    The process of initializing an application with a router will

    pass the application''s namespace into the router, which will be

    used here.'
  itemtype: method
  name: modelClassFor
  params:
  - name: namespace
    description: ''
    type: Ember.Namespace
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 279
  description: ! 'The default method that takes a `params` object and converts

    it into an object.


    By default, a params hash that looks like `{ post_id: 1 }`

    will be looked up as `namespace.Post.find(1)`. This is

    designed to work seamlessly with Ember Data, but will work

    fine with any class that has a `find` method.'
  itemtype: method
  name: deserialize
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: params
    description: ''
    type: Hash
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 303
  description: ! "The default method that takes an object and converts it into\na
    params hash.\n\nBy default, if there is a single dynamic segment named\n`blog_post_id`
    and the object is a `BlogPost` with an\n`id` of `12`, the serialize method will
    produce:\n\n    { blog_post_id: 12 }"
  itemtype: method
  name: serialize
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: context
    description: ''
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 332
  access: private
  tagname: ''
  itemtype: method
  name: resolvePath
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: path
    description: ''
    type: String
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 382
  access: private
  tagname: ! 'Once `unroute` has finished unwinding, `routePath` will be called

    with the remainder of the route.


    For example, if you were in the /posts/1/comments state, and you

    moved into the /posts/2/comments state, `routePath` will be called

    on the state whose path is `/posts` with the path `/2/comments`.'
  itemtype: method
  name: routePath
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: path
    description: ''
    type: String
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 418
  access: private
  tagname: ! 'When you move to a new route by pressing the back

    or forward button, this method is called first.


    Its job is to move the state manager into a parent

    state of the state it will eventually move into.'
  itemtype: method
  name: unroutePath
  params:
  - name: router
    description: ''
    type: Ember.Router
  - name: path
    description: ''
    type: String
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 514
  description: ! 'The `connectOutlets` event will be triggered once a

    state has been entered. It will be called with the

    route''s context.'
  itemtype: event
  name: connectOutlets
  params:
  - name: router
    description: ''
    type: Ember.Router
  - name: context*
    description: ''
    optional: true
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/routable.js
  line: 525
  description: ! 'The `navigateAway` event will be triggered when the

    URL changes due to the back/forward button'
  itemtype: event
  name: navigateAway
  class: Ember.Routable
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/router.js
  line: 425
  description: /**
  itemtype: property
  name: initialState
  type: String
  default: ! '''root'''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/router.js
  line: 434
  description: ! "The `Ember.Location` implementation to be used to manage the application\nURL
    state. The following values are supported:\n\n* 'hash': Uses URL fragment identifiers
    (like #/blog/1) for routing.\n* 'history': Uses the browser's history.pushstate
    API for routing. Only works in\n   modern browsers with pushstate support.\n*
    'none': Does not read or set the browser URL, but still allows for\n  routing
    to happen. Useful for testing."
  itemtype: property
  name: location
  type: String
  default: ! '''hash'''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/router.js
  line: 450
  description: ! 'This is only used when a history location is used so that applications
    that

    don''t live at the root of the domain can append paths to their root.'
  itemtype: property
  name: rootURL
  type: String
  default: ! '''/'''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/controller.js
  line: 37
  description: ! 'The object to which events from the view should be sent.


    For example, when a Handlebars template uses the `{{action}}` helper,

    it will attempt to send the event to the view''s controller''s `target`.


    By default, a controller''s `target` is set to the router after it is

    instantiated by `Ember.Application#initialize`.'
  itemtype: property
  name: target
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 12
  description: ! "The `property` extension of Javascript's Function prototype is available\nwhen
    Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function is true,\nwhich is
    the default.\n\nComputed properties allow you to treat a function like a property:\n\n
    \   MyApp.president = Ember.Object.create({\n      firstName: \"Barack\",\n      lastName:
    \"Obama\",\n\n      fullName: function() {\n        return this.get('firstName')
    + ' ' + this.get('lastName');\n\n        // Call this flag to mark the function
    as a property\n      }.property()\n    });\n\n    MyApp.president.get('fullName');
    \   => \"Barack Obama\"\n\nTreating a function like a property is useful because
    they can work with\nbindings, just like any other property.\n\nMany computed properties
    have dependencies on other properties. For\nexample, in the above example, the
    `fullName` property depends on\n`firstName` and `lastName` to determine its value.
    You can tell Ember.js\nabout these dependencies like this:\n\n    MyApp.president
    = Ember.Object.create({\n      firstName: \"Barack\",\n      lastName: \"Obama\",\n\n
    \     fullName: function() {\n        return this.get('firstName') + ' ' + this.get('lastName');\n\n
    \       // Tell Ember.js that this computed property depends on firstName\n        //
    and lastName\n      }.property('firstName', 'lastName')\n    });\n\nMake sure
    you list these dependencies so Ember.js knows when to update\nbindings that connect
    to a computed property. Changing a dependency\nwill not immediately trigger an
    update of the computed property, but\nwill instead clear the cache so that it
    is updated when the next `get`\nis called on the property.\n\nSee {{#crossLink
    \"Ember.ComputedProperty\"}}{{/crossLink}},\n  {{#crossLink \"Ember/computed\"}}{{/crossLink}}"
  itemtype: method
  name: property
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 69
  description: ! "The `observes` extension of Javascript's Function prototype is available\nwhen
    Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function is true,\nwhich is
    the default.\n\nYou can observe property changes simply by adding the `observes`\ncall
    to the end of your method declarations in classes that you write.\nFor example:\n\n
    \   Ember.Object.create({\n      valueObserver: function() {\n        // Executes
    whenever the \"value\" property changes\n      }.observes('value')\n    });\n\nSee
    {{#crossLink \"Ember.Observable/observes\"}}{{/crossLink}}"
  itemtype: method
  name: observes
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 94
  description: ! "The `observesBefore` extension of Javascript's Function prototype
    is available\nwhen Ember.EXTEND_PROTOTYPES or Ember.EXTEND_PROTOTYPES.Function
    is true,\nwhich is the default.\n\nYou can get notified when a property changes
    is about to happen by\nby adding the `observesBefore` call to the end of your
    method\ndeclarations in classes that you write. For example:\n\n    Ember.Object.create({\n
    \     valueObserver: function() {\n        // Executes whenever the \"value\"
    property is about to change\n      }.observesBefore('value')\n    });\n\nSee {{#crossLink
    \"Ember.Observable/observesBefore\"}}{{/crossLink}}"
  itemtype: method
  name: observesBefore
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 22
  description: See {{#crossLink "Ember.String/fmt"}}{{/crossLink}}
  itemtype: method
  name: fmt
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 32
  description: See {{#crossLink "Ember.String/w"}}{{/crossLink}}
  itemtype: method
  name: w
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 42
  description: See {{#crossLink "Ember.String/loc"}}{{/crossLink}}
  itemtype: method
  name: loc
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 52
  description: See {{#crossLink "Ember.String/camelize"}}{{/crossLink}}
  itemtype: method
  name: camelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 62
  description: See {{#crossLink "Ember.String/decamelize"}}{{/crossLink}}
  itemtype: method
  name: decamelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 72
  description: See {{#crossLink "Ember.String/dasherize"}}{{/crossLink}}
  itemtype: method
  name: dasherize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 82
  description: See {{#crossLink "Ember.String/underscore"}}{{/crossLink}}
  itemtype: method
  name: underscore
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 92
  description: See {{#crossLink "Ember.String/classify"}}{{/crossLink}}
  itemtype: method
  name: classify
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 57
  description: ! 'Your array must support the length property. Your replace methods
    should

    set this property whenever it changes.'
  itemtype: property
  name: length
  type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 65
  description: ! "Returns the object at the given index. If the given index is negative
    or\nis greater or equal than the array length, returns `undefined`.\n\nThis is
    one of the primitives you must implement to support `Ember.Array`.\nIf your object
    supports retrieving the value of an array item using `get()`\n(i.e. `myArray.get(0)`),
    then you do not need to implement this method\nyourself.\n\n    var arr = ['a',
    'b', 'c', 'd'];\n    arr.objectAt(0);  => \"a\"\n    arr.objectAt(3);  => \"d\"\n
    \   arr.objectAt(-1); => undefined\n    arr.objectAt(4);  => undefined\n    arr.objectAt(5);
    \ => undefined"
  itemtype: method
  name: objectAt
  params:
  - name: idx!~YUIDOC_LINE~!
    description: The index of the item to return.
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 90
  description: ! "This returns the objects at the specified indexes, using `objectAt`.\n\n
    \   var arr = ['a', 'b', 'c', 'd'];\n    arr.objectsAt([0, 1, 2]) => [\"a\", \"b\",
    \"c\"]\n    arr.objectsAt([2, 3, 4]) => [\"c\", \"d\", undefined]"
  itemtype: method
  name: objectsAt
  params:
  - name: indexes!~YUIDOC_LINE~!
    description: An array of indexes of items to return.
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 111
  description: ! 'This is the handler for the special array content property.  If
    you get

    this property, it will return this.  If you set this property it a new

    array, it will replace the current content.


    This property overrides the default property defined in Ember.Enumerable.'
  itemtype: property
  name: ! '[]'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 139
  description: ! "Returns a new array that is a slice of the receiver. This implementation\nuses
    the observable array methods to retrieve the objects for the new\nslice.\n\n    var
    arr = ['red', 'green', 'blue'];\n    arr.slice(0);      => ['red', 'green', 'blue']\n
    \   arr.slice(0, 2);   => ['red', 'green']\n    arr.slice(1, 100); => ['green',
    'blue']"
  itemtype: method
  name: slice
  params:
  - name: beginIndex
    description: (Optional) index to begin slicing from.
    type: Integer
  - name: endIndex
    description: (Optional) index to end the slice at.
    type: Integer
  return:
    description: New array with specified slice
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 165
  description: ! "Returns the index of the given object's first occurrence.\nIf no
    startAt argument is given, the starting location to\nsearch is 0. If it's negative,
    will count backward from\nthe end of the array. Returns -1 if no match is found.\n\n
    \   var arr = [\"a\", \"b\", \"c\", \"d\", \"a\"];\n    arr.indexOf(\"a\");      =>
    \ 0\n    arr.indexOf(\"z\");      => -1\n    arr.indexOf(\"a\", 2);   =>  4\n
    \   arr.indexOf(\"a\", -1);  =>  4\n    arr.indexOf(\"b\", 3);   => -1\n    arr.indexOf(\"a\",
    100); => -1"
  itemtype: method
  name: indexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 196
  description: ! "Returns the index of the given object's last occurrence.\nIf no
    startAt argument is given, the search starts from\nthe last position. If it's
    negative, will count backward\nfrom the end of the array. Returns -1 if no match
    is found.\n\n    var arr = [\"a\", \"b\", \"c\", \"d\", \"a\"];\n    arr.lastIndexOf(\"a\");
    \     =>  4\n    arr.lastIndexOf(\"z\");      => -1\n    arr.lastIndexOf(\"a\",
    2);   =>  0\n    arr.lastIndexOf(\"a\", -1);  =>  4\n    arr.lastIndexOf(\"b\",
    3);   =>  1\n    arr.lastIndexOf(\"a\", 100); =>  4"
  itemtype: method
  name: lastIndexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 231
  description: ! "Adds an array observer to the receiving array.  The array observer
    object\nnormally must implement two methods:\n\n* `arrayWillChange(start, removeCount,
    addCount)` - This method will be\n  called just before the array is modified.\n*
    `arrayDidChange(start, removeCount, addCount)` - This method will be\n  called
    just after the array is modified.\n\nBoth callbacks will be passed the starting
    index of the change as well a\na count of the items to be removed and added.  You
    can use these callbacks\nto optionally inspect the array during the change, clear
    caches, or do\nany other bookkeeping necessary.\n\nIn addition to passing a target,
    you can also include an options hash\nwhich you can use to override the method
    names that will be invoked on the\ntarget."
  itemtype: method
  name: addArrayObserver
  params:
  - name: target
    description: The observer object.
    type: Object
  - name: opts
    description: ! "Optional hash of configuration options including\n  willChange,
      didChange, and a context option."
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 267
  description: ! 'Removes an array observer from the object if the observer is current

    registered.  Calling this method multiple times with the same object will

    have no effect.'
  itemtype: method
  name: removeArrayObserver
  params:
  - name: target
    description: The object observing the array.
    type: Object
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 288
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: Boolean
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 298
  description: ! 'If you are implementing an object that supports Ember.Array, call
    this

    method just before the array content changes to notify any observers and

    invalidate any related properties.  Pass the starting index of the change

    as well as a delta of the amounts to change.'
  itemtype: method
  name: arrayContentWillChange
  params:
  - name: startIdx
    description: The starting index in the array that will change.
    type: Number
  - name: removeAmt
    description: The number of items that will be removed.  If you pass null assumes
      0
    type: Number
  - name: addAmt
    description: The number of items that will be added.  If you pass null assumes
      0.
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 382
  description: ! 'Returns a special object that can be used to observe individual
    properties

    on the array.  Just get an equivalent property on this object and it will

    return an enumerable that maps automatically to the named key on the

    member objects.'
  itemtype: property
  name: ! '@each'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/comparable.js
  line: 22
  description: walk like a duck. Indicates that the object can be compared.
  itemtype: property
  name: isComparable
  type: Boolean
  default: 'true'
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/comparable.js
  line: 31
  description: ! "Override to return the result of the comparison of the two parameters.
    The\ncompare method should return:\n\n  - `-1` if `a < b`\n  - `0` if `a == b`\n
    \ - `1` if `a > b`\n\nDefault implementation raises an exception."
  itemtype: method
  name: compare
  params:
  - name: a
    description: the first object to compare
    type: Object
  - name: b
    description: the second object to compare
    type: Object
  return:
    description: the result of the comparison
    type: Integer
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 28
  description: ! "/**\n    Override to return a copy of the receiver.  Default implementation
    raises\n    an exception."
  itemtype: method
  name: copy
  params:
  - name: deep
    description: if true, a deep copy of the object should be made
    type: Boolean
  return:
    description: copy of receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 40
  description: ! 'If the object implements Ember.Freezable, then this will return
    a new copy

    if the object is not frozen and the receiver if the object is frozen.


    Raises an exception if you try to call this method on a object that does

    not support freezing.


    You should use this method whenever you want a copy of a freezable object

    since a freezable object can simply return itself without actually

    consuming more memory.'
  itemtype: method
  name: frozenCopy
  return:
    description: copy of receiver or receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 18
  description: Add handlers to be called when the Deferred object is resolved or rejected.
  itemtype: method
  name: then
  params:
  - name: doneCallback
    description: a callback function to be called when done
    type: Function
  - name: failCallback
    description: a callback function to be called when failed
    type: Function
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 29
  description: Resolve a Deferred object and call any doneCallbacks with the given
    args.
  itemtype: method
  name: resolve
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 38
  description: Reject a Deferred object and call any failCallbacks with the given
    args.
  itemtype: method
  name: reject
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 74
  description: ! "// compatibility\n  isEnumerable: true,\n/**\n    Implement this
    method to make your class enumerable.\n  This method will be call repeatedly during
    enumeration.  The index value\n    will always begin with 0 and increment monotonically.
    \ You don't have to\n    rely on the index value to determine what object to return,
    but you should\n    always check the value and start from the beginning when you
    see the\n    requested index is 0.\n  The previousObject is the object that was
    returned from the last call\n    to nextObject for the current iteration.  This
    is a useful way to\n    manage iteration if you are tracing a linked list, for
    example.\n  Finally the context parameter will always contain a hash you can use
    as\n    a \"scratchpad\" to maintain any other state you need in order to iterate\n
    \   properly.  The context object is reused and is not reset between\n    iterations
    so make sure you setup the context with a fresh state whenever\n    the index
    parameter is 0.\n  Generally iterators will continue to call nextObject until
    the index\n    reaches the your current length-1.  If you run out of data before
    this\n    time for some reason, you should simply return undefined.\n  The default
    implementation of this method simply looks up the index.\n    This works great
    on any Array-like objects."
  itemtype: method
  name: nextObject
  params:
  - name: index
    description: the current index of the iteration
    type: Number
  - name: previousObject
    description: the value returned by the last call to nextObject.
    type: Object
  - name: context
    description: a context object you can use to maintain state.
    type: Object
  return:
    description: the next object in the iteration or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 113
  description: ! "Helper method returns the first object from a collection.  This
    is usually\nused by bindings and other parts of the framework to extract a single\nobject
    if the enumerable contains only one item.\n\nIf you override this method, you
    should implement it so that it will\nalways return the same value each time it
    is called.  If your enumerable\ncontains only one object, this method should always
    return that object.\nIf your enumerable is empty, this method should return undefined.\n\n
    \   var arr = [\"a\", \"b\", \"c\"];\n    arr.firstObject(); => \"a\"\n\n    var
    arr = [];\n    arr.firstObject(); => undefined"
  itemtype: property
  name: firstObject
  return:
    description: the object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 142
  description: ! "Helper method returns the last object from a collection. If your
    enumerable\ncontains only one object, this method should always return that object.\nIf
    your enumerable is empty, this method should return undefined.\n\n    var arr
    = [\"a\", \"b\", \"c\"];\n    arr.lastObject(); => \"c\"\n\n    var arr = [];\n
    \   arr.lastObject(); => undefined"
  itemtype: property
  name: lastObject
  return:
    description: the last object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 168
  description: ! "Returns true if the passed object can be found in the receiver.
    \ The\ndefault version will iterate through the enumerable until the object\nis
    found.  You may want to override this with a more efficient version.\n\n    var
    arr = [\"a\", \"b\", \"c\"];\n    arr.contains(\"a\"); => true\n    arr.contains(\"z\");
    => false"
  itemtype: method
  name: contains
  params:
  - name: obj
    description: The object to search for.
    type: Object
  return:
    description: true if object is found in enumerable.
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 185
  description: ! "Iterates through the enumerable, calling the passed function on
    each\nitem. This method corresponds to the forEach() method defined in\nJavaScript
    1.6.\n\nThe callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nNote that in addition to a callback,
    you can also pass an optional target\nobject that will be set as \"this\" on the
    context. This is a good way\nto give your iterator function access to the current
    object."
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 224
  description: Alias for mapProperty
  itemtype: method
  name: getEach
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 235
  description: ! 'Sets the value on the named property for each member. This is more

    efficient than using other methods defined on this helper. If the object

    implements Ember.Observable, the value will be changed to set(), otherwise

    it will be set directly. null objects are skipped.'
  itemtype: method
  name: setEach
  params:
  - name: key
    description: The key to set
    type: String
  - name: value
    description: The object to set
    type: Object
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 252
  description: ! "Maps all of the items in the enumeration to another value, returning\na
    new array. This method corresponds to map() defined in JavaScript 1.6.\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n    function(item, index, enumerable);\n\n- *item* is the current
    item in the iteration.\n- *index* is the current index in the iteration\n- *enumerable*
    is the enumerable object itself.\n\nIt should return the mapped value.\n\nNote
    that in addition to a callback, you can also pass an optional target\nobject that
    will be set as \"this\" on the context. This is a good way\nto give your iterator
    function access to the current object."
  itemtype: method
  name: map
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 284
  description: ! 'Similar to map, this specialized function returns the value of the
    named

    property on all items in the enumeration.'
  itemtype: method
  name: mapProperty
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 298
  description: ! "Returns an array with all of the items in the enumeration that the
    passed\nfunction returns true for. This method corresponds to filter() defined
    in\nJavaScript 1.6.\n\nThe callback method you provide should have the following
    signature (all\nparameters are optional):\n\n      function(item, index, enumerable);\n\n-
    *item* is the current item in the iteration.\n- *index* is the current index in
    the iteration\n- *enumerable* is the enumerable object itself.\n\nIt should return
    the true to include the item in the results, false otherwise.\n\nNote that in
    addition to a callback, you can also pass an optional target\nobject that will
    be set as \"this\" on the context. This is a good way\nto give your iterator function
    access to the current object."
  itemtype: method
  name: filter
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 331
  description: ! 'Returns an array with just the items with the matched property.  You

    can pass an optional second argument with the target value.  Otherwise

    this will match any property that evaluates to true.'
  itemtype: method
  name: filterProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 345
  description: ! "Returns the first item in the array for which the callback returns
    true.\nThis method works similar to the filter() method defined in JavaScript
    1.6\nexcept that it will stop working on the array once a match is found.\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nIt should return the true to
    include the item in the results, false otherwise.\n\nNote that in addition to
    a callback, you can also pass an optional target\nobject that will be set as \"this\"
    on the context. This is a good way\nto give your iterator function access to the
    current object."
  itemtype: method
  name: find
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: Found item or null.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 386
  description: ! 'Returns the first item with a property matching the passed value.  You

    can pass an optional second argument with the target value.  Otherwise

    this will match any property that evaluates to true.


    This method works much like the more generic find() method.'
  itemtype: method
  name: findProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or null
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 402
  description: ! "Returns true if the passed function returns true for every item
    in the\nenumeration. This corresponds with the every() method in JavaScript 1.6.\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nIt should return the true or
    false.\n\nNote that in addition to a callback, you can also pass an optional target\nobject
    that will be set as \"this\" on the context. This is a good way\nto give your
    iterator function access to the current object.\n\nExample Usage:\n\n      if
    (people.every(isEngineer)) { Paychecks.addBigBonus(); }"
  itemtype: method
  name: every
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 436
  description: ! 'Returns true if the passed property resolves to true for all items
    in the

    enumerable.  This method is often simpler/faster than using a callback.'
  itemtype: method
  name: everyProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 450
  description: ! "Returns true if the passed function returns true for any item in
    the\nenumeration. This corresponds with the every() method in JavaScript 1.6.\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nIt should return the true to
    include the item in the results, false otherwise.\n\nNote that in addition to
    a callback, you can also pass an optional target\nobject that will be set as \"this\"
    on the context. This is a good way\nto give your iterator function access to the
    current object.\n\nUsage Example:\n\n      if (people.some(isManager)) { Paychecks.addBiggerBonus();
    }"
  itemtype: method
  name: some
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 484
  description: ! 'Returns true if the passed property resolves to true for any item
    in the

    enumerable.  This method is often simpler/faster than using a callback.'
  itemtype: method
  name: someProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: 'true'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 497
  description: ! "This will combine the values of the enumerator into a single value.
    It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds
    to the reduce() method defined in JavaScript 1.8.\n\nThe callback method you provide
    should have the following signature (all\nparameters are optional):\n\n      function(previousValue,
    item, index, enumerable);\n\n- *previousValue* is the value returned by the last
    call to the iterator.\n- *item* is the current item in the iteration.\n- *index*
    is the current index in the iteration\n- *enumerable* is the enumerable object
    itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you
    can also pass an initialValue. An error\nwill be raised if you do not pass an
    initial value and the enumerator is\nempty.\n\nNote that unlike the other methods,
    this method does not allow you to\npass a target object to set as this for the
    callback. It's part of the\nspec. Sorry."
  itemtype: method
  name: reduce
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: initialValue
    description: Initial value for the reduce
    type: Object
  - name: reducerProperty
    description: internal use only.
    type: String
  return:
    description: The reduced value.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 540
  description: ! 'Invokes the named method on every object in the receiver that

    implements it.  This method corresponds to the implementation in

    Prototype 1.6.'
  itemtype: method
  name: invoke
  params:
  - name: methodName
    description: the name of the method
    type: String
  - name: args
    description: optional arguments to pass as well.
    type: Object...
  return:
    description: return values from calling invoke.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 564
  description: ! 'Simply converts the enumerable into a genuine array.  The order
    is not

    guaranteed.  Corresponds to the method implemented by Prototype.'
  itemtype: method
  name: toArray
  return:
    description: the enumerable as an array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 577
  description: ! "Returns a copy of the array with all null elements removed.\n\n
    \   var arr = [\"a\", null, \"c\", null];\n    arr.compact(); => [\"a\", \"c\"]"
  itemtype: method
  name: compact
  return:
    description: the array without null elements.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 588
  description: ! "Returns a new enumerable that excludes the passed value.  The default\nimplementation
    returns an array regardless of the receiver type unless\nthe receiver does not
    contain the value.\n\n    var arr = [\"a\", \"b\", \"a\", \"c\"];\n    arr.without(\"a\");
    => [\"b\", \"c\"]"
  itemtype: method
  name: without
  params:
  - name: value
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 609
  description: ! "Returns a new enumerable that contains only unique values.  The
    default\nimplementation returns an array regardless of the receiver type.\n\n
    \   var arr = [\"a\", \"a\", \"b\", \"b\"];\n    arr.uniq(); => [\"a\", \"b\"]"
  itemtype: method
  name: uniq
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 627
  description: ! 'This property will trigger anytime the enumerable''s content changes.

    You can observe this property to be notified of changes to the enumerables

    content.


    For plain enumerables, this property is read only.  Ember.Array overrides

    this method.'
  itemtype: property
  name: ! '[]'
  type: Ember.Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 646
  description: ! 'Registers an enumerable observer.   Must implement Ember.EnumerableObserver

    mixin.'
  itemtype: method
  name: addEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 666
  description: Removes a registered enumerable observer.
  itemtype: method
  name: removeEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 685
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: hasEnumerableObservers
  type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 697
  description: ! 'Invoke this method just before the contents of your enumerable will

    change.  You can either omit the parameters completely or pass the objects

    to be removed or added if available or just a count.'
  itemtype: method
  name: enumerableContentWillChange
  params:
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to be\n  added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 733
  description: ! 'Invoke this method when the contents of your enumerable has changed.

    This will notify any observers watching for content changes.  If your are

    implementing an ordered enumerable (such as an array), also pass the

    start and end values where the content changed so that it can be used to

    notify range observers.'
  itemtype: method
  name: enumerableContentDidChange
  params:
  - name: start
    description: ! "optional start offset for the content change.\n  For unordered
      enumerables, you should always pass -1."
    type: Number
    optional: true
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to\n  be added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 67
  description: ! "/**\n    Set to true when the object is frozen.  Use this property
    to detect whether\n    your object is frozen or not."
  itemtype: property
  name: isFrozen
  type: Boolean
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 78
  description: ! 'Freezes the object.  Once this method has been called the object
    should

    no longer allow any properties to be edited.'
  itemtype: method
  name: freeze
  return:
    description: receiver
    type: Object
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 38
  description: ! "/**\n    __Required.__ You must implement this method to apply this
    mixin.\n  This is one of the primitives you must implement to support Ember.Array.
    \ You\n    should replace amt objects started at idx with the objects in the passed\n
    \   array.  You should also call this.enumerableContentDidChange() ;"
  itemtype: method
  name: replace
  params:
  - name: idx
    description: ! "Starting index in the array to replace.  If idx >= length,\n      then
      append to the end of the array."
    type: Number
  - name: amt
    description: ! "Number of elements that should be removed from the array,\n      starting
      at *idx*."
    type: Number
  - name: objects
    description: ! "An array of zero or more objects that should be inserted\n      into
      the array at *idx*"
    type: Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 57
  description: ! "Remove all elements from self. This is useful if you\nwant to reuse
    an existing array without having to recreate it.\n\n    var colors = [\"red\",
    \"green\", \"blue\"];\n    color.length();  => 3\n    colors.clear();  => []\n
    \   colors.length(); => 0"
  itemtype: method
  name: clear
  return:
    description: An empty Array.
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 76
  description: ! "This will use the primitive replace() method to insert an object
    at the\nspecified index.\n\n    var colors = [\"red\", \"green\", \"blue\"];\n
    \   colors.insertAt(2, \"yellow\"); => [\"red\", \"green\", \"yellow\", \"blue\"]\n
    \   colors.insertAt(5, \"orange\"); => Error: Index out of range"
  itemtype: method
  name: insertAt
  params:
  - name: idx
    description: index of insert the object at.
    type: Number
  - name: object
    description: object to insert
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 94
  description: ! "Remove an object at the specified index using the replace() primitive\nmethod.
    \ You can pass either a single index, or a start and a length.\n\nIf you pass
    a start and length that is beyond the\nlength this method will throw an Ember.OUT_OF_RANGE_EXCEPTION\n\n
    \   var colors = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"];\n    colors.removeAt(0);
    => [\"green\", \"blue\", \"yellow\", \"orange\"]\n    colors.removeAt(2, 2); =>
    [\"green\", \"blue\"]\n    colors.removeAt(4, 2); => Error: Index out of range"
  itemtype: method
  name: removeAt
  params:
  - name: start
    description: index, start of range
    type: Number
  - name: len
    description: length of passing range
    type: Number
  return:
    description: receiver
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 126
  description: ! "Push the object onto the end of the array.  Works just like push()
    but it\nis KVO-compliant.\n\n    var colors = [\"red\", \"green\", \"blue\"];\n
    \   colors.pushObject(\"black\"); => [\"red\", \"green\", \"blue\", \"black\"]\n
    \   colors.pushObject([\"yellow\", \"orange\"]); => [\"red\", \"green\", \"blue\",
    \"black\", [\"yellow\", \"orange\"]]"
  itemtype: method
  name: pushObject
  params:
  - name: obj
    description: object to push
    type: Anything
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 142
  description: ! "Add the objects in the passed numerable to the end of the array.
    \ Defers\nnotifying observers of the change until all objects are added.\n\n    var
    colors = [\"red\", \"green\", \"blue\"];\n    colors.pushObjects(\"black\"); =>
    [\"red\", \"green\", \"blue\", \"black\"]\n    colors.pushObjects([\"yellow\",
    \"orange\"]); => [\"red\", \"green\", \"blue\", \"black\", \"yellow\", \"orange\"]"
  itemtype: method
  name: pushObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 159
  description: ! "Pop object from array or nil if none are left.  Works just like
    pop() but\nit is KVO-compliant.\n\n    var colors = [\"red\", \"green\", \"blue\"];\n
    \   colors.popObject(); => \"blue\"\n    console.log(colors); => [\"red\", \"green\"]"
  itemtype: method
  name: popObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 179
  description: ! "Shift an object from start of array or nil if none are left.  Works
    just\nlike shift() but it is KVO-compliant.\n\n    var colors = [\"red\", \"green\",
    \"blue\"];\n    colors.shiftObject(); => \"red\"\n    console.log(colors); =>
    [\"green\", \"blue\"]"
  itemtype: method
  name: shiftObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 197
  description: ! "Unshift an object to start of array.  Works just like unshift()
    but it is\nKVO-compliant.\n\n    var colors = [\"red\", \"green\", \"blue\"];\n
    \   colors.unshiftObject(\"yellow\"); => [\"yellow\", \"red\", \"green\", \"blue\"]\n
    \   colors.unshiftObject([\"black\", \"white\"]); => [[\"black\", \"white\"],
    \"yellow\", \"red\", \"green\", \"blue\"]"
  itemtype: method
  name: unshiftObject
  params:
  - name: obj
    description: object to unshift
    type: Anything
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 213
  description: ! "Adds the named objects to the beginning of the array.  Defers notifying\nobservers
    until all objects have been added.\n\n    var colors = [\"red\", \"green\", \"blue\"];\n
    \   colors.unshiftObjects([\"black\", \"white\"]); => [\"black\", \"white\", \"red\",
    \"green\", \"blue\"]\n    colors.unshiftObjects(\"yellow\"); => Type Error: 'undefined'
    is not a function"
  itemtype: method
  name: unshiftObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 230
  description: ! 'Reverse objects in the array.  Works just like reverse() but it
    is

    KVO-compliant.'
  itemtype: method
  name: reverseObjects
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 245
  description: ! "Replace all the the receiver's content with content of the argument.\nIf
    argument is an empty array receiver will be cleared.\n\n    var colors = [\"red\",
    \"green\", \"blue\"];\n    colors.setObjects([\"black\", \"white\"]); => [\"black\",
    \"white\"]\n    colors.setObjects([]); => []"
  itemtype: method
  name: setObjects
  params:
  - name: objects
    description: ! "array whose content will be used for replacing\n    the content
      of the receiver"
    type: Ember.Array
  return:
    description: receiver with the new content
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 47
  description: ! "/**\n    __Required.__ You must implement this method to apply this
    mixin.\n  Attempts to add the passed object to the receiver if the object is not\n
    \   already present in the collection. If the object is present, this method\n
    \   has no effect.\n  If the passed object is of a type not supported by the receiver\n
    \   then this method should raise an exception."
  itemtype: method
  name: addObject
  params:
  - name: object
    description: The object to add to the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 65
  description: Adds each object in the passed enumerable to the receiver.
  itemtype: method
  name: addObjects
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 79
  description: ! '__Required.__ You must implement this method to apply this mixin.


    Attempts to remove the passed object from the receiver collection if the

    object is in present in the collection.  If the object is not present,

    this method has no effect.


    If the passed object is of a type not supported by the receiver

    then this method should raise an exception.'
  itemtype: method
  name: removeObject
  params:
  - name: object
    description: The object to remove from the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 96
  description: Removes each objects in the passed enumerable from the receiver.
  itemtype: method
  name: removeObjects
  params:
  - name: objects
    description: the objects to remove
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 75
  description: ! "Retrieves the value of a property from the object.\n\nThis method
    is usually similar to using object[keyName] or object.keyName,\nhowever it supports
    both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies
    the syntax for accessing all these kinds\nof properties, it can make many refactorings
    easier, such as replacing a\nsimple property with a computed property, or vice
    versa.\n\n### Computed Properties\n\nComputed properties are methods defined with
    the `property` modifier\ndeclared at the end, such as:\n\n      fullName: function()
    {\n        return this.getEach('firstName', 'lastName').compact().join(' ');\n
    \     }.property('firstName', 'lastName')\n\nWhen you call `get` on a computed
    property, the function will be\ncalled and the return value will be returned instead
    of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to
    call `get` on a property whose value is\nundefined, the unknownProperty() method
    will be called on the object.\nIf this method returns any value other than undefined,
    it will be returned\ninstead. This allows you to implement \"virtual\" properties
    that are\nnot defined upfront."
  itemtype: method
  name: get
  params:
  - name: key
    description: The property to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 115
  description: ! "To get multiple properties at once, call getProperties\nwith a list
    of strings or an array:\n\n      record.getProperties('firstName', 'lastName',
    'zipCode'); // => { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n\n
    \  is equivalent to:\n\n      record.getProperties(['firstName', 'lastName', 'zipCode']);
    // => { firstName: 'John', lastName: 'Doe', zipCode: '10011' }"
  itemtype: method
  name: getProperties
  params:
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 141
  description: ! "Sets the provided key or path to the value.\n\nThis method is generally
    very similar to calling object[key] = value or\nobject.key = value, except that
    it provides support for computed\nproperties, the unknownProperty() method and
    property observers.\n\n### Computed Properties\n\nIf you try to set a value on
    a key that has a computed property handler\ndefined (see the get() method for
    an example), then set() will call\nthat method, passing both the value and key
    instead of simply changing\nthe value itself. This is useful for those times when
    you need to\nimplement a property that is composed of one or more member\nproperties.\n\n###
    Unknown Properties\n\nIf you try to set a value on a key that is undefined in
    the target\nobject, then the unknownProperty() handler will be called instead.
    This\ngives you an opportunity to implement complex \"virtual\" properties that\nare
    not predefined on the object. If unknownProperty() returns\nundefined, then set()
    will simply set the value on the object.\n\n### Property Observers\n\nIn addition
    to changing the property, set() will also register a\nproperty change with the
    object. Unless you have placed this call\ninside of a beginPropertyChanges() and
    endPropertyChanges(), any \"local\"\nobservers (i.e. observer methods declared
    on the same object), will be\ncalled immediately. Any \"remote\" observers (i.e.
    observer methods\ndeclared on another object) will be placed in a queue and called
    at a\nlater time in a coalesced manner.\n\n### Chaining\n\nIn addition to property
    changes, set() returns the value of the object\nitself so you can do chaining
    like this:\n\n      record.set('firstName', 'Charles').set('lastName', 'Jolley');"
  itemtype: method
  name: set
  params:
  - name: key
    description: The property to set
    type: String
  - name: value
    description: The value to set or null.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 192
  description: ! "To set multiple properties at once, call setProperties\nwith a Hash:\n\n
    \     record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });"
  itemtype: method
  name: setProperties
  params:
  - name: hash
    description: the hash of keys and values to set
    type: Hash
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 206
  description: ! 'Begins a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call this

    method at the beginning of the changes to begin deferring change

    notifications. When you are done making changes, call endPropertyChanges()

    to deliver the deferred change notifications and end deferring.'
  itemtype: method
  name: beginPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 224
  description: ! 'Ends a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call

    beginPropertyChanges() at the beginning of the changes to defer change

    notifications. When you are done making changes, call this method to

    deliver the deferred change notifications and end deferring.'
  itemtype: method
  name: endPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 242
  description: ! 'Notify the observer system that a property is about to change.


    Sometimes you need to change a value directly or indirectly without

    actually calling get() or set() on it. In this case, you can use this

    method and propertyDidChange() instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call propertyWillChange and propertyDidChange as

    a pair. If you do not, it may get the property change groups out of order

    and cause notifications to be delivered more often than you would like.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: key
    description: The property key that is about to change.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 264
  description: ! 'Notify the observer system that a property has just changed.


    Sometimes you need to change a value directly or indirectly without

    actually calling get() or set() on it. In this case, you can use this

    method and propertyWillChange() instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call propertyWillChange and propertyDidChange as

    a pair. If you do not, it may get the property change groups out of order

    and cause notifications to be delivered more often than you would like.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: keyName
    description: The property key that has just changed.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 286
  description: ! 'Convenience method to call `propertyWillChange` and `propertyDidChange`
    in

    succession.'
  itemtype: method
  name: notifyPropertyChange
  params:
  - name: keyName
    description: The property key to be notified about.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 304
  description: ! "Adds an observer on a property.\n\nThis is the core method used
    to register an observer for a property.\n\nOnce you call this method, anytime
    the key's value is set, your observer\nwill be notified. Note that the observers
    are triggered anytime the\nvalue is set, regardless of whether it has actually
    changed. Your\nobserver should be prepared to handle that.\n\nYou can also pass
    an optional context parameter to this method. The\ncontext will be passed to your
    observer method whenever it is triggered.\nNote that if you add the same target/method
    pair on a key multiple times\nwith different context parameters, your observer
    will only be called once\nwith the last context you passed.\n\n### Observer Methods\n\nObserver
    methods you pass should generally have the following signature if\nyou do not
    pass a \"context\" parameter:\n\n      fooDidChange: function(sender, key, value,
    rev);\n\nThe sender is the object that changed. The key is the property that\nchanges.
    The value property is currently reserved and unused. The rev\nis the last property
    revision of the object when it changed, which you can\nuse to detect if the key
    value has really changed or not.\n\nIf you pass a \"context\" parameter, the context
    will be passed before the\nrevision like so:\n\n      fooDidChange: function(sender,
    key, value, context, rev);\n\nUsually you will not need the value, context or
    revision parameters at\nthe end. In this case, it is common to write observer
    methods that take\nonly a sender and key value as parameters or, if you aren't
    interested in\nany of these values, to write an observer that has no parameters
    at all."
  itemtype: method
  name: addObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: self
    type: Ember.Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 352
  description: ! 'Remove an observer you have previously registered on this object.
    Pass

    the same key, target, and method you passed to addObserver() and your

    target will no longer receive notifications.'
  itemtype: method
  name: removeObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: receiver
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 367
  description: ! 'Returns true if the object currently has observers registered for
    a

    particular key. You can use this method to potentially defer performing

    an expensive action until someone begins observing a particular property

    on the object.'
  itemtype: method
  name: hasObserverFor
  params:
  - name: key
    description: Key to check
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 381
  description: ! 'This method will be called when a client attempts to get the value
    of a

    property that has not been defined in one of the typical ways. Override

    this method to create "virtual" properties.'
  itemtype: method
  name: unknownProperty
  params:
  - name: key
    description: The name of the unknown property that was requested.
    type: String
  return:
    description: The property value or undefined. Default is undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 394
  description: ! 'This method will be called when a client attempts to set the value
    of a

    property that has not been defined in one of the typical ways. Override

    this method to create "virtual" properties.'
  itemtype: method
  name: setUnknownProperty
  params:
  - name: key
    description: The name of the unknown property to be set.
    type: String
  - name: value
    description: The value the unknown property is to be set to.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 408
  deprecated: true
  itemtype: method
  name: getPath
  params:
  - name: path
    description: The property path to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 419
  deprecated: true
  itemtype: method
  name: setPath
  params:
  - name: path
    description: The path to the property that will be set
    type: String
  - name: value
    description: The value to set or null.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 431
  description: ! "Retrieves the value of a property, or a default value in the case
    that the property\nreturns undefined.\n\n    person.getWithDefault('lastName',
    'Doe');"
  itemtype: method
  name: getWithDefault
  params:
  - name: keyName
    description: The name of the property to retrieve
    type: String
  - name: defaultValue
    description: The value to return if the property value is undefined
    type: Object
  return:
    description: The property value or the defaultValue.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 446
  description: ! "Set the value of a property to the current value plus some amount.\n\n
    \   person.incrementProperty('age');\n    team.incrementProperty('score', 2);"
  itemtype: method
  name: incrementProperty
  params:
  - name: keyName
    description: The name of the property to increment
    type: String
  - name: increment
    description: The amount to increment by. Defaults to 1
    type: Object
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 463
  description: ! "Set the value of a property to the current value minus some amount.\n\n
    \   player.decrementProperty('lives');\n    orc.decrementProperty('health', 5);"
  itemtype: method
  name: decrementProperty
  params:
  - name: keyName
    description: The name of the property to decrement
    type: String
  - name: increment
    description: The amount to decrement by. Defaults to 1
    type: Object
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 480
  description: ! "Set the value of a boolean property to the opposite of it's\ncurrent
    value.\n\n    starship.toggleProperty('warpDriveEnaged');"
  itemtype: method
  name: toggleProperty
  params:
  - name: keyName
    description: The name of the property to toggle
    type: String
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 495
  description: ! 'Returns the cached value of a computed property, if it exists.

    This allows you to inspect the value of a computed property

    without accidentally invoking it if it is intended to be

    generated lazily.'
  itemtype: method
  name: cacheFor
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The cached value of the computed property, if any
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 46
  description: ! "/**\n    The content array.  Must be an object that implements Ember.Array
    and/or\n    Ember.MutableArray."
  itemtype: property
  name: content
  type: Ember.Array
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 57
  description: ! 'The array that the proxy pretends to be. In the default `ArrayProxy`

    implementation, this and `content` are the same. Subclasses of `ArrayProxy`

    can override this property to provide things like sorting and filtering.'
  itemtype: property
  name: arrangedContent
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 68
  description: ! 'Should actually retrieve the object at the specified index from
    the

    content. You can override this method in subclasses to transform the

    content item to something new.


    This method will only be called if content is non-null.'
  itemtype: method
  name: objectAtContent
  params:
  - name: idx
    description: The index to retrieve.
    type: Number
  return:
    description: the value or undefined if none found
    type: Object
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 83
  description: ! 'Should actually replace the specified objects on the content array.

    You can override this method in subclasses to transform the content item

    into something new.


    This method will only be called if content is non-null.'
  itemtype: method
  name: replaceContent
  params:
  - name: idx
    description: The starting index
    type: Number
  - name: amt
    description: The number of items to remove from the content.
    type: Number
  - name: objects
    description: Optional array of objects to insert or null if no objects.
    type: Array
  return:
    description: ''
    type: Void
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 100
  access: private
  tagname: ! 'Invoked when the content property is about to change. Notifies observers
    that the

    entire array content will change.'
  itemtype: method
  name: _contentWillChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 126
  access: private
  tagname: ! 'Invoked when the content property changes.  Notifies observers that
    the

    entire array content has changed.'
  itemtype: method
  name: _contentDidChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 102
  itemtype: property
  name: isDestroyed
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 108
  itemtype: property
  name: isDestroying
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 114
  description: ! 'Destroys an object by setting the isDestroyed flag and removing
    its

    metadata, which effectively destroys observers and bindings.


    If you try to set a property on a destroyed object, an exception will be

    raised.


    Note that destruction is scheduled for the end of the run loop and does not

    happen immediately.'
  itemtype: method
  name: destroy
  return:
    description: receiver
    type: Ember.Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 139
  access: private
  tagname: ! 'Invoked by the run loop to actually destroy the object. This is

    scheduled for execution by the `destroy` method.'
  itemtype: method
  name: _scheduledDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 232
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For
    example,\ncomputed property functions may close over variables that are then no
    longer\navailable for introspection.\n\nYou can pass a hash of these values to
    a computed property like this:\n\n    person: function() {\n      var personId
    = this.get('personId');\n      return App.Person.create({ id: personId });\n    }.property().meta({
    type: App.Person })\n\nOnce you've done this, you can retrieve the values saved
    to the computed\nproperty from your class like this:\n\n    MyClass.metaForProperty('person');\n\nThis
    will return the original hash that was passed to `meta()`."
  itemtype: method
  name: metaForProperty
  params:
  - name: key
    description: property name
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 262
  description: ! 'Iterate over each computed property for the class, passing its name

    and any associated metadata (see `metaForProperty`) to the callback.'
  itemtype: method
  name: eachComputedProperty
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/each_proxy.js
  line: 97
  description: ! 'You can directly access mapped properties by simply requesting them.

    The unknownProperty handler will generate an EachArray of each item.'
  itemtype: method
  name: unknownProperty
  params:
  - name: keyName
    description: ''
    type: String
  - name: value
    description: ''
    type: Anything
  class: Ember.EachProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 9
  itemtype: method
  name: onLoad
  params:
  - name: name
    description: name of hook
    type: String
  - name: callback
    description: callback to be called
    type: Function
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 26
  itemtype: method
  name: runLoadHooks
  params:
  - name: name
    description: name of hook
    type: String
  - name: object
    description: object to pass to callbacks
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 122
  description: ! 'Creates an Ember.NativeArray from an Array like object.

    Does not modify the original object.'
  itemtype: method
  name: A
  return:
    description: ''
    type: Ember.NativeArray
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 135
  description: ! 'Activates the mixin on the Array.prototype if not already applied.  Calling

    this method more than once is safe.'
  itemtype: method
  name: activate
  static: 1
  return:
    description: ''
    type: Void
  class: Ember.NativeArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/object_proxy.js
  line: 87
  description: ! "/**\n  The object whose properties will be forwarded."
  itemtype: property
  name: content
  type: Ember.Object
  default: 'null'
  class: Ember.ObjectProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 111
  description: ! "// ..........................................................\n
    \ // IMPLEMENT ENUMERABLE APIS\n  //\n/**\n    This property will change as the
    number of objects in the set changes."
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 126
  description: ! "Clears the set. This is useful if you want to reuse an existing
    set\nwithout having to recreate it.\n\n    var colors = new Ember.Set([\"red\",
    \"green\", \"blue\"]);\n    colors.length;  => 3\n    colors.clear();\n    colors.length;
    \ => 0"
  itemtype: method
  name: clear
  return:
    description: An empty Set
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 165
  description: ! "Returns true if the passed object is also an enumerable that contains
    the\nsame objects as the receiver.\n\n    var colors = [\"red\", \"green\", \"blue\"],\n
    \       same_colors = new Ember.Set(colors);\n    same_colors.isEqual(colors);
    => true\n    same_colors.isEqual([\"purple\", \"brown\"]); => false"
  itemtype: method
  name: isEqual
  params:
  - name: obj
    description: the other object.
    type: Ember.Set
  return:
    description: ''
    type: Boolean
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 192
  description: ! "Adds an object to the set. Only non-null objects can be added to
    a set\nand those can only be added once. If the object is already in the set or\nthe
    passed value is null this method will have no effect.\n\nThis is an alias for
    `Ember.MutableEnumerable.addObject()`.\n\n    var colors = new Ember.Set();\n
    \   colors.add(\"blue\");    => [\"blue\"]\n    colors.add(\"blue\");    => [\"blue\"]\n
    \   colors.add(\"red\");     => [\"blue\", \"red\"]\n    colors.add(null);      =>
    [\"blue\", \"red\"]\n    colors.add(undefined); => [\"blue\", \"red\"]"
  itemtype: method
  name: add
  params:
  - name: obj
    description: The object to add.
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 212
  description: ! "Removes the object from the set if it is found.  If you pass a null
    value\nor an object that is already not in the set, this method will have no\neffect.
    This is an alias for `Ember.MutableEnumerable.removeObject()`.\n\n    var colors
    = new Ember.Set([\"red\", \"green\", \"blue\"]);\n    colors.remove(\"red\");
    \   => [\"blue\", \"green\"]\n    colors.remove(\"purple\"); => [\"blue\", \"green\"]\n
    \   colors.remove(null);     => [\"blue\", \"green\"]"
  itemtype: method
  name: remove
  params:
  - name: obj
    description: The object to remove
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 228
  description: ! "Removes the last element from the set and returns it, or null if
    it's empty.\n\n    var colors = new Ember.Set([\"green\", \"blue\"]);\n    colors.pop();
    => \"blue\"\n    colors.pop(); => \"green\"\n    colors.pop(); => null"
  itemtype: method
  name: pop
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 246
  description: ! "Inserts the given object on to the end of the set. It returns\nthe
    set itself.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n
    \   var colors = new Ember.Set();\n    colors.push(\"red\");   => [\"red\"]\n
    \   colors.push(\"green\"); => [\"red\", \"green\"]\n    colors.push(\"blue\");
    \ => [\"red\", \"green\", \"blue\"]"
  itemtype: method
  name: push
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 262
  description: ! "Removes the last element from the set and returns it, or null if
    it's empty.\n\nThis is an alias for `Ember.Set.pop()`.\n\n    var colors = new
    Ember.Set([\"green\", \"blue\"]);\n    colors.shift(); => \"blue\"\n    colors.shift();
    => \"green\"\n    colors.shift(); => null"
  itemtype: method
  name: shift
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 277
  description: ! "Inserts the given object on to the end of the set. It returns\nthe
    set itself.\n\nThis is an alias of `Ember.Set.push()`\n\n    var colors = new
    Ember.Set();\n    colors.unshift(\"red\");   => [\"red\"]\n    colors.unshift(\"green\");
    => [\"red\", \"green\"]\n    colors.unshift(\"blue\");  => [\"red\", \"green\",
    \"blue\"]"
  itemtype: method
  name: unshift
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 293
  description: ! "Adds each object in the passed enumerable to the set.\n\nThis is
    an alias of `Ember.MutableEnumerable.addObjects()`\n\n    var colors = new Ember.Set();\n
    \   colors.addEach([\"red\", \"green\", \"blue\"]); => [\"red\", \"green\", \"blue\"]"
  itemtype: method
  name: addEach
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 307
  description: ! "Removes each object in the passed enumerable to the set.\n\nThis
    is an alias of `Ember.MutableEnumerable.removeObjects()`\n\n    var colors = new
    Ember.Set([\"red\", \"green\", \"blue\"]);\n    colors.removeEach([\"red\", \"blue\"]);
    => [\"green\"]"
  itemtype: method
  name: removeEach
  params:
  - name: objects
    description: the objects to remove.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 13
  description: ! 'Defines the hash of localized strings for the current language.  Used
    by

    the `Ember.String.loc()` helper.  To localize, add string values to this

    hash.'
  itemtype: property
  name: STRINGS
  type: Hash
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/string.js
  line: 35
  description: ! "Apply formatting options to the string.  This will look for occurrences\nof
    %@ in your string and substitute them with the arguments you pass into\nthis method.
    \ If you want to control the specific order of replacement,\nyou can add a number
    after the key as well to indicate which argument\nyou want to insert.\n\nOrdered
    insertions are most useful when building loc strings where values\nyou need to
    insert may appear in different orders.\n\n    \"Hello %@ %@\".fmt('John', 'Doe')
    => \"Hello John Doe\"\n    \"Hello %@2, %@1\".fmt('John', 'Doe') => \"Hello Doe,
    John\""
  itemtype: method
  name: fmt
  params:
  - name: args
    description: ''
    type: Object...
    optional: true
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 62
  description: ! "Formats the passed string, but first looks up the string in the
    localized\nstrings hash.  This is a convenient way to localize text.  See\n`Ember.String.fmt()`
    for more information on formatting.\n\nNote that it is traditional but not required
    to prefix localized string\nkeys with an underscore or other character so you
    can easily identify\nlocalized strings.\n\n    Ember.STRINGS = {\n      '_Hello
    World': 'Bonjour le monde',\n      '_Hello %@ %@': 'Bonjour %@ %@'\n    };\n\n
    \   Ember.String.loc(\"_Hello World\");\n    => 'Bonjour le monde';\n\n    Ember.String.loc(\"_Hello
    %@ %@\", [\"John\", \"Smith\"]);\n    => \"Bonjour John Smith\";"
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: Optional array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 92
  description: ! "Splits a string into separate units separated by spaces, eliminating
    any\nempty strings in the process.  This is a convenience method for split that\nis
    mostly useful when applied to the String.prototype.\n\n    Ember.String.w(\"alpha
    beta gamma\").forEach(function(key) {\n      console.log(key);\n    });\n    >
    alpha\n    > beta\n    > gamma"
  itemtype: method
  name: w
  params:
  - name: str
    description: The string to split
    type: String
  return:
    description: split string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 110
  description: ! "Converts a camelized string into all lower case separated by underscores.\n\n
    \   'innerHTML'.decamelize()         => 'inner_html'\n    'action_name'.decamelize()
    \      => 'action_name'\n    'css-class-name'.decamelize()    => 'css-class-name'\n
    \   'my favorite items'.decamelize() => 'my favorite items'"
  itemtype: method
  name: decamelize
  params:
  - name: str
    description: The string to decamelize.
    type: String
  return:
    description: the decamelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 126
  description: ! "Replaces underscores or spaces with dashes.\n\n    'innerHTML'.dasherize()
    \        => 'inner-html'\n    'action_name'.dasherize()       => 'action-name'\n
    \   'css-class-name'.dasherize()    => 'css-class-name'\n    'my favorite items'.dasherize()
    => 'my-favorite-items'"
  itemtype: method
  name: dasherize
  params:
  - name: str
    description: The string to dasherize.
    type: String
  return:
    description: the dasherized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 152
  description: ! "Returns the lowerCaseCamel form of a string.\n\n    'innerHTML'.camelize()
    \        => 'innerHTML'\n    'action_name'.camelize()       => 'actionName'\n
    \   'css-class-name'.camelize()    => 'cssClassName'\n    'my favorite items'.camelize()
    => 'myFavoriteItems'"
  itemtype: method
  name: camelize
  params:
  - name: str
    description: The string to camelize.
    type: String
  return:
    description: the camelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 170
  description: ! "Returns the UpperCamelCase form of a string.\n\n    'innerHTML'.classify()
    \        => 'InnerHTML'\n    'action_name'.classify()       => 'ActionName'\n
    \   'css-class-name'.classify()    => 'CssClassName'\n    'my favorite items'.classify()
    => 'MyFavoriteItems'"
  itemtype: method
  name: classify
  params:
  - name: str
    description: the string to classify
    type: String
  return:
    description: the classified string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 187
  description: ! "More general than decamelize. Returns the lower_case_and_underscored\nform
    of a string.\n\n    'innerHTML'.underscore()         => 'inner_html'\n    'action_name'.underscore()
    \      => 'action_name'\n    'css-class-name'.underscore()    => 'css_class_name'\n
    \   'my favorite items'.underscore() => 'my_favorite_items'"
  itemtype: property
  name: underscore
  return:
    description: the underscored string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
  subprops:
  - name: str
    description: The string to underscore.
    type: String
- file: ../packages/ember-runtime/lib/core.js
  line: 24
  description: ! "Returns a consistent type for the passed item.\n\nUse this instead
    of the built-in `typeof` to get the type of an item.\nIt will return the same
    result across all browsers and includes a bit\nmore detail.  Here is what will
    be returned:\n\n    | Return Value  | Meaning                                              |\n
    \   |---------------|------------------------------------------------------|\n
    \   | 'string'      | String primitive                                     |\n
    \   | 'number'      | Number primitive                                     |\n
    \   | 'boolean'     | Boolean primitive                                    |\n
    \   | 'null'        | Null value                                           |\n
    \   | 'undefined'   | Undefined value                                      |\n
    \   | 'function'    | A function                                           |\n
    \   | 'array'       | An instance of Array                                 |\n
    \   | 'class'       | A Ember class (created using Ember.Object.extend())  |\n
    \   | 'instance'    | A Ember object instance                              |\n
    \   | 'error'       | An instance of the Error object                      |\n
    \   | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\nExamples:\n\n
    \   Ember.typeOf();                      => 'undefined'\n    Ember.typeOf(null);
    \                 => 'null'\n    Ember.typeOf(undefined);             => 'undefined'\n
    \   Ember.typeOf('michael');             => 'string'\n    Ember.typeOf(101);                   =>
    'number'\n    Ember.typeOf(true);                  => 'boolean'\n    Ember.typeOf(Ember.makeArray);
    \      => 'function'\n    Ember.typeOf([1,2,90]);              => 'array'\n    Ember.typeOf(Ember.Object.extend());
    => 'class'\n    Ember.typeOf(Ember.Object.create()); => 'instance'\n    Ember.typeOf(new
    Error('teamocil')); => 'error'\n\n    // \"normal\" JavaScript object\n    Ember.typeOf({a:
    'b'});              => 'object'"
  itemtype: method
  name: typeOf
  params:
  - name: item
    description: the item to check
    type: Object
  return:
    description: the type
    type: String
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 83
  description: ! "Returns true if the passed value is null or undefined.  This avoids
    errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n
    \   Ember.none();             => true\n    Ember.none(null);         => true\n
    \   Ember.none(undefined);    => true\n    Ember.none('');           => false\n
    \   Ember.none([]);           => false\n    Ember.none(function(){}); => false"
  itemtype: method
  name: none
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 104
  description: ! "Verifies that a value is null or an empty string | array | function.\n\nConstrains
    the rules on `Ember.none` by returning false for empty\nstring and empty arrays.\n\n
    \   Ember.empty();               => true\n    Ember.empty(null);           =>
    true\n    Ember.empty(undefined);      => true\n    Ember.empty('');             =>
    true\n    Ember.empty([]);             => true\n    Ember.empty('tobias fünke');
    => false\n    Ember.empty([0,1,2]);        => false"
  itemtype: method
  name: empty
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 127
  description: ! "This will compare two javascript values of possibly different types.\nIt
    will tell you which one is greater than the other by returning:\n\n - -1 if the
    first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first
    is greater than the second.\n\nThe order is calculated based on Ember.ORDER_DEFINITION,
    if types are different.\nIn case they have the same type an appropriate comparison
    for this type is made.\n\n   Ember.compare('hello', 'hello');  => 0\n   Ember.compare('abc',
    'dfg');      => -1\n   Ember.compare(2, 1);              => 1"
  itemtype: method
  name: compare
  params:
  - name: v
    description: First value to compare
    type: Object
  - name: w
    description: Second value to compare
    type: Object
  return:
    description: -1 if v < w, 0 if v = w and 1 if v > w.
    type: Number
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 274
  description: ! 'Creates a clone of the passed object. This function can take just
    about

    any type of object and create a clone of it, including primitive values

    (which are not actually cloned because they are immutable).


    If the passed object implements the clone() method, then this function

    will simply call that method and return the result.'
  itemtype: method
  name: copy
  params:
  - name: object
    description: The object to clone
    type: Object
  - name: deep
    description: If true, a deep copy of the object is made
    type: Boolean
  return:
    description: The cloned object
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 295
  description: ! 'Convenience method to inspect an object. This method will attempt
    to

    convert the object into a useful string description.'
  itemtype: method
  name: inspect
  params:
  - name: obj
    description: The object you want to inspect.
    type: Object
  return:
    description: A description of the object
    type: String
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 317
  description: ! "Compares two objects, returning true if they are logically equal.
    \ This is\na deeper comparison than a simple triple equal. For sets it will compare
    the\ninternal objects.  For any other object that implements `isEqual()` it will
    \nrespect that method.\n\n    Ember.isEqual('hello', 'hello');  => true\n    Ember.isEqual(1,
    2);              => false\n    Ember.isEqual([4,2], [4,2]);      => false"
  itemtype: method
  name: isEqual
  params:
  - name: a
    description: first object to compare
    type: Object
  - name: b
    description: second object to compare
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 353
  description: ! 'Returns all of the keys defined on an object or hash. This is useful

    when inspecting objects for debugging.  On browsers that support it, this

    uses the native Object.keys implementation.'
  itemtype: method
  name: keys
  params:
  - name: obj
    description: ''
    type: Object
  return:
    description: Array containing keys of obj
    type: Array
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-states/lib/state.js
  line: 15
  description: ! "isState: true,\n\n/**\n  A reference to the parent state."
  itemtype: property
  name: parentState
  type: Ember.State
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 27
  description: The name of this state.
  itemtype: property
  name: name
  type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 35
  description: The full path to this state.
  itemtype: property
  name: path
  type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 52
  access: private
  tagname: ! 'Override the default event firing from Ember.Evented to

    also call methods with the given name.'
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 137
  description: ! 'A Boolean value indicating whether the state is a leaf state

    in the state hierarchy. This is false if the state has child

    states; otherwise it is true.'
  itemtype: property
  name: isLeaf
  type: Boolean
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 149
  description: ! 'A boolean value indicating whether the state takes a context.

    By default we assume all states take contexts.'
  itemtype: property
  name: hasContext
  default: 'true'
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 158
  description: This is the default transition event.
  itemtype: event
  name: setup
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: context
    description: ''
  see:
  - Ember.StateManager#transitionEvent
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 168
  description: This event fires when the state is entered.
  itemtype: event
  name: enter
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 176
  description: This event fires when the state is exited.
  itemtype: event
  name: exit
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 187
  description: ! "Creates an action function for transitioning to the named state
    while preserving context.\n\nThe following example StateManagers are equivalent:\n\n
    \   aManager = Ember.StateManager.create({\n      stateOne: Ember.State.create({\n
    \       changeToStateTwo: Ember.State.transitionTo('stateTwo')\n      }),\n      stateTwo:
    Ember.State.create({})\n    })\n\n    bManager = Ember.StateManager.create({\n
    \     stateOne: Ember.State.create({\n        changeToStateTwo: function(manager,
    context){\n          manager.transitionTo('stateTwo', context)\n        }\n      }),\n
    \     stateTwo: Ember.State.create({})\n    })"
  itemtype: method
  name: transitionTo
  static: 1
  params:
  - name: target
    description: ''
    type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 30
  description: ! 'Normalize the passed in enter, exit and resolve states.


    This process also adds `finalState` and `contexts` to the Transition object.'
  itemtype: method
  name: normalize
  params:
  - name: manager
    description: the state manager running the transition
    type: Ember.StateManager
  - name: contexts
    description: a list of contexts passed into `transitionTo`
    type: Array
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 46
  description: ! 'Match each of the contexts passed to `transitionTo` to a state.

    This process may also require adding additional enter and exit

    states if there are more contexts than enter states.'
  itemtype: method
  name: matchContextsToStates
  params:
  - name: contexts
    description: a list of contexts passed into `transitionTo`
    type: Array
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 123
  description: Add any `initialState`s to the list of enter states.
  itemtype: method
  name: addInitialStates
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 143
  description: ! 'Remove any states that were added because the number of contexts

    exceeded the number of explicit enter states, but the context has

    not changed since the last time the state was entered.'
  itemtype: method
  name: removeUnchangedContexts
  params:
  - name: manager
    description: ! "passed in to look up the last\n  context for a states"
    type: Ember.StateManager
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 540
  access: private
  tagname: ! 'When creating a new statemanager, look for a default state to transition

    into. This state can either be named `start`, or can be specified using the

    `initialState` property.'
  itemtype: method
  name: init
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 586
  description: ! 'The current state from among the manager''s possible states. This
    property should

    not be set directly.  Use `transitionTo` to move between states by name.'
  itemtype: property
  name: currentState
  type: Ember.State
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 595
  description: ! 'The path of the current state. Returns a string representation of
    the current

    state.'
  itemtype: property
  name: currentPath
  type: String
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 606
  description: The name of transitionEvent that this stateManager will dispatch
  itemtype: property
  name: transitionEvent
  type: String
  default: ! '''setup'''
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 615
  description: ! 'If set to true, `errorOnUnhandledEvents` will cause an exception
    to be

    raised if you attempt to send an event to a state manager that is not

    handled by the current state or any of its parent states.'
  itemtype: property
  name: errorOnUnhandledEvents
  type: Boolean
  default: 'true'
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 672
  description: ! "Finds a state by its state path.\n\nExample:\n\n    manager = Ember.StateManager.create({\n
    \     root: Ember.State.create({\n        dashboard: Ember.State.create()\n      })\n
    \   });\n\n    manager.getStateByPath(manager, \"root.dashboard\")\n\n    // returns
    the dashboard state"
  itemtype: method
  name: getStateByPath
  params:
  - name: root
    description: the state to start searching from
    type: Ember.State
  - name: path
    description: the state path to follow
    type: String
  return:
    description: the state at the end of the path
    type: Ember.State
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 715
  description: ! 'A state stores its child states in its `states` hash.

    This code takes a path like `posts.show` and looks

    up `root.states.posts.states.show`.


    It returns a list of all of the states from the

    root, which is the list of states to call `enter`

    on.'
  itemtype: method
  name: getStatesInPath
  params:
  - name: root
    description: ''
  - name: path
    description: ''
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-views/lib/system/controller.js
  line: 24
  description: ! "`connectOutlet` creates a new instance of a provided view\nclass,
    wires it up to its associated controller, and\nassigns the new view to a property
    on the current controller.\n\nThe purpose of this method is to enable views that
    use\noutlets to quickly assign new views for a given outlet.\n\nFor example, an
    application view's template may look like\nthis:\n\n``` handlebars\n<h1>My Blog</h1>\n{{outlet}}\n```\n\nThe
    view for this outlet is specified by assigning a\n`view` property to the application's
    controller. The\nfollowing code will assign a new `App.PostsView` to\nthat outlet:\n\n```
    javascript\napplicationController.connectOutlet('posts');\n```\n\nIn general,
    you will also want to assign a controller\nto the newly created view. By convention,
    a controller\nnamed `postsController` will be assigned as the view's\ncontroller.\n\nIn
    an application initialized using `app.initialize(router)`,\n`connectOutlet` will
    look for `postsController` on the\nrouter. The initialization process will automatically\ncreate
    an instance of `App.PostsController` called\n`postsController`, so you don't need
    to do anything\nbeyond `connectOutlet` to assign your view and wire it\nup to
    its associated controller.\n\nYou can supply a `content` for the controller by
    supplying\na final argument after the view class:\n\n``` javascript\napplicationController.connectOutlet('posts',
    App.Post.find());\n```\n\nYou can specify a particular outlet to use. For example,
    if your main\ntemplate looks like:\n\n``` handlebars\n<h1>My Blog</h1>\n{{outlet
    masterView}}\n{{outlet detailView}}\n```\n\nYou can assign an `App.PostsView`
    to the masterView outlet:\n\n``` javascript\napplicationController.connectOutlet({\n
    \ outletName: 'masterView',\n  name: 'posts',\n  context: App.Post.find()\n});\n```\n\nYou
    can write this as:\n\n``` javascript\napplicationController.connectOutlet('masterView',
    'posts', App.Post.find());\n```"
  itemtype: method
  name: connectOutlet
  params:
  - name: outletName
    description: a name for the outlet to set
    type: String
  - name: name
    description: a view/controller pair name
    type: String
  - name: context
    description: ! "a context object to assign to the\n  controller's `content` property,
      if a controller can be\n  found (optional)"
    type: Object
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/controller.js
  line: 174
  description: ! "Convenience method to connect controllers. This method makes other
    controllers\navailable on the controller the method was invoked on.\n\nFor example,
    to make the `personController` and the `postController` available\non the `overviewController`,
    you would call:\n\n    overviewController.connectControllers('person', 'post');"
  itemtype: method
  name: connectControllers
  params:
  - name: controllerNames
    description: the controllers to make available
    type: String...
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/controller.js
  line: 197
  description: ! '`disconnectOutlet` removes previously attached view from given outlet.'
  itemtype: method
  name: disconnectOutlet
  params:
  - name: outletName
    description: the outlet name. (optional)
    type: String
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/controller.js
  line: 209
  description: ! '`createOutletView` is a hook you may want to override if you need
    to do

    something special with the view created for the outlet. For example

    you may want to implement views sharing across outlets.'
  itemtype: method
  name: createOutletView
  params:
  - name: outletName
    description: ''
    type: String
  - name: viewClass
    description: ''
    type: Ember.View
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 19
  description: /**
  access: private
  tagname: ! "The root DOM element to which event listeners should be attached. Event\n
    \   listeners will be attached to the document unless this is overridden.\n  Can
    be specified as a DOMElement or a selector string.\n  The default body is a string
    since this may be evaluated before document.body\n    exists in the DOM."
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 38
  access: private
  tagname: ! 'Sets up event listeners for standard browser events.


    This will be called after the browser sends a DOMContentReady event. By

    default, it will set up all of the listeners on the document body. If you

    would like to register the listeners on a different element, set the event

    dispatcher''s `root` property.'
  itemtype: method
  name: setup
  params:
  - name: addedEvents
    description: ''
    type: Hash
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 101
  access: private
  tagname: ! "Registers an event listener on the document. If the given event is\ntriggered,
    the provided event handler will be triggered on the target\nview.\n\nIf the target
    view does not implement the event handler, or if the handler\nreturns false, the
    parent view will be called. The event will continue to\nbubble to each successive
    parent view until it reaches the top.\n\nFor example, to have the `mouseDown`
    method called on the target view when\na `mousedown` event is received from the
    browser, do the following:\n\n    setupHandler('mousedown', 'mouseDown');"
  itemtype: method
  name: setupHandler
  params:
  - name: rootElement
    description: ''
    type: Element
  - name: event
    description: the browser-originated event to listen to
    type: String
  - name: eventName
    description: the name of the method to call on the view
    type: String
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 46
  description: ! "/**\n    Array of class-names which will be applied in the class=\"\"
    attribute\n  You should not maintain this array yourself, rather, you should use\n
    \   the addClass() method of Ember.RenderBuffer."
  itemtype: property
  name: elementClasses
  type: Array
  default: ! '[]'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 60
  description: ! 'The id in of the element, to be applied in the id="" attribute


    You should not set this property yourself, rather, you should use

    the id() method of Ember.RenderBuffer.'
  itemtype: property
  name: elementId
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 72
  description: ! 'A hash keyed on the name of the attribute and whose value will be

    applied to that attribute. For example, if you wanted to apply a

    data-view="Foo.bar" property to an element, you would set the

    elementAttributes hash to {''data-view'':''Foo.bar''}


    You should not maintain this hash yourself, rather, you should use

    the attr() method of Ember.RenderBuffer.'
  itemtype: property
  name: elementAttributes
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 87
  description: ! "The tagname of the element an instance of Ember.RenderBuffer represents.\n\nUsually,
    this gets set as the first parameter to Ember.RenderBuffer. For\nexample, if you
    wanted to create a `p` tag, then you would call\n\n  Ember.RenderBuffer('p')"
  itemtype: property
  name: elementTag
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 101
  description: ! 'A hash keyed on the name of the style attribute and whose value
    will

    be applied to that attribute. For example, if you wanted to apply a

    background-color:black;" style to an element, you would set the

    elementStyle hash to {''background-color'':''black''}


    You should not maintain this hash yourself, rather, you should use

    the style() method of Ember.RenderBuffer.'
  itemtype: property
  name: elementStyle
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 116
  description: ! 'Nested RenderBuffers will set this to their parent RenderBuffer

    instance.'
  itemtype: property
  name: parentBuffer
  type: Ember._RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 125
  description: Adds a string of HTML to the RenderBuffer.
  itemtype: method
  name: push
  params:
  - name: string
    description: HTML to push into the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 137
  description: Adds a class to the buffer, which will be rendered to the class attribute.
  itemtype: method
  name: addClass
  params:
  - name: className
    description: Class name to add to the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 152
  description: Sets the elementID to be used for the element.
  itemtype: method
  name: id
  params:
  - name: id
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 167
  description: Adds an attribute which will be rendered to the element.
  itemtype: method
  name: attr
  params:
  - name: name
    description: The name of the attribute
    type: String
  - name: value
    description: The value to add to the attribute
    type: String
  chainable: 1
  return:
    description: this or the current attribute value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 188
  description: Remove an attribute from the list of attributes to render.
  itemtype: method
  name: removeAttr
  params:
  - name: name
    description: The name of the attribute
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 202
  description: Adds a style to the style attribute which will be rendered to the element.
  itemtype: method
  name: style
  params:
  - name: name
    description: Name of the style
    type: String
  - name: value
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 217
  access: private
  tagname: ! 'Create a new child render buffer from a parent buffer. Optionally set

    additional properties on the buffer. Optionally invoke a callback

    with the newly created buffer.


    This is a primitive method used by other public methods: `begin`,

    `prepend`, `replaceWith`, `insertAfter`.'
  itemtype: method
  name: newBuffer
  params:
  - name: tagName
    description: Tag name to use for the child buffer's element
    type: String
  - name: parent
    description: ! "The parent render buffer that this\n  buffer should be appended
      to."
    type: Ember._RenderBuffer
  - name: fn
    description: A callback to invoke with the newly created buffer.
    type: Function
  - name: other
    description: ! "Additional properties to add to the newly created\n  buffer."
    type: Object
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 245
  access: private
  tagname: ! 'Replace the current buffer with a new buffer. This is a primitive

    used by `remove`, which passes `null` for `newBuffer`, and `replaceWith`,

    which passes the new buffer it created.'
  itemtype: method
  name: replaceWithBuffer
  params:
  - name: buffer
    description: ! "The buffer to insert in place of\n  the existing buffer."
    type: Ember._RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 271
  description: ! 'Creates a new Ember.RenderBuffer object with the provided tagName
    as

    the element tag and with its parentBuffer property set to the current

    Ember.RenderBuffer.'
  itemtype: method
  name: begin
  params:
  - name: tagName
    description: Tag name to use for the child buffer's element
    type: String
  return:
    description: A new RenderBuffer object
    type: Ember.RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 286
  description: Prepend a new child buffer to the current render buffer.
  itemtype: method
  name: prepend
  params:
  - name: tagName
    description: Tag name to use for the child buffer's element
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 298
  description: Replace the current buffer with a new render buffer.
  itemtype: method
  name: replaceWith
  params:
  - name: tagName
    description: Tag name to use for the new buffer's element
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 312
  description: Insert a new render buffer after the current render buffer.
  itemtype: method
  name: insertAfter
  params:
  - name: tagName
    description: Tag name to use for the new buffer's element
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 328
  description: Closes the current buffer and adds its content to the parentBuffer.
  itemtype: method
  name: end
  return:
    description: The parentBuffer, if one exists. Otherwise, this
    type: Ember.RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 343
  itemtype: method
  name: element
  return:
    description: ! "The element corresponding to the generated HTML\n  of this buffer"
    type: DOMElement
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 352
  description: Generates the HTML content for this buffer.
  itemtype: method
  name: string
  return:
    description: The generated HTMl
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 140
  description: ! "/**\n    A list of items to be displayed by the Ember.CollectionView."
  itemtype: property
  name: content
  type: Ember.Array
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 151
  access: private
  tagname: ! 'This provides metadata about what kind of empty view class this

    collection would like if it is being instantiated from another

    system (like Handlebars)'
  itemtype: property
  name: emptyViewClass
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 162
  description: An optional view to display if content is set to an empty array.
  itemtype: property
  name: emptyView
  type: Ember.View
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 171
  itemtype: property
  name: itemViewClass
  type: Ember.View
  default: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 192
  access: private
  tagname: ! 'Check to make sure that the content has changed, and if so,

    update the children directly. This is always scheduled

    asynchronously, to allow the element to be created before

    bindings have synchronized and vice versa.'
  itemtype: method
  name: _contentDidChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 249
  description: ! 'Called when a mutation to the underlying content array occurs.


    This method will replay that mutation against the views that compose the

    Ember.CollectionView, ensuring that the view reflects the model.


    This array observer is added in contentDidChange.'
  itemtype: method
  name: arrayDidChange
  params:
  - name: addedObjects
    description: the objects that were added to the content
    type: Array
  - name: removedObjects
    description: the objects that were removed from the content
    type: Array
  - name: changeIndex
    description: the index at which the changes occurred
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 308
  description: ! 'A map of parent tags to their default child tags. You can add

    additional parent tags if you want collection views that use

    a particular parent tag to default to a child tag.'
  itemtype: property
  name: CONTAINER_MAP
  type: Hash
  static: 1
  final: 1
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 317
  access: private
  tagname: Instructs each child view to render to the passed render buffer.
  itemtype: method
  name: render
  params:
  - name: buffer
    description: the buffer to render to
    type: Ember.RenderBuffer
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 333
  access: private
  tagname: ! 'When the container view is destroyed, tear down the child views

    array observer.'
  itemtype: method
  name: willDestroy
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 350
  access: private
  tagname: ! 'When a child view is removed, destroy its element so that

    it is removed from the DOM.


    The array observer that triggers this action is set up in the

    `renderToBuffer` method.'
  itemtype: method
  name: childViewsWillChange
  params:
  - name: views
    description: the child views array before mutation
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 373
  access: private
  tagname: ! 'When a child view is added, make sure the DOM gets updated appropriately.


    If the view has already rendered an element, we tell the child view to

    create an element and insert it into the DOM. If the enclosing container view

    has already written to a buffer, but not yet converted that buffer into an

    element, we insert the string representation of the child into the appropriate

    place in the buffer.'
  itemtype: method
  name: childViewsDidChange
  params:
  - name: views
    description: the array of child views afte the mutation has occurred
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  - name: the
    description: number of child views added
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 415
  description: ! 'This method is responsible for presenting a new view.

    Default implementation will simply call the callback.

    You can override this method if you want to add an animation for example.'
  itemtype: method
  name: presentCurrentView
  params:
  - name: currentView
    description: a view to present
    type: Ember.View
  - name: callback
    description: the callback called once operation is terminated
    type: Function
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 428
  description: This method is responsible for adding view to containerView
  itemtype: method
  name: appendCurrentView
  params:
  - name: currentView
    description: a view to present
    type: Ember.View
  - name: callback
    description: the callback called once view is appended
    type: Function
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 443
  description: ! 'This method is responsible for dismissing a view.

    Default implementation will simply call the callback.

    You can override this method if you want to add an animation for example.'
  itemtype: method
  name: dismissCurrentView
  params:
  - name: currentView
    description: a view to dismiss
    type: Ember.View
  - name: callback
    description: the callback called once operation is terminated
    type: Function
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 456
  description: ! 'This method is responsible for removing a view from the containerView

    You may want to override it in case you implementing views sharing for example'
  itemtype: method
  name: removeCurrentView
  params:
  - name: currentView
    description: a view to present
    type: Ember.View
  - name: callback
    description: the callback called once view is removed
    type: Function
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 31
  description: ! 'Global hash of shared templates. This will automatically be populated

    by the build tools so that you can store your Handlebars templates in

    separate files that get loaded into JavaScript at buildtime.'
  itemtype: property
  name: TEMPLATES
  type: Hash
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 59
  description: ! 'If the view is currently inserted into the DOM of a parent view,
    this

    property will point to the parent of the view.'
  itemtype: property
  name: parentView
  type: Ember.View
  default: 'null'
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 87
  description: ! 'Creates a new renderBuffer with the passed tagName. You can override
    this

    method to provide further customization to the buffer if needed. Normally

    you will not need to call or override this method.'
  itemtype: method
  name: renderBuffer
  params:
  - name: tagName
    description: ''
    type: String
    optional: true
  return:
    description: ''
    type: Ember.RenderBuffer
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 114
  access: private
  tagname: ! 'Invoked by the view system when this view needs to produce an HTML

    representation. This method will create a new render buffer, if needed,

    then apply any default attributes, such as class names and visibility.

    Finally, the `render()` method is invoked, which is responsible for

    doing the bulk of the rendering.


    You should not need to override this method; instead, implement the

    `template` property, or if you need more control, override the `render`

    method.'
  itemtype: method
  name: renderToBuffer
  params:
  - name: buffer
    description: ! "the render buffer. If no buffer is\n  passed, a default buffer,
      using the current view's `tagName`, will\n  be used."
    type: Ember.RenderBuffer
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 179
  access: private
  tagname: ! 'Override the default event firing from Ember.Evented to

    also call methods with the given name.'
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
    type: String
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 728
  description: ! 'concatenatedProperties: [''classNames'', ''classNameBindings'',
    ''attributeBindings''],

    /**'
  itemtype: property
  name: isView
  type: Boolean
  default: 'true'
  final: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 744
  description: ! 'The name of the template to lookup if no template is provided.


    Ember.View will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 757
  description: ! 'The name of the layout to lookup if no layout is provided.


    Ember.View will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: layoutName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 770
  description: The hash in which to look for `templateName`.
  itemtype: property
  name: templates
  type: Ember.Object
  default: Ember.TEMPLATES
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 779
  description: ! 'The template used to render the view. This should be a function
    that

    accepts an optional context parameter and returns a string of HTML that

    will be inserted into the DOM relative to its parent view.


    In general, you should set the `templateName` property instead of setting

    the template yourself.'
  itemtype: property
  name: template
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 799
  description: ! 'The controller managing this view. If this property is set, it will
    be

    made available for use by the template.'
  itemtype: property
  name: controller
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 817
  description: ! 'A view may contain a layout. A layout is a regular template but

    supersedes the `template` property during rendering. It is the

    responsibility of the layout template to retrieve the `template`

    property from the view (or alternatively, call `Handlebars.helpers.yield`,

    `{{yield}}`) to render it in the correct location.


    This is useful for a view that has a shared wrapper, but which delegates

    the rendering of the contents of the wrapper to the `template` property

    on a subclass.'
  itemtype: property
  name: layout
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 853
  description: ! 'The object from which templates should access properties.


    This object will be passed to the template function each time the render

    method is called, but it is up to the individual function to decide what

    to do with it.


    By default, this will be the view itself.'
  itemtype: property
  name: context
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 874
  access: private
  tagname: ! 'Private copy of the view''s template context. This can be set directly

    by Handlebars without triggering the observer that causes the view

    to be re-rendered.


    The context of a view is looked up as follows:


    1. Supplied context (usually by Handlebars)

    2. Specified controller

    3. `parentView`''s context (for a child of a ContainerView)


    The code in Handlebars that overrides the `_context` property first

    checks to see whether the view has a specified controller. This is

    something of a hack and should be revisited.'
  itemtype: property
  name: _context
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 912
  access: private
  tagname: ! 'If a value that affects template rendering changes, the view should
    be

    re-rendered to reflect the new value.'
  itemtype: method
  name: _displayPropertyDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 924
  description: If false, the view will appear hidden in DOM.
  itemtype: property
  name: isVisible
  type: Boolean
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 933
  access: private
  tagname: ! 'Array of child views. You should never edit this array directly.

    Instead, use appendChild and removeFromParent.'
  itemtype: property
  name: childViews
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 965
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class.'
  itemtype: property
  name: nearestInstanceOf
  return:
    description: Ember.View
  deprecated: true
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 984
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class or mixin.'
  proprty: nearestOfType
  params:
  - name: klass
    description: ! "Subclass of Ember.View (or Ember.View itself),\n       or an instance
      of Ember.Mixin."
    type: Class,Mixin
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1005
  description: Return the nearest ancestor that has a given property.
  itemtype: property
  name: nearestWithProperty
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: property
    description: A property name
    type: String
- file: ../packages/ember-views/lib/views/view.js
  line: 1021
  description: ! 'Return the nearest ancestor whose parent is an instance of

    `klass`.'
  itemtype: property
  name: nearestChildOf
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 1038
  description: Return the nearest ancestor that is an Ember.CollectionView
  itemtype: property
  name: collectionView
  return:
    description: Ember.CollectionView
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1048
  description: ! 'Return the nearest ancestor that is a direct child of

    an Ember.CollectionView'
  itemtype: property
  name: itemView
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1059
  description: ! 'Return the nearest ancestor that has the property

    `content`.'
  itemtype: property
  name: contentView
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1070
  access: private
  tagname: ! 'When the parent view changes, recursively invalidate

    collectionView, itemView, and contentView'
  itemtype: method
  name: _parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1110
  description: ! 'Called on your view when it should push strings of HTML into a

    Ember.RenderBuffer. Most users will want to override the `template`

    or `templateName` properties instead of this method.


    By default, Ember.View will look for a function in the `template`

    property and invoke it with the value of `context`. The value of

    `context` will be the view''s controller unless you override it.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: The render buffer
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1190
  description: ! 'Renders the view again. This will work regardless of whether the

    view is already in the DOM or not. If the view is in the DOM, the

    rendering process will be deferred to give bindings a chance

    to synchronize.


    If children were added during the rendering process using `appendChild`,

    `rerender` will remove them, because they will be added again

    if needed by the next `render`.


    In general, if the display of your view changes, you should modify

    the DOM element directly instead of manually calling `rerender`, which can

    be slow.'
  itemtype: method
  name: rerender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1225
  access: private
  tagname: ! 'Iterates over the view''s `classNameBindings` array, inserts the value

    of the specified property into the `classNames` array, then creates an

    observer to update the view''s element if the bound property ever changes

    in the future.'
  itemtype: method
  name: _applyClassNameBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1305
  access: private
  tagname: ! 'Iterates through the view''s attribute bindings, sets up observers for
    each,

    then applies the current value of the attributes to the passed render buffer.'
  itemtype: method
  name: _applyAttributeBindings
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1349
  access: private
  tagname: ! 'Given a property name, returns a dasherized version of that

    property name if the property evaluates to a non-falsy value.


    For example, if the view has property `isUrgent` that evaluates to true,

    passing `isUrgent` to this method will return `"is-urgent"`.'
  itemtype: method
  name: _classStringForProperty
  params:
  - name: property
    description: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1377
  description: Returns the current DOM element for the view.
  itemtype: property
  name: element
  type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1391
  description: ! 'Returns a jQuery object for this view''s element. If you pass in
    a selector

    string, this method will return a jQuery object, using the current element

    as its buffer.


    For example, calling `view.$(''li'')` will return a jQuery object containing

    all of the `li` elements inside the DOM element of this view.'
  itemtype: property
  name: $
  return:
    description: the CoreQuery object for the DOM node
    type: JQuery
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: selector
    description: a jQuery-compatible selector string
    type: String
    optional: true
- file: ../packages/ember-views/lib/views/view.js
  line: 1436
  description: ! 'Appends the view''s element to the specified parent element.


    If the view does not have an HTML representation yet, `createElement()`

    will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing.


    This is not typically a function that you will need to call directly

    when building your application. You might consider using Ember.ContainerView

    instead. If you do need to use appendTo, be sure that the target element you

    are providing is associated with an Ember.Application and does not have an

    ancestor element that is associated with an Ember view.'
  itemtype: method
  name: appendTo
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1467
  description: ! 'Replaces the content of the specified parent element with this view''s
    element.

    If the view does not have an HTML representation yet, `createElement()`

    will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing'
  itemtype: method
  name: replaceIn
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: received
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1491
  access: private
  tagname: ! "Schedules a DOM operation to occur during the next render phase. This\nensures
    that all bindings have finished synchronizing before the view is\nrendered.\n\nTo
    use, pass a function that performs a DOM operation..\n\nBefore your function is
    called, this view and all child views will receive\nthe `willInsertElement` event.
    After your function is invoked, this view\nand all of its child views will receive
    the `didInsertElement` event.\n\n    view._insertElementLater(function() {\n      this.createElement();\n
    \     this.$().appendTo('body');\n    });"
  itemtype: method
  name: _insertElementLater
  params:
  - name: fn
    description: the function that inserts the element into the DOM
    type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1516
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1524
  description: ! 'Appends the view''s element to the document body. If the view does

    not have an HTML representation yet, `createElement()` will be called

    automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the document body until all bindings have

    finished synchronizing.'
  itemtype: method
  name: append
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1540
  description: Removes the view's element from the element to which it is attached.
  itemtype: method
  name: remove
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1558
  description: ! 'The ID to use when trying to locate the element in the DOM. If you
    do not

    set the elementId explicitly, then the view''s GUID will be used instead.

    This ID must be set at the time the view is created.'
  itemtype: property
  name: elementId
  type: String
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1575
  description: ! 'Attempts to discover the element in the parent element. The default

    implementation looks for an element with an ID of elementId (or the view''s

    guid if elementId is null). You can override this method to provide your

    own form of lookup. For example, if you want to discover your element

    using a CSS class name instead of an ID.'
  itemtype: method
  name: findElementInParentElement
  params:
  - name: parentElement
    description: The parent's DOM element
    type: DOMElement
  return:
    description: The discovered element
    type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1591
  description: ! 'Creates a DOM representation of the view and all of its

    child views by recursively calling the `render()` method.


    After the element has been created, `didInsertElement` will

    be called on this view and all of its child views.'
  itemtype: method
  name: createElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1610
  description: Called when a view is going to insert an element into the DOM.
  itemtype: event
  name: willInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1617
  description: ! 'Called when the element of the view has been inserted into the DOM.

    Override this function to do any set up that requires an element in the

    document body.'
  itemtype: event
  name: didInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1626
  description: ! 'Called when the view is about to rerender, but before anything has

    been torn down. This is a good opportunity to tear down any manual

    observers you have installed based on the DOM state'
  itemtype: event
  name: willClearRender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1635
  access: private
  tagname: Run this callback on the current view and recursively on child views.
  itemtype: method
  name: invokeRecursively
  params:
  - name: fn
    description: ''
    type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1651
  description: Invalidates the cache for a property on all child views.
  itemtype: method
  name: invalidateRecursively
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1662
  access: private
  tagname: ! 'Invokes the receiver''s willInsertElement() method if it exists and
    then

    invokes the same on all child views.


    NOTE: In some cases this was called when the element existed. This no longer

    works so we let people know. We can remove this warning code later.'
  itemtype: method
  name: _notifyWillInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1679
  access: private
  tagname: ! 'Invokes the receiver''s didInsertElement() method if it exists and then

    invokes the same on all child views.'
  itemtype: method
  name: _notifyDidInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1693
  access: private
  tagname: ! 'Triggers the `willClearRender` event (which invokes the `willClearRender()`

    method if it exists) on this view and all child views.'
  itemtype: method
  name: _notifyWillClearRender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1707
  description: ! 'Destroys any existing element along with the element for any child
    views

    as well. If the view does not currently have a element, then this method

    will do nothing.


    If you implement willDestroyElement() on your view, then this method will

    be invoked on your view before your element is destroyed to give you a

    chance to clean up any event handlers, etc.


    If you write a willDestroyElement() handler, you can assume that your

    didInsertElement() handler was called earlier for the same element.


    Normally you will not call or override this method yourself, but you may

    want to implement the above callbacks when it is run.'
  itemtype: method
  name: destroyElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1729
  description: ! 'Called when the element of the view is going to be destroyed. Override

    this function to do any teardown that requires an element, like removing

    event listeners.'
  itemtype: event
  name: willDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1738
  access: private
  tagname: ! 'Triggers the `willDestroyElement` event (which invokes the `willDestroyElement()`

    method if it exists) on this view and all child views.


    Before triggering `willDestroyElement`, it first triggers the `willClearRender`

    event recursively.'
  itemtype: method
  name: _notifyWillDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1763
  access: private
  tagname: ! 'If this view''s element changes, we need to invalidate the caches of
    our

    child views so that we do not retain references to DOM elements that are

    no longer needed.'
  itemtype: method
  name: _elementDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1778
  description: Called when the parentView property has changed.
  itemtype: event
  name: parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1838
  description: ! 'Tag name for the view''s outer element. The tag name is only used
    when

    an element is first created. If you change the tagName for an element, you

    must destroy and recreate the view element.


    By default, the render buffer will use a `<div>` tag for views.'
  itemtype: property
  name: tagName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1854
  description: ! 'The WAI-ARIA role of the control represented by this view. For example,
    a

    button may have a role of type ''button'', or a pane may have a role of

    type ''alertdialog''. This property is used by assistive software to help

    visually challenged users navigate rich web applications.


    The full list of valid WAI-ARIA roles is available at:

    http://www.w3.org/TR/wai-aria/roles#roles_categorization'
  itemtype: property
  name: ariaRole
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1869
  description: ! 'Standard CSS class names to apply to the view''s outer element.
    This

    property automatically inherits any class names defined by the view''s

    superclasses as well.'
  itemtype: property
  name: classNames
  type: Array
  default: ! '[''ember-view'']'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1880
  description: ! "A list of properties of the view to apply as class names. If the
    property\nis a string value, the value of that string will be applied as a class\nname.\n\n
    \   // Applies the 'high' class to the view element\n    Ember.View.create({\n
    \     classNameBindings: ['priority']\n      priority: 'high'\n    });\n\nIf the
    value of the property is a Boolean, the name of that property is\nadded as a dasherized
    class name.\n\n    // Applies the 'is-urgent' class to the view element\n    Ember.View.create({\n
    \     classNameBindings: ['isUrgent']\n      isUrgent: true\n    });\n\nIf you
    would prefer to use a custom value instead of the dasherized\nproperty name, you
    can pass a binding like this:\n\n    // Applies the 'urgent' class to the view
    element\n    Ember.View.create({\n      classNameBindings: ['isUrgent:urgent']\n
    \     isUrgent: true\n    });\n\nThis list of properties is inherited from the
    view's superclasses as well."
  itemtype: property
  name: classNameBindings
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1917
  description: ! "A list of properties of the view to apply as attributes. If the
    property is\na string value, the value of that string will be applied as the attribute.\n\n
    \   // Applies the type attribute to the element\n    // with the value \"button\",
    like <div type=\"button\">\n    Ember.View.create({\n      attributeBindings:
    ['type'],\n      type: 'button'\n    });\n\nIf the value of the property is a
    Boolean, the name of that property is\nadded as an attribute.\n\n    // Renders
    something like <div enabled=\"enabled\">\n    Ember.View.create({\n      attributeBindings:
    ['enabled'],\n      enabled: true\n    });"
  itemtype: property
  name: attributeBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1945
  access: private
  tagname: ! "Setup a view, but do not finish waking it up.\n- configure childViews\n-
    register the view with the global views hash, which is used for event\n  dispatch"
  itemtype: method
  name: init
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1980
  description: Removes the child view from the parent view.
  itemtype: method
  name: removeChild
  params:
  - name: view
    description: ''
    type: Ember.View
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2006
  description: Removes all children from the parentView.
  itemtype: method
  name: removeAllChildren
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2024
  description: ! 'Removes the view from its parentView, if one is found. Otherwise

    does nothing.'
  itemtype: method
  name: removeFromParent
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2041
  description: ! 'You must call `destroy` on a view to destroy the view (and all of
    its

    child views). This will remove the view from any parent node, then make

    sure that the DOM element managed by the view can be released by the

    memory manager.'
  itemtype: method
  name: willDestroy
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2085
  description: ! 'Instantiates a view to be added to the childViews array during view

    initialization. You generally will not call this method directly unless

    you are overriding createChildViews(). Note that this method will

    automatically configure the correct settings on the new view instance to

    act as a child of the parent.'
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2125
  access: private
  tagname: ! 'When the view''s `isVisible` property changes, toggle the visibility

    element of the actual DOM element.'
  itemtype: method
  name: _isVisibleDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2205
  access: private
  tagname: Handle events from `Ember.EventDispatcher`
  itemtype: method
  name: handleEvent
  params:
  - name: eventName
    description: ''
    type: String
  - name: evt
    description: ''
    type: Event
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2284
  access: private
  tagname: ! "Parse a path and return an object which holds the parsed properties.\n\nFor
    example a path like \"content.isEnabled:enabled:disabled\" wil return the\nfollowing
    object:\n\n    {\n      path: \"content.isEnabled\",\n      className: \"enabled\",\n
    \     falsyClassName: \"disabled\",\n      classNames: \":enabled:disabled\"\n
    \   }"
  itemtype: method
  name: _parsePropertyPath
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2326
  access: private
  tagname: ! "Get the class name for a given value, based on the path, optional className\nand
    optional falsyClassName.\n\n- if a className or falsyClassName has been specified:\n
    \ - if the value is truthy and className has been specified, className is returned\n
    \ - if the value is falsy and falsyClassName has been specified, falsyClassName
    is returned\n  - otherwise null is returned\n- if the value is true, the dasherized
    last part of the supplied path is returned\n- if the value is not false, undefined
    or null, the value is returned\n- if none of the above rules apply, null is returned"
  itemtype: method
  name: _classStringForValue
  params:
  - name: path
    description: ''
  - name: val
    description: ''
  - name: className
    description: ''
  - name: falsyClassName
    description: ''
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2383
  description: Global views hash
  itemtype: property
  name: views
  static: 1
  type: Hash
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/core.js
  line: 9
  description: Alias for jQuery
  itemtype: method
  name: $
  class: Ember
  module: ember
  submodule: ember-views
