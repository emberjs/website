---
project:
  name: The Ember API
  description: ! 'The Ember API: a framework for building ambitious web applications'
  version: 1.0 pre
  url: http://emberjs.com/
  sha: v1.0.0-rc.1
files:
  ../packages/ember-application/lib/ext/controller.js:
    name: ../packages/ember-application/lib/ext/controller.js
    modules:
      ember-routing: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-application/lib/system/application.js:
    name: ../packages/ember-application/lib/system/application.js
    modules:
      ember-application: 1
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-application/lib/main.js:
    name: ../packages/ember-application/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-debug/lib/main.js:
    name: ../packages/ember-debug/lib/main.js
    modules:
      ember-debug: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars/lib/controls/button.js:
    name: ../packages/ember-handlebars/lib/controls/button.js
    modules:
      ember-handlebars: 1
    classes:
      Ember.Button: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/checkbox.js:
    name: ../packages/ember-handlebars/lib/controls/checkbox.js
    modules: {}
    classes:
      Ember.Checkbox: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/select.js:
    name: ../packages/ember-handlebars/lib/controls/select.js
    modules: {}
    classes:
      Ember.Select: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_area.js:
    name: ../packages/ember-handlebars/lib/controls/text_area.js
    modules: {}
    classes:
      Ember.TextArea: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_field.js:
    name: ../packages/ember-handlebars/lib/controls/text_field.js
    modules: {}
    classes:
      Ember.TextField: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/controls/text_support.js:
    name: ../packages/ember-handlebars/lib/controls/text_support.js
    modules: {}
    classes:
      Ember.TextSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/helpers/binding.js:
    name: ../packages/ember-handlebars/lib/helpers/binding.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/collection.js:
    name: ../packages/ember-handlebars/lib/helpers/collection.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/debug.js:
    name: ../packages/ember-handlebars/lib/helpers/debug.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/each.js:
    name: ../packages/ember-handlebars/lib/helpers/each.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/template.js:
    name: ../packages/ember-handlebars/lib/helpers/template.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/unbound.js:
    name: ../packages/ember-handlebars/lib/helpers/unbound.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/view.js:
    name: ../packages/ember-handlebars/lib/helpers/view.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/helpers/yield.js:
    name: ../packages/ember-handlebars/lib/helpers/yield.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/views/handlebars_bound_view.js:
    name: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    modules: {}
    classes:
      Ember._HandlebarsBoundView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/views/metamorph_view.js:
    name: ../packages/ember-handlebars/lib/views/metamorph_view.js
    modules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-handlebars/lib/ext.js:
    name: ../packages/ember-handlebars/lib/ext.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
      Ember.Handlebars: 1
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/loader.js:
    name: ../packages/ember-handlebars/lib/loader.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars: 1
    namespaces: {}
  ../packages/ember-handlebars/lib/main.js:
    name: ../packages/ember-handlebars/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-handlebars/lib/string.js:
    name: ../packages/ember-handlebars/lib/string.js
    modules: {}
    classes: {}
    fors:
      Ember.String: 1
      String: 1
    namespaces: {}
  ../packages/ember-metal/lib/accessors.js:
    name: ../packages/ember-metal/lib/accessors.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/array.js:
    name: ../packages/ember-metal/lib/array.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/binding.js:
    name: ../packages/ember-metal/lib/binding.js
    modules: {}
    classes:
      Ember.Binding: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/computed.js:
    name: ../packages/ember-metal/lib/computed.js
    modules: {}
    classes:
      Ember.ComputedProperty: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/core.js:
    name: ../packages/ember-metal/lib/core.js
    modules: {}
    classes:
      Ember: 1
      Ember.Logger: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/events.js:
    name: ../packages/ember-metal/lib/events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/instrumentation.js:
    name: ../packages/ember-metal/lib/instrumentation.js
    modules: {}
    classes:
      Ember.Instrumentation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/main.js:
    name: ../packages/ember-metal/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/map.js:
    name: ../packages/ember-metal/lib/map.js
    modules:
      ember-metal: 1
    classes:
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/mixin.js:
    name: ../packages/ember-metal/lib/mixin.js
    modules: {}
    classes:
      Ember.Mixin: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/observer.js:
    name: ../packages/ember-metal/lib/observer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-metal/lib/platform.js:
    name: ../packages/ember-metal/lib/platform.js
    modules: {}
    classes:
      Ember.platform: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/properties.js:
    name: ../packages/ember-metal/lib/properties.js
    modules: {}
    classes:
      Ember.Descriptor: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/run_loop.js:
    name: ../packages/ember-metal/lib/run_loop.js
    modules: {}
    classes:
      Ember.RunLoop: 1
      Ember.run: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-metal/lib/utils.js:
    name: ../packages/ember-metal/lib/utils.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-metal/lib/watching.js:
    name: ../packages/ember-metal/lib/watching.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-routing/lib/ext/controller.js:
    name: ../packages/ember-routing/lib/ext/controller.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/ext/view.js:
    name: ../packages/ember-routing/lib/ext/view.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/helpers/action.js:
    name: ../packages/ember-routing/lib/helpers/action.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/control.js:
    name: ../packages/ember-routing/lib/helpers/control.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/link_to.js:
    name: ../packages/ember-routing/lib/helpers/link_to.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/outlet.js:
    name: ../packages/ember-routing/lib/helpers/outlet.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/helpers/render.js:
    name: ../packages/ember-routing/lib/helpers/render.js
    modules: {}
    classes: {}
    fors:
      Ember.Handlebars.helpers: 1
    namespaces: {}
  ../packages/ember-routing/lib/location/api.js:
    name: ../packages/ember-routing/lib/location/api.js
    modules: {}
    classes:
      Ember.Location: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/hash_location.js:
    name: ../packages/ember-routing/lib/location/hash_location.js
    modules: {}
    classes:
      Ember.HashLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/history_location.js:
    name: ../packages/ember-routing/lib/location/history_location.js
    modules: {}
    classes:
      Ember.HistoryLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/location/none_location.js:
    name: ../packages/ember-routing/lib/location/none_location.js
    modules: {}
    classes:
      Ember.NoneLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/system/controller_for.js:
    name: ../packages/ember-routing/lib/system/controller_for.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/system/dsl.js:
    name: ../packages/ember-routing/lib/system/dsl.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-routing/lib/system/route.js:
    name: ../packages/ember-routing/lib/system/route.js
    modules: {}
    classes:
      Ember.Route: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/system/router.js:
    name: ../packages/ember-routing/lib/system/router.js
    modules: {}
    classes:
      Ember.Router: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-routing/lib/main.js:
    name: ../packages/ember-routing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-runtime/lib/controllers/array_controller.js:
    name: ../packages/ember-runtime/lib/controllers/array_controller.js
    modules:
      ember-runtime: 1
    classes:
      Ember.ArrayController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/controller.js:
    name: ../packages/ember-runtime/lib/controllers/controller.js
    modules: {}
    classes:
      Ember.Controller: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/controllers/object_controller.js:
    name: ../packages/ember-runtime/lib/controllers/object_controller.js
    modules: {}
    classes:
      Ember.ObjectController: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/ext/function.js:
    name: ../packages/ember-runtime/lib/ext/function.js
    modules: {}
    classes: {}
    fors:
      Function: 1
    namespaces: {}
  ../packages/ember-runtime/lib/ext/string.js:
    name: ../packages/ember-runtime/lib/ext/string.js
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  ../packages/ember-runtime/lib/mixins/array.js:
    name: ../packages/ember-runtime/lib/mixins/array.js
    modules: {}
    classes:
      Ember.Array: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/comparable.js:
    name: ../packages/ember-runtime/lib/mixins/comparable.js
    modules: {}
    classes:
      Ember.Comparable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/copyable.js:
    name: ../packages/ember-runtime/lib/mixins/copyable.js
    modules: {}
    classes:
      Ember.Copyable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/deferred.js:
    name: ../packages/ember-runtime/lib/mixins/deferred.js
    modules: {}
    classes:
      Ember.Deferred: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/enumerable.js
    modules: {}
    classes:
      Ember.Enumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/evented.js:
    name: ../packages/ember-runtime/lib/mixins/evented.js
    modules: {}
    classes:
      Ember.Evented: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/freezable.js:
    name: ../packages/ember-runtime/lib/mixins/freezable.js
    modules: {}
    classes:
      Ember.Freezable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_array.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_array.js
    modules: {}
    classes:
      Ember.MutableArray: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/mutable_enumerable.js:
    name: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    modules: {}
    classes:
      Ember.MutableEnumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/observable.js:
    name: ../packages/ember-runtime/lib/mixins/observable.js
    modules: {}
    classes:
      Ember.Observable: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/sortable.js:
    name: ../packages/ember-runtime/lib/mixins/sortable.js
    modules: {}
    classes:
      Ember.SortableMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/mixins/target_action_support.js:
    name: ../packages/ember-runtime/lib/mixins/target_action_support.js
    modules: {}
    classes:
      Ember.TargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/application.js:
    name: ../packages/ember-runtime/lib/system/application.js
    modules: {}
    classes:
      Ember.Application: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/array_proxy.js:
    name: ../packages/ember-runtime/lib/system/array_proxy.js
    modules: {}
    classes:
      Ember.ArrayProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/core_object.js:
    name: ../packages/ember-runtime/lib/system/core_object.js
    modules: {}
    classes:
      Ember.CoreObject: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/each_proxy.js:
    name: ../packages/ember-runtime/lib/system/each_proxy.js
    modules: {}
    classes:
      Ember.EachProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/lazy_load.js:
    name: ../packages/ember-runtime/lib/system/lazy_load.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-runtime/lib/system/namespace.js:
    name: ../packages/ember-runtime/lib/system/namespace.js
    modules: {}
    classes:
      Ember.Namespace: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/native_array.js:
    name: ../packages/ember-runtime/lib/system/native_array.js
    modules: {}
    classes:
      Ember.NativeArray: 1
    fors:
      Ember: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object.js:
    name: ../packages/ember-runtime/lib/system/object.js
    modules: {}
    classes:
      Ember.Object: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/object_proxy.js:
    name: ../packages/ember-runtime/lib/system/object_proxy.js
    modules: {}
    classes:
      Ember.ObjectProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/set.js:
    name: ../packages/ember-runtime/lib/system/set.js
    modules: {}
    classes:
      Ember.Set: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/system/string.js:
    name: ../packages/ember-runtime/lib/system/string.js
    modules: {}
    classes:
      Ember.String: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/core.js:
    name: ../packages/ember-runtime/lib/core.js
    modules: {}
    classes:
      Ember.Error: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-runtime/lib/main.js:
    name: ../packages/ember-runtime/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-states/lib/main.js:
    name: ../packages/ember-states/lib/main.js
    modules:
      ember-states: 1
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-states/lib/state.js:
    name: ../packages/ember-states/lib/state.js
    modules: {}
    classes:
      Ember.State: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-states/lib/state_manager.js:
    name: ../packages/ember-states/lib/state_manager.js
    modules: {}
    classes:
      Transition: 1
      Ember.StateManager: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/controller.js:
    name: ../packages/ember-views/lib/system/controller.js
    modules:
      ember-views: 1
    classes:
      Ember.ControllerMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/event_dispatcher.js:
    name: ../packages/ember-views/lib/system/event_dispatcher.js
    modules: {}
    classes:
      Ember.EventDispatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/ext.js:
    name: ../packages/ember-views/lib/system/ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/jquery_ext.js:
    name: ../packages/ember-views/lib/system/jquery_ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/system/render_buffer.js:
    name: ../packages/ember-views/lib/system/render_buffer.js
    modules: {}
    classes:
      Ember.RenderBuffer: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/system/utils.js:
    name: ../packages/ember-views/lib/system/utils.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/default.js:
    name: ../packages/ember-views/lib/views/states/default.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/destroyed.js:
    name: ../packages/ember-views/lib/views/states/destroyed.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_buffer.js:
    name: ../packages/ember-views/lib/views/states/in_buffer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/in_dom.js:
    name: ../packages/ember-views/lib/views/states/in_dom.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/states/pre_render.js:
    name: ../packages/ember-views/lib/views/states/pre_render.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember-views/lib/views/collection_view.js:
    name: ../packages/ember-views/lib/views/collection_view.js
    modules: {}
    classes:
      Ember.CollectionView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/container_view.js:
    name: ../packages/ember-views/lib/views/container_view.js
    modules: {}
    classes:
      Ember.ContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/views/view.js:
    name: ../packages/ember-views/lib/views/view.js
    modules: {}
    classes:
      Ember.View: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  ../packages/ember-views/lib/core.js:
    name: ../packages/ember-views/lib/core.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  ../packages/ember-views/lib/main.js:
    name: ../packages/ember-views/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  ../packages/ember/lib/main.js:
    name: ../packages/ember/lib/main.js
    modules:
      ember: 1
    classes: {}
    fors: {}
    namespaces: {}
modules:
  ember:
    name: ember
    submodules:
      ember-routing: 1
      ember-application: 1
      ember-debug: 1
      ember-handlebars: 1
      ember-runtime: 1
      ember-states: 1
      ember-views: 1
    classes:
      Ember.Application: 1
      Ember: 1
      Ember.Button: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
      Ember.String: 1
      String: 1
      Ember.Logger: 1
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
      Ember.ArrayController: 1
      Ember.ControllerMixin: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.Error: 1
      Ember.State: 1
      Transition: 1
      Ember.StateManager: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.View: 1
    fors:
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember: 1
      Ember.String: 1
      String: 1
      Function: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
    tag: module
    file: ../packages/ember-views/lib/views/view.js
    line: 209
    description: Ember
  ember-routing:
    name: ember-routing
    submodules: {}
    classes:
      Ember.Location: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      Ember.Route: 1
      Ember.Router: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-routing/lib/system/router.js
    line: 28
    description: Ember Routing
    requires:
    - name: ember-states
    - name: ember-views
  ember-application:
    name: ember-application
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-application/lib/system/application.js
    line: 1
    description: Ember Application
    requires:
    - name: ember-views
    - name: ember-states
    - name: ember-routing
  ember-debug:
    name: ember-debug
    submodules: {}
    classes: {}
    fors: {}
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: ../packages/ember-debug/lib/main.js
    line: 3
    description: Ember Debug
  ember-handlebars:
    name: ember-handlebars
    submodules: {}
    classes:
      Ember.Button: 1
      Ember.Checkbox: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.TextSupport: 1
      Ember.Handlebars.helpers: 1
      Ember.Handlebars: 1
      Ember._HandlebarsBoundView: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember._SimpleMetamorphView: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 108
    description: Ember Handlebars
    requires:
    - name: ember-views
  ember-metal:
    name: ember-metal
    submodules: {}
    classes:
      Ember: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.Logger: 1
      Ember.Instrumentation: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Ember.platform: 1
      Ember.Descriptor: 1
      Ember.RunLoop: 1
      Ember.run: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
    tag: module
    file: ../packages/ember-metal/lib/run_loop.js
    line: 187
    description: ! 'All Ember methods and functions are defined inside of this namespace.
      You

      generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand `Em` instead of `Ember`.


      Ember-Runtime is a framework that provides core functions for Ember including

      cross-platform functions, support for property observing and objects. Its

      focus is on small size and performance. You can use this in place of or

      along-side other cross-platform libraries such as jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    module: ember
  ember-runtime:
    name: ember-runtime
    submodules: {}
    classes:
      Ember.Application: 1
      Ember.String: 1
      Ember.ArrayController: 1
      Ember.Controller: 1
      Ember.ObjectController: 1
      Function: 1
      Ember.Array: 1
      Ember.Comparable: 1
      Ember.Copyable: 1
      Ember.Deferred: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.SortableMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Set: 1
      Ember.Error: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-runtime/lib/core.js
    line: 406
    description: Ember Runtime
    requires:
    - name: ember-metal
  ember-states:
    name: ember-states
    submodules: {}
    classes:
      Ember.State: 1
      Transition: 1
      Ember.StateManager: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-states/lib/state_manager.js
    line: 219
    description: Ember States
    requires:
    - name: ember-runtime
  ember-views:
    name: ember-views
    submodules: {}
    classes:
      Ember.ControllerMixin: 1
      Ember.EventDispatcher: 1
      Ember.RenderBuffer: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.View: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: ../packages/ember-views/lib/views/view.js
    line: 209
    description: Ember Views
    requires:
    - name: ember-runtime
    tag: main
    itemtype: main
classes:
  Ember.Application:
    name: Ember.Application
    shortname: Ember.Application
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/application.js
    line: 8
    description: ! "Defines a namespace that will contain an executable application.
      This is\nvery similar to a normal namespace except that it is expected to include
      at\nleast a 'ready' function which can be run to initialize the application.\n\nCurrently
      `Ember.Application` is very similar to `Ember.Namespace.`  However,\nthis class
      may be augmented by additional frameworks so it is important to\nuse this instance
      when building new applications.\n\n# Example Usage\n\n```javascript\nMyApp =
      Ember.Application.create({\n  VERSION: '1.0.0',\n  store: Ember.Store.create().from(Ember.fixtures)\n});\n\nMyApp.ready
      = function() {\n  //..init code goes here...\n}\n```"
    extends: Ember.Namespace
  Ember:
    name: Ember
    shortname: Ember
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: ../packages/ember-metal/lib/core.js
    line: 8
    description: ! 'All Ember methods and functions are defined inside of this namespace.
      You

      generally should not add new properties to this namespace as it may be

      overwritten by future versions of Ember.


      You can also use the shorthand `Em` instead of `Ember`.


      Ember-Runtime is a framework that provides core functions for Ember including

      cross-platform functions, support for property observing and objects. Its

      focus is on small size and performance. You can use this in place of or

      along-side other cross-platform libraries such as jQuery.


      The core Runtime framework is based on the jQuery API with a number of

      performance optimizations.'
    static: 1
    version: 1.0.0-rc.1
  Ember.Button:
    name: Ember.Button
    shortname: Ember.Button
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/button.js
    line: 10
    extends: Ember.View
    uses:
    - Ember.TargetActionSupport
    deprecated: true
  Ember.Checkbox:
    name: Ember.Checkbox
    shortname: Ember.Checkbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/checkbox.js
    line: 11
    description: ! "The `Ember.Checkbox` view class renders a checkbox\n[input](https://developer.mozilla.org/en/HTML/Element/Input)
      element. It\nallows for binding an Ember property (`checked`) to the status
      of the\ncheckbox.\n\nExample:\n\n```handlebars\n{{view Ember.Checkbox checkedBinding=\"receiveEmail\"}}\n```\n\nYou
      can add a `label` tag yourself in the template where the `Ember.Checkbox`\nis
      being used.\n\n```html\n<label>\n  {{view Ember.Checkbox classNames=\"applicaton-specific-checkbox\"}}\n
      \ Some Title\n</label>\n```\n\nThe `checked` attribute of an `Ember.Checkbox`
      object should always be set\nthrough the Ember object or by interacting with
      its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating
      the value of the\ncheckbox via jQuery will result in the checked value of the
      object and its\nelement losing synchronization.\n\n## Layout and LayoutName
      properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties
      will not be applied. See `Ember.View`'s layout section for more\ninformation."
    extends: Ember.View
  Ember.Select:
    name: Ember.Select
    shortname: Ember.Select
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/select.js
    line: 16
    description: ! "The `Ember.Select` view class renders a\n[select](https://developer.mozilla.org/en/HTML/Element/select)
      HTML element,\nallowing the user to choose from a list of options.\n\nThe text
      and `value` property of each `<option>` element within the\n`<select>` element
      are populated from the objects in the `Element.Select`'s\n`content` property.
      The underlying data object of the selected `<option>` is\nstored in the `Element.Select`'s
      `value` property.\n\n### `content` as an array of Strings\n\nThe simplest version
      of an `Ember.Select` takes an array of strings as its\n`content` property. The
      string will be used as both the `value` property and\nthe inner text of each
      `<option>` element inside the rendered `<select>`.\n\nExample:\n\n```javascript\nApp.names
      = [\"Yehuda\", \"Tom\"];\n```\n\n```handlebars\n{{view Ember.Select contentBinding=\"App.names\"}}\n```\n\nWould
      result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nYou
      can control which `<option>` is selected through the `Ember.Select`'s\n`value`
      property directly or as a binding:\n\n```javascript\nApp.names = Ember.Object.create({\n
      \ selected: 'Tom',\n  content: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view
      Ember.Select\n       contentBinding=\"App.names.content\"\n       valueBinding=\"App.names.selected\"\n}}\n```\n\nWould
      result in the following HTML with the `<option>` for 'Tom' selected:\n\n```html\n<select
      class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option
      value=\"Tom\" selected=\"selected\">Tom</option>\n</select>\n```\n\nA user interacting
      with the rendered `<select>` to choose \"Yehuda\" would\nupdate the value of
      `App.names.selected` to \"Yehuda\".\n\n### `content` as an Array of Objects\n\nAn
      `Ember.Select` can also take an array of JavaScript or Ember objects as\nits
      `content` property.\n\nWhen using objects you need to tell the `Ember.Select`
      which property should\nbe accessed on each object to supply the `value` attribute
      of the `<option>`\nand which property should be used to supply the element text.\n\nThe
      `optionValuePath` option is used to specify the path on each object to\nthe
      desired property for the `value` attribute. The `optionLabelPath`\nspecifies
      the path on each object to the desired property for the\nelement's text. Both
      paths must reference each object itself as `content`:\n\n```javascript\nApp.programmers
      = [\n  Ember.Object.create({firstName: \"Yehuda\", id: 1}),\n  Ember.Object.create({firstName:
      \"Tom\",    id: 2})\n];\n```\n\n```handlebars\n{{view Ember.Select\n       contentBinding=\"App.programmers\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"}}\n```\n\nWould
      result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\">Tom</option>\n</select>\n```\n\nThe `value` attribute
      of the selected `<option>` within an `Ember.Select`\ncan be bound to a property
      on another object by providing a\n`valueBinding` option:\n\n```javascript\nApp.programmers
      = [\n  Ember.Object.create({firstName: \"Yehuda\", id: 1}),\n  Ember.Object.create({firstName:
      \"Tom\",    id: 2})\n];\n\nApp.currentProgrammer = Ember.Object.create({\n  id:
      2\n});\n```\n\n```handlebars\n{{view Ember.Select\n       contentBinding=\"App.programmers\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n
      \      valueBinding=\"App.currentProgrammer.id\"}}\n```\n\nWould result in the
      following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `id` value of `App.currentProgrammer`\nto match the `value` property of
      the newly selected `<option>`.\n\nAlternatively, you can control selection through
      the underlying objects\nused to render each object providing a `selectionBinding`.
      When the selected\n`<option>` is changed, the property path provided to `selectionBinding`\nwill
      be updated to match the content object of the rendered `<option>`\nelement:\n\n```javascript\nApp.controller
      = Ember.Object.create({\n  selectedPerson: null,\n  content: [\n    Ember.Object.create({firstName:
      \"Yehuda\", id: 1}),\n    Ember.Object.create({firstName: \"Tom\",    id: 2})\n
      \ ]\n});\n```\n\n```handlebars\n{{view Ember.Select\n       contentBinding=\"App.controller.content\"\n
      \      optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n
      \      selectionBinding=\"App.controller.selectedPerson\"}}\n```\n\nWould result
      in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n
      \ <option value>Please Select</option>\n  <option value=\"1\">Yehuda</option>\n
      \ <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting
      with the rendered element by selecting the first option\n('Yehuda') will update
      the `selectedPerson` value of `App.controller`\nto match the content object
      of the newly selected `<option>`. In this\ncase it is the first object in the
      `App.content.content`\n\n### Supplying a Prompt\n\nA `null` value for the `Ember.Select`'s
      `value` or `selection` property\nresults in there being no `<option>` with a
      `selected` attribute:\n\n```javascript\nApp.controller = Ember.Object.create({\n
      \ selected: null,\n  content: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```
      handlebars\n{{view Ember.Select\n       contentBinding=\"App.controller.content\"\n
      \      valueBinding=\"App.controller.selected\"\n}}\n```\n\nWould result in
      the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n
      \ <option value=\"Tom\">Tom</option>\n</select>\n```\n\nAlthough `App.controller.selected`
      is `null` and no `<option>`\nhas a `selected` attribute the rendered HTML will
      display the\nfirst item as though it were selected. You can supply a string\nvalue
      for the `Ember.Select` to display when there is no selection\nwith the `prompt`
      option:\n\n```javascript\nApp.controller = Ember.Object.create({\n  selected:
      null,\n  content: [\n    \"Yehuda\",\n    \"Tom\"\n  ]\n});\n```\n\n```handlebars\n{{view
      Ember.Select\n       contentBinding=\"App.controller.content\"\n       valueBinding=\"App.controller.selected\"\n
      \      prompt=\"Please select a name\"\n}}\n```\n\nWould result in the following
      HTML:\n\n```html\n<select class=\"ember-select\">\n  <option>Please select a
      name</option>\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```"
    extends: Ember.View
  Ember.TextArea:
    name: Ember.TextArea
    shortname: Ember.TextArea
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_area.js
    line: 12
    description: ! "The `Ember.TextArea` view class renders a\n[textarea](https://developer.mozilla.org/en/HTML/Element/textarea)
      element.\nIt allows for binding Ember properties to the text area contents (`value`),\nlive-updating
      as the user inputs text.\n\n## Layout and LayoutName properties\n\nBecause HTML
      `textarea` elements do not contain inner HTML the `layout` and\n`layoutName`
      properties will not be applied. See `Ember.View`'s layout\nsection for more
      information.\n\n## HTML Attributes\n\nBy default `Ember.TextArea` provides support
      for `rows`, `cols`,\n`placeholder`, `disabled`, `maxlength` and `tabindex` attributes
      on a\ntextarea. If you need to support  more attributes have a look at the\n`attributeBindings`
      property in `Ember.View`'s HTML Attributes section.\n\nTo globally add support
      for additional attributes you can reopen\n`Ember.TextArea` or `Ember.TextSupport`.\n\n```javascript\nEmber.TextSupport.reopen({\n
      \ attributeBindings: [\"required\"]\n})\n```"
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextField:
    name: Ember.TextField
    shortname: Ember.TextField
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_field.js
    line: 12
    description: ! "The `Ember.TextField` view class renders a text\n[input](https://developer.mozilla.org/en/HTML/Element/Input)
      element. It\nallows for binding Ember properties to the text field contents
      (`value`),\nlive-updating as the user inputs text.\n\nExample:\n\n```handlebars\n{{view
      Ember.TextField valueBinding=\"firstName\"}}\n```\n\n## Layout and LayoutName
      properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties
      will not be applied. See `Ember.View`'s layout section for more\ninformation.\n\n##
      HTML Attributes\n\nBy default `Ember.TextField` provides support for `type`,
      `value`, `size`,\n`placeholder`, `disabled`, `maxlength` and `tabindex` attributes
      on a\ntest field. If you need to support more attributes have a look at the\n`attributeBindings`
      property in `Ember.View`'s HTML Attributes section.\n\nTo globally add support
      for additional attributes you can reopen\n`Ember.TextField` or `Ember.TextSupport`.\n\n```javascript\nEmber.TextSupport.reopen({\n
      \ attributeBindings: [\"required\"]\n})\n```"
    extends: Ember.View
    uses:
    - Ember.TextSupport
  Ember.TextSupport:
    name: Ember.TextSupport
    shortname: Ember.TextSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextArea
    - Ember.TextField
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/controls/text_support.js
    line: 11
    description: Shared mixin used by `Ember.TextField` and `Ember.TextArea`.
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember.Handlebars.helpers:
    name: Ember.Handlebars.helpers
    shortname: Ember.Handlebars.helpers
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: ''
  Ember.Handlebars:
    name: Ember.Handlebars
    shortname: Ember.Handlebars
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: ''
  Ember._HandlebarsBoundView:
    name: Ember._HandlebarsBoundView
    shortname: Ember._HandlebarsBoundView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
    line: 129
    description: ! '`Ember._HandlebarsBoundView` is a private view created by the
      Handlebars

      `{{bind}}` helpers that is used to keep track of bound properties.


      Every time a property is bound using a `{{mustache}}`, an anonymous subclass

      of `Ember._HandlebarsBoundView` is created with the appropriate sub-template

      and context set up. When the associated property changes, just the template

      for this view will re-render.'
    extends: Ember._MetamorphView
    access: private
    tagname: ''
  Ember._Metamorph:
    name: Ember._Metamorph
    shortname: Ember._Metamorph
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember._MetamorphView
    - Ember._SimpleMetamorphView
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 63
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember._MetamorphView:
    name: Ember._MetamorphView
    shortname: Ember._MetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 99
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember._SimpleMetamorphView:
    name: Ember._SimpleMetamorphView
    shortname: Ember._SimpleMetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-handlebars
    namespace: Ember
    file: ../packages/ember-handlebars/lib/views/metamorph_view.js
    line: 108
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember.String:
    name: Ember.String
    shortname: Ember.String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/string.js
    line: 24
    description: ! 'Defines string helper methods including string formatting and
      localization.

      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be

      added to the `String.prototype` as well.'
    submodule: ember-runtime
    static: 1
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: ''
  Ember.Binding:
    name: Ember.Binding
    shortname: Ember.Binding
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/binding.js
    line: 307
    description: ! "An `Ember.Binding` connects the properties of two objects so that
      whenever\nthe value of one property changes, the other property will be changed
      also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties\n\nYou
      do not usually create Binding objects directly but instead describe\nbindings
      in your class or object definition using automatic binding\ndetection.\n\nProperties
      ending in a `Binding` suffix will be converted to `Ember.Binding`\ninstances.
      The value of this property should be a string representing a path\nto another
      object or a custom binding instanced created using Binding helpers\n(see \"Customizing
      Your Bindings\"):\n\n```\nvalueBinding: \"MyApp.someController.title\"\n```\n\nThis
      will create a binding from `MyApp.someController.title` to the `value`\nproperty
      of your object instance automatically. Now the two values will be\nkept in sync.\n\n##
      One Way Bindings\n\nOne especially useful binding customization you can use
      is the `oneWay()`\nhelper. This helper tells Ember that you are only interested
      in\nreceiving changes on the object you are binding from. For example, if you\nare
      binding to a preference and you want to be notified if the preference\nhas changed,
      but your object will not be changing the preference itself, you\ncould do:\n\n```\nbigTitlesBinding:
      Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n```\n\nThis
      way if the value of `MyApp.preferencesController.bigTitles` changes the\n`bigTitles`
      property of your object will change also. However, if you\nchange the value
      of your `bigTitles` property, it will not update the\n`preferencesController`.\n\nOne
      way bindings are almost twice as fast to setup and twice as fast to\nexecute
      because the binding only has to worry about changes to one side.\n\nYou should
      consider using one way bindings anytime you have an object that\nmay be created
      frequently and you do not intend to change a property; only\nto monitor it for
      changes. (such as in the example above).\n\n## Adding Bindings Manually\n\nAll
      of the examples above show you how to configure a custom binding, but the\nresult
      of these customizations will be a binding template, not a fully active\nBinding
      instance. The binding will actually become active only when you\ninstantiate
      the object the binding belongs to. It is useful however, to\nunderstand what
      actually happens when the binding is activated.\n\nFor a binding to function
      it must have at least a `from` property and a `to`\nproperty. The `from` property
      path points to the object/key that you want to\nbind from while the `to` path
      points to the object/key you want to bind to.\n\nWhen you define a custom binding,
      you are usually describing the property\nyou want to bind from (such as `MyApp.someController.value`
      in the examples\nabove). When your object is created, it will automatically
      assign the value\nyou want to bind `to` based on the name of your binding key.
      In the\nexamples above, during init, Ember objects will effectively call\nsomething
      like this on your binding:\n\n```javascript\nbinding = Ember.Binding.from(this.valueBinding).to(\"value\");\n```\n\nThis
      creates a new binding instance based on the template you provide, and\nsets
      the to path to the `value` property of the new object. Now that the\nbinding
      is fully configured with a `from` and a `to`, it simply needs to be\nconnected
      to become active. This is done through the `connect()` method:\n\n```javascript\nbinding.connect(this);\n```\n\nNote
      that when you connect a binding you pass the object you want it to be\nconnected
      to. This object will be used as the root for both the from and\nto side of the
      binding when inspecting relative paths. This allows the\nbinding to be automatically
      inherited by subclassed objects as well.\n\nNow that the binding is connected,
      it will observe both the from and to side\nand relay changes.\n\nIf you ever
      needed to do so (you almost never will, but it is useful to\nunderstand this
      anyway), you could manually create an active binding by\nusing the `Ember.bind()`
      helper method. (This is the same method used by\nto setup your bindings on objects):\n\n```javascript\nEmber.bind(MyApp.anotherObject,
      \"value\", \"MyApp.someController.value\");\n```\n\nBoth of these code fragments
      have the same effect as doing the most friendly\nform of binding creation like
      so:\n\n```javascript\nMyApp.anotherObject = Ember.Object.create({\n  valueBinding:
      \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n```\n\nEmber's
      built in binding creation method makes it easy to automatically\ncreate bindings
      for you. You should always use the highest-level APIs\navailable, even if you
      understand how it works underneath."
    since: Ember 0.9
  Ember.ComputedProperty:
    name: Ember.ComputedProperty
    shortname: Ember.ComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/computed.js
    line: 111
    extends: Ember.Descriptor
    is_constructor: 1
  Ember.Logger:
    name: Ember.Logger
    shortname: Ember.Logger
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/core.js
    line: 161
    description: ! 'Inside Ember-Metal, simply uses the methods from `imports.console`.

      Override this to provide more robust logging functionality.'
  Ember.Instrumentation:
    name: Ember.Instrumentation
    shortname: Ember.Instrumentation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/instrumentation.js
    line: 3
    description: ! "The purpose of the Ember Instrumentation module is\nto provide
      efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener
      by using `Ember.subscribe`:\n\n```javascript\nEmber.subscribe(\"render\", {\n
      \ before: function(name, timestamp, payload) {\n\n  },\n\n  after: function(name,
      timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before`
      callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument
      a block of code by using `Ember.instrument`:\n\n```javascript\nEmber.instrument(\"render.handlebars\",
      payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names
      passed to `Ember.instrument` are namespaced\nby periods, from more general to
      more specific. Subscribers\ncan listen for events by whatever level of granularity
      they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand
      the subscriber listened for all events beginning with\n`render`. It would receive
      callbacks for events named\n`render`, `render.handlebars`, `render.container`,
      or\neven `render.handlebars.layout`."
    static: 1
  Ember.OrderedSet:
    name: Ember.OrderedSet
    shortname: Ember.OrderedSet
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 52
    description: ! 'This class is used internally by Ember and Ember Data.

      Please do not use it at this time. We plan to clean it up

      and add many tests soon.'
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Map:
    name: Ember.Map
    shortname: Ember.Map
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 173
    description: ! 'A Map stores values indexed by keys. Unlike JavaScript''s

      default Objects, the keys of a Map can be any JavaScript

      object.


      Internally, a Map has two data structures:


      1. `keys`: an OrderedSet of all of the existing keys

      2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`


      When a key/value pair is added for the first time, we

      add the key to the `keys` OrderedSet, and create or

      replace an entry in `values`. When an entry is deleted,

      we delete its entry in `keys` and `values`.'
    access: private
    tagname: ''
    is_constructor: 1
  Ember.MapWithDefault:
    name: Ember.MapWithDefault
    shortname: Ember.MapWithDefault
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/map.js
    line: 307
    extends: Ember.Map
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: options
      description: ''
      optional: true
      props:
      - name: defaultValue
        description: ''
        type: Anything
        optional: true
  Ember.Mixin:
    name: Ember.Mixin
    shortname: Ember.Mixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/mixin.js
    line: 343
    description: ! "The `Ember.Mixin` class allows you to create mixins, whose properties
      can be\nadded to other classes. For instance,\n\n```javascript\nApp.Editable
      = Ember.Mixin.create({\n  edit: function() {\n    console.log('starting to edit');\n
      \   this.set('isEditing', true);\n  },\n  isEditing: false\n});\n\n// Mix mixins
      into classes by passing them as the first arguments to\n// .extend or .create.\nApp.CommentView
      = Ember.View.extend(App.Editable, {\n  template: Ember.Handlebars.compile('{{#if
      isEditing}}...{{else}}...{{/if}}')\n});\n\ncommentView = App.CommentView.create();\ncommentView.edit();
      // outputs 'starting to edit'\n```\n\nNote that Mixins are created with `Ember.Mixin.create`,
      not\n`Ember.Mixin.extend`."
  Ember.platform:
    name: Ember.platform
    shortname: Ember.platform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/platform.js
    line: 118
    description: Platform specific methods and feature detectors needed by the framework.
    static: 1
  Ember.Descriptor:
    name: Ember.Descriptor
    shortname: Ember.Descriptor
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/properties.js
    line: 23
    description: ! 'Objects of this type can implement an interface to responds requests
      to

      get and set. The default implementation handles simple properties.


      You generally won''t need to create or subclass this directly.'
    access: private
    tagname: ''
    is_constructor: 1
  Ember.RunLoop:
    name: Ember.RunLoop
    shortname: Ember.RunLoop
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/run_loop.js
    line: 44
    description: Ember RunLoop (Private)
    access: private
    tagname: ''
    is_constructor: 1
  Ember.run:
    name: Ember.run
    shortname: Ember.run
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: ../packages/ember-metal/lib/run_loop.js
    line: 187
    description: ! "Runs the passed target and method inside of a RunLoop, ensuring
      any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally
      you should not need to invoke this method yourself. However if\nyou are implementing
      raw event handlers when interfacing with other\nlibraries or plugins, you should
      probably wrap all of your code inside this\ncall.\n\n```javascript\nEmber.run(function(){\n
      \ // code to be execute within a RunLoop \n});\n```"
    static: 1
    is_constructor: 1
    params:
    - name: target
      description: target of method to call
      type: Object
      optional: true
    - name: method
      description: ! "Method to invoke.\n  May be a function or a string. If you pass
        a string\n  then it will be looked up on the passed target."
      type: Function|String
    - name: args*
      description: Any additional arguments you wish to pass to the method.
      type: Object
      optional: true
    return:
      description: return value from invoking the passed function.
      type: Object
  Ember.Location:
    name: Ember.Location
    shortname: Ember.Location
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/api.js
    line: 24
    description: ! 'Ember.Location returns an instance of the correct implementation
      of

      the `location` API.


      You can pass it a `implementation` (''hash'', ''history'', ''none'') to force
      a

      particular implementation.'
    static: 1
  Ember.HashLocation:
    name: Ember.HashLocation
    shortname: Ember.HashLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/hash_location.js
    line: 8
    description: ! 'Ember.HashLocation implements the location API using the browser''s

      hash. At present, it relies on a hashchange event existing in the

      browser.'
    extends: Ember.Object
  Ember.HistoryLocation:
    name: Ember.HistoryLocation
    shortname: Ember.HistoryLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/history_location.js
    line: 9
    description: ! 'Ember.HistoryLocation implements the location API using the browser''s

      history.pushState API.'
    extends: Ember.Object
  Ember.NoneLocation:
    name: Ember.NoneLocation
    shortname: Ember.NoneLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/location/none_location.js
    line: 8
    description: ! 'Ember.NoneLocation does not interact with the browser. It is useful
      for

      testing, or when you need to manage state with your Router, but temporarily

      don''t want it to muck with the URL (for example when you embed your

      application in a larger page).'
    extends: Ember.Object
  Ember.Route:
    name: Ember.Route
    shortname: Ember.Route
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/system/route.js
    line: 10
    description: ! 'The `Ember.Route` class is used to define individual routes. Refer
      to

      the [routing guide](http://emberjs.com/guides/routing/) for documentation.'
    extends: Ember.Object
  Ember.Router:
    name: Ember.Router
    shortname: Ember.Router
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: ../packages/ember-routing/lib/system/router.js
    line: 28
    description: ! 'The `Ember.Router` class manages the application state and URLs.
      Refer to

      the [routing guide](http://emberjs.com/guides/routing/) for documentation.'
    extends: Ember.Object
  Ember.ArrayController:
    name: Ember.ArrayController
    shortname: Ember.ArrayController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/array_controller.js
    line: 13
    description: ! "`Ember.ArrayController` provides a way for you to publish a collection
      of\nobjects so that you can easily bind to the collection from a Handlebars\n`#each`
      helper, an `Ember.CollectionView`, or other controllers.\n\nThe advantage of
      using an `ArrayController` is that you only have to set up\nyour view bindings
      once; to change what's displayed, simply swap out the\n`content` property on
      the controller.\n\nFor example, imagine you wanted to display a list of items
      fetched via an XHR\nrequest. Create an `Ember.ArrayController` and set its `content`
      property:\n\n```javascript\nMyApp.listController = Ember.ArrayController.create();\n\n$.get('people.json',
      function(data) {\n  MyApp.listController.set('content', data);\n});\n```\n\nThen,
      create a view that binds to your new controller:\n\n```handlebars\n{{#each MyApp.listController}}\n
      \ {{firstName}} {{lastName}}\n{{/each}}\n```\n\nAlthough you are binding to
      the controller, the behavior of this controller\nis to pass through any methods
      or properties to the underlying array. This\ncapability comes from `Ember.ArrayProxy`,
      which this class inherits from.\n\nSometimes you want to display computed properties
      within the body of an\n`#each` helper that depend on the underlying items in
      `content`, but are not\npresent on those items.   To do this, set `itemController`
      to the name of a\ncontroller (probably an `ObjectController`) that will wrap
      each individual item.\n\nFor example:\n\n```handlebars\n  {{#each post in controller}}\n
      \   <li>{{title}} ({{titleLength}} characters)</li>\n  {{/each}}\n```\n\n```javascript\nApp.PostsController
      = Ember.ArrayController.extend({\n  itemController: 'post'\n});\n\nApp.PostController
      = Ember.ObjectController.extend({\n  // the `title` property will be proxied
      to the underlying post.\n\n  titleLength: function() {\n    return this.get('title').length;\n
      \ }.property('title')\n});\n```\n\nIn some cases it is helpful to return a different
      `itemController` depending\non the particular item.  Subclasses can do this
      by overriding\n`lookupItemController`.\n\nFor example:\n\n```javascript\nApp.MyArrayController
      = Ember.ArrayController.extend({\n  lookupItemController: function( object )
      {\n    if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n
      \   } else {\n      return \"regular\"; // use App.RegularController\n    }\n
      \ }\n});\n```"
    extends: Ember.ArrayProxy
    uses:
    - Ember.SortableMixin
    - Ember.ControllerMixin
  Ember.ControllerMixin:
    name: Ember.ControllerMixin
    shortname: Ember.ControllerMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    - Ember.Controller
    - Ember.ObjectController
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/controller.js
    line: 11
    description: Additional methods for the ControllerMixin
    extends: Ember.Mixin
  Ember.Controller:
    name: Ember.Controller
    shortname: Ember.Controller
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/controller.js
    line: 78
    extends: Ember.Object
    uses:
    - Ember.ControllerMixin
  Ember.ObjectController:
    name: Ember.ObjectController
    shortname: Ember.ObjectController
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/controllers/object_controller.js
    line: 9
    description: ! '`Ember.ObjectController` is part of Ember''s Controller layer.
      A single shared

      instance of each `Ember.ObjectController` subclass in your application''s

      namespace will be created at application initialization and be stored on your

      application''s `Ember.Router` instance.


      `Ember.ObjectController` derives its functionality from its superclass

      `Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.'
    extends: Ember.ObjectProxy
    uses:
    - Ember.ControllerMixin
  Function:
    name: Function
    shortname: Function
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  Ember.Array:
    name: Ember.Array
    shortname: Ember.Array
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/array.js
    line: 19
    description: ! 'This module implements Observer-friendly Array-like behavior.
      This mixin is

      picked up by the Array class as well as other controllers, etc. that want to

      appear to be arrays.


      Unlike `Ember.Enumerable,` this mixin defines methods specifically for

      collections that provide index-ordered access to their contents. When you

      are designing code that needs to accept any kind of Array-like object, you

      should use these methods instead of Array primitives because these will

      properly notify observers of changes to the array.


      Although these methods are efficient, they do add a layer of indirection to

      your application so it is a good idea to use them only when you need the

      flexibility of using both true JavaScript arrays and "virtual" arrays such

      as controllers and collections.


      You can use the methods defined in this module to access and modify array

      contents in a KVO-friendly way. You can also be notified whenever the

      membership of an array changes by changing the syntax of the property to

      `.observes(''*myProperty.[]'')`.


      To support `Ember.Array` in your own class, you must override two

      primitives to use it: `replace()` and `objectAt()`.


      Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`

      mixin. All `Ember.Array`-like objects are also enumerable.'
    extends: Ember.Mixin
    uses:
    - Ember.Enumerable
    since: Ember 0.9.0
  Ember.Comparable:
    name: Ember.Comparable
    shortname: Ember.Comparable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/comparable.js
    line: 9
    description: ! 'Implements some standard methods for comparing objects. Add this
      mixin to

      any class you create that can compare its instances.


      You should implement the `compare()` method.'
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Copyable:
    name: Ember.Copyable
    shortname: Ember.Copyable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/copyable.js
    line: 12
    description: ! 'Implements some standard methods for copying an object. Add this
      mixin to

      any object you create that can create a copy of itself. This mixin is

      added automatically to the built-in array.


      You should generally implement the `copy()` method to return a copy of the

      receiver.


      Note that `frozenCopy()` will only work if you also implement

      `Ember.Freezable`.'
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Deferred:
    name: Ember.Deferred
    shortname: Ember.Deferred
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/deferred.js
    line: 15
    extends: Ember.Mixin
  Ember.Enumerable:
    name: Ember.Enumerable
    shortname: Ember.Enumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Array
    - Ember.MutableEnumerable
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/enumerable.js
    line: 35
    description: ! "This mixin defines the common interface implemented by enumerable
      objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI
      defined up to JavaScript 1.8 (excluding language-specific features that\ncannot
      be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically
      to the Array class on page load, so you\ncan use any of these methods on simple
      arrays. If Array already implements\none of these methods, the mixin will not
      override them.\n\n## Writing Your Own Enumerable\n\nTo make your own custom
      class enumerable, you need two items:\n\n1. You must have a length property.
      This property should change whenever\n   the number of items in your enumerable
      object changes. If you using this\n   with an `Ember.Object` subclass, you should
      be sure to change the length\n   property using `set().`\n\n2. If you must implement
      `nextObject().` See documentation.\n\nOnce you have these two methods implement,
      apply the `Ember.Enumerable` mixin\nto your class and you will be able to enumerate
      the contents of your object\nlike any other collection.\n\n## Using Ember Enumeration
      with Other Libraries\n\nMany other libraries provide some kind of iterator or
      enumeration like\nfacility. This is often where the most common API conflicts
      occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries
      by implementing only methods that mostly correspond to the\nJavaScript 1.8 API."
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.Evented:
    name: Ember.Evented
    shortname: Ember.Evented
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.State
    - Ember.View
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/evented.js
    line: 6
    description: ! "This mixin allows for Ember objects to subscribe to and emit events.\n\n```javascript\nApp.Person
      = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n
      \   this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet',
      function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n//
      outputs: 'Our person has greeted'\n```"
    extends: Ember.Mixin
  Ember.Freezable:
    name: Ember.Freezable
    shortname: Ember.Freezable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/freezable.js
    line: 9
    description: ! "The `Ember.Freezable` mixin implements some basic methods for
      marking an\nobject as frozen. Once an object is frozen it should be read only.
      No changes\nmay be made the internal state of the object.\n\n## Enforcement\n\nTo
      fully support freezing in your subclass, you must include this mixin and\noverride
      any method that might alter any property on the object to instead\nraise an
      exception. You can check the state of an object by checking the\n`isFrozen`
      property.\n\nAlthough future versions of JavaScript may support language-level
      freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit
      is still technically possible to modify the object, even though it could\nbreak
      other parts of your application that do not expect a frozen object to\nchange.
      It is, therefore, very important that you always respect the\n`isFrozen` property
      on all freezable objects.\n\n## Example Usage\n\nThe example below shows a simple
      object that implement the `Ember.Freezable`\nprotocol.\n\n```javascript\nContact
      = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n
      \ // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen'))
      throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName',
      this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc
      = Context.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();
      \ // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n```\n\n## Copying\n\nUsually
      the `Ember.Freezable` protocol is implemented in cooperation with the\n`Ember.Copyable`
      protocol, which defines a `frozenCopy()` method that will\nreturn a frozen object,
      if the object implements this method as well."
    extends: Ember.Mixin
    since: Ember 0.9
  Ember.MutableArray:
    name: Ember.MutableArray
    shortname: Ember.MutableArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayProxy
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_array.js
    line: 23
    description: ! 'This mixin defines the API for modifying array-like objects. These
      methods

      can be applied only to a collection that keeps its items in an ordered set.


      Note that an Array can change even if it does not implement this mixin.

      For example, one might implement a SparseArray that cannot be directly

      modified, but if its underlying enumerable changes, it will change also.'
    extends: Ember.Mixin
    uses:
    - Ember.Array
    - Ember.MutableEnumerable
  Ember.MutableEnumerable:
    name: Ember.MutableEnumerable
    shortname: Ember.MutableEnumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    - Ember.SortableMixin
    - Ember.NativeArray
    - Ember.Set
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
    line: 10
    description: ! 'This mixin defines the API for modifying generic enumerables.
      These methods

      can be applied to an object regardless of whether it is ordered or

      unordered.


      Note that an Enumerable can change even if it does not implement this mixin.

      For example, a MappedEnumerable cannot be directly modified but if its

      underlying enumerable changes, it will change also.


      ## Adding Objects


      To add an object to an enumerable, use the `addObject()` method. This

      method will only add the object to the enumerable if the object is not

      already present and the object if of a type supported by the enumerable.


      ```javascript

      set.addObject(contact);

      ```


      ## Removing Objects


      To remove an object form an enumerable, use the `removeObject()` method. This

      will only remove the object if it is already in the enumerable, otherwise

      this method has no effect.


      ```javascript

      set.removeObject(contact);

      ```


      ## Implementing In Your Own Code


      If you are implementing an object and want to support this API, just include

      this mixin in your class and implement the required methods. In your unit

      tests, be sure to apply the Ember.MutableEnumerableTests to your object.'
    extends: Ember.Mixin
    uses:
    - Ember.Enumerable
  Ember.Observable:
    name: Ember.Observable
    shortname: Ember.Observable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Object
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/observable.js
    line: 8
    description: ! "## Overview\n\nThis mixin provides properties and property observing
      functionality, core\nfeatures of the Ember object model.\n\nProperties and observers
      allow one object to observe changes to a\nproperty on another object. This is
      one of the fundamental ways that\nmodels, controllers and views communicate
      with each other in an Ember\napplication.\n\nAny object that has this mixin
      applied can be used in observer\noperations. That includes `Ember.Object` and
      most objects you will\ninteract with as you write your Ember application.\n\nNote
      that you will not generally apply this mixin to classes yourself,\nbut you will
      use the features provided by this module frequently, so it\nis important to
      understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's
      support for bindings and observers, you will always\naccess properties using
      the get method, and set properties using the\nset method. This allows the observing
      objects to be notified and\ncomputed properties to be handled properly.\n\nMore
      documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou
      typically observe property changes simply by adding the `observes`\ncall to
      the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.create({\n
      \ valueObserver: function() {\n    // Executes whenever the \"value\" property
      changes\n  }.observes('value')\n});\n```\n\nAlthough this is the most common
      way to add an observer, this capability\nis actually built into the `Ember.Object`
      class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`.
      You can use\nthese two methods to add and remove observers yourself if you need
      to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey',
      targetObject, targetAction)\n```\n\nThis will call the `targetAction` method
      on the `targetObject` to be called\nwhenever the value of the `propertyKey`
      changes.\n\nNote that if `propertyKey` is a computed property, the observer
      will be\ncalled when any of the property dependencies are changed, even if the\nresulting
      value of the computed property is unchanged. This is necessary\nbecause computed
      properties are not computed until `get` is called."
    extends: Ember.Mixin
  Ember.SortableMixin:
    name: Ember.SortableMixin
    shortname: Ember.SortableMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayController
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/sortable.js
    line: 8
    description: ! "`Ember.SortableMixin` provides a standard interface for array
      proxies\nto specify a sort order and maintain this sorting when objects are
      added,\nremoved, or updated without changing the implicit order of their underlying\ncontent
      array:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n
      \ {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title:
      'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  content:
      songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');
      \ // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber:
      1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber:
      1, title: 'Dear Prudence'}\n```"
    extends: Ember.Mixin
    uses:
    - Ember.MutableEnumerable
  Ember.TargetActionSupport:
    name: Ember.TargetActionSupport
    shortname: Ember.TargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Button
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/mixins/target_action_support.js
    line: 8
    extends: Ember.Mixin
  Ember.ArrayProxy:
    name: Ember.ArrayProxy
    shortname: Ember.ArrayProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/array_proxy.js
    line: 12
    description: ! "An ArrayProxy wraps any other object that implements `Ember.Array`
      and/or\n`Ember.MutableArray,` forwarding all requests. This makes it very useful
      for\na number of binding use cases or other cases where being able to swap\nout
      the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nvar
      pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({ content:
      Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content',
      ['amoeba', 'paramecium']);\nap.get('firstObject');                        //
      'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents
      of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nvar
      pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({\n    content:
      Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n
      \   }\n});\n\nap.get('firstObject'); // . 'DOG'\n```"
    extends: Ember.Object
    uses:
    - Ember.MutableArray
  Ember.CoreObject:
    name: Ember.CoreObject
    shortname: Ember.CoreObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/core_object.js
    line: 477
  Ember.EachProxy:
    name: Ember.EachProxy
    shortname: Ember.EachProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/each_proxy.js
    line: 73
    description: ! 'This is the object instance returned when you get the `@each`
      property on an

      array. It uses the unknownProperty handler to automatically create

      EachArray instances for property names.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Namespace:
    name: Ember.Namespace
    shortname: Ember.Namespace
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/namespace.js
    line: 10
    description: ! "A Namespace is an object usually used to contain other objects
      or methods\nsuch as an application or framework. Create a namespace anytime
      you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework
      = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```"
    extends: Ember.Object
  Ember.NativeArray:
    name: Ember.NativeArray
    shortname: Ember.NativeArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/native_array.js
    line: 109
    description: ! 'The NativeArray mixin contains the properties needed to to make
      the native

      Array support Ember.MutableArray and all of its dependent APIs. Unless you

      have `Ember.EXTEND_PROTOTYPES or `Ember.EXTEND_PROTOTYPES.Array` set to

      false, this will be applied automatically. Otherwise you can apply the mixin

      at anytime by calling `Ember.NativeArray.activate`.'
    extends: Ember.Mixin
    uses:
    - Ember.MutableArray
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
  Ember.Object:
    name: Ember.Object
    shortname: Ember.Object
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object.js
    line: 10
    description: ! '`Ember.Object` is the main base class for all Ember objects. It
      is a subclass

      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,

      see the documentation for each of these.'
    extends: Ember.CoreObject
    uses:
    - Ember.Observable
  Ember.ObjectProxy:
    name: Ember.ObjectProxy
    shortname: Ember.ObjectProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/object_proxy.js
    line: 30
    description: ! "`Ember.ObjectProxy` forwards all properties not defined by the
      proxy itself\nto a proxied `content` object.\n\n```javascript\nobject = Ember.Object.create({\n
      \ name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n//
      Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name',
      'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description'
      property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')
      \ // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property
      to be delegated will throw an\nError.\n\n```javascript\nproxy = Ember.ObjectProxy.create({\n
      \ content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');
      \        // true\nproxy.get('foo');          // undefined\nproxy.set('foo',
      'data');  // throws Error\n```\n\nDelegated properties can be bound to and will
      change when content is updated.\n\nComputed properties on the proxy itself can
      depend on delegated properties.\n\n```javascript\nProxyWithComputedProperty
      = Ember.ObjectProxy.extend({\n  fullName: function () {\n    var firstName =
      this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName
      && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return
      firstName || lastName;\n  }.property('firstName', 'lastName')\n});\n\nproxy
      = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content',
      {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for
      fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n```"
    extends: Ember.Object
  Ember.Set:
    name: Ember.Set
    shortname: Ember.Set
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/system/set.js
    line: 14
    description: ! 'An unordered collection of objects.


      A Set works a bit like an array except that its items are not ordered. You

      can create a set to efficiently test for membership for an object. You can

      also iterate through a set just like an array, even accessing objects by

      index, however there is no guarantee as to their order.


      All Sets are observable via the Enumerable Observer API - which works

      on any enumerable object including both Sets and Arrays.


      ## Creating a Set


      You can create a set like you would most objects using

      `new Ember.Set()`. Most new sets you create will be empty, but you can

      also initialize the set with some content by passing an array or other

      enumerable of objects to the constructor.


      Finally, you can pass in an existing set and the set will be copied. You

      can also create a copy of a set by calling `Ember.Set#copy()`.


      ```javascript

      // creates a new empty set

      var foundNames = new Ember.Set();


      // creates a set with four names in it.

      var names = new Ember.Set(["Charles", "Tom", "Juan", "Alex"]); // :P


      // creates a copy of the names set.

      var namesCopy = new Ember.Set(names);


      // same as above.

      var anotherNamesCopy = names.copy();

      ```


      ## Adding/Removing Objects


      You generally add or remove objects from a set using `add()` or

      `remove()`. You can add any type of object including primitives such as

      numbers, strings, and booleans.


      Unlike arrays, objects can only exist one time in a set. If you call `add()`

      on a set with the same object multiple times, the object will only be added

      once. Likewise, calling `remove()` with the same object multiple times will

      remove the object the first time and have no effect on future calls until

      you add the object to the set again.


      NOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do

      so will be ignored.


      In addition to add/remove you can also call `push()`/`pop()`. Push behaves

      just like `add()` but `pop()`, unlike `remove()` will pick an arbitrary

      object, remove it and return it. This is a good way to use a set as a job

      queue when you don''t care which order the jobs are executed in.


      ## Testing for an Object


      To test for an object''s presence in a set you simply call

      `Ember.Set#contains()`.


      ## Observing changes


      When using `Ember.Set`, you can observe the `"[]"` property to be

      alerted whenever the content changes. You can also add an enumerable

      observer to the set to be notified of specific objects that are added and

      removed from the set. See `Ember.Enumerable` for more information on

      enumerables.


      This is often unhelpful. If you are filtering sets of objects, for instance,

      it is very inefficient to re-filter all of the items each time the set

      changes. It would be better if you could just adjust the filtered set based

      on what was changed on the original set. The same issue applies to merging

      sets, as well.


      ## Other Methods


      `Ember.Set` primary implements other mixin APIs. For a complete reference

      on the methods you will use with `Ember.Set`, please consult these mixins.

      The most useful ones will be `Ember.Enumerable` and

      `Ember.MutableEnumerable` which implement most of the common iterator

      methods you are used to on Array.


      Note that you can also use the `Ember.Copyable` and `Ember.Freezable`

      APIs on `Ember.Set` as well. Once a set is frozen it can no longer be

      modified. The benefit of this is that when you call `frozenCopy()` on it,

      Ember will avoid making copies of the set. This allows you to write

      code that can know with certainty when the underlying set data will or

      will not be modified.'
    extends: Ember.CoreObject
    uses:
    - Ember.MutableEnumerable
    - Ember.Copyable
    - Ember.Freezable
    since: Ember 0.9
  Ember.Error:
    name: Ember.Error
    shortname: Ember.Error
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: ../packages/ember-runtime/lib/core.js
    line: 406
    description: A subclass of the JavaScript Error object for use in Ember.
    extends: Error
    is_constructor: 1
  Ember.State:
    name: Ember.State
    shortname: Ember.State
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: Ember
    file: ../packages/ember-states/lib/state.js
    line: 8
    extends: Ember.Object
    uses:
    - Ember.Evented
  Transition:
    name: Transition
    shortname: Transition
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: ''
    file: ../packages/ember-states/lib/state_manager.js
    line: 11
    description: ! 'A Transition takes the enter, exit and resolve states and normalizes

      them:


      * takes any passed in contexts into consideration

      * adds in `initialState`s'
    access: private
    tagname: ''
  Ember.StateManager:
    name: Ember.StateManager
    shortname: Ember.StateManager
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-states
    namespace: Ember
    file: ../packages/ember-states/lib/state_manager.js
    line: 219
    description: ! "StateManager is part of Ember's implementation of a finite state
      machine. A\nStateManager instance manages a number of properties that are instances
      of\n`Ember.State`,\ntracks the current active state, and triggers callbacks
      when states have changed.\n\n## Defining States\n\nThe states of StateManager
      can be declared in one of two ways. First, you can\ndefine a `states` property
      that contains all the states:\n\n```javascript\nmanagerA = Ember.StateManager.create({\n
      \ states: {\n    stateOne: Ember.State.create(),\n    stateTwo: Ember.State.create()\n
      \ }\n})\n\nmanagerA.get('states')\n// {\n//   stateOne: Ember.State.create(),\n//
      \  stateTwo: Ember.State.create()\n// }\n```\n\nYou can also add instances of
      `Ember.State` (or an `Ember.State` subclass)\ndirectly as properties of a StateManager.
      These states will be collected into\nthe `states` property for you.\n\n```javascript\nmanagerA
      = Ember.StateManager.create({\n  stateOne: Ember.State.create(),\n  stateTwo:
      Ember.State.create()\n})\n\nmanagerA.get('states')\n// {\n//   stateOne: Ember.State.create(),\n//
      \  stateTwo: Ember.State.create()\n// }\n```\n\n## The Initial State\n\nWhen
      created a StateManager instance will immediately enter into the state\ndefined
      as its `start` property or the state referenced by name in its\n`initialState`
      property:\n\n```javascript\nmanagerA = Ember.StateManager.create({\n  start:
      Ember.State.create({})\n})\n\nmanagerA.get('currentState.name') // 'start'\n\nmanagerB
      = Ember.StateManager.create({\n  initialState: 'beginHere',\n  beginHere: Ember.State.create({})\n})\n\nmanagerB.get('currentState.name')
      // 'beginHere'\n```\n\nBecause it is a property you may also provide a computed
      function if you wish\nto derive an `initialState` programmatically:\n\n```javascript\nmanagerC
      = Ember.StateManager.create({\n  initialState: function(){\n    if (someLogic)
      {\n      return 'active';\n    } else {\n      return 'passive';\n    }\n  }.property(),\n
      \ active: Ember.State.create({}),\n  passive: Ember.State.create({})\n})\n```\n\n##
      Moving Between States\n\nA StateManager can have any number of `Ember.State`
      objects as properties\nand can have a single one of these states as its current
      state.\n\nCalling `transitionTo` transitions between states:\n\n```javascript\nrobotManager
      = Ember.StateManager.create({\n  initialState: 'poweredDown',\n  poweredDown:
      Ember.State.create({}),\n  poweredUp: Ember.State.create({})\n})\n\nrobotManager.get('currentState.name')
      // 'poweredDown'\nrobotManager.transitionTo('poweredUp')\nrobotManager.get('currentState.name')
      // 'poweredUp'\n```\n\nBefore transitioning into a new state the existing `currentState`
      will have\nits `exit` method called with the StateManager instance as its first
      argument\nand an object representing the transition as its second argument.\n\nAfter
      transitioning into a new state the new `currentState` will have its\n`enter`
      method called with the StateManager instance as its first argument\nand an object
      representing the transition as its second argument.\n\n```javascript\nrobotManager
      = Ember.StateManager.create({\n  initialState: 'poweredDown',\n  poweredDown:
      Ember.State.create({\n    exit: function(stateManager){\n      console.log(\"exiting
      the poweredDown state\")\n    }\n  }),\n  poweredUp: Ember.State.create({\n
      \   enter: function(stateManager){\n      console.log(\"entering the poweredUp
      state. Destroy all humans.\")\n    }\n  })\n})\n\nrobotManager.get('currentState.name')
      // 'poweredDown'\nrobotManager.transitionTo('poweredUp')\n\n// will log\n//
      'exiting the poweredDown state'\n// 'entering the poweredUp state. Destroy all
      humans.'\n```\n\nOnce a StateManager is already in a state, subsequent attempts
      to enter that\nstate will not trigger enter or exit method calls. Attempts to
      transition\ninto a state that the manager does not have will result in no changes
      in the\nStateManager's current state:\n\n```javascript\nrobotManager = Ember.StateManager.create({\n
      \ initialState: 'poweredDown',\n  poweredDown: Ember.State.create({\n    exit:
      function(stateManager){\n      console.log(\"exiting the poweredDown state\")\n
      \   }\n  }),\n  poweredUp: Ember.State.create({\n    enter: function(stateManager){\n
      \     console.log(\"entering the poweredUp state. Destroy all humans.\")\n    }\n
      \ })\n})\n\nrobotManager.get('currentState.name') // 'poweredDown'\nrobotManager.transitionTo('poweredUp')\n//
      will log\n// 'exiting the poweredDown state'\n// 'entering the poweredUp state.
      Destroy all humans.'\nrobotManager.transitionTo('poweredUp') // no logging,
      no state change\n\nrobotManager.transitionTo('someUnknownState') // silently
      fails\nrobotManager.get('currentState.name') // 'poweredUp'\n```\n\nEach state
      property may itself contain properties that are instances of\n`Ember.State`.
      The StateManager can transition to specific sub-states in a\nseries of transitionTo
      method calls or via a single transitionTo with the\nfull path to the specific
      state. The StateManager will also keep track of the\nfull path to its currentState\n\n```javascript\nrobotManager
      = Ember.StateManager.create({\n  initialState: 'poweredDown',\n  poweredDown:
      Ember.State.create({\n    charging: Ember.State.create(),\n    charged: Ember.State.create()\n
      \ }),\n  poweredUp: Ember.State.create({\n    mobile: Ember.State.create(),\n
      \   stationary: Ember.State.create()\n  })\n})\n\nrobotManager.get('currentState.name')
      // 'poweredDown'\n\nrobotManager.transitionTo('poweredUp')\nrobotManager.get('currentState.name')
      // 'poweredUp'\n\nrobotManager.transitionTo('mobile')\nrobotManager.get('currentState.name')
      // 'mobile'\n\n// transition via a state path\nrobotManager.transitionTo('poweredDown.charging')\nrobotManager.get('currentState.name')
      // 'charging'\n\nrobotManager.get('currentState.path') // 'poweredDown.charging'\n```\n\nEnter
      transition methods will be called for each state and nested child state\nin
      their hierarchical order. Exit methods will be called for each state and\nits
      nested states in reverse hierarchical order.\n\nExit transitions for a parent
      state are not called when entering into one of\nits child states, only when
      transitioning to a new section of possible states\nin the hierarchy.\n\n```javascript\nrobotManager
      = Ember.StateManager.create({\n  initialState: 'poweredDown',\n  poweredDown:
      Ember.State.create({\n    enter: function(){},\n    exit: function(){\n      console.log(\"exited
      poweredDown state\")\n    },\n    charging: Ember.State.create({\n      enter:
      function(){},\n      exit: function(){}\n    }),\n    charged: Ember.State.create({\n
      \     enter: function(){\n        console.log(\"entered charged state\")\n      },\n
      \     exit: function(){\n        console.log(\"exited charged state\")\n      }\n
      \   })\n  }),\n  poweredUp: Ember.State.create({\n    enter: function(){\n      console.log(\"entered
      poweredUp state\")\n    },\n    exit: function(){},\n    mobile: Ember.State.create({\n
      \     enter: function(){\n        console.log(\"entered mobile state\")\n      },\n
      \     exit: function(){}\n    }),\n    stationary: Ember.State.create({\n      enter:
      function(){},\n      exit: function(){}\n    })\n  })\n})\n\n\nrobotManager.get('currentState.path')
      // 'poweredDown'\nrobotManager.transitionTo('charged')\n// logs 'entered charged
      state'\n// but does *not* log  'exited poweredDown state'\nrobotManager.get('currentState.name')
      // 'charged\n\nrobotManager.transitionTo('poweredUp.mobile')\n// logs\n// 'exited
      charged state'\n// 'exited poweredDown state'\n// 'entered poweredUp state'\n//
      'entered mobile state'\n```\n\nDuring development you can set a StateManager's
      `enableLogging` property to\n`true` to receive console messages of state transitions.\n\n```javascript\nrobotManager
      = Ember.StateManager.create({\n  enableLogging: true\n})\n```\n\n## Managing
      currentState with Actions\n\nTo control which transitions are possible for a
      given state, and\nappropriately handle external events, the StateManager can
      receive and\nroute action messages to its states via the `send` method. Calling
      to\n`send` with an action name will begin searching for a method with the same\nname
      starting at the current state and moving up through the parent states\nin a
      state hierarchy until an appropriate method is found or the StateManager\ninstance
      itself is reached.\n\nIf an appropriately named method is found it will be called
      with the state\nmanager as the first argument and an optional `context` object
      as the second\nargument.\n\n```javascript\nmanagerA = Ember.StateManager.create({\n
      \ initialState: 'stateOne.substateOne.subsubstateOne',\n  stateOne: Ember.State.create({\n
      \   substateOne: Ember.State.create({\n      anAction: function(manager, context){\n
      \       console.log(\"an action was called\")\n      },\n      subsubstateOne:
      Ember.State.create({})\n    })\n  })\n})\n\nmanagerA.get('currentState.name')
      // 'subsubstateOne'\nmanagerA.send('anAction')\n// 'stateOne.substateOne.subsubstateOne'
      has no anAction method\n// so the 'anAction' method of 'stateOne.substateOne'
      is called\n// and logs \"an action was called\"\n// with managerA as the first
      argument\n// and no second argument\n\nsomeObject = {}\nmanagerA.send('anAction',
      someObject)\n// the 'anAction' method of 'stateOne.substateOne' is called again\n//
      with managerA as the first argument and\n// someObject as the second argument.\n```\n\nIf
      the StateManager attempts to send an action but does not find an appropriately
      named\nmethod in the current state or while moving upwards through the state
      hierarchy, it will\nrepeat the process looking for a `unhandledEvent` method.
      If an `unhandledEvent` method is\nfound, it will be called with the original
      event name as the second argument. If an\n`unhandledEvent` method is not found,
      the StateManager will throw a new Ember.Error.\n\n```javascript\nmanagerB =
      Ember.StateManager.create({\n  initialState: 'stateOne.substateOne.subsubstateOne',\n
      \ stateOne: Ember.State.create({\n    substateOne: Ember.State.create({\n      subsubstateOne:
      Ember.State.create({}),\n      unhandledEvent: function(manager, eventName,
      context) {\n        console.log(\"got an unhandledEvent with name \" + eventName);\n
      \     }\n    })\n  })\n})\n\nmanagerB.get('currentState.name') // 'subsubstateOne'\nmanagerB.send('anAction')\n//
      neither `stateOne.substateOne.subsubstateOne` nor any of it's\n// parent states
      have a handler for `anAction`. `subsubstateOne`\n// also does not have a `unhandledEvent`
      method, but its parent\n// state, `substateOne`, does, and it gets fired. It
      will log\n// \"got an unhandledEvent with name anAction\"\n```\n\nAction detection
      only moves upwards through the state hierarchy from the current state.\nIt does
      not search in other portions of the hierarchy.\n\n```javascript\nmanagerC =
      Ember.StateManager.create({\n  initialState: 'stateOne.substateOne.subsubstateOne',\n
      \ stateOne: Ember.State.create({\n    substateOne: Ember.State.create({\n      subsubstateOne:
      Ember.State.create({})\n    })\n  }),\n  stateTwo: Ember.State.create({\n   anAction:
      function(manager, context){\n     // will not be called below because it is\n
      \    // not a parent of the current state\n   }\n  })\n})\n\nmanagerC.get('currentState.name')
      // 'subsubstateOne'\nmanagerC.send('anAction')\n// Error: <Ember.StateManager:ember132>
      could not\n// respond to event anAction in state stateOne.substateOne.subsubstateOne.\n```\n\nInside
      of an action method the given state should delegate `transitionTo` calls on
      its\nStateManager.\n\n```javascript\nrobotManager = Ember.StateManager.create({\n
      \ initialState: 'poweredDown.charging',\n  poweredDown: Ember.State.create({\n
      \   charging: Ember.State.create({\n      chargeComplete: function(manager,
      context){\n        manager.transitionTo('charged')\n      }\n    }),\n    charged:
      Ember.State.create({\n      boot: function(manager, context){\n        manager.transitionTo('poweredUp')\n
      \     }\n    })\n  }),\n  poweredUp: Ember.State.create({\n    beginExtermination:
      function(manager, context){\n      manager.transitionTo('rampaging')\n    },\n
      \   rampaging: Ember.State.create()\n  })\n})\n\nrobotManager.get('currentState.name')
      // 'charging'\nrobotManager.send('boot') // throws error, no boot action\n                          //
      in current hierarchy\nrobotManager.get('currentState.name') // remains 'charging'\n\nrobotManager.send('beginExtermination')
      // throws error, no beginExtermination\n                                        //
      action in current hierarchy\nrobotManager.get('currentState.name')   // remains
      'charging'\n\nrobotManager.send('chargeComplete')\nrobotManager.get('currentState.name')
      \  // 'charged'\n\nrobotManager.send('boot')\nrobotManager.get('currentState.name')
      \  // 'poweredUp'\n\nrobotManager.send('beginExtermination', allHumans)\nrobotManager.get('currentState.name')
      \  // 'rampaging'\n```\n\nTransition actions can also be created using the `transitionTo`
      method of the `Ember.State` class. The\nfollowing example StateManagers are
      equivalent:\n\n```javascript\naManager = Ember.StateManager.create({\n  stateOne:
      Ember.State.create({\n    changeToStateTwo: Ember.State.transitionTo('stateTwo')\n
      \ }),\n  stateTwo: Ember.State.create({})\n})\n\nbManager = Ember.StateManager.create({\n
      \ stateOne: Ember.State.create({\n    changeToStateTwo: function(manager, context){\n
      \     manager.transitionTo('stateTwo', context)\n    }\n  }),\n  stateTwo: Ember.State.create({})\n})\n```"
    extends: Ember.State
  Ember.EventDispatcher:
    name: Ember.EventDispatcher
    shortname: Ember.EventDispatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/event_dispatcher.js
    line: 8
    description: ! '`Ember.EventDispatcher` handles delegating browser events to their

      corresponding `Ember.Views.` For example, when you click on a view,

      `Ember.EventDispatcher` ensures that that view''s `mouseDown` method gets

      called.'
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.RenderBuffer:
    name: Ember.RenderBuffer
    shortname: Ember.RenderBuffer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/system/render_buffer.js
    line: 31
    description: ! '`Ember.RenderBuffer` gathers information regarding the a view
      and generates the

      final representation. `Ember.RenderBuffer` will generate HTML which can be pushed

      to the DOM.'
    is_constructor: 1
  Ember.CollectionView:
    name: Ember.CollectionView
    shortname: Ember.CollectionView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/collection_view.js
    line: 11
    description: ! "`Ember.CollectionView` is an `Ember.View` descendent responsible
      for managing\na collection (an array or array-like object) by maintaing a child
      view object\nand associated DOM representation for each item in the array and
      ensuring\nthat child views and their associated rendered HTML are updated when
      items in\nthe array are added, removed, or replaced.\n\n## Setting content\n\nThe
      managed collection of objects is referenced as the `Ember.CollectionView`\ninstance's
      `content` property.\n\n```javascript\nsomeItemsView = Ember.CollectionView.create({\n
      \ content: ['A', 'B','C']\n})\n```\n\nThe view for each item in the collection
      will have its `content` property set\nto the item.\n\n## Specifying itemViewClass\n\nBy
      default the view class for each item in the managed collection will be an\ninstance
      of `Ember.View`. You can supply a different class by setting the\n`CollectionView`'s
      `itemViewClass` property.\n\nGiven an empty `<body>` and the following code:\n\n```javascript
      \nsomeItemsView = Ember.CollectionView.create({\n  classNames: ['a-collection'],\n
      \ content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template:
      Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nsomeItemsView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<div class=\"ember-view a-collection\">\n
      \ <div class=\"ember-view\">the letter: A</div>\n  <div class=\"ember-view\">the
      letter: B</div>\n  <div class=\"ember-view\">the letter: C</div>\n</div>\n```\n\n##
      Automatic matching of parent/child tagNames\n\nSetting the `tagName` property
      of a `CollectionView` to any of\n\"ul\", \"ol\", \"table\", \"thead\", \"tbody\",
      \"tfoot\", \"tr\", or \"select\" will result\nin the item views receiving an
      appropriately matched `tagName` property.\n\nGiven an empty `<body>` and the
      following code:\n\n```javascript\nanUndorderedListView = Ember.CollectionView.create({\n
      \ tagName: 'ul',\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n
      \   template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n\nanUndorderedListView.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<ul class=\"ember-view a-collection\">\n
      \ <li class=\"ember-view\">the letter: A</li>\n  <li class=\"ember-view\">the
      letter: B</li>\n  <li class=\"ember-view\">the letter: C</li>\n</ul>\n```\n\nAdditional
      `tagName` pairs can be provided by adding to\n`Ember.CollectionView.CONTAINER_MAP
      `\n\n```javascript\nEmber.CollectionView.CONTAINER_MAP['article'] = 'section'\n```\n\n##
      Programatic creation of child views\n\nFor cases where additional customization
      beyond the use of a single\n`itemViewClass` or `tagName` matching is required
      CollectionView's\n`createChildView` method can be overidden:\n\n```javascript\nCustomCollectionView
      = Ember.CollectionView.extend({\n  createChildView: function(viewClass, attrs)
      {\n    if (attrs.content.kind == 'album') {\n      viewClass = App.AlbumView;\n
      \   } else {\n      viewClass = App.SongView;\n    }\n    this._super(viewClass,
      attrs);\n  }\n});\n```\n\n## Empty View\n\nYou can provide an `Ember.View` subclass
      to the `Ember.CollectionView`\ninstance as its `emptyView` property. If the
      `content` property of a\n`CollectionView` is set to `null` or an empty array,
      an instance of this view\nwill be the `CollectionView`s only child.\n\n```javascript\naListWithNothing
      = Ember.CollectionView.create({\n  classNames: ['nothing']\n  content: null,\n
      \ emptyView: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"The
      collection is empty\")\n  })\n});\n\naListWithNothing.appendTo('body');\n```\n\nWill
      result in the following HTML structure\n\n```html\n<div class=\"ember-view nothing\">\n
      \ <div class=\"ember-view\">\n    The collection is empty\n  </div>\n</div>\n```\n\n##
      Adding and Removing items\n\nThe `childViews` property of a `CollectionView`
      should not be directly\nmanipulated. Instead, add, remove, replace items from
      its `content` property.\nThis will trigger appropriate changes to its rendered
      HTML.\n\n## Use in templates via the `{{collection}}` `Ember.Handlebars` helper\n\n`Ember.Handlebars`
      provides a helper specifically for adding\n`CollectionView`s to templates. See
      `Ember.Handlebars.collection` for more\ndetails"
    extends: Ember.ContainerView
    since: Ember 0.9
  Ember.ContainerView:
    name: Ember.ContainerView
    shortname: Ember.ContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/container_view.js
    line: 15
    description: ! "A `ContainerView` is an `Ember.View` subclass that implements
      `Ember.MutableArray`\nallowing programatic management of its child views.\n\n##
      Setting Initial Child Views\n\nThe initial array of child views can be set in
      one of two ways. You can\nprovide a `childViews` property at creation time that
      contains instance of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ childViews: [Ember.View.create(), Ember.View.create()]\n});\n```\n\nYou can
      also provide a list of property names whose values are instances of\n`Ember.View`:\n\n```javascript\naContainer
      = Ember.ContainerView.create({\n  childViews: ['aView', 'bView', 'cView'],\n
      \ aView: Ember.View.create(),\n  bView: Ember.View.create(),\n  cView: Ember.View.create()\n});\n```\n\nThe
      two strategies can be combined:\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ childViews: ['aView', Ember.View.create()],\n  aView: Ember.View.create()\n});\n```\n\nEach
      child view's rendering will be inserted into the container's rendered\nHTML
      in the same order as its position in the `childViews` property.\n\n## Adding
      and Removing Child Views\n\nThe container view implements `Ember.MutableArray`
      allowing programatic management of its child views.\n\nTo remove a view, pass
      that view into a `removeObject` call on the container view.\n\nGiven an empty
      `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n
      \ classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView:
      Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n
      \ bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div
      class=\"ember-view\">B</div>\n</div>\n```\n\nRemoving a view\n\n```javascript\naContainer.toArray();
      \ // [aContainer.aView, aContainer.bView]\naContainer.removeObject(aContainer.get('bView'));\naContainer.toArray();
      \ // [aContainer.aView]\n```\n\nWill result in the following HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n</div>\n```\n\nSimilarly,
      adding a child view is accomplished by adding `Ember.View` instances to the\ncontainer
      view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer
      = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews:
      ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n
      \ }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n
      \ })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div
      class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div
      class=\"ember-view\">B</div>\n</div>\n```\n\nAdding a view\n\n```javascript\nAnotherViewClass
      = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Another view\")\n});\n\naContainer.toArray();
      \ // [aContainer.aView, aContainer.bView]\naContainer.pushObject(AnotherViewClass.create());\naContainer.toArray();
      // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n```\n\nWill
      result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n
      \ <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n  <div
      class=\"ember-view\">Another view</div>\n</div>\n```\n\n## Templates and Layout\n\nA
      `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or\n`defaultLayout`
      property on a container view will not result in the template\nor layout being
      rendered. The HTML contents of a `Ember.ContainerView`'s DOM\nrepresentation
      will only be the rendered HTML of its child views.\n\n## Binding a View to Display\n\nIf
      you would like to display a single view in your ContainerView, you can set\nits
      `currentView` property. When the `currentView` property is set to a view\ninstance,
      it will be added to the ContainerView. If the `currentView` property\nis later
      changed to a different view, the new view will replace the old view.\nIf `currentView`
      is set to `null`, the last `currentView` will be removed.\n\nThis functionality
      is useful for cases where you want to bind the display of\na ContainerView to
      a controller or state manager. For example, you can bind\nthe `currentView`
      of a container to a controller like this:\n\n```javascript\nApp.appController
      = Ember.Object.create({\n  view: Ember.View.create({\n    templateName: 'person_template'\n
      \ })\n});\n```\n\n```handlebars\n{{view Ember.ContainerView currentViewBinding=\"App.appController.view\"}}\n```"
    extends: Ember.View
  Ember.View:
    name: Ember.View
    shortname: Ember.View
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: ../packages/ember-views/lib/views/view.js
    line: 209
    description: ! "`Ember.View` is the class in Ember responsible for encapsulating
      templates of\nHTML content, combining templates with data to render as sections
      of a page's\nDOM, and registering and responding to user-initiated events.\n\n##
      HTML Tag\n\nThe default HTML tag name used for a view's DOM representation is
      `div`. This\ncan be customized by setting the `tagName` property. The following
      view\nclass:\n\n```javascript\nParagraphView = Ember.View.extend({\n  tagName:
      'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em
      id=\"ember1\" class=\"ember-view\"></em>\n```\n\n## HTML `class` Attribute\n\nThe
      HTML `class` attribute of a view's tag can be set by providing a\n`classNames`
      property that is set to an array of strings:\n\n```javascript\nMyView = Ember.View.extend({\n
      \ classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be
      set by providing a `classNameBindings`\nproperty set to an array of properties
      names for the view. The return value\nof these properties will be added as part
      of the value for the view's `class`\nattribute. These properties can be computed
      properties:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: function(){\n
      \   if(someLogic){ return 'from-b'; }\n  }.property()\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name
      binding returns a boolean the property name\nitself will be used as the class
      name if the property is true. The class name\nwill not be added if the value
      is `false` or `undefined`.\n\n```javascript\nMyView = Ember.View.extend({\n
      \ classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings
      you can supply a string value other\nthan the property name for use as the `class`
      HTML attribute by appending the\npreferred value after a \":\" character when
      defining the binding:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings:
      ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property
      names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```javascript\nMyView
      = Ember.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer
      to object values that are found by\ntraversing a path relative to the view itself:\n\n```javascript\nMyView
      = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages:
      Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in view
      instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      empty\"></div>\n```\n\nIf you want to add a class name for a property which
      evaluates to true and\nand a different class name if it evaluates to false,
      you can pass a binding\nlike this:\n\n```javascript\n// Applies 'enabled' class
      when isEnabled is true and 'disabled' when isEnabled is false\nEmber.View.create({\n
      \ classNameBindings: ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting
      HTML reprensentation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view
      disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class
      if a property is `false`:\n\n```javascript\n// Applies no class when isEnabled
      is true and class 'disabled' when isEnabled is false\nEmber.View.create({\n
      \ classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the view
      is set to `false`, it will result\nin view instances with an HTML representation
      of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates
      to the the value of a class name binding will result in automatic\nupdate of
      the  HTML `class` attribute in the view's rendered HTML\nrepresentation. If
      the value becomes `false` or `undefined` the class name\nwill be removed.\n\nBoth
      `classNames` and `classNameBindings` are concatenated properties. See\n`Ember.Object`
      documentation for more information about concatenated\nproperties.\n\n## HTML
      Attributes\n\nThe HTML attribute section of a view's tag can be set by providing
      an\n`attributeBindings` property set to an array of property names on the view.\nThe
      return value of these properties will be used as the value of the view's\nHTML
      associated attribute:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName:
      'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\"
      class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nIf the return value
      of an `attributeBindings` monitored property is a boolean\nthe property will
      follow HTML's pattern of repeating the attribute's name as\nits value:\n\n```javascript\nMyTextInput
      = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n
      \ disabled: true\n});\n```\n\nWill result in view instances with an HTML representation
      of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\"
      />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```javascript\nMyTextInput
      = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n
      \ disabled: function(){\n    if (someLogic) {\n      return true;\n    } else
      {\n      return false;\n    }\n  }.property()\n});\n```\n\nUpdates to the the
      property of an attribute binding will result in automatic\nupdate of the  HTML
      attribute in the view's rendered HTML representation.\n\n`attributeBindings`
      is a concatenated property. See `Ember.Object`\ndocumentation for more information
      about concatenated properties.\n\n## Templates\n\nThe HTML contents of a view's
      rendered representation are determined by its\ntemplate. Templates can be any
      function that accepts an optional context\nparameter and returns a string of
      HTML that will be inserted within the\nview's tag. Most typically in Ember this
      function will be a compiled\n`Ember.Handlebars` template.\n\n```javascript\nAView
      = Ember.View.extend({\n  template: Ember.Handlebars.compile('I am the template')\n});\n```\n\nWill
      result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\">I am the template</div>\n```\n\nWithin an Ember application
      is more common to define a Handlebars templates as\npart of a page:\n\n```html\n<script
      type='text/x-handlebars' data-template-name='some-template'>\n  Hello\n</script>\n```\n\nAnd
      associate it by name using a view's `templateName` property:\n\n```javascript\nAView
      = Ember.View.extend({\n  templateName: 'some-template'\n});\n```\n\nUsing a
      value for `templateName` that does not have a Handlebars template\nwith a matching
      `data-template-name` attribute will throw an error.\n\nAssigning a value to
      both `template` and `templateName` properties will throw\nan error.\n\nFor views
      classes that may have a template later defined (e.g. as the block\nportion of
      a `{{view}}` Handlebars helper call in another template or in\na subclass),
      you can provide a `defaultTemplate` property set to compiled\ntemplate function.
      If a template is not later provided for the view instance\nthe `defaultTemplate`
      value will be used:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate:
      Ember.Handlebars.compile('I was the default'),\n  template: null,\n  templateName:
      null\n});\n```\n\nWill result in instances with an HTML representation of:\n\n```html\n<div
      id=\"ember1\" class=\"ember-view\">I was the default</div>\n```\n\nIf a `template`
      or `templateName` is provided it will take precedence over\n`defaultTemplate`:\n\n```javascript\nAView
      = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the
      default')\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile('I
      was the template, not default')\n});\n```\n\nWill result in the following HTML
      representation when rendered:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I
      was the template, not default</div>\n```\n\n## View Context\n\nThe default context
      of the compiled template is the view's controller:\n\n```javascript\nAView =
      Ember.View.extend({\n  template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n});\n\naController
      = Ember.Object.create({\n  firstName: 'Barry',\n  excitedGreeting: function(){\n
      \   return this.get(\"content.firstName\") + \"!!!\"\n  }.property()\n});\n\naView
      = AView.create({\n  controller: aController,\n});\n```\n\nWill result in an
      HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">Hello
      Barry!!!</div>\n```\n\nA context can also be explicitly supplied through the
      view's `context`\nproperty. If the view has neither `context` nor `controller`
      properties, the\n`parentView`'s context will be used.\n\n## Layouts\n\nViews
      can have a secondary template that wraps their main template. Like\nprimary
      templates, layouts can be any function that  accepts an optional\ncontext parameter
      and returns a string of HTML that will be inserted inside\nview's tag. Views
      whose HTML element is self closing (e.g. `<input />`)\ncannot have a layout
      and this property will be ignored.\n\nMost typically in Ember a layout will
      be a compiled `Ember.Handlebars`\ntemplate.\n\nA view's layout can be set directly
      with the `layout` property or reference\nan existing Handlebars template by
      name with the `layoutName` property.\n\nA template used as a layout must contain
      a single use of the Handlebars\n`{{yield}}` helper. The HTML contents of a view's
      rendered `template` will be\ninserted at this location:\n\n```javascript\nAViewWithLayout
      = Ember.View.extend({\n  layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\")\n
      \ template: Ember.Handlebars.compile(\"I got wrapped\"),\n});\n```\n\nWill result
      in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\"
      class=\"ember-view\">\n  <div class=\"my-decorative-class\">\n    I got wrapped\n
      \ </div>\n</div>\n```\n\nSee `Handlebars.helpers.yield` for more information.\n\n##
      Responding to Browser Events\n\nViews can respond to user-initiated events in
      one of three ways: method\nimplementation, through an event manager, and through
      `{{action}}` helper use\nin their template or layout.\n\n### Method Implementation\n\nViews
      can respond to user-initiated events by implementing a method that\nmatches
      the event name. A `jQuery.Event` object will be passed as the\nargument to this
      method.\n\n```javascript\nAView = Ember.View.extend({\n  click: function(event){\n
      \   // will be called when when an instance's\n    // rendered element is clicked\n
      \ }\n});\n```\n\n### Event Managers\n\nViews can define an object as their `eventManager`
      property. This object can\nthen implement methods that match the desired event
      names. Matching events\nthat occur on the view's rendered HTML or the rendered
      HTML of any of its DOM\ndescendants will trigger this method. A `jQuery.Event`
      object will be passed\nas the first argument to the method and an  `Ember.View`
      object as the\nsecond. The `Ember.View` will be the view whose rendered HTML
      was interacted\nwith. This may be the view with the `eventManager` property
      or one of its\ndescendent views.\n\n```javascript\nAView = Ember.View.extend({\n
      \ eventManager: Ember.Object.create({\n    doubleClick: function(event, view){\n
      \     // will be called when when an instance's\n      // rendered element or
      any rendering\n      // of this views's descendent\n      // elements is clicked\n
      \   }\n  })\n});\n```\n\nAn event defined for an event manager takes precedence
      over events of the\nsame name handled through methods on the view.\n\n```javascript\nAView
      = Ember.View.extend({\n  mouseEnter: function(event){\n    // will never trigger.\n
      \ },\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event,
      view){\n      // takes presedence over AView#mouseEnter\n    }\n  })\n});\n```\n\nSimilarly
      a view's event manager will take precedence for events of any views\nrendered
      as a descendent. A method name that matches an event name will not\nbe called
      if the view instance was rendered inside the HTML representation of\na view
      that has an `eventManager` property defined that handles events of the\nname.
      Events not handled by the event manager will still trigger method calls\non
      the descendent.\n\n```javascript\nOuterView = Ember.View.extend({\n  template:
      Ember.Handlebars.compile(\"outer {{#view InnerView}}inner{{/view}} outer\"),\n
      \ eventManager: Ember.Object.create({\n    mouseEnter: function(event, view){\n
      \     // view might be instance of either\n      // OutsideView or InnerView
      depending on\n      // where on the page the user interaction occured\n    }\n
      \ })\n});\n\nInnerView = Ember.View.extend({\n  click: function(event){\n    //
      will be called if rendered inside\n    // an OuterView because OuterView's\n
      \   // eventManager doesn't handle click events\n  },\n  mouseEnter: function(event){\n
      \   // will never be called if rendered inside\n    // an OuterView.\n  }\n});\n```\n\n###
      Handlebars `{{action}}` Helper\n\nSee `Handlebars.helpers.action`.\n\n### Event
      Names\n\nPossible events names for any of the responding approaches described
      above\nare:\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n*
      `touchCancel`\n\nKeyboard events\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse
      events\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n*
      `mouseMove`\n* `focusIn`\n* `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm
      events: \n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5
      drag and drop events: \n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n*
      `drop`\n* `dragEnd`\n\n## Handlebars `{{view}}` Helper\n\nOther `Ember.View`
      instances can be included as part of a view's template by\nusing the `{{view}}`
      Handlebars helper. See `Handlebars.helpers.view` for\nadditional information."
    extends: Ember.Object
    uses:
    - Ember.Evented
classitems:
- file: ../packages/ember-application/lib/system/application.js
  line: 153
  description: ! 'The root DOM element of the Application. This can be specified as
    an

    element or a

    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).


    This is the element that will be passed to the Application''s,

    `eventDispatcher`, which sets up the listeners for event delegation. Every

    view in your application should be a child of the element you specify here.'
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 168
  description: ! 'The `Ember.EventDispatcher` responsible for delegating events to
    this

    application''s views.


    The event dispatcher is created by the application at initialization time

    and sets up event listeners on the DOM element described by the

    application''s `rootElement` property.


    See the documentation for `Ember.EventDispatcher` for more information.'
  itemtype: property
  name: eventDispatcher
  type: Ember.EventDispatcher
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 184
  description: ! "The DOM events for which the event dispatcher should listen.\n\nBy
    default, the application's `Ember.EventDispatcher` listens\nfor a set of standard
    DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's
    `Ember.View`\ninstances.\n\nIf you would like additional events to be delegated
    to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash
    containing the DOM event name as the key and the\ncorresponding view method name
    as the value. For example:\n\n```javascript\nApp = Ember.Application.create({\n
    \ customEvents: {\n    // add support for the loadedmetadata media\n    // player
    event\n    'loadedmetadata': \"loadedMetadata\"\n  }\n});\n```"
  itemtype: property
  name: customEvents
  type: Object
  default: 'null'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 238
  access: private
  tagname: ! 'Build the container for the current application.


    Also register a default application view in case the application

    itself does not.'
  itemtype: method
  name: buildContainer
  return:
    description: the configured container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 255
  access: private
  tagname: ! "If the application has not opted out of routing and has not explicitly\ndefined
    a router, supply a default router for the application author\nto configure.\n\nThis
    allows application developers to do:\n\n```javascript\nApp = Ember.Application.create();\n\nApp.Router.map(function(match)
    {\n  match(\"/\").to(\"index\");\n});\n```"
  itemtype: method
  name: defaultRouter
  return:
    description: the default router
    type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 284
  access: private
  tagname: ! 'Defer Ember readiness until DOM readiness. By default, Ember

    will wait for both DOM readiness and application initialization,

    as well as any deferrals registered by initializers.'
  itemtype: method
  name: deferUntilDOMReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 302
  access: private
  tagname: ! 'Automatically initialize the application once the DOM has

    become ready.


    The initialization itself is deferred using Ember.run.once,

    which ensures that application loading finishes before

    booting.


    If you are asynchronously loading code, you should call

    `deferReadiness()` to defer booting, and then call

    `advanceReadiness()` once all of your code has finished

    loading.'
  itemtype: method
  name: scheduleInitialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 327
  description: ! "Use this to defer readiness until some condition is true.\n\nExample:\n\n```javascript\nApp
    = Ember.Application.create();\nApp.deferReadiness();\n\njQuery.getJSON(\"/auth-token\",
    function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n```\n\nThis
    allows you to perform asynchronous setup logic and defer\nbooting your application
    until the setup has finished.\n\nHowever, if the setup requires a loading UI,
    it might be better\nto use the router for this purpose."
  itemtype: method
  name: deferReadiness
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 355
  itemtype: method
  name: advanceReadiness
  see:
  - ! '{Ember.Application#deferReadiness}'
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 367
  description: ! 'registers a factory for later injection


    Example:


    ```javascript

    App = Ember.Application.create();


    App.Person = Ember.Object.extend({});

    App.Orange = Ember.Object.extend({});

    App.Email  = Ember.Object.extend({});


    App.register(''model:user'', App.Person, {singleton: false });

    App.register(''fruit:favorite'', App.Orange);

    App.register(''communication:main'', App.Email, {singleton: false});

    ```'
  itemtype: method
  name: register
  params:
  - name: type
    description: ''
    type: String
  - name: name
    description: ''
    type: String
  - name: factory
    description: ''
    type: String
  - name: options
    description: (optional)
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 394
  description: ! 'defines an injection or typeInjection


    Example:


    ```javascript

    App.inject(<full_name or type>, <property name>, <full_name>)

    App.inject(''model:user'', ''email'', ''model:email'')

    App.inject(''model'', ''source'', ''source:main'')

    ```'
  itemtype: method
  name: inject
  params:
  - name: factoryNameOrType
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 415
  access: private
  tagname: ! 'Initialize the application. This happens automatically.


    Run any initializers and run the application load hook. These hooks may

    choose to defer readiness. For example, an authentication hook might want

    to defer readiness until the auth token has been retrieved.'
  itemtype: method
  name: initialize
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 454
  access: private
  tagname: ''
  itemtype: method
  name: runInitializers
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 476
  access: private
  tagname: ''
  itemtype: method
  name: didBecomeReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 492
  access: private
  tagname: ! 'Setup up the event dispatcher to receive events on the

    application''s `rootElement` with any registered

    `customEvents`.'
  itemtype: method
  name: setupEventDispatcher
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 508
  access: private
  tagname: Create an event dispatcher for the application's `rootElement`.
  itemtype: method
  name: createEventDispatcher
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 525
  access: private
  tagname: ! 'If the application has a router, use it to route to the current URL,
    and

    trigger a new call to `route` whenever the URL changes.'
  itemtype: property
  name: router
  type: Ember.Router
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 547
  description: ! 'Called when the Application has become ready.

    The call will be delayed until the DOM has become ready.'
  itemtype: event
  name: ready
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 582
  access: private
  tagname: ! "This creates a container with the default Ember naming conventions.\n\nIt
    also configures the container:\n\n* registered views are created every time they
    are looked up (they are\n  not singletons)\n* registered templates are not factories;
    the registered value is\n  returned directly.\n* the router receives the application
    as its `namespace` property\n* all controllers receive the router as their `target`
    and `controllers`\n  properties\n* all controllers receive the application as
    their `namespace` property\n* the application view receives the application controller
    as its\n  `controller` property\n* the application view receives the application
    template as its\n  `defaultTemplate` property"
  itemtype: method
  name: buildContainer
  static: 1
  params:
  - name: namespace
    description: ! "the application to build the\n  container for."
    type: Ember.Application
  return:
    description: the built container
    type: Ember.Container
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-application/lib/system/application.js
  line: 628
  access: private
  tagname: ! "This function defines the default lookup rules for container lookups:\n\n*
    templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the
    application after classifying the name.\n  For example, `controller:post` looks
    up `App.PostController` by default.\n* if the default lookup fails, look for registered
    classes on the container\n\nThis allows the application to register default injections
    in the container\nthat could be overridden by the normal naming convention."
  params:
  - name: namespace
    description: the namespace to look for classes
    type: Ember.Namespace
  return:
    description: the resolved value for a given lookup
    type: Any
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: ../packages/ember-debug/lib/main.js
  line: 28
  description: ! 'Define an assertion that will throw an exception if the condition
    is not

    met. Ember build tools will remove any calls to `Ember.assert()` when

    doing a production build. Example:


    ```javascript

    // Test for truthiness

    Ember.assert(''Must pass a valid object'', obj);

    // Fail unconditionally

    Ember.assert(''This code path should never be run'')

    ```'
  itemtype: method
  name: assert
  params:
  - name: desc
    description: ! "A description of the assertion. This will become\n  the text of
      the Error thrown if the assertion fails."
    type: String
  - name: test
    description: ! "Must be truthy for the assertion to pass. If\n  falsy, an exception
      will be thrown."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 51
  description: ! 'Display a warning with the provided message. Ember build tools will

    remove any calls to `Ember.warn()` when doing a production build.'
  itemtype: method
  name: warn
  params:
  - name: message
    description: A warning to display.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the warning\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 67
  description: ! 'Display a debug notice. Ember build tools will remove any calls
    to

    `Ember.debug()` when doing a production build.


    ```javascript

    Ember.debug("I''m a debug notice!");

    ```'
  itemtype: method
  name: debug
  params:
  - name: message
    description: A debug message to display.
    type: String
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 82
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only). Ember build tools will remove any calls to

    `Ember.deprecate()` when doing a production build.'
  itemtype: method
  name: deprecate
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: test
    description: ! "An optional boolean. If falsy, the deprecation\n  will be displayed."
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-debug/lib/main.js
  line: 128
  description: ! 'Display a deprecation warning with the provided message and a stack
    trace

    (Chrome and Firefox only) when the wrapped method is called.


    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though

    no warnings will be shown in production.'
  itemtype: method
  name: deprecateFunc
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: func
    description: The function to be deprecated.
    type: Function
  class: Ember
  module: ember
  submodule: ember-debug
- file: ../packages/ember-handlebars/lib/controls/button.js
  line: 27
  access: private
  tagname: ! 'Overrides `TargetActionSupport`''s `targetObject` computed

    property to use Handlebars-specific path resolution.'
  itemtype: property
  name: targetObject
  class: Ember.Button
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 264
  description: ! "tagName: 'select',\n  classNames: ['ember-select'],\n  defaultTemplate:
    precompileTemplate('{{#if view.prompt}}<option value=\"\">{{view.prompt}}</option>{{/if}}{{#each
    view.content}}{{view Ember.SelectOption contentBinding=\"this\"}}{{/each}}'),\n
    \ attributeBindings: ['multiple', 'disabled', 'tabindex'],\n/**\n    The `multiple`
    attribute of the select element. Indicates whether multiple\n    options can be
    selected."
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 283
  description: ! "The list of options.\n\nIf `optionLabelPath` and `optionValuePath`
    are not overridden, this should\nbe a list of strings, which will serve simultaneously
    as labels and values.\n\nOtherwise, this should be a list of objects. For instance:\n\n```javascript\nEmber.Select.create({\n
    \ content: Ember.A([\n      { id: 1, firstName: 'Yehuda' },\n      { id: 2, firstName:
    'Tom' }\n    ]),\n  optionLabelPath: 'content.firstName',\n  optionValuePath:
    'content.id'\n});\n```"
  itemtype: property
  name: content
  type: Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 308
  description: ! 'When `multiple` is `false`, the element of `content` that is currently

    selected, if any.


    When `multiple` is `true`, an array of such elements.'
  itemtype: property
  name: selection
  type: Object or Array
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 320
  description: ! 'In single selection mode (when `multiple` is `false`), value can
    be used to

    get the current selection''s value or set the selection by it''s value.


    It is not currently supported in multiple selection mode.'
  itemtype: property
  name: value
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 336
  description: ! 'If given, a top-most dummy option will be rendered to serve as a
    user

    prompt.'
  itemtype: property
  name: prompt
  type: String
  default: 'null'
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 346
  description: The path of the option labels. See `content`.
  itemtype: property
  name: optionLabelPath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/select.js
  line: 355
  description: The path of the option values. See `content`.
  itemtype: property
  name: optionValuePath
  type: String
  default: ! '''content'''
  class: Ember.Select
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 52
  description: ! "classNames: ['ember-text-field'],\n  tagName: \"input\",\n  attributeBindings:
    ['type', 'value', 'size', 'pattern'],\n/**\n    The `value` attribute of the input
    element. As the user inputs text, this\n    property is updated live."
  itemtype: property
  name: value
  type: String
  default: ! '""'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 68
  description: The `type` attribute of the input element.
  itemtype: property
  name: type
  type: String
  default: ! '"text"'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 77
  description: The `size` of the text field in characters.
  itemtype: property
  name: size
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 86
  description: The `pattern` the pattern attribute of input element.
  itemtype: property
  name: pattern
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 95
  description: ! 'The action to be sent when the user presses the return key.


    This is similar to the `{{action}}` helper, but is fired when

    the user presses the return key when editing a text field, and sends

    the value of the field as the context.'
  itemtype: property
  name: action
  type: String
  default: 'null'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/controls/text_field.js
  line: 108
  description: ! 'Whether they `keyUp` event that triggers an `action` to be sent
    continues

    propagating to other views.


    By default, when the user presses the return key on their keyboard and

    the text field has an `action` set, the action will be sent to the view''s

    controller and the key event will stop propagating.


    If you would like parent views to receive the `keyUp` event even after an

    action has been dispatched, set `bubbles` to true.'
  itemtype: property
  name: bubbles
  type: Boolean
  default: 'false'
  class: Ember.TextField
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 135
  access: private
  tagname: ! '''_triageMustache'' is used internally select between a binding and
    helper for

    the given context. Until this point, it would be hard to determine if the

    mustache is a property reference or a regular helper reference. This triage

    helper resolves that.


    This would not be typically invoked by directly.'
  itemtype: method
  name: _triageMustache
  params:
  - name: property
    description: Property/helperID to triage
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 161
  access: private
  tagname: ! '`bind` can be used to display a value, then update that value if it

    changes. For example, if you wanted to print the `title` property of

    `content`:


    ```handlebars

    {{bind "content.title"}}

    ```


    This will return the `title` property as a string, then create a new observer

    at the specified path. If it changes, it will update the value in DOM. Note

    that if you need to support IE7 and IE8 you must modify the model objects

    properties using `Ember.get()` and `Ember.set()` for this to work as it

    relies on Ember''s KVO system. For all other browsers this will be handled for

    you automatically.'
  itemtype: method
  name: bind
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 199
  access: private
  tagname: ! "Use the `boundIf` helper to create a conditional that re-evaluates\nwhenever
    the truthiness of the bound value changes.\n\n```handlebars\n{{#boundIf \"content.shouldDisplayTitle\"}}\n
    \ {{content.title}}\n{{/boundIf}}\n```"
  itemtype: method
  name: boundIf
  params:
  - name: property
    description: Property to bind
    type: String
  - name: fn
    description: Context to provide for rendering
    type: Function
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 233
  itemtype: method
  name: with
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 279
  description: See `boundIf`
  itemtype: method
  name: if
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 295
  itemtype: method
  name: unless
  params:
  - name: context
    description: ''
    type: Function
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 314
  description: ! "`bindAttr` allows you to create a binding between DOM element attributes
    and\nEmber objects. For example:\n\n```handlebars\n<img {{bindAttr src=\"imageUrl\"
    alt=\"imageTitle\"}}>\n```\n\nThe above handlebars template will fill the `<img>`'s
    `src` attribute will\nthe value of the property referenced with `\"imageUrl\"`
    and its `alt`\nattribute with the value of the property referenced with `\"imageTitle\"`.\n\nIf
    the rendering context of this template is the following object:\n\n```javascript\n{\n
    \ imageUrl: 'http://lolcats.info/haz-a-funny',\n  imageTitle: 'A humorous image
    of a cat'\n}\n```\n\nThe resulting HTML output will be:\n\n```html\n<img src=\"http://lolcats.info/haz-a-funny\"
    alt=\"A humorous image of a cat\">\n```\n\n`bindAttr` cannot redeclare existing
    DOM element attributes. The use of `src`\nin the following `bindAttr` example
    will be ignored and the hard coded value\nof `src=\"/failwhale.gif\"` will take
    precedence:\n\n```handlebars\n<img src=\"/failwhale.gif\" {{bindAttr src=\"imageUrl\"
    alt=\"imageTitle\"}}>\n```\n\n### `bindAttr` and the `class` attribute\n\n`bindAttr`
    supports a special syntax for handling a number of cases unique\nto the `class`
    DOM element attribute. The `class` attribute combines\nmultiple discreet values
    into a single attribute as a space-delimited\nlist of strings. Each string can
    be:\n\n* a string return value of an object's property.\n* a boolean return value
    of an object's property\n* a hard-coded value\n\nA string return value works identically
    to other uses of `bindAttr`. The\nreturn value of the property will become the
    value of the attribute. For\nexample, the following view and template:\n\n```javascript\n
    \ AView = Ember.View.extend({\n    someProperty: function(){\n      return \"aValue\";\n
    \   }.property()\n  })\n```\n\n```handlebars\n<img {{bindAttr class=\"view.someProperty}}>\n```\n\nResult
    in the following rendered output:\n\n```html \n<img class=\"aValue\">\n```\n\nA
    boolean return value will insert a specified class name if the property\nreturns
    `true` and remove the class name if the property returns `false`.\n\nA class name
    is provided via the syntax \n`somePropertyName:class-name-if-true`.\n\n```javascript\nAView
    = Ember.View.extend({\n  someBool: true\n})\n```\n\n```handlebars\n<img {{bindAttr
    class=\"view.someBool:class-name-if-true\"}}>\n```\n\nResult in the following
    rendered output:\n\n```html\n<img class=\"class-name-if-true\">\n```\n\nAn additional
    section of the binding can be provided if you want to\nreplace the existing class
    instead of removing it when the boolean\nvalue changes:\n\n```handlebars\n<img
    {{bindAttr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n```\n\nA
    hard-coded value can be used by prepending `:` to the desired\nclass name: `:class-name-to-always-apply`.\n\n```handlebars\n<img
    {{bindAttr class=\":class-name-to-always-apply\"}}>\n```\n\nResults in the following
    rendered output:\n\n```html\n<img class=\":class-name-to-always-apply\">\n```\n\nAll
    three strategies - string return value, boolean return value, and\nhard-coded
    value – can be combined in a single declaration:\n\n```handlebars\n<img {{bindAttr
    class=\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"}}>\n```"
  itemtype: method
  name: bindAttr
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/binding.js
  line: 525
  access: private
  tagname: ! 'Helper that, given a space-separated string of property paths and a
    context,

    returns an array of class names. Calling this method also has the side

    effect of setting up observers at those property paths, such that if they

    change, the correct class name will be reapplied to the DOM element.


    For example, if you pass the string "fooBar", it will first look up the

    "fooBar" value of the context. If that value is true, it will add the

    "foo-bar" class to the current element (i.e., the dasherized form of

    "fooBar"). If the value is a string, it will add that string as the class.

    Otherwise, it will not add any new class name.'
  itemtype: method
  name: bindClasses
  params:
  - name: context
    description: The context from which to lookup properties
    type: Ember.Object
  - name: classBindings
    description: ! "A string, space-separated, of class bindings \n  to use"
    type: String
  - name: view
    description: ! "The view in which observers should look for the \n  element to
      update"
    type: Ember.View
  - name: bindAttrId
    description: Optional bindAttr id used to lookup elements
    type: Srting
  return:
    description: An array of class names to add
    type: Array
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/collection.js
  line: 14
  description: ! "`{{collection}}` is a `Ember.Handlebars` helper for adding instances
    of\n`Ember.CollectionView` to a template. See `Ember.CollectionView` for\nadditional
    information on how a `CollectionView` functions.\n\n`{{collection}}`'s primary
    use is as a block helper with a `contentBinding`\noption pointing towards an `Ember.Array`-compatible
    object. An `Ember.View`\ninstance will be created for each item in its `content`
    property. Each view\nwill have its own `content` property set to the appropriate
    item in the\ncollection.\n\nThe provided block will be applied as the template
    for each item's view.\n\nGiven an empty `<body>` the following template:\n\n```handlebars\n{{#collection
    contentBinding=\"App.items\"}}\n  Hi {{view.content.name}}\n{{/collection}}\n```\n\nAnd
    the following application code\n\n```javascript\nApp = Ember.Application.create()\nApp.items
    = [\n  Ember.Object.create({name: 'Dave'}),\n  Ember.Object.create({name: 'Mary'}),\n
    \ Ember.Object.create({name: 'Sara'})\n]\n```\n\nWill result in the HTML structure
    below\n\n```html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Hi Dave</div>\n
    \ <div class=\"ember-view\">Hi Mary</div>\n  <div class=\"ember-view\">Hi Sara</div>\n</div>\n```\n\n###
    Blockless Use\n\nIf you provide an `itemViewClass` option that has its own `template`
    you can\nomit the block.\n\nThe following template:\n\n```handlebars\n{{collection
    contentBinding=\"App.items\" itemViewClass=\"App.AnItemView\"}}\n```\n\nAnd application
    code\n\n```javascript\nApp = Ember.Application.create();\nApp.items = [\n  Ember.Object.create({name:
    'Dave'}),\n  Ember.Object.create({name: 'Mary'}),\n  Ember.Object.create({name:
    'Sara'})\n];\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings
    {{view.content.name}}\")\n});\n```\n\nWill result in the HTML structure below\n\n```html\n<div
    class=\"ember-view\">\n  <div class=\"ember-view\">Greetings Dave</div>\n  <div
    class=\"ember-view\">Greetings Mary</div>\n  <div class=\"ember-view\">Greetings
    Sara</div>\n</div>\n```\n\n### Specifying a CollectionView subclass\n\nBy default
    the `{{collection}}` helper will create an instance of\n`Ember.CollectionView`.
    You can supply a `Ember.CollectionView` subclass to\nthe helper by passing it
    as the first argument:\n\n```handlebars\n{{#collection App.MyCustomCollectionClass
    contentBinding=\"App.items\"}}\n  Hi {{view.content.name}}\n{{/collection}}\n```\n\n###
    Forwarded `item.*`-named Options\n\nAs with the `{{view}}`, helper options passed
    to the `{{collection}}` will be\nset on the resulting `Ember.CollectionView` as
    properties. Additionally,\noptions prefixed with `item` will be applied to the
    views rendered for each\nitem (note the camelcasing):\n\n```handlebars\n{{#collection
    contentBinding=\"App.items\"\n              itemTagName=\"p\"\n              itemClassNames=\"greeting\"}}\n
    \ Howdy {{view.content.name}}\n{{/collection}}\n```\n\nWill result in the following
    HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <p class=\"ember-view
    greeting\">Howdy Dave</p>\n  <p class=\"ember-view greeting\">Howdy Mary</p>\n
    \ <p class=\"ember-view greeting\">Howdy Sara</p>\n</div>\n```"
  itemtype: method
  name: collection
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  deprecated: true
  deprecationMessage: Use `{{each}}` helper instead.
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 12
  description: ! '`log` allows you to output the value of a value in the current rendering

    context.


    ```handlebars

    {{log myVariable}}

    ```'
  itemtype: method
  name: log
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/debug.js
  line: 33
  description: ! 'Execute the `debugger` statement in the current context.


    ```handlebars

    {{debugger}}

    ```'
  itemtype: method
  name: debugger
  params:
  - name: property
    description: ''
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/each.js
  line: 183
  description: ! "The `{{#each}}` helper loops over elements in a collection, rendering
    its\nblock once for each item. It is an extension of the base Handlebars `{{#each}}`\nhelper:\n\n```javascript\nDevelopers
    = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n```\n\n```handlebars\n{{#each
    Developers}}\n  {{name}}\n{{/each}}\n```\n\n`{{each}}` supports an alternative
    syntax with element naming:\n\n```handlebars\n{{#each person in Developers}}\n
    \ {{person.name}}\n{{/each}}\n```\n\nWhen looping over objects that do not have
    properties, `{{this}}` can be used\nto render the object:\n\n```javascript\nDeveloperNames
    = ['Yehuda', 'Tom', 'Paul']\n```\n\n```handlebars\n{{#each DeveloperNames}}\n
    \ {{this}}\n{{/each}}\n```\n### {{else}} condition\n`{{#each}}` can have a matching
    `{{else}}`. The contents of this block will render\nif the collection is empty.\n\n```\n{{#each
    person in Developers}}\n  {{person.name}}\n{{else}}\n  <p>Sorry, nobody is available
    for this task.</p>\n{{/each}}\n```\n### Specifying a View class for items\nIf
    you provide an `itemViewClass` option that references a view class\nwith its own
    `template` you can omit the block.\n\nThe following template:\n\n```handlebars\n{{#view
    App.MyView }}\n  {{each view.items itemViewClass=\"App.AnItemView\"}} \n{{/view}}\n```\n\nAnd
    application code\n\n```javascript\nApp = Ember.Application.create({\n  MyView:
    Ember.View.extend({\n    items: [\n      Ember.Object.create({name: 'Dave'}),\n
    \     Ember.Object.create({name: 'Mary'}),\n      Ember.Object.create({name: 'Sara'})\n
    \   ]\n  })\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings
    {{name}}\")\n});\n```\n\nWill result in the HTML structure below\n\n```html\n<div
    class=\"ember-view\">\n  <div class=\"ember-view\">Greetings Dave</div>\n  <div
    class=\"ember-view\">Greetings Mary</div>\n  <div class=\"ember-view\">Greetings
    Sara</div>\n</div>\n```\n\n### Representing each item with a Controller.\nBy default
    the controller lookup within an `{{#each}}` block will be\nthe controller of the
    template where the `{{#each}}` was used. If each\nitem needs to be presented by
    a custom controller you can provide a\n`itemController` option which references
    a controller by lookup name.\nEach item in the loop will be wrapped in an instance
    of this controller\nand the item itself will be set to the `content` property
    of that controller.\n\nThis is useful in cases where properties of model objects
    need transformation\nor synthesis for display:\n\n```javascript\nApp.DeveloperController
    = Ember.ObjectController.extend({\n  isAvailableForHire: function(){\n    return
    !this.get('content.isEmployed') && this.get('content.isSeekingWork');\n  }.property('isEmployed',
    'isSeekingWork')\n})\n```\n\n```handlebars\n{{#each person in Developers itemController=\"developer\"}}\n
    \ {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}\n{{/each}}\n```"
  itemtype: method
  name: each
  params:
  - name: name
    description: name for item (used with `in`)
    type: String
    optional: true
  - name: path
    description: path
    type: String
  - name: options
    description: Handlebars key/value pairs of options
    type: Object
    optional: true
    props:
    - name: itemViewClass
      description: a path to a view class used for each item
      type: String
      optional: true
    - name: itemController
      description: name of a controller to be created for each item
      type: String
      optional: true
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/template.js
  line: 8
  description: ! "`template` allows you to render a template from inside another template.\nThis
    allows you to re-use the same template in multiple places. For example:\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"logged_in_user\">\n  {{#with loggedInUser}}\n
    \   Last Login: {{lastLogin}}\n    User Info: {{template \"user_info\"}}\n  {{/with}}\n</script>\n```\n\n```html\n<script
    type=\"text/x-handlebars\" data-template-name=\"user_info\">\n  Name: <em>{{name}}</em>\n
    \ Karma: <em>{{karma}}</em>\n</script>\n```\n\nThis helper looks for templates
    in the global `Ember.TEMPLATES` hash. If you\nadd `<script>` tags to your page
    with the `data-template-name` attribute set,\nthey will be compiled and placed
    in this hash automatically.\n\nYou can also manually register templates by adding
    them to the hash:\n\n```javascript\nEmber.TEMPLATES[\"my_cool_template\"] = Ember.Handlebars.compile('<b>{{user}}</b>');\n```"
  itemtype: method
  name: template
  params:
  - name: templateName
    description: the template to render
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/unbound.js
  line: 12
  description: ! '`unbound` allows you to output a property without binding. *Important:*
    The

    output will not be updated if the property changes. Use with caution.


    ```handlebars

    <div>{{unbound somePropertyThatDoesntChange}}</div>

    ```


    `unbound` can also be used in conjunction with a bound helper to

    render it in its unbound form:


    ```handlebars

    <div>{{unbound helperName somePropertyThatDoesntChange}}</div>

    ```'
  itemtype: method
  name: unbound
  params:
  - name: property
    description: ''
    type: String
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/view.js
  line: 150
  description: ! "`{{view}}` inserts a new instance of `Ember.View` into a template
    passing its\noptions to the `Ember.View`'s `create` method and using the supplied
    block as\nthe view's own template.\n\nAn empty `<body>` and the following template:\n\n```handlebars\nA
    span:\n{{#view tagName=\"span\"}}\n  hello.\n{{/view}}\n```\n\nWill result in
    HTML structure:\n\n```html\n<body>\n  <!-- Note: the handlebars template script\n
    \      also results in a rendered Ember.View\n       which is the outer <div>
    here -->\n\n  <div class=\"ember-view\">\n    A span:\n    <span id=\"ember1\"
    class=\"ember-view\">\n      Hello.\n    </span>\n  </div>\n</body>\n```\n\n###
    `parentView` setting\n\nThe `parentView` property of the new `Ember.View` instance
    created through\n`{{view}}` will be set to the `Ember.View` instance of the template
    where\n`{{view}}` was called.\n\n```javascript\naView = Ember.View.create({\n
    \ template: Ember.Handlebars.compile(\"{{#view}} my parent: {{parentView.elementId}}
    {{/view}}\")\n});\n\naView.appendTo('body');\n```\n\nWill result in HTML structure:\n\n```html\n<div
    id=\"ember1\" class=\"ember-view\">\n  <div id=\"ember2\" class=\"ember-view\">\n
    \   my parent: ember1\n  </div>\n</div>\n```\n\n### Setting CSS id and class attributes\n\nThe
    HTML `id` attribute can be set on the `{{view}}`'s resulting element with\nthe
    `id` option. This option will _not_ be passed to `Ember.View.create`.\n\n```handlebars\n{{#view
    tagName=\"span\" id=\"a-custom-id\"}}\n  hello.\n{{/view}}\n```\n\nResults in
    the following HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <span
    id=\"a-custom-id\" class=\"ember-view\">\n    hello.\n  </span>\n</div>\n```\n\nThe
    HTML `class` attribute can be set on the `{{view}}`'s resulting element\nwith
    the `class` or `classNameBindings` options. The `class` option will\ndirectly
    set the CSS `class` attribute and will not be passed to\n`Ember.View.create`.
    `classNameBindings` will be passed to `create` and use\n`Ember.View`'s class name
    binding functionality:\n\n```handlebars\n{{#view tagName=\"span\" class=\"a-custom-class\"}}\n
    \ hello.\n{{/view}}\n```\n\nResults in the following HTML structure:\n\n```html\n<div
    class=\"ember-view\">\n  <span id=\"ember2\" class=\"ember-view a-custom-class\">\n
    \   hello.\n  </span>\n</div>\n```\n\n### Supplying a different view class\n\n`{{view}}`
    can take an optional first argument before its supplied options to\nspecify a
    path to a custom view class.\n\n```handlebars\n{{#view \"MyApp.CustomView\"}}\n
    \ hello.\n{{/view}}\n```\n\nThe first argument can also be a relative path. Ember
    will search for the\nview class starting at the `Ember.View` of the template where
    `{{view}}` was\nused as the root object:\n\n```javascript\nMyApp = Ember.Application.create({});\nMyApp.OuterView
    = Ember.View.extend({\n  innerViewClass: Ember.View.extend({\n    classNames:
    ['a-custom-view-class-as-property']\n  }),\n  template: Ember.Handlebars.compile('{{#view
    \"innerViewClass\"}} hi {{/view}}')\n});\n\nMyApp.OuterView.create().appendTo('body');\n```\n\nWill
    result in the following HTML:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n
    \ <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\n    hi\n
    \ </div>\n</div>\n```\n\n### Blockless use\n\nIf you supply a custom `Ember.View`
    subclass that specifies its own template\nor provide a `templateName` option to
    `{{view}}` it can be used without\nsupplying a block. Attempts to use both a `templateName`
    option and supply a\nblock will throw an error.\n\n```handlebars\n{{view \"MyApp.ViewWithATemplateDefined\"}}\n```\n\n###
    `viewName` property\n\nYou can supply a `viewName` option to `{{view}}`. The `Ember.View`
    instance\nwill be referenced as a property of its parent view by this name.\n\n```javascript\naView
    = Ember.View.create({\n  template: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}}
    hi {{/view}}')\n});\n\naView.appendTo('body');\naView.get('aChildByName') // the
    instance of Ember.View created by {{view}} helper\n```"
  itemtype: method
  name: view
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/helpers/yield.js
  line: 8
  description: ! "When used in a Handlebars template that is assigned to an `Ember.View`\ninstance's
    `layout` property Ember will render the layout template first,\ninserting the
    view's own rendered output at the `{{yield}}` location.\n\nAn empty `<body>` and
    the following application code:\n\n```javascript\nAView = Ember.View.extend({\n
    \ classNames: ['a-view-with-layout'],\n  layout: Ember.Handlebars.compile('<div
    class=\"wrapper\">{{yield}}</div>'),\n  template: Ember.Handlebars.compile('<span>I
    am wrapped</span>')\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill
    result in the following HTML output:\n\n```html\n<body>\n  <div class='ember-view
    a-view-with-layout'>\n    <div class=\"wrapper\">\n      <span>I am wrapped</span>\n
    \   </div>\n  </div>\n</body>\n```\n\nThe `yield` helper cannot be used outside
    of a template assigned to an\n`Ember.View`'s `layout` property and will throw
    an error if attempted.\n\n```javascript\nBView = Ember.View.extend({\n  classNames:
    ['a-view-with-layout'],\n  template: Ember.Handlebars.compile('{{yield}}')\n});\n\nbView
    = BView.create();\nbView.appendTo('body');\n\n// throws\n// Uncaught Error: assertion
    failed: You called yield in a template that was not a layout\n```"
  itemtype: method
  name: yield
  params:
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 147
  description: ! 'The function used to determine if the `displayTemplate` or

    `inverseTemplate` should be rendered. This should be a function that takes

    a value and returns a Boolean.'
  itemtype: property
  name: shouldDisplayFunc
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 158
  description: ! 'Whether the template rendered by this view gets passed the context
    object

    of its parent template, or gets passed the value of retrieving `path`

    from the `pathRoot`.


    For example, this is true when using the `{{#if}}` helper, because the

    template inside the helper should look up properties relative to the same

    object as outside the block. This would be `false` when used with `{{#with

    foo}}` because the template should receive the object found by evaluating

    `foo`.'
  itemtype: property
  name: preserveContext
  type: Boolean
  default: 'false'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 175
  description: ! 'If `preserveContext` is true, this is the object that will be used

    to render the template.'
  itemtype: property
  name: previousContext
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 184
  description: The template to render when `shouldDisplayFunc` evaluates to `true`.
  itemtype: property
  name: displayTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 193
  description: The template to render when `shouldDisplayFunc` evaluates to `false`.
  itemtype: property
  name: inverseTemplate
  type: Function
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 203
  description: ! 'The path to look up on `pathRoot` that is passed to

    `shouldDisplayFunc` to determine which template to render.


    In addition, if `preserveContext` is `false,` the object at this path will

    be passed to the template when rendering.'
  itemtype: property
  name: path
  type: String
  default: 'null'
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 216
  description: ! 'The object from which the `path` will be looked up. Sometimes this
    is the

    same as the `previousContext`, but in cases where this view has been

    generated for paths that start with a keyword such as `view` or

    `controller`, the path root will be that resolved object.'
  itemtype: property
  name: pathRoot
  type: Object
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/views/handlebars_bound_view.js
  line: 251
  description: ! 'Determines which template to invoke, sets up the correct state based
    on

    that logic, then invokes the default `Ember.View` `render` implementation.


    This method will first look up the `path` key on `pathRoot`,

    then pass that value to the `shouldDisplayFunc` function. If that returns

    `true,` the `displayTemplate` function will be rendered to DOM. Otherwise,

    `inverseTemplate`, if specified, will be rendered.


    For example, if this `Ember._HandlebarsBoundView` represented the `{{#with

    foo}}` helper, it would look up the `foo` property of its context, and

    `shouldDisplayFunc` would always return true. The object found by looking

    up `foo` would be passed to `displayTemplate`.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember._HandlebarsBoundView
  module: ember
  submodule: ember-handlebars
  namespace: Ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 5
  access: private
  tagname: ! 'If a path starts with a reserved keyword, returns the root

    that should be used.'
  itemtype: method
  name: normalizePath
  params:
  - name: root
    description: ''
    type: Object
  - name: path
    description: ''
    type: String
  - name: data
    description: ''
    type: Hash
  class: Ember
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 48
  description: ! 'Lookup both on root and on window. If the path starts with

    a keyword, the corresponding object will be looked up in the

    template''s data hash and used to resolve the path.'
  itemtype: method
  name: get
  params:
  - name: root
    description: The object to look up the property on
    type: Object
  - name: path
    description: The path to be lookedup
    type: String
  - name: options
    description: The template's option hash
    type: Object
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 116
  access: private
  tagname: ! 'Registers a helper in Handlebars that will be called if no property
    with the

    given name can be found on the current context object, and no helper with

    that name is registered.


    This throws an exception with a more helpful error message so the user can

    track down where the problem is happening.'
  itemtype: method
  name: helperMissing
  params:
  - name: path
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 141
  description: ! "Register a bound handlebars helper. Bound helpers behave similarly
    to regular\nhandlebars helpers, with the added ability to re-render when the underlying
    data\nchanges.\n\n## Simple example\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalize',
    function(value) {\n  return value.toUpperCase();\n});\n```\n\nThe above bound
    helper can be used inside of templates as follows:\n\n```handlebars\n{{capitalize
    name}}\n```\n\nIn this case, when the `name` property of the template's context
    changes,\nthe rendered value of the helper will update to reflect this change.\n\n##
    Example with options\n\nLike normal handlebars helpers, bound helpers have access
    to the options\npassed into the helper call.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('repeat',
    function(value, options) {\n  var count = options.hash.count;\n  var a = [];\n
    \ while(a.length < count){\n      a.push(value);\n  }\n  return a.join('');\n});\n```\n\nThis
    helper could be used in a template as follows:\n\n```handlebars\n{{repeat text
    count=3}}\n```\n\n## Example with bound options\n\nBound hash options are also
    supported. Example: \n\n```handlebars\n{{repeat text countBinding=\"numRepeats\"}}\n```\n\nIn
    this example, count will be bound to the value of\nthe `numRepeats` property on
    the context. If that property\nchanges, the helper will be re-rendered.\n\n##
    Example with extra dependencies\n\nThe `Ember.Handlebars.registerBoundHelper`
    method takes a variable length\nthird parameter which indicates extra dependencies
    on the passed in value.\nThis allows the handlebars helper to update when these
    dependencies change.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalizeName',
    function(value) {\n  return value.get('name').toUpperCase();\n}, 'name');\n```\n\n##
    Example with multiple bound properties\n\n`Ember.Handlebars.registerBoundHelper`
    supports binding to\nmultiple properties, e.g.:\n\n```javascript\nEmber.Handlebars.registerBoundHelper('concatenate',
    function() {\n  var values = arguments[arguments.length - 1];\n  return values.join('||');\n});\n```\n\nWhich
    allows for template syntax such as {{concatenate prop1 prop2}} or\n{{concatenate
    prop1 prop2 prop3}}. If any of the properties change,\nthe helpr will re-render.
    \ Note that dependency keys cannot be\nusing in conjunction with multi-property
    helpers, since it is ambiguous\nwhich property the dependent keys would belong
    to. \n\n## Use with unbound helper\n\nThe {{unbound}} helper can be used with
    bound helper invocations \nto render them in their unbound form, e.g.\n\n```handlebars\n{{unbound
    capitalize name}} \n```\n\nIn this example, if the name property changes, the
    helper\nwill not re-render."
  itemtype: method
  name: registerBoundHelper
  params:
  - name: name
    description: ''
    type: String
  - name: function
    description: ''
    type: Function
  - name: dependentKeys
    description: ''
    type: String
    multiple: true
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 317
  access: private
  tagname: Renders the unbound form of an otherwise bound helper function.
  params:
  - name: fn
    description: ''
    type: Function
  - name: context
    description: ''
    type: Object
  - name: normalizedProperties
    description: ''
    type: Array
  - name: options
    description: ''
    type: String
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 379
  access: private
  tagname: ! 'An observer function used with bound helpers which

    will schedule a re-render of the _SimpleHandlebarsView

    connected with the helper.'
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 390
  access: private
  tagname: Renders the unbound form of an otherwise bound helper function.
  params:
  - name: fn
    description: ''
    type: Function
  - name: context
    description: ''
    type: Object
  - name: normalizedProperties
    description: ''
    type: Array
  - name: options
    description: ''
    type: String
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/ext.js
  line: 416
  access: private
  tagname: ! 'Overrides Handlebars.template so that we can distinguish

    user-created, top-level templates from inner contexts.'
  itemtype: method
  name: template
  params:
  - name: template
    description: spec
    type: String
  class: Ember.Handlebars
  module: ember
- file: ../packages/ember-handlebars/lib/loader.js
  line: 10
  access: private
  tagname: ! 'Find templates stored in the head tag as script tags and make them available

    to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run

    as as jQuery DOM-ready callback.


    Script tags with `text/x-handlebars` will be compiled

    with Ember''s Handlebars and are suitable for use as a view''s template.

    Those with type `text/x-raw-handlebars` will be compiled with regular

    Handlebars and are suitable for use in views'' computed properties.'
  itemtype: method
  name: bootstrap
  static: 1
  params:
  - name: ctx
    description: ''
  class: Ember.Handlebars
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-handlebars/lib/string.js
  line: 1
  itemtype: method
  name: htmlSafe
  static: 1
  class: Ember.String
  module: ember
- file: ../packages/ember-handlebars/lib/string.js
  line: 14
  description: See {{#crossLink "Ember.String/htmlSafe"}}{{/crossLink}}
  itemtype: method
  name: htmlSafe
  class: String
  module: ember
- file: ../packages/ember-metal/lib/accessors.js
  line: 25
  description: ! "Gets the value of a property on an object. If the property is computed,\nthe
    function will be invoked. If the property is not defined but the\nobject implements
    the `unknownProperty` method then that will be invoked.\n\nIf you plan to run
    on IE8 and older browsers then you should use this\nmethod anytime you want to
    retrieve a property on an object that you don't\nknow for sure is private. (Properties
    beginning with an underscore '_' \nare considered private.)\n\nOn all newer browsers,
    you only need to use this method to retrieve\nproperties if the property might
    not be defined on the object and you want\nto respect the `unknownProperty` handler.
    Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`,
    this method will throw\nan error."
  itemtype: method
  name: get
  params:
  - name: obj
    description: The object to retrieve from.
    type: Object
  - name: keyName
    description: The property key to retrieve
    type: String
  return:
    description: the property value or `null`.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 86
  description: ! "Sets the value of a property on an object, respecting computed properties\nand
    notifying observers and other listeners of the change. If the\nproperty is not
    defined but the object implements the `unknownProperty`\nmethod then that will
    be invoked as well.\n\nIf you plan to run on IE8 and older browsers then you should
    use this\nmethod anytime you want to set a property on an object that you don't\nknow
    for sure is private. (Properties beginning with an underscore '_' \nare considered
    private.)\n\nOn all newer browsers, you only need to use this method to set\nproperties
    if the property might not be defined on the object and you want\nto respect the
    `unknownProperty` handler. Otherwise you can ignore this\nmethod."
  itemtype: method
  name: set
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  return:
    description: the passed value.
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 251
  access: private
  tagname: ! 'Normalizes a target/path pair to reflect that actual target/path that
    should

    be observed, etc. This takes into account passing in global property

    paths (i.e. a path beginning with a captial letter not defined on the

    target) and * separators.'
  itemtype: method
  name: normalizeTuple
  params:
  - name: target
    description: The current target. May be `null`.
    type: Object
  - name: path
    description: A path on the target or a global property path.
    type: String
  return:
    description: a temporary array with the normalized target/path pair.
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 283
  description: ! 'Error-tolerant form of `Ember.set`. Will not blow up if any part
    of the

    chain is `undefined`, `null`, or destroyed.


    This is primarily used when syncing bindings, which may try to update after

    an object has been destroyed.'
  itemtype: method
  name: trySet
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/accessors.js
  line: 301
  description: ! 'Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)

    instead of local (`foo.bar.baz`).'
  itemtype: method
  name: isGlobalPath
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  return:
    description: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 16
  description: ! 'Debug parameter you can turn on. This will log all bindings that
    fire to

    the console. This should be disabled in production code. Note that you

    can also enable this from the console or temporarily.'
  itemtype: property
  name: LOG_BINDINGS
  type: Boolean
  default: 'false'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 55
  description: This copies the Binding so it can be connected to another object.
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 71
  description: ! 'This will set `from` property path to the specified value. It will
    not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you `connect()` the binding. It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: from
  params:
  - name: propertyPath
    description: the property path to connect to
    type: String
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 89
  description: ! 'This will set the `to` property path to the specified value. It
    will not

    attempt to resolve this property path to an actual object until you

    connect the binding.


    The binding will search for the property path starting at the root object

    you pass when you `connect()` the binding. It follows the same rules as

    `get()` - see that method for more information.'
  itemtype: method
  name: to
  params:
  - name: propertyPath
    description: A property path or tuple
    type: String|Tuple
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 107
  description: ! 'Configures the binding as one way. A one-way binding will relay
    changes

    on the `from` side to the `to` side, but not the other way around. This

    means that if you change the `to` side directly, the `from` side may have

    a different value.'
  itemtype: method
  name: oneWay
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 130
  description: ! 'Attempts to connect this binding instance so that it can receive
    and relay

    changes. This method will raise an exception if you have not set the

    from/to properties yet.'
  itemtype: method
  name: connect
  params:
  - name: obj
    description: The root object for this binding.
    type: Object
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 156
  description: ! 'Disconnects the binding instance. Changes will no longer be relayed.
    You

    will not usually need to call this method.'
  itemtype: method
  name: disconnect
  params:
  - name: obj
    description: The root object you passed when connecting the binding.
    type: Object
  return:
    description: ! '`this`'
    type: Ember.Binding
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 263
  description: See {{#crossLink "Ember.Binding/from"}}{{/crossLink}}
  itemtype: method
  name: from
  static: 1
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 274
  description: See {{#crossLink "Ember.Binding/to"}}{{/crossLink}}
  itemtype: method
  name: to
  static: 1
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 285
  description: ! 'Creates a new Binding instance and makes it apply in a single direction.

    A one-way binding will relay changes on the `from` side object (supplied

    as the `from` argument) the `to` side, but not the other way around.

    This means that if you change the "to" side directly, the "from" side may have

    a different value.


    See {{#crossLink "Binding/oneWay"}}{{/crossLink}}'
  itemtype: method
  name: oneWay
  params:
  - name: from
    description: from path.
    type: String
  - name: flag
    description: ! "(Optional) passing nothing here will make the\n  binding `oneWay`.
      You can instead pass `false` to disable `oneWay`, making the\n  binding two
      way again."
    type: Boolean
    optional: true
  class: Ember.Binding
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/binding.js
  line: 426
  description: ! 'Global helper method to create a new binding. Just pass the root
    object

    along with a `to` and `from` path to create and connect the binding.'
  itemtype: method
  name: bind
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/binding.js
  line: 443
  itemtype: method
  name: oneWay
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: ! "The path to the 'to' side of the binding.\n  Must be relative
      to obj."
    type: String
  - name: from
    description: ! "The path to the 'from' side of the binding.\n  Must be relative
      to obj or a global path."
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 128
  description: ! "Call on a computed property to set it into cacheable mode. When
    in this\nmode the computed property will automatically cache the return value
    of\nyour function until one of the dependent keys changes.\n\n```javascript\nMyApp.president
    = Ember.Object.create({\n  fullName: function() {\n    return this.get('firstName')
    + ' ' + this.get('lastName');\n\n    // After calculating the value of this function,
    Ember will\n    // return that value without re-executing this function until\n
    \   // one of the dependent properties change.\n  }.property('firstName', 'lastName')\n});\n```\n\nProperties
    are cacheable by default."
  itemtype: method
  name: cacheable
  params:
  - name: aFlag
    description: optional set to `false` to disable caching
    type: Boolean
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 156
  description: ! "Call on a computed property to set it into non-cached mode. When
    in this\nmode the computed property will not automatically cache the return value.\n\n```javascript\nMyApp.outsideService
    = Ember.Object.create({\n  value: function() {\n    return OutsideService.getValue();\n
    \ }.property().volatile()\n});\n```"
  itemtype: method
  name: volatile
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 175
  description: ! "Sets the dependent keys on this computed property. Pass any number
    of\narguments containing key paths that this computed property depends on.\n\n```javascript\nMyApp.president
    = Ember.Object.create({\n  fullName: Ember.computed(function() {\n    return this.get('firstName')
    + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property
    depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n```"
  itemtype: method
  name: property
  params:
  - name: path
    description: zero or more property paths
    type: String
    multiple: true
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 203
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For
    example,\ncomputed property functions may close over variables that are then no
    longer\navailable for introspection.\n\nYou can pass a hash of these values to
    a computed property like this:\n\n```\nperson: function() {\n  var personId =
    this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({
    type: App.Person })\n```\n\nThe hash that you pass to the `meta()` function will
    be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes
    a public API for retrieving these values from classes,\nvia the `metaForProperty()`
    function."
  itemtype: method
  name: meta
  params:
  - name: meta
    description: ''
    type: Hash
  chainable: 1
  class: Ember.ComputedProperty
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/computed.js
  line: 369
  description: ! 'This helper returns a new property descriptor that wraps the passed

    computed property function. You can use this helper to define properties

    with mixins or via `Ember.defineProperty()`.


    The function you pass will be used to both get and set property values.

    The function should accept two parameters, key and value. If value is not

    undefined you should set the value first. In either case return the

    current value of the property.'
  itemtype: method
  name: computed
  params:
  - name: func
    description: The computed property function.
    type: Function
  return:
    description: property descriptor instance
    type: Ember.ComputedProperty
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 401
  description: ! 'Returns the cached value for a property, if one exists.

    This can be useful for peeking at the value of a computed

    property that is generated lazily, without accidentally causing

    it to be created.'
  itemtype: method
  name: cacheFor
  params:
  - name: obj
    description: the object whose property you want to check
    type: Object
  - name: key
    description: ! "the name of the property whose cached value you want\n  to return"
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 421
  itemtype: method
  name: computed.not
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 432
  itemtype: method
  name: computed.empty
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 444
  itemtype: method
  name: computed.bool
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/computed.js
  line: 455
  itemtype: method
  name: computed.alias
  params:
  - name: dependentKey
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 49
  itemtype: property
  name: VERSION
  type: String
  default: ! '''1.0.0-rc.1'''
  final: 1
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 57
  description: ! 'Standard environmental variables. You can define these in a global
    `ENV`

    variable before loading Ember to control various configuration

    settings.'
  itemtype: property
  name: ENV
  type: Hash
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 73
  description: ! 'Determines whether Ember should enhances some built-in object prototypes
    to

    provide a more friendly API. If enabled, a few methods will be added to

    `Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,

    which is the one that causes most trouble for people.


    In general we recommend leaving this option set to true since it rarely

    conflicts with other code. If you need to turn it off however, you can

    define an `ENV.EXTEND_PROTOTYPES` config to disable it.'
  itemtype: property
  name: EXTEND_PROTOTYPES
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 93
  description: Determines whether Ember logs a full stack trace during deprecation
    warnings
  itemtype: property
  name: LOG_STACKTRACE_ON_DEPRECATION
  type: Boolean
  default: 'true'
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 102
  description: Determines whether Ember should add ECMAScript 5 shims to older browsers.
  itemtype: property
  name: SHIM_ES5
  type: Boolean
  default: Ember.EXTEND_PROTOTYPES
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 111
  description: Empty function. Useful for some operations.
  itemtype: method
  name: K
  access: private
  tagname: ''
  return:
    description: ''
    type: Object
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 131
  description: ! 'Previously we used `Ember.$.uuid`, however `$.uuid` has been removed
    from

    jQuery master. We''ll just bootstrap our own uuid now.'
  itemtype: property
  name: uuid
  type: Number
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 181
  description: ! 'A function may be assigned to `Ember.onerror` to be called when
    Ember

    internals encounter an error. This is useful for specialized error handling

    and reporting code.'
  itemtype: event
  name: onerror
  params:
  - name: error
    description: the error object
    type: Exception
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/core.js
  line: 192
  access: private
  tagname: Wrap code block in a try/catch if {{#crossLink "Ember/onerror"}}{{/crossLink}}
    is set.
  itemtype: method
  name: handleErrors
  params:
  - name: func
    description: ''
    type: Function
  - name: context
    description: ''
    optional: true
  class: Ember
  module: ember
  submodule: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 103
  description: Add an event listener
  itemtype: method
  name: addListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 133
  description: ! 'Remove an event listener


    Arguments should match those passed to {{#crossLink "Ember/addListener"}}{{/crossLink}}'
  itemtype: method
  name: removeListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 180
  access: private
  tagname: ! 'Suspend listener during callback.


    This should only be used by the target of the event listener

    when it is taking an action that would cause the event, e.g.

    an object might suspend its property change listener while it is

    setting that property.'
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 220
  access: private
  tagname: ! 'Suspend listener during callback.


    This should only be used by the target of the event listener

    when it is taking an action that would cause the event, e.g.

    an object might suspend its property change listener while it is

    setting that property.'
  itemtype: method
  name: suspendListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: Array of event names
    type: Array
  - name: targetOrMethod
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 271
  access: private
  tagname: Return a list of currently watched events
  itemtype: method
  name: watchedEvents
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 291
  itemtype: method
  name: sendEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: ''
    type: Array
  return:
    description: 'true'
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 331
  access: private
  tagname: ''
  itemtype: method
  name: hasListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/events.js
  line: 345
  access: private
  tagname: ''
  itemtype: method
  name: listenersFor
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/map.js
  line: 66
  itemtype: method
  name: create
  static: 1
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 77
  itemtype: method
  name: clear
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 85
  itemtype: method
  name: add
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 100
  itemtype: method
  name: remove
  params:
  - name: obj
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 117
  itemtype: method
  name: isEmpty
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 125
  itemtype: method
  name: has
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 137
  itemtype: method
  name: forEach
  params:
  - name: function
    description: ''
    type: Function
  - name: target
    description: ''
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 151
  itemtype: method
  name: toArray
  return:
    description: ''
    type: Array
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 159
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.OrderedSet
  class: Ember.OrderedSet
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 198
  itemtype: method
  name: create
  static: 1
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 207
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: the value associated with the key, or `undefined`
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 221
  description: ! 'Adds a value to the map. If a value for the given key has already
    been

    provided, the new value will replace the old value.'
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: Anything
  - name: value
    description: ''
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 238
  description: Removes a value from the map for an associated key.
  itemtype: method
  name: remove
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: true if an item was removed, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 263
  description: Check whether a key is present.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: true if the item was present, false otherwise
    type: Boolean
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 277
  description: ! 'Iterate over all the keys and values. Calls the function once

    for each key, passing in the key and value, in that order.


    The keys are guaranteed to be iterated over in insertion order.'
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: ''
    type: Function
  - name: self
    description: ! "if passed, the `this` value inside the\n  callback. By default,
      `this` is the map."
    type: Anything
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 298
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Map
  class: Ember.Map
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 321
  itemtype: method
  name: create
  static: 1
  params:
  - name: options
    description: ''
    optional: true
    props:
    - name: defaultValue
      description: ''
      type: Anything
      optional: true
  return:
    description: ! "If options are passed, returns \n  `Ember.MapWithDefault` otherwise
      returns `Ember.Map`"
    type: Ember.MapWithDefault|Ember.Map
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 339
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: Anything
  return:
    description: the value associated with the key, or the default value
    type: Anything
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/map.js
  line: 358
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.MapWithDefault
  class: Ember.MapWithDefault
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 330
  itemtype: method
  name: mixin
  params:
  - name: obj
    description: ''
  - name: mixins
    description: ''
    multiple: true
  return:
    description: obj
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 387
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 400
  itemtype: method
  name: reopen
  params:
  - name: arguments
    description: ''
    multiple: true
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 434
  itemtype: method
  name: apply
  params:
  - name: obj
    description: ''
  return:
    description: applied object
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 461
  itemtype: method
  name: detect
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  class: Ember.Mixin
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/mixin.js
  line: 525
  description: Denotes a required property for a mixin
  itemtype: method
  name: required
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 540
  description: ! "Makes a property or method available via an additional name.\n\n```javascript\nApp.PaintSample
    = Ember.Object.extend({\n  color: 'red',\n  colour: Ember.alias('color'),\n  name:
    function(){\n    return \"Zed\";\n  },\n  moniker: Ember.alias(\"name\")\n});\n\nvar
    paintSample = App.PaintSample.create()\npaintSample.get('colour');  // 'red'\npaintSample.moniker();
    \     // 'Zed'\n```"
  itemtype: method
  name: alias
  params:
  - name: methodName
    description: name of the method or property to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  deprecated: true
  deprecationMessage: Use `Ember.aliasMethod` or `Ember.computed.alias` instead
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 570
  description: ! "Makes a method available via an additional name.\n\n```javascript\nApp.Person
    = Ember.Object.extend({\n  name: function(){\n    return 'Tomhuda Katzdale';\n
    \ },\n  moniker: Ember.aliasMethod('name')\n});\n\nvar goodGuy = App.Person.create()\n```"
  itemtype: method
  name: aliasMethod
  params:
  - name: methodName
    description: name of the method to alias
    type: String
  return:
    description: ''
    type: Ember.Descriptor
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 597
  itemtype: method
  name: observer
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 612
  itemtype: method
  name: immediateObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/mixin.js
  line: 628
  itemtype: method
  name: beforeObserver
  params:
  - name: func
    description: ''
    type: Function
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  return:
    description: func
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 81
  itemtype: method
  name: beginPropertyChanges
  chainable: 1
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 89
  itemtype: method
  name: endPropertyChanges
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 100
  description: ! "Make a series of property changes together in an\nexception-safe
    way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo',
    mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```"
  itemtype: method
  name: changeProperties
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 120
  description: ! 'Set a list of properties on an object. These properties are set
    inside

    a single `beginPropertyChanges` and `endPropertyChanges` batch, so

    observers will be buffered.'
  itemtype: method
  name: setProperties
  params:
  - name: target
    description: ''
  - name: properties
    description: ''
    type: Hash
  return:
    description: target
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 148
  itemtype: method
  name: addObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 165
  itemtype: method
  name: removeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 178
  itemtype: method
  name: addBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/observer.js
  line: 219
  itemtype: method
  name: removeBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: targetOrMethod
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  class: Ember.platform
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 19
  description: Identical to `Object.create()`. Implements if not available natively.
  itemtype: method
  name: create
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/platform.js
  line: 123
  description: ! 'Identical to `Object.defineProperty()`. Implements as much functionality

    as possible if not available natively.'
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: The object to modify
    type: Object
  - name: keyName
    description: property name to modify
    type: String
  - name: desc
    description: descriptor hash
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/platform.js
  line: 135
  description: Set to true if the platform supports native getters and setters.
  itemtype: property
  name: hasPropertyAccessors
  final: 1
  class: Ember.platform
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/properties.js
  line: 51
  access: private
  tagname: ! "NOTE: This is a low-level method used by other parts of the API. You
    almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()`
    to define new properties.\n\nDefines a property on an object. This method works
    much like the ES5\n`Object.defineProperty()` method except that it can also accept
    computed\nproperties and other special descriptors.\n\nNormally this method takes
    only three parameters. However if you pass an\ninstance of `Ember.Descriptor`
    as the third param then you can pass an\noptional value as the fourth parameter.
    This is often more efficient than\ncreating new descriptor hashes for each property.\n\n##
    Examples\n\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact,
    'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n
    \ value: 'Charles'\n});\n\n// define a simple property\nEmber.defineProperty(contact,
    'lastName', undefined, 'Jolley');\n\n// define a computed property\nEmber.defineProperty(contact,
    'fullName', Ember.computed(function() {\n  return this.firstName+' '+this.lastName;\n}).property('firstName',
    'lastName'));\n```"
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: the object to define this property on. This may be a prototype.
    type: Object
  - name: keyName
    description: the name of the property
    type: String
  - name: desc
    description: ! "an instance of `Ember.Descriptor` (typically a\n  computed property)
      or an ES5 descriptor.\n  You must provide this or `data` but not both."
    type: Ember.Descriptor
    optional: true
  - name: data
    description: ! "something other than a descriptor, that will\n  become the explicit
      value of this property."
    type: Anything
    optional: true
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/run_loop.js
  line: 58
  itemtype: method
  name: end
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 65
  itemtype: method
  name: prev
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 76
  itemtype: method
  name: schedule
  params:
  - name: queueName
    description: ''
    type: String
  - name: target
    description: ''
  - name: method
    description: ''
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 93
  itemtype: method
  name: flush
  params:
  - name: queueName
    description: ''
    type: String
  class: Ember.RunLoop
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 231
  description: ! "Begins a new RunLoop. Any deferred actions invoked after the begin
    will\nbe buffered until you invoke a matching call to `Ember.run.end()`. This
    is\nan lower-level way to use a RunLoop instead of using `Ember.run()`.\n\n```javascript\nEmber.run.begin();\n//
    code to be execute within a RunLoop \nEmber.run.end();\n```"
  itemtype: method
  name: begin
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 249
  description: ! "Ends a RunLoop. This must be called sometime after you call\n`Ember.run.begin()`
    to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead
    of using `Ember.run()`.\n\n```javascript\nEmber.run.begin();\n// code to be execute
    within a RunLoop \nEmber.run.end();\n```"
  itemtype: method
  name: end
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 272
  description: ! 'Array of named queues. This array determines the order in which
    queues

    are flushed at the end of the RunLoop. You can define your own queues by

    simply adding the queue name to this array. Normally you should not need

    to inspect or modify this property.'
  itemtype: property
  name: queues
  type: Array
  default: ! '[''sync'', ''actions'', ''destroy'', ''timers'']'
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 284
  description: ! "Adds the passed target/method and any optional arguments to the
    named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted
    a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt
    the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods
    will be invoked in an order matching the named queues defined in\nthe `run.queues`
    property.\n\n```javascript\nEmber.run.schedule('timers', this, function(){\n  //
    this will be executed at the end of the RunLoop, when timers are run\n  console.log(\"scheduled
    on timers queue\");\n});\n\nEmber.run.schedule('sync', this, function(){\n  //
    this will be executed at the end of the RunLoop, when bindings are synced\n  console.log(\"scheduled
    on sync queue\");\n});\n\n// Note the functions will be run in order based on
    the run queues order. Output would be:\n//   scheduled on sync queue\n//   scheduled
    on timers queue\n```"
  itemtype: method
  name: schedule
  params:
  - name: queue
    description: ! "The name of the queue to schedule against.\n  Default queues are
      'sync' and 'actions'"
    type: String
  - name: target
    description: target object to use as the context when invoking a method.
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke. If you pass a string it\n  will be resolved
      on the target object at the time the scheduled item is\n  invoked allowing you
      to change the target function."
    type: String|Function
  - name: arguments*
    description: Optional arguments to be passed to the queued method.
    type: Object
    optional: true
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 353
  description: ! 'Begins a new RunLoop if necessary and schedules a timer to flush
    the

    RunLoop at a later time. This method is used by parts of Ember to

    ensure the RunLoop always finishes. You normally do not need to call this

    method directly. Instead use `Ember.run()`'
  itemtype: method
  name: autorun
  example:
  - ! "\n  Ember.run.autorun();"
  return:
    description: the new current RunLoop
    type: Ember.RunLoop
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 378
  description: ! 'Immediately flushes any events scheduled in the ''sync'' queue.
    Bindings

    use this queue so this method is a useful way to immediately force all

    bindings in the application to sync.


    You should call this method anytime you need any changed state to propagate

    throughout the app immediately without repainting the UI.


    ```javascript

    Ember.run.sync();

    ```'
  itemtype: method
  name: sync
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 425
  description: ! "Invokes the passed target/method and optional arguments after a
    specified\nperiod if time. The last parameter of this method must always be a
    number\nof milliseconds.\n\nYou should use this method whenever you need to run
    some action after a\nperiod of time instead of using `setTimeout()`. This method
    will ensure that\nitems that expire during the same script execution cycle all
    execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nEmber.run.later(myContext,
    function(){\n  // code here will execute within a RunLoop in about 500ms with
    this == myContext\n}, 500);\n```"
  itemtype: method
  name: later
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait!~YUIDOC_LINE~!
    description: Number of milliseconds to wait.
    type: Number
  return:
    description: ! "a string you can use to cancel the timer in\n  {{#crossLink \"Ember/run.cancel\"}}{{/crossLink}}
      later."
    type: String
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 509
  description: ! "Schedules an item to run one time during the current RunLoop. Calling\nthis
    method with the same target/method combination will have no effect.\n\nNote that
    although you can pass optional arguments these will not be\nconsidered when looking
    for duplicates. New arguments will replace previous\ncalls.\n\n```javascript\nEmber.run(function(){\n
    \ var doFoo = function() { foo(); }\n  Ember.run.once(myContext, doFoo);\n  Ember.run.once(myContext,
    doFoo);\n  // doFoo will only be executed once at the end of the RunLoop\n});\n```"
  itemtype: method
  name: once
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 555
  description: ! "Schedules an item to run after control has been returned to the
    system.\nThis is often equivalent to calling `setTimeout(function() {}, 1)`.\n\n```javascript\nEmber.run.next(myContext,
    function(){\n  // code to be executed in the next RunLoop, which will be scheduled
    after the current one\n});\n```"
  itemtype: method
  name: next
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: ! "The method to invoke.\n  If you pass a string it will be resolved
      on the\n  target at the time the method is invoked."
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: timer
    type: Object
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/run_loop.js
  line: 589
  description: ! "Cancels a scheduled item. Must be a value returned by `Ember.run.later()`,\n`Ember.run.once()`,
    or `Ember.run.next()`.\n\n```javascript\nvar runNext = Ember.run.next(myContext,
    function(){\n  // will not be executed\n});\nEmber.run.cancel(runNext);\n\nvar
    runLater = Ember.run.later(myContext, function(){\n  // will not be executed\n},
    500);\nEmber.run.cancel(runLater);\n\nvar runOnce = Ember.run.once(myContext,
    function(){\n  // will not be executed\n});\nEmber.run.cancel(runOnce);\n```"
  itemtype: method
  name: cancel
  params:
  - name: timer
    description: Timer object to cancel
    type: Object
  return:
    description: ''
    type: Void
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: ../packages/ember-metal/lib/utils.js
  line: 19
  access: private
  tagname: ! 'A unique key used to assign guids and other private metadata to objects.

    If you inspect an object in your browser debugger you will often see these.

    They can be safely ignored.


    On browsers that support it, these properties are added with enumeration

    disabled so they won''t show up when you iterate over your properties.'
  itemtype: property
  name: GUID_KEY
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 43
  access: private
  tagname: ! 'Generates a new guid, optionally saving the guid to the object that
    you

    pass in. You will rarely need to use this method. Instead you should

    call `Ember.guidFor(obj)`, which return an existing guid if available.'
  itemtype: method
  name: generateGuid
  params:
  - name: obj
    description: ! "Object the guid will be used for. If passed in, the guid will\n
      \ be saved on the object and reused whenever you pass the same object\n  again.\n\n
      \ If no object is passed, just generate a new guid."
    type: Object
    optional: true
  - name: prefix
    description: ! "Prefix to place in front of the guid. Useful when you want to\n
      \ separate the guid into separate namespaces."
    type: String
    optional: true
  return:
    description: the guid
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 71
  access: private
  tagname: ! 'Returns a unique id for the object. If the object does not yet have
    a guid,

    one will be assigned to it. You can call this on any object,

    `Ember.Object`-based or not, but be aware that it will add a `_guid`

    property.


    You can also use this method on DOM Element objects.'
  itemtype: method
  name: guidFor
  params:
  - name: obj
    description: any object, string, number, Element, or primitive
    type: Object
  return:
    description: the unique guid for this instance.
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 134
  description: The key used to store meta information on object for property observing.
  itemtype: property
  name: META_KEY
  access: private
  tagname: ''
  final: 1
  type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 178
  description: ! 'Retrieves the meta hash for an object. If `writable` is true ensures
    the

    hash is writable for this object as well.


    The meta object contains information about computed property descriptors as

    well as any watched properties and other information. You generally will

    not access this information directly but instead work with higher level

    methods that manipulate this hash indirectly.'
  itemtype: method
  name: meta
  access: private
  tagname: ''
  params:
  - name: obj
    description: The object to retrieve meta for
    type: Object
  - name: writable
    description: ! "Pass `false` if you do not intend to modify\n  the meta hash,
      allowing the method to avoid making an unnecessary copy."
    type: Boolean
    optional: true
    optdefault: 'true'
  return:
    description: ''
    type: Hash
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 240
  access: private
  tagname: ! 'In order to store defaults for a class, a prototype may need to create

    a default meta object, which will be inherited by any objects instantiated

    from the class''s constructor.


    However, the properties of that meta object are only shallow-cloned,

    so if a property is a hash (like the event system''s `listeners` hash),

    it will by default be shared across all instances of that class.


    This method allows extensions to deeply clone a series of nested hashes or

    other complex objects. For instance, the event system might pass

    `[''listeners'', ''foo:change'', ''ember157'']` to `prepareMetaPath`, which will

    walk down the keys provided.


    For each key, if the key does not exist, it is created. If it already

    exists and it was inherited from its constructor, the constructor''s

    key is cloned.


    You can also pass false for `writable`, which will simply return

    undefined if `prepareMetaPath` discovers any part of the path that

    shared or undefined.'
  itemtype: method
  name: metaPath
  params:
  - name: obj
    description: The object whose meta we are examining
    type: Object
  - name: path
    description: An array of keys to walk down
    type: Array
  - name: writable
    description: ! "whether or not to create a new meta\n  (or meta property) if one
      does not already exist or if it's\n  shared with its constructor"
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 294
  access: private
  tagname: ! 'Wraps the passed function so that `this._super` will point to the superFunc

    when the function is invoked. This is the primitive we use to implement

    calls to super.'
  itemtype: method
  name: wrap
  params:
  - name: func
    description: The function to call
    type: Function
  - name: superFunc
    description: The super function.
    type: Function
  return:
    description: wrapped function.
    type: Function
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 325
  description: ! "Returns true if the passed object is an array or Array-like.\n\nEmber
    Array Protocol:\n\n  - the object has an objectAt property\n  - the object is
    a native Array\n  - the object is an Object, and has a length property\n\nUnlike
    `Ember.typeOf` this method returns true even if the passed object is\nnot formally
    array but appears to be array-like (i.e. implements `Ember.Array`)\n\n```javascript\nEmber.isArray();
    \                                           // false\nEmber.isArray([]);                                          //
    true\nEmber.isArray( Ember.ArrayProxy.create({ content: [] }) );  // true\n```"
  itemtype: method
  name: isArray
  params:
  - name: obj
    description: The object to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 356
  description: ! 'Forces the passed object to be part of an array. If the object is
    already

    an array or array-like, returns the object. Otherwise adds the object to

    an array. If obj is `null` or `undefined`, returns an empty array.


    ```javascript

    Ember.makeArray();                           // []

    Ember.makeArray(null);                       // []

    Ember.makeArray(undefined);                  // []

    Ember.makeArray(''lindsay'');                  // [''lindsay'']

    Ember.makeArray([1,2,42]);                   // [1,2,42]


    var controller = Ember.ArrayProxy.create({ content: [] });

    Ember.makeArray(controller) === controller;  // true

    ```'
  itemtype: method
  name: makeArray
  params:
  - name: obj
    description: the object
    type: Object
  return:
    description: ''
    type: Array
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 386
  description: Checks to see if the `methodName` exists on the `obj`.
  itemtype: method
  name: canInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 396
  description: ! 'Checks to see if the `methodName` exists on the `obj`,

    and if it does, invokes it with the arguments passed.'
  itemtype: method
  name: tryInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  - name: args
    description: The arguments to pass to the method
    type: Array
    optional: true
  return:
    description: the return value of the invoked method or undefined if it cannot
      be invoked
    type: Anything
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 427
  description: ! 'Provides try { } finally { } functionality, while working

    around Safari''s double finally bug.'
  itemtype: method
  name: tryFinally
  params:
  - name: function
    description: The function to run the try callback
    type: Function
  - name: function
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: ''
    optional: true
  return:
    description: ! 'The return value is the that of the finalizer,

      unless that valueis undefined, in which case it is the return value

      of the tryable'
    type: Anything
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/utils.js
  line: 477
  description: ! 'Provides try { } catch finally { } functionality, while working

    around Safari''s double finally bug.'
  itemtype: method
  name: tryCatchFinally
  params:
  - name: function
    description: The function to run the try callback
    type: Function
  - name: function
    description: The function to run the catchable callback
    type: Function
  - name: function
    description: The function to run the finally callback
    type: Function
  - name: binding
    description: ''
    optional: true
  return:
    description: ! 'The return value is the that of the finalizer,

      unless that value is undefined, in which case it is the return value

      of the tryable.'
    type: Anything
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 412
  access: private
  tagname: ! 'Starts watching a property on an object. Whenever the property changes,

    invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the

    primitive used by observers and dependent keys; usually you will never call

    this method directly but instead use higher level methods like

    `Ember.addObserver()`'
  itemtype: method
  name: watch
  params:
  - name: obj
    description: ''
  - name: keyName
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 506
  access: private
  tagname: ! 'Call on an object when you first beget it from another object. This
    will

    setup any chained watchers on the object instance as needed. This method is

    safe to call multiple times.'
  itemtype: method
  name: rewatch
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 547
  description: ! 'This function is called just before an object property is about
    to change.

    It will notify any before observers and prepare caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyDidChange()` which you should call just

    after the property value changes.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 578
  description: ! 'This function is called just after an object property has changed.

    It will notify any observers and clear caches among other things.


    Normally you will not need to call this method directly but if for some

    reason you can''t directly watch a property you can invoke this method

    manually along with `Ember.propertyWilLChange()` which you should call just

    before the property value changes.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-metal/lib/watching.js
  line: 614
  description: ! 'Tears down the meta on an object so that it can be garbage collected.

    Multiple calls will have no effect.'
  itemtype: method
  name: destroy
  params:
  - name: obj
    description: the object to destroy
    type: Object
  return:
    description: ''
    type: Void
  class: Ember
  module: ember-metal
- file: ../packages/ember-routing/lib/helpers/action.js
  line: 76
  description: ! "The `{{action}}` helper registers an HTML element within a template
    for DOM\nevent handling and forwards that interaction to the view's controller\nor
    supplied `target` option (see 'Specifying a Target').\n\nIf the view's controller
    does not implement the event, the event is sent\nto the current route, and it
    bubbles up the route hierarchy from there.\n\nUser interaction with that element
    will invoke the supplied action name on\nthe appropriate target.\n\nGiven the
    following Handlebars template on the page\n\n```handlebars\n<script type=\"text/x-handlebars\"
    data-template-name='a-template'>\n  <div {{action anActionName}}>\n    click me\n
    \ </div>\n</script>\n```\n\nAnd application code\n\n```javascript\nAController
    = Ember.Controller.extend({\n  anActionName: function() {}\n});\n\nAView = Ember.View.extend({\n
    \ controller: AController.create(),\n  templateName: 'a-template'\n});\n\naView
    = AView.create();\naView.appendTo('body');\n```\n\nWill results in the following
    rendered HTML\n\n```html\n<div class=\"ember-view\">\n  <div data-ember-action=\"1\">\n
    \   click me\n  </div>\n</div>\n```\n\nClicking \"click me\" will trigger the
    `anActionName` method of the\n`AController`. In this case, no additional parameters
    will be passed.\n\nIf you provide additional parameters to the helper:\n\n```handlebars\n<button
    {{action 'edit' post}}>Edit</button>\n```\n\nThose parameters will be passed along
    as arguments to the JavaScript\nfunction implementing the action.\n\n### Event
    Propagation\n\nEvents triggered through the action helper will automatically have\n`.preventDefault()`
    called on them. You do not need to do so in your event\nhandlers.\n\nTo also disable
    bubbling, pass `bubbles=false` to the helper:\n\n```handlebars\n<button {{action
    'edit' post bubbles=false}}>Edit</button>\n```\n\nIf you need the default handler
    to trigger you should either register your\nown event handler, or use event methods
    on your view class. See `Ember.View`\n'Responding to Browser Events' for more
    information.\n\n### Specifying DOM event type\n\nBy default the `{{action}}` helper
    registers for DOM `click` events. You can\nsupply an `on` option to the helper
    to specify a different DOM event name:\n\n```handlebars\n<script type=\"text/x-handlebars\"
    data-template-name='a-template'>\n  <div {{action anActionName on=\"doubleClick\"}}>\n
    \   click me\n  </div>\n</script>\n```\n\nSee `Ember.View` 'Responding to Browser
    Events' for a list of\nacceptable DOM event names.\n\nNOTE: Because `{{action}}`
    depends on Ember's event dispatch system it will\nonly function if an `Ember.EventDispatcher`
    instance is available. An\n`Ember.EventDispatcher` instance will be created when
    a new `Ember.Application`\nis created. Having an instance of `Ember.Application`
    will satisfy this\nrequirement.\n\n### Specifying a Target\n\nThere are several
    possible target objects for `{{action}}` helpers:\n\nIn a typical Ember application,
    where views are managed through use of the\n`{{outlet}}` helper, actions will
    bubble to the current controller, then\nto the current route, and then up the
    route hierarchy.\n\nAlternatively, a `target` option can be provided to the helper
    to change\nwhich object will receive the method call. This option must be a path\npath
    to an object, accessible in the current context:\n\n```handlebars\n<script type=\"text/x-handlebars\"
    data-template-name='a-template'>\n  <div {{action anActionName target=\"MyApplication.someObject\"}}>\n
    \   click me\n  </div>\n</script>\n```\n\nClicking \"click me\" in the rendered
    HTML of the above template will trigger\nthe  `anActionName` method of the object
    at `MyApplication.someObject`.\n\nIf an action's target does not implement a method
    that matches the supplied\naction name an error will be thrown.\n\n```handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  <div {{action aMethodNameThatIsMissing}}>\n
    \   click me\n  </div>\n</script>\n```\n\nWith the following application code\n\n```javascript\nAView
    = Ember.View.extend({\n  templateName; 'a-template',\n  // note: no method 'aMethodNameThatIsMissing'\n
    \ anActionName: function(event) {}\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill
    throw `Uncaught TypeError: Cannot call method 'call' of undefined` when\n\"click
    me\" is clicked.\n\n### Additional Parameters\n\nYou may specify additional parameters
    to the `{{action}}` helper. These\nparameters are passed along as the arguments
    to the JavaScript function\nimplementing the action.\n\n```handlebars\n<script
    type=\"text/x-handlebars\" data-template-name='a-template'>\n  {{#each person
    in people}}\n    <div {{action edit person}}>\n      click me\n    </div>\n  {{/each}}\n</script>\n```\n\nClicking
    \"click me\" will trigger the `edit` method on the current view's\ncontroller
    with the current person as a parameter."
  itemtype: method
  name: action
  params:
  - name: actionName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/helpers/control.js
  line: 9
  description: ! 'The control helper is currently under development and is considered
    experimental.

    To enable it, set `ENV.EXPERIMENTAL_CONTROL_HELPER = true` before requiring Ember.'
  itemtype: method
  name: control
  params:
  - name: path
    description: ''
    type: String
  - name: modelPath
    description: ''
    type: String
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/helpers/link_to.js
  line: 94
  itemtype: method
  name: linkTo
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  return:
    description: HTML string
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/helpers/outlet.js
  line: 18
  description: ! 'The `outlet` helper allows you to specify that the current

    view''s controller will fill in the view for a given area.


    ``` handlebars

    {{outlet}}

    ```


    By default, when the the current controller''s `view` property changes, the

    outlet will replace its current view with the new view. You can set the

    `view` property directly, but it''s normally best to use `connectOutlet`.


    ``` javascript

    # Instantiate App.PostsView and assign to `view`, so as to render into outlet.

    controller.connectOutlet(''posts'');

    ```


    You can also specify a particular name other than `view`:


    ``` handlebars

    {{outlet masterView}}

    {{outlet detailView}}

    ```


    Then, you can control several outlets from a single controller.


    ``` javascript

    # Instantiate App.PostsView and assign to controller.masterView.

    controller.connectOutlet(''masterView'', ''posts'');

    # Also, instantiate App.PostInfoView and assign to controller.detailView.

    controller.connectOutlet(''detailView'', ''postInfo'');

    ```'
  itemtype: method
  name: outlet
  params:
  - name: property
    description: ! "the property on the controller\n  that holds the view for this
      outlet"
    type: String
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-handlebars
- file: ../packages/ember-routing/lib/helpers/render.js
  line: 12
  description: ! 'Renders the named template in the current context using the singleton

    instance of the same-named controller.


    If a view class with the same name exists, uses the view class.


    If a `model` is specified, it becomes the model for that controller.


    The default target for `{{action}}`s in the rendered template is the

    named controller.'
  itemtype: method
  name: action
  params:
  - name: actionName
    description: ''
    type: String
  - name: model
    description: ''
    type: Object?
  - name: options
    description: ''
    type: Hash
  class: Ember.Handlebars.helpers
  module: ember
  submodule: ember-routing
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 23
  access: private
  tagname: Returns the current `location.hash`, minus the '#' at the front.
  itemtype: method
  name: getURL
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 34
  access: private
  tagname: ! 'Set the `location.hash` and remembers what was set. This prevents

    `onUpdateURL` callbacks from triggering when the hash was set by

    `HashLocation`.'
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 49
  access: private
  tagname: ! 'Register a callback to be invoked when the hash changes. These

    callbacks will execute when the user presses the back or forward

    button, but not after `setURL` is invoked.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/hash_location.js
  line: 75
  access: private
  tagname: ! 'Given a URL, formats it to be placed into the page as part

    of an element''s `href` attribute.


    This is used, for example, when using the {{action}} helper

    to generate a URL based on an event.'
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 24
  access: private
  tagname: Used to set state on first call to setURL
  itemtype: method
  name: initState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 36
  description: Will be pre-pended to path upon state change
  itemtype: property
  name: rootURL
  default: ! '''/'''
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 44
  access: private
  tagname: Returns the current `location.pathname` without rootURL
  itemtype: method
  name: getURL
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 61
  access: private
  tagname: Uses `history.pushState` to update the url without a page reload.
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 78
  access: private
  tagname: ! 'Uses `history.replaceState` to update the url without a page reload

    or history modification.'
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 96
  access: private
  tagname: Get the current `history.state`
  itemtype: method
  name: getState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 107
  access: private
  tagname: Pushes a new state
  itemtype: method
  name: pushState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 119
  access: private
  tagname: Replaces the current state
  itemtype: method
  name: replaceState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 131
  access: private
  tagname: ! 'Register a callback to be invoked whenever the browser

    history changes, including using forward and back buttons.'
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/location/history_location.js
  line: 152
  access: private
  tagname: Used when using `{{action}}` helper.  The url is always appended to the
    rootURL.
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 19
  access: private
  tagname: ''
  itemtype: method
  name: exit
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 29
  access: private
  tagname: ''
  itemtype: method
  name: enter
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 38
  description: ! 'The collection of functions keyed by name available on this route
    as

    action targets.


    These functions will be invoked when a matching `{{action}}` is triggered

    from within a template and the application''s current route is this route.


    Events can also be invoked from other parts of your application via `Route#send`.


    The context of event will be the this route.'
  see:
  - ! '{Ember.Route#send}'
  - ! '{Handlebars.helpers.action}'
  itemtype: property
  name: events
  type: Hash
  default: 'null'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 58
  description: ! 'This hook is executed when the router completely exits this route.
    It is

    not executed when the model for the route changes.'
  itemtype: method
  name: deactivate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 66
  description: ! 'This hook is executed when the router enters the route for the first
    time.

    It is not executed when the model for the route changes.'
  itemtype: method
  name: activate
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 74
  description: ! 'Transition into another route. Optionally supply a model for the

    route in question. The model will be serialized into the URL

    using the `serialize` hook.'
  itemtype: method
  name: transitionTo
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: the
    type: ! '...Object'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 88
  description: ! 'Transition into another route while replacing the current URL if

    possible. Identical to `transitionTo` in all other respects.'
  itemtype: method
  name: replaceWith
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: the
    type: ! '...Object'
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 105
  access: private
  tagname: This hook is the entry point for router.js
  itemtype: method
  name: setup
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 143
  description: ! 'A hook you can implement to optionally redirect to another route.


    If you call `this.transitionTo` from inside of this hook, this route

    will not be entered in favor of the other hook.'
  itemtype: method
  name: redirect
  params:
  - name: model
    description: the model for this route
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 154
  access: private
  tagname: ! 'The hook called by `router.js` to convert parameters into the context

    for this handler. The public Ember hook is `model`.'
  itemtype: method
  name: deserialize
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 167
  access: private
  tagname: Called when the context is changed by router.js.
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 176
  description: ! "A hook you can implement to convert the URL into the model for\nthis
    route.\n\n```js\nApp.Route.map(function(match) {\n  match(\"/posts/:post_id\").to(\"post\");\n});\n```\n\nThe
    model for the `post` route is `App.Post.find(params.post_id)`.\n\nBy default,
    if your route has a dynamic segment ending in `_id`:\n\n* The model class is determined
    from the segment (`post_id`'s\n  class is `App.Post`)\n* The find method is called
    on the model class with the value of\n  the dynamic segment."
  itemtype: method
  name: model
  params:
  - name: params
    description: the parameters extracted from the URL
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 220
  description: ! "A hook you can implement to convert the route's model into parameters\nfor
    the URL.\n\n```js\nApp.Route.map(function(match) {\n  match(\"/posts/:post_id\").to(\"post\");\n});\n\nApp.PostRoute
    = Ember.Route.extend({\n  model: function(params) {\n    // the server returns
    `{ id: 12 }`\n    return jQuery.getJSON(\"/posts/\" + params.post_id);\n  },\n\n
    \ serialize: function(model) {\n    // this will make the URL `/posts/12`\n    return
    { post_id: model.id };\n  }\n});\n```\n\nThe default `serialize` method inserts
    the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`).\n\nThis
    method is called when `transitionTo` is called with a context\nin order to populate
    the URL."
  itemtype: method
  name: serialize
  params:
  - name: model
    description: the route's model
    type: Object
  - name: params
    description: ! "an Array of parameter names for the current\n  route (in the example,
      `['post_id']`."
    type: Array
  return:
    description: the serialized parameters
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 268
  description: ! "A hook you can use to setup the controller for the current route.\n\nThis
    method is called with the controller for the current route and the\nmodel supplied
    by the `model` hook.\n\n```js\nApp.Route.map(function(match) {\n  match(\"/posts/:post_id\").to(\"post\");\n});\n```\n\nFor
    the `post` route, the controller is `App.PostController`.\n\nBy default, the `setupController`
    hook sets the `content` property of\nthe controller to the `model`.\n\nIf no explicit
    controller is defined, the route will automatically create\nan appropriate controller
    for the model:\n\n* if the model is an `Ember.Array` (including record arrays
    from Ember\n  Data), the controller is an `Ember.ArrayController`.\n* otherwise,
    the controller is an `Ember.ObjectController`.\n\nThis means that your template
    will get a proxy for the model as its\ncontext, and you can act as though the
    model itself was the context."
  itemtype: method
  name: setupController
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 299
  description: ! "Returns the controller for a particular route.\n\n```js\nApp.PostRoute
    = Ember.Route.extend({\n  setupController: function(controller, post) {\n    this._super(controller,
    post);\n    this.controllerFor('posts').set('currentPost', post);\n  }\n});\n```\n\nBy
    default, the controller for `post` is the shared instance of\n`App.PostController`."
  itemtype: method
  name: controllerFor
  params:
  - name: name
    description: the name of the route
    type: String
  - name: model
    description: the model associated with the route (optional)
    type: Object
  return:
    description: ''
    type: Ember.Controller
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 334
  description: ! 'Returns the current model for a given route.


    This is the object returned by the `model` hook of the route

    in question.'
  itemtype: method
  name: modelFor
  params:
  - name: name
    description: the name of the route
    type: String
  return:
    description: the model object
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 349
  description: ! 'A hook you can use to render the template for the current route.


    This method is called with the controller for the current route and the

    model supplied by the `model` hook. By default, it renders the route''s

    template, configured with the controller for the route.


    This method can be overridden to set up and render additional or

    alternative templates.'
  itemtype: method
  name: renderTemplate
  params:
  - name: controller
    description: the route's controller
    type: Object
  - name: model
    description: the route's model
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-routing/lib/system/route.js
  line: 367
  description: ! "Renders a template into an outlet.\n\nThis method has a number of
    defaults, based on the name of the\nroute specified in the router.\n\nFor example:\n\n```js\nApp.Router.map(function(match)
    {\n  match(\"/\").to(\"index\");\n  match(\"/posts/:post_id\").to(\"post\");\n});\n\nApp.PostRoute
    = App.Route.extend({\n  renderTemplate: function() {\n    this.render();\n  }\n});\n```\n\nThe
    name of the `PostRoute`, as defined by the router, is `post`.\n\nBy default, render
    will:\n\n* render the `post` template\n* with the `post` view (`PostView`) for
    event handling, if one exists\n* and the `post` controller (`PostController`),
    if one exists\n* into the `main` outlet of the `application` template\n\nYou can
    override this behavior:\n\n```js\nApp.PostRoute = App.Route.extend({\n  renderTemplate:
    function() {\n    this.render('myPost', {   // the template to render\n      into:
    'index',          // the template to render into\n      outlet: 'detail',       //
    the name of the outlet in that template\n      controller: 'blogPost'  // the
    controller to use for the template\n    });\n  }\n});\n```\n\nRemember that the
    controller's `content` will be the route's model. In\nthis case, the default model
    will be `App.Post.find(params.post_id)`."
  itemtype: method
  name: render
  params:
  - name: name
    description: the name of the template to render
    type: String
  - name: options
    description: the options
    type: Object
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/array_controller.js
  line: 100
  description: The controller used to wrap items, if any.
  itemtype: property
  name: itemController
  type: String
  default: 'null'
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/array_controller.js
  line: 109
  description: ! "Return the name of the controller to wrap items, or `null` if items
    should\nbe returned directly.  The default implementation simply returns the\n`itemController`
    property, but subclasses can override this method to return\ndifferent controllers
    for different objects.\n\nFor example:\n\n```javascript\nApp.MyArrayController
    = Ember.ArrayController.extend({\n  lookupItemController: function( object ) {\n
    \   if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n
    \   } else {\n      return \"regular\"; // use App.RegularController\n    }\n
    \ }\n});\n```"
  itemtype: method
  name: ''
  type: String
  default: 'null'
  class: Ember.ArrayController
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/controllers/controller.js
  line: 45
  description: ! 'The object to which events from the view should be sent.


    For example, when a Handlebars template uses the `{{action}}` helper,

    it will attempt to send the event to the view''s controller''s `target`.


    By default, a controller''s `target` is set to the router after it is

    instantiated by `Ember.Application#initialize`.'
  itemtype: property
  name: target
  default: 'null'
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 12
  description: ! "The `property` extension of Javascript's Function prototype is available\nwhen
    `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n`true`, which
    is the default.\n\nComputed properties allow you to treat a function like a property:\n\n```javascript\nMyApp.president
    = Ember.Object.create({\n  firstName: \"Barack\",\n  lastName: \"Obama\",\n\n
    \ fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n
    \   // Call this flag to mark the function as a property\n  }.property()\n});\n\nMyApp.president.get('fullName');
    \   // \"Barack Obama\"\n```\n\nTreating a function like a property is useful
    because they can work with\nbindings, just like any other property.\n\nMany computed
    properties have dependencies on other properties. For\nexample, in the above example,
    the `fullName` property depends on\n`firstName` and `lastName` to determine its
    value. You can tell Ember\nabout these dependencies like this:\n\n```javascript\nMyApp.president
    = Ember.Object.create({\n  firstName: \"Barack\",\n  lastName: \"Obama\",\n\n
    \ fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n
    \   // Tell Ember.js that this computed property depends on firstName\n    //
    and lastName\n  }.property('firstName', 'lastName')\n});\n```\n\nMake sure you
    list these dependencies so Ember knows when to update\nbindings that connect to
    a computed property. Changing a dependency\nwill not immediately trigger an update
    of the computed property, but\nwill instead clear the cache so that it is updated
    when the next `get`\nis called on the property.\n\nSee {{#crossLink \"Ember.ComputedProperty\"}}{{/crossLink}},\n
    \ {{#crossLink \"Ember/computed\"}}{{/crossLink}}"
  itemtype: method
  name: property
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 73
  description: ! "The `observes` extension of Javascript's Function prototype is available\nwhen
    `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which
    is the default.\n\nYou can observe property changes simply by adding the `observes`\ncall
    to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.create({\n
    \ valueObserver: function() {\n    // Executes whenever the \"value\" property
    changes\n  }.observes('value')\n});\n```\n\nSee {{#crossLink \"Ember.Observable/observes\"}}{{/crossLink}}"
  itemtype: method
  name: observes
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/function.js
  line: 100
  description: ! "The `observesBefore` extension of Javascript's Function prototype
    is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function`
    is true, which is the default.\n\nYou can get notified when a property changes
    is about to happen by\nby adding the `observesBefore` call to the end of your
    method\ndeclarations in classes that you write. For example:\n\n```javascript\nEmber.Object.create({\n
    \ valueObserver: function() {\n    // Executes whenever the \"value\" property
    is about to change\n  }.observesBefore('value')\n});\n```\n\nSee {{#crossLink
    \"Ember.Observable/observesBefore\"}}{{/crossLink}}"
  itemtype: method
  name: observesBefore
  class: Function
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 23
  description: See {{#crossLink "Ember.String/fmt"}}{{/crossLink}}
  itemtype: method
  name: fmt
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 33
  description: See {{#crossLink "Ember.String/w"}}{{/crossLink}}
  itemtype: method
  name: w
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 43
  description: See {{#crossLink "Ember.String/loc"}}{{/crossLink}}
  itemtype: method
  name: loc
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 53
  description: See {{#crossLink "Ember.String/camelize"}}{{/crossLink}}
  itemtype: method
  name: camelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 63
  description: See {{#crossLink "Ember.String/decamelize"}}{{/crossLink}}
  itemtype: method
  name: decamelize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 73
  description: See {{#crossLink "Ember.String/dasherize"}}{{/crossLink}}
  itemtype: method
  name: dasherize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 83
  description: See {{#crossLink "Ember.String/underscore"}}{{/crossLink}}
  itemtype: method
  name: underscore
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 93
  description: See {{#crossLink "Ember.String/classify"}}{{/crossLink}}
  itemtype: method
  name: classify
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/ext/string.js
  line: 103
  description: See {{#crossLink "Ember.String/capitalize"}}{{/crossLink}}
  itemtype: method
  name: capitalize
  class: String
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 57
  description: ! 'Your array must support the `length` property. Your replace methods
    should

    set this property whenever it changes.'
  itemtype: property
  name: length
  type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 65
  description: ! 'Returns the object at the given `index`. If the given `index` is
    negative

    or is greater or equal than the array length, returns `undefined`.


    This is one of the primitives you must implement to support `Ember.Array`.

    If your object supports retrieving the value of an array item using `get()`

    (i.e. `myArray.get(0)`), then you do not need to implement this method

    yourself.


    ```javascript

    var arr = [''a'', ''b'', ''c'', ''d''];

    arr.objectAt(0);   // "a"

    arr.objectAt(3);   // "d"

    arr.objectAt(-1);  // undefined

    arr.objectAt(4);   // undefined

    arr.objectAt(5);   // undefined

    ```'
  itemtype: method
  name: objectAt
  params:
  - name: idx
    description: The index of the item to return.
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 91
  description: ! 'This returns the objects at the specified indexes, using `objectAt`.


    ```javascript

    var arr = [''a'', ''b'', ''c'', ''d''];

    arr.objectsAt([0, 1, 2]);  // ["a", "b", "c"]

    arr.objectsAt([2, 3, 4]);  // ["c", "d", undefined]

    ```'
  itemtype: method
  name: objectsAt
  params:
  - name: indexes
    description: An array of indexes of items to return.
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 113
  description: ! 'This is the handler for the special array content property. If you
    get

    this property, it will return this. If you set this property it a new

    array, it will replace the current content.


    This property overrides the default property defined in `Ember.Enumerable`.'
  itemtype: property
  name: ! '[]'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 141
  description: ! 'Returns a new array that is a slice of the receiver. This implementation

    uses the observable array methods to retrieve the objects for the new

    slice.


    ```javascript

    var arr = [''red'', ''green'', ''blue''];

    arr.slice(0);       // [''red'', ''green'', ''blue'']

    arr.slice(0, 2);    // [''red'', ''green'']

    arr.slice(1, 100);  // [''green'', ''blue'']

    ```'
  itemtype: method
  name: slice
  params:
  - name: beginIndex
    description: (Optional) index to begin slicing from.
    type: Integer
  - name: endIndex
    description: (Optional) index to end the slice at.
    type: Integer
  return:
    description: New array with specified slice
    type: Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 169
  description: ! 'Returns the index of the given object''s first occurrence.

    If no `startAt` argument is given, the starting location to

    search is 0. If it''s negative, will count backward from

    the end of the array. Returns -1 if no match is found.


    ```javascript

    var arr = ["a", "b", "c", "d", "a"];

    arr.indexOf("a");       //  0

    arr.indexOf("z");       // -1

    arr.indexOf("a", 2);    //  4

    arr.indexOf("a", -1);   //  4

    arr.indexOf("b", 3);    // -1

    arr.indexOf("a", 100);  // -1

    ```'
  itemtype: method
  name: indexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 202
  description: ! 'Returns the index of the given object''s last occurrence.

    If no `startAt` argument is given, the search starts from

    the last position. If it''s negative, will count backward

    from the end of the array. Returns -1 if no match is found.


    ```javascript

    var arr = ["a", "b", "c", "d", "a"];

    arr.lastIndexOf("a");       //  4

    arr.lastIndexOf("z");       // -1

    arr.lastIndexOf("a", 2);    //  0

    arr.lastIndexOf("a", -1);   //  4

    arr.lastIndexOf("b", 3);    //  1

    arr.lastIndexOf("a", 100);  //  4

    ```'
  itemtype: method
  name: lastIndexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 239
  description: ! "Adds an array observer to the receiving array. The array observer
    object\nnormally must implement two methods:\n\n* `arrayWillChange(start, removeCount,
    addCount)` - This method will be\n  called just before the array is modified.\n*
    `arrayDidChange(start, removeCount, addCount)` - This method will be\n  called
    just after the array is modified.\n\nBoth callbacks will be passed the starting
    index of the change as well a\na count of the items to be removed and added. You
    can use these callbacks\nto optionally inspect the array during the change, clear
    caches, or do\nany other bookkeeping necessary.\n\nIn addition to passing a target,
    you can also include an options hash\nwhich you can use to override the method
    names that will be invoked on the\ntarget."
  itemtype: method
  name: addArrayObserver
  params:
  - name: target
    description: The observer object.
    type: Object
  - name: opts
    description: ! "Optional hash of configuration options including\n  `willChange`,
      `didChange`, and a `context` option."
    type: Hash
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 275
  description: ! 'Removes an array observer from the object if the observer is current

    registered. Calling this method multiple times with the same object will

    have no effect.'
  itemtype: method
  name: removeArrayObserver
  params:
  - name: target
    description: The object observing the array.
    type: Object
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 296
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: Boolean
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 306
  description: ! 'If you are implementing an object that supports `Ember.Array`, call
    this

    method just before the array content changes to notify any observers and

    invalidate any related properties. Pass the starting index of the change

    as well as a delta of the amounts to change.'
  itemtype: method
  name: arrayContentWillChange
  params:
  - name: startIdx
    description: The starting index in the array that will change.
    type: Number
  - name: removeAmt
    description: ! "The number of items that will be removed. If you \n  pass `null`
      assumes 0"
    type: Number
  - name: addAmt
    description: ! "The number of items that will be added  If you \n  pass `null`
      assumes 0."
    type: Number
  return:
    description: receiver
    type: Ember.Array
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/array.js
  line: 392
  description: ! 'Returns a special object that can be used to observe individual
    properties

    on the array. Just get an equivalent property on this object and it will

    return an enumerable that maps automatically to the named key on the

    member objects.'
  itemtype: property
  name: ! '@each'
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/comparable.js
  line: 22
  description: walk like a duck. Indicates that the object can be compared.
  itemtype: property
  name: isComparable
  type: Boolean
  default: 'true'
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/comparable.js
  line: 31
  description: ! 'Override to return the result of the comparison of the two parameters.
    The

    compare method should return:


    - `-1` if `a < b`

    - `0` if `a == b`

    - `1` if `a > b`


    Default implementation raises an exception.'
  itemtype: method
  name: compare
  params:
  - name: a
    description: the first object to compare
    type: Object
  - name: b
    description: the second object to compare
    type: Object
  return:
    description: the result of the comparison
    type: Integer
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 29
  description: ! "/**\n    Override to return a copy of the receiver. Default implementation
    raises\n    an exception."
  itemtype: method
  name: copy
  params:
  - name: deep
    description: if `true`, a deep copy of the object should be made
    type: Boolean
  return:
    description: copy of receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/copyable.js
  line: 41
  description: ! 'If the object implements `Ember.Freezable`, then this will return
    a new

    copy if the object is not frozen and the receiver if the object is frozen.


    Raises an exception if you try to call this method on a object that does

    not support freezing.


    You should use this method whenever you want a copy of a freezable object

    since a freezable object can simply return itself without actually

    consuming more memory.'
  itemtype: method
  name: frozenCopy
  return:
    description: copy of receiver or receiver
    type: Object
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 21
  description: Add handlers to be called when the Deferred object is resolved or rejected.
  itemtype: method
  name: then
  params:
  - name: doneCallback
    description: a callback function to be called when done
    type: Function
  - name: failCallback
    description: a callback function to be called when failed
    type: Function
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 33
  description: Resolve a Deferred object and call any `doneCallbacks` with the given
    args.
  itemtype: method
  name: resolve
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/deferred.js
  line: 42
  description: Reject a Deferred object and call any `failCallbacks` with the given
    args.
  itemtype: method
  name: reject
  class: Ember.Deferred
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 74
  description: ! "// compatibility\n  isEnumerable: true,\n/**\n    Implement this
    method to make your class enumerable.\n  This method will be call repeatedly during
    enumeration. The index value\n    will always begin with 0 and increment monotonically.
    You don't have to\n    rely on the index value to determine what object to return,
    but you should\n    always check the value and start from the beginning when you
    see the\n    requested index is 0.\n  The `previousObject` is the object that
    was returned from the last call\n    to `nextObject` for the current iteration.
    This is a useful way to\n    manage iteration if you are tracing a linked list,
    for example.\n  Finally the context parameter will always contain a hash you can
    use as\n    a \"scratchpad\" to maintain any other state you need in order to
    iterate\n    properly. The context object is reused and is not reset between\n
    \   iterations so make sure you setup the context with a fresh state whenever\n
    \   the index parameter is 0.\n  Generally iterators will continue to call `nextObject`
    until the index\n    reaches the your current length-1. If you run out of data
    before this\n    time for some reason, you should simply return undefined.\n  The
    default implementation of this method simply looks up the index.\n    This works
    great on any Array-like objects."
  itemtype: method
  name: nextObject
  params:
  - name: index
    description: the current index of the iteration
    type: Number
  - name: previousObject
    description: ! "the value returned by the last call to \n      `nextObject`."
    type: Object
  - name: context
    description: a context object you can use to maintain state.
    type: Object
  return:
    description: the next object in the iteration or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 114
  description: ! 'Helper method returns the first object from a collection. This is
    usually

    used by bindings and other parts of the framework to extract a single

    object if the enumerable contains only one item.


    If you override this method, you should implement it so that it will

    always return the same value each time it is called. If your enumerable

    contains only one object, this method should always return that object.

    If your enumerable is empty, this method should return `undefined`.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.firstObject();  // "a"


    var arr = [];

    arr.firstObject();  // undefined

    ```'
  itemtype: property
  name: firstObject
  return:
    description: the object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 145
  description: ! 'Helper method returns the last object from a collection. If your
    enumerable

    contains only one object, this method should always return that object.

    If your enumerable is empty, this method should return `undefined`.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.lastObject();  // "c"


    var arr = [];

    arr.lastObject();  // undefined

    ```'
  itemtype: property
  name: lastObject
  return:
    description: the last object or undefined
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 173
  description: ! 'Returns `true` if the passed object can be found in the receiver.
    The

    default version will iterate through the enumerable until the object

    is found. You may want to override this with a more efficient version.


    ```javascript

    var arr = ["a", "b", "c"];

    arr.contains("a"); // true

    arr.contains("z"); // false

    ```'
  itemtype: method
  name: contains
  params:
  - name: obj
    description: The object to search for.
    type: Object
  return:
    description: ! '`true` if object is found in enumerable.'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 192
  description: ! 'Iterates through the enumerable, calling the passed function on
    each

    item. This method corresponds to the `forEach()` method defined in

    JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 233
  description: Alias for `mapProperty`
  itemtype: method
  name: getEach
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 244
  description: ! 'Sets the value on the named property for each member. This is more

    efficient than using other methods defined on this helper. If the object

    implements Ember.Observable, the value will be changed to `set(),` otherwise

    it will be set directly. `null` objects are skipped.'
  itemtype: method
  name: setEach
  params:
  - name: key
    description: The key to set
    type: String
  - name: value
    description: The object to set
    type: Object
  return:
    description: receiver
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 261
  description: ! 'Maps all of the items in the enumeration to another value, returning

    a new array. This method corresponds to `map()` defined in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the mapped value.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: map
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 295
  description: ! 'Similar to map, this specialized function returns the value of the
    named

    property on all items in the enumeration.'
  itemtype: method
  name: mapProperty
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 309
  description: ! 'Returns an array with all of the items in the enumeration that the
    passed

    function returns true for. This method corresponds to `filter()` defined in

    JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: filter
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 345
  description: ! "Returns an array with all of the items in the enumeration where
    the passed\nfunction returns false for. This method is the inverse of filter().\n\nThe
    callback method you provide should have the following signature (all\nparameters
    are optional):\n\n      function(item, index, enumerable);\n\n- *item* is the
    current item in the iteration.\n- *index* is the current index in the iteration\n-
    *enumerable* is the enumerable object itself.\n\nIt should return the a falsey
    value to include the item in the results.\n\nNote that in addition to a callback,
    you can also pass an optional target\nobject that will be set as \"this\" on the
    context. This is a good way\nto give your iterator function access to the current
    object."
  itemtype: method
  name: reject
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A rejected array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 375
  description: ! 'Returns an array with just the items with the matched property.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.'
  itemtype: method
  name: filterProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: filtered array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 389
  description: ! 'Returns an array with the items that do not have truthy values for

    key.  You can pass an optional second argument with the target value.  Otherwise

    this will match any property that evaluates to false.'
  itemtype: method
  name: rejectProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 407
  description: ! 'Returns the first item in the array for which the callback returns
    true.

    This method works similar to the `filter()` method defined in JavaScript 1.6

    except that it will stop working on the array once a match is found.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.'
  itemtype: method
  name: find
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: Found item or `undefined`.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 451
  description: ! 'Returns the first item with a property matching the passed value.
    You

    can pass an optional second argument with the target value. Otherwise

    this will match any property that evaluates to `true`.


    This method works much like the more generic `find()` method.'
  itemtype: method
  name: findProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 467
  description: ! 'Returns `true` if the passed function returns true for every item
    in the

    enumeration. This corresponds with the `every()` method in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` or `false`.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.


    Example Usage:


    ```javascript

    if (people.every(isEngineer)) { Paychecks.addBigBonus(); }

    ```'
  itemtype: method
  name: every
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 505
  description: ! 'Returns `true` if the passed property resolves to `true` for all
    items in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: everyProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 519
  description: ! 'Returns `true` if the passed function returns true for any item
    in the

    enumeration. This corresponds with the `some()` method in JavaScript 1.6.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(item, index, enumerable);

    ```


    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    It should return the `true` to include the item in the results, `false`

    otherwise.


    Note that in addition to a callback, you can also pass an optional target

    object that will be set as `this` on the context. This is a good way

    to give your iterator function access to the current object.


    Usage Example:


    ```javascript

    if (people.some(isManager)) { Paychecks.addBiggerBonus(); }

    ```'
  itemtype: method
  name: some
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 558
  description: ! 'Returns `true` if the passed property resolves to `true` for any
    item in

    the enumerable. This method is often simpler/faster than using a callback.'
  itemtype: method
  name: someProperty
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: ! '`true`'
    type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 571
  description: ! 'This will combine the values of the enumerator into a single value.
    It

    is a useful way to collect a summary value from an enumeration. This

    corresponds to the `reduce()` method defined in JavaScript 1.8.


    The callback method you provide should have the following signature (all

    parameters are optional):


    ```javascript

    function(previousValue, item, index, enumerable);

    ```


    - `previousValue` is the value returned by the last call to the iterator.

    - `item` is the current item in the iteration.

    - `index` is the current index in the iteration.

    - `enumerable` is the enumerable object itself.


    Return the new cumulative value.


    In addition to the callback you can also pass an `initialValue`. An error

    will be raised if you do not pass an initial value and the enumerator is

    empty.


    Note that unlike the other methods, this method does not allow you to

    pass a target object to set as this for the callback. It''s part of the

    spec. Sorry.'
  itemtype: method
  name: reduce
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: initialValue
    description: Initial value for the reduce
    type: Object
  - name: reducerProperty
    description: internal use only.
    type: String
  return:
    description: The reduced value.
    type: Object
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 616
  description: ! 'Invokes the named method on every object in the receiver that

    implements it. This method corresponds to the implementation in

    Prototype 1.6.'
  itemtype: method
  name: invoke
  params:
  - name: methodName
    description: the name of the method
    type: String
  - name: args
    description: optional arguments to pass as well.
    type: Object...
  return:
    description: return values from calling invoke.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 640
  description: ! 'Simply converts the enumerable into a genuine array. The order is
    not

    guaranteed. Corresponds to the method implemented by Prototype.'
  itemtype: method
  name: toArray
  return:
    description: the enumerable as an array.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 653
  description: ! 'Returns a copy of the array with all null elements removed.


    ```javascript

    var arr = ["a", null, "c", null];

    arr.compact();  // ["a", "c"]

    ```'
  itemtype: method
  name: compact
  return:
    description: the array without null elements.
    type: Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 666
  description: ! 'Returns a new enumerable that excludes the passed value. The default

    implementation returns an array regardless of the receiver type unless

    the receiver does not contain the value.


    ```javascript

    var arr = ["a", "b", "a", "c"];

    arr.without("a");  // ["b", "c"]

    ```'
  itemtype: method
  name: without
  params:
  - name: value
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 689
  description: ! 'Returns a new enumerable that contains only unique values. The default

    implementation returns an array regardless of the receiver type.


    ```javascript

    var arr = ["a", "a", "b", "b"];

    arr.uniq();  // ["a", "b"]

    ```'
  itemtype: method
  name: uniq
  return:
    description: ''
    type: Ember.Enumerable
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 709
  description: ! 'This property will trigger anytime the enumerable''s content changes.

    You can observe this property to be notified of changes to the enumerables

    content.


    For plain enumerables, this property is read only. `Ember.Array` overrides

    this method.'
  itemtype: property
  name: ! '[]'
  type: Ember.Array
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 728
  description: ! 'Registers an enumerable observer. Must implement `Ember.EnumerableObserver`

    mixin.'
  itemtype: method
  name: addEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 748
  description: Removes a registered enumerable observer.
  itemtype: method
  name: removeEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Hash
    optional: true
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 767
  description: ! 'Becomes true whenever the array currently has observers watching
    changes

    on the array.'
  itemtype: property
  name: hasEnumerableObservers
  type: Boolean
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 779
  description: ! 'Invoke this method just before the contents of your enumerable will

    change. You can either omit the parameters completely or pass the objects

    to be removed or added if available or just a count.'
  itemtype: method
  name: enumerableContentWillChange
  params:
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to be\n  added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/enumerable.js
  line: 815
  description: ! 'Invoke this method when the contents of your enumerable has changed.

    This will notify any observers watching for content changes. If your are

    implementing an ordered enumerable (such as an array), also pass the

    start and end values where the content changed so that it can be used to

    notify range observers.'
  itemtype: method
  name: enumerableContentDidChange
  params:
  - name: start
    description: ! "optional start offset for the content change.\n  For unordered
      enumerables, you should always pass -1."
    type: Number
    optional: true
  - name: removing
    description: ! "An enumerable of the objects to\n  be removed or the number of
      items to be removed."
    type: Ember.Enumerable|Number
  - name: adding
    description: ! "An enumerable of the objects to\n  be added or the number of items
      to be added."
    type: Ember.Enumerable|Number
  chainable: 1
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 34
  description: ! "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad',
    function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target
    can be passed in as the 2nd argument that will\nbe set as the \"this\" for the
    callback. This is a good way to give your\nfunction access to the object triggering
    the event. When the target\nparameter is used the callback becomes the third argument."
  itemtype: method
  name: 'on'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 57
  description: ! 'Subscribes a function to a named event and then cancels the subscription

    after the first time the event is triggered. It is good to use ``one`` when

    you only care about the first time an event has taken place.


    This function takes an optional 2nd argument that will become the "this"

    value for the callback. If this argument is passed then the 3rd argument

    becomes the function.'
  itemtype: method
  name: one
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 80
  description: ! "Triggers a named event for the object. Any additional arguments\nwill
    be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat',
    function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat',
    'broccoli');\n\n// outputs: person ate some broccoli\n```"
  itemtype: method
  name: trigger
  params:
  - name: name
    description: The name of the event
    type: String
  - name: args
    description: Optional arguments to pass on
    type: Object...
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 111
  description: Cancels subscription for give name, target, and method.
  itemtype: method
  name: 'off'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The target of the subscription
    type: Object
  - name: method
    description: The function of the subscription
    type: Function
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/evented.js
  line: 123
  description: Checks to see if object has any subscriptions for named event.
  itemtype: method
  name: has
  params:
  - name: name
    description: The name of the event
    type: String
  return:
    description: does the object have a subscription for event
    type: Boolean
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 67
  description: ! "/**\n    Set to `true` when the object is frozen. Use this property
    to detect\n    whether your object is frozen or not."
  itemtype: property
  name: isFrozen
  type: Boolean
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/freezable.js
  line: 78
  description: ! 'Freezes the object. Once this method has been called the object
    should

    no longer allow any properties to be edited.'
  itemtype: method
  name: freeze
  return:
    description: receiver
    type: Object
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 38
  description: ! "/**\n    __Required.__ You must implement this method to apply this
    mixin.\n  This is one of the primitives you must implement to support `Ember.Array`.\n
    \   You should replace amt objects started at idx with the objects in the\n    passed
    array. You should also call `this.enumerableContentDidChange()`"
  itemtype: method
  name: replace
  params:
  - name: idx
    description: ! "Starting index in the array to replace. If \n      idx >= length,
      then append to the end of the array."
    type: Number
  - name: amt
    description: ! "Number of elements that should be removed from \n      the array,
      starting at *idx*."
    type: Number
  - name: objects
    description: ! "An array of zero or more objects that should be \n      inserted
      into the array at *idx*"
    type: Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 57
  description: ! 'Remove all elements from self. This is useful if you

    want to reuse an existing array without having to recreate it.


    ```javascript

    var colors = ["red", "green", "blue"];

    color.length();   //  3

    colors.clear();   //  []

    colors.length();  //  0

    ```'
  itemtype: method
  name: clear
  return:
    description: An empty Array.
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 78
  description: ! 'This will use the primitive `replace()` method to insert an object
    at the

    specified index.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.insertAt(2, "yellow");  // ["red", "green", "yellow", "blue"]

    colors.insertAt(5, "orange");  // Error: Index out of range

    ```'
  itemtype: method
  name: insertAt
  params:
  - name: idx
    description: index of insert the object at.
    type: Number
  - name: object
    description: object to insert
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 98
  description: ! 'Remove an object at the specified index using the `replace()` primitive

    method. You can pass either a single index, or a start and a length.


    If you pass a start and length that is beyond the

    length this method will throw an `Ember.OUT_OF_RANGE_EXCEPTION`


    ```javascript

    var colors = ["red", "green", "blue", "yellow", "orange"];

    colors.removeAt(0);     // ["green", "blue", "yellow", "orange"]

    colors.removeAt(2, 2);  // ["green", "blue"]

    colors.removeAt(4, 2);  // Error: Index out of range

    ```'
  itemtype: method
  name: removeAt
  params:
  - name: start
    description: index, start of range
    type: Number
  - name: len
    description: length of passing range
    type: Number
  return:
    description: receiver
    type: Object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 132
  description: ! 'Push the object onto the end of the array. Works just like `push()`
    but it

    is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.pushObject("black");               // ["red", "green", "blue", "black"]

    colors.pushObject(["yellow", "orange"]);  // ["red", "green", "blue", "black",
    ["yellow", "orange"]]

    ```'
  itemtype: method
  name: pushObject
  params:
  - name: obj
    description: object to push
    type: Anything
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 150
  description: ! 'Add the objects in the passed numerable to the end of the array.
    Defers

    notifying observers of the change until all objects are added.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.pushObjects("black");               // ["red", "green", "blue", "black"]

    colors.pushObjects(["yellow", "orange"]);  // ["red", "green", "blue", "black",
    "yellow", "orange"]

    ```'
  itemtype: method
  name: pushObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 169
  description: ! 'Pop object from array or nil if none are left. Works just like `pop()`
    but

    it is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.popObject();   // "blue"

    console.log(colors);  // ["red", "green"]

    ```'
  itemtype: method
  name: popObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 191
  description: ! 'Shift an object from start of array or nil if none are left. Works
    just

    like `shift()` but it is KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.shiftObject();  // "red"

    console.log(colors);   // ["green", "blue"]

    ```'
  itemtype: method
  name: shiftObject
  return:
    description: object
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 211
  description: ! 'Unshift an object to start of array. Works just like `unshift()`
    but it is

    KVO-compliant.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.unshiftObject("yellow");             // ["yellow", "red", "green", "blue"]

    colors.unshiftObject(["black", "white"]);   // [["black", "white"], "yellow",
    "red", "green", "blue"]

    ```'
  itemtype: method
  name: unshiftObject
  params:
  - name: obj
    description: object to unshift
    type: Anything
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 229
  description: ! 'Adds the named objects to the beginning of the array. Defers notifying

    observers until all objects have been added.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.unshiftObjects(["black", "white"]);   // ["black", "white", "red", "green",
    "blue"]

    colors.unshiftObjects("yellow");             // Type Error: ''undefined'' is not
    a function

    ```'
  itemtype: method
  name: unshiftObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 248
  description: ! 'Reverse objects in the array. Works just like `reverse()` but it
    is

    KVO-compliant.'
  itemtype: method
  name: reverseObjects
  return:
    description: receiver
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_array.js
  line: 263
  description: ! 'Replace all the the receiver''s content with content of the argument.

    If argument is an empty array receiver will be cleared.


    ```javascript

    var colors = ["red", "green", "blue"];

    colors.setObjects(["black", "white"]);  // ["black", "white"]

    colors.setObjects([]);                  // []

    ```'
  itemtype: method
  name: setObjects
  params:
  - name: objects
    description: ! "array whose content will be used for replacing\n    the content
      of the receiver"
    type: Ember.Array
  return:
    description: receiver with the new content
    type: Ember.Array
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 51
  description: ! "/**\n    __Required.__ You must implement this method to apply this
    mixin.\n  Attempts to add the passed object to the receiver if the object is not\n
    \   already present in the collection. If the object is present, this method\n
    \   has no effect.\n  If the passed object is of a type not supported by the receiver\n
    \   then this method should raise an exception."
  itemtype: method
  name: addObject
  params:
  - name: object
    description: The object to add to the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 69
  description: Adds each object in the passed enumerable to the receiver.
  itemtype: method
  name: addObjects
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 83
  description: ! '__Required.__ You must implement this method to apply this mixin.


    Attempts to remove the passed object from the receiver collection if the

    object is in present in the collection. If the object is not present,

    this method has no effect.


    If the passed object is of a type not supported by the receiver

    then this method should raise an exception.'
  itemtype: method
  name: removeObject
  params:
  - name: object
    description: The object to remove from the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 100
  description: Removes each objects in the passed enumerable from the receiver.
  itemtype: method
  name: removeObjects
  params:
  - name: objects
    description: the objects to remove
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 76
  description: ! "Retrieves the value of a property from the object.\n\nThis method
    is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it
    supports both computed properties and the unknownProperty\nhandler.\n\nBecause
    `get` unifies the syntax for accessing all these kinds\nof properties, it can
    make many refactorings easier, such as replacing a\nsimple property with a computed
    property, or vice versa.\n\n### Computed Properties\n\nComputed properties are
    methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nfullName:
    function() {\n  return this.getEach('firstName', 'lastName').compact().join('
    ');\n}.property('firstName', 'lastName')\n```\n\nWhen you call `get` on a computed
    property, the function will be\ncalled and the return value will be returned instead
    of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to
    call `get` on a property whose value is\n`undefined`, the `unknownProperty()`
    method will be called on the object.\nIf this method returns any value other than
    `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\"
    properties that are\nnot defined upfront."
  itemtype: method
  name: get
  params:
  - name: key
    description: The property to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 118
  description: ! 'To get multiple properties at once, call `getProperties`

    with a list of strings or an array:


    ```javascript

    record.getProperties(''firstName'', ''lastName'', ''zipCode'');  // { firstName:
    ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```


    is equivalent to:


    ```javascript

    record.getProperties([''firstName'', ''lastName'', ''zipCode'']);  // { firstName:
    ''John'', lastName: ''Doe'', zipCode: ''10011'' }

    ```'
  itemtype: method
  name: getProperties
  params:
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Hash
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 148
  description: ! 'Sets the provided key or path to the value.


    This method is generally very similar to calling `object[key] = value` or

    `object.key = value`, except that it provides support for computed

    properties, the `unknownProperty()` method and property observers.


    ### Computed Properties


    If you try to set a value on a key that has a computed property handler

    defined (see the `get()` method for an example), then `set()` will call

    that method, passing both the value and key instead of simply changing

    the value itself. This is useful for those times when you need to

    implement a property that is composed of one or more member

    properties.


    ### Unknown Properties


    If you try to set a value on a key that is undefined in the target

    object, then the `unknownProperty()` handler will be called instead. This

    gives you an opportunity to implement complex "virtual" properties that

    are not predefined on the object. If `unknownProperty()` returns

    undefined, then `set()` will simply set the value on the object.


    ### Property Observers


    In addition to changing the property, `set()` will also register a property

    change with the object. Unless you have placed this call inside of a

    `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers

    (i.e. observer methods declared on the same object), will be called

    immediately. Any "remote" observers (i.e. observer methods declared on

    another object) will be placed in a queue and called at a later time in a

    coalesced manner.


    ### Chaining


    In addition to property changes, `set()` returns the value of the object

    itself so you can do chaining like this:


    ```javascript

    record.set(''firstName'', ''Charles'').set(''lastName'', ''Jolley'');

    ```'
  itemtype: method
  name: set
  params:
  - name: key
    description: The property to set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 201
  description: ! 'To set multiple properties at once, call `setProperties`

    with a Hash:


    ```javascript

    record.setProperties({ firstName: ''Charles'', lastName: ''Jolley'' });

    ```'
  itemtype: method
  name: setProperties
  params:
  - name: hash
    description: the hash of keys and values to set
    type: Hash
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 217
  description: ! 'Begins a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call this

    method at the beginning of the changes to begin deferring change

    notifications. When you are done making changes, call

    `endPropertyChanges()` to deliver the deferred change notifications and end

    deferring.'
  itemtype: method
  name: beginPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 236
  description: ! 'Ends a grouping of property changes.


    You can use this method to group property changes so that notifications

    will not be sent until the changes are finished. If you plan to make a

    large number of changes to an object at one time, you should call

    `beginPropertyChanges()` at the beginning of the changes to defer change

    notifications. When you are done making changes, call this method to

    deliver the deferred change notifications and end deferring.'
  itemtype: method
  name: endPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 254
  description: ! 'Notify the observer system that a property is about to change.


    Sometimes you need to change a value directly or indirectly without

    actually calling `get()` or `set()` on it. In this case, you can use this

    method and `propertyDidChange()` instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call `propertyWillChange` and `propertyDidChange`

    as a pair. If you do not, it may get the property change groups out of

    order and cause notifications to be delivered more often than you would

    like.'
  itemtype: method
  name: propertyWillChange
  params:
  - name: key
    description: The property key that is about to change.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 277
  description: ! 'Notify the observer system that a property has just changed.


    Sometimes you need to change a value directly or indirectly without

    actually calling `get()` or `set()` on it. In this case, you can use this

    method and `propertyWillChange()` instead. Calling these two methods

    together will notify all observers that the property has potentially

    changed value.


    Note that you must always call `propertyWillChange` and `propertyDidChange`

    as a pair. If you do not, it may get the property change groups out of

    order and cause notifications to be delivered more often than you would

    like.'
  itemtype: method
  name: propertyDidChange
  params:
  - name: keyName
    description: The property key that has just changed.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 300
  description: ! 'Convenience method to call `propertyWillChange` and `propertyDidChange`
    in

    succession.'
  itemtype: method
  name: notifyPropertyChange
  params:
  - name: keyName
    description: The property key to be notified about.
    type: String
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 318
  description: ! 'Adds an observer on a property.


    This is the core method used to register an observer for a property.


    Once you call this method, anytime the key''s value is set, your observer

    will be notified. Note that the observers are triggered anytime the

    value is set, regardless of whether it has actually changed. Your

    observer should be prepared to handle that.


    You can also pass an optional context parameter to this method. The

    context will be passed to your observer method whenever it is triggered.

    Note that if you add the same target/method pair on a key multiple times

    with different context parameters, your observer will only be called once

    with the last context you passed.


    ### Observer Methods


    Observer methods you pass should generally have the following signature if

    you do not pass a `context` parameter:


    ```javascript

    fooDidChange: function(sender, key, value, rev) { };

    ```


    The sender is the object that changed. The key is the property that

    changes. The value property is currently reserved and unused. The rev

    is the last property revision of the object when it changed, which you can

    use to detect if the key value has really changed or not.


    If you pass a `context` parameter, the context will be passed before the

    revision like so:


    ```javascript

    fooDidChange: function(sender, key, value, context, rev) { };

    ```


    Usually you will not need the value, context or revision parameters at

    the end. In this case, it is common to write observer methods that take

    only a sender and key value as parameters or, if you aren''t interested in

    any of these values, to write an observer that has no parameters at all.'
  itemtype: method
  name: addObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: self
    type: Ember.Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 370
  description: ! 'Remove an observer you have previously registered on this object.
    Pass

    the same key, target, and method you passed to `addObserver()` and your

    target will no longer receive notifications.'
  itemtype: method
  name: removeObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  return:
    description: receiver
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 385
  description: ! 'Returns `true` if the object currently has observers registered
    for a

    particular key. You can use this method to potentially defer performing

    an expensive action until someone begins observing a particular property

    on the object.'
  itemtype: method
  name: hasObserverFor
  params:
  - name: key
    description: Key to check
    type: String
  return:
    description: ''
    type: Boolean
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 399
  deprecated: true
  itemtype: method
  name: getPath
  params:
  - name: path
    description: The property path to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 410
  deprecated: true
  itemtype: method
  name: setPath
  params:
  - name: path
    description: The path to the property that will be set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: ''
    type: Ember.Observable
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 422
  description: ! 'Retrieves the value of a property, or a default value in the case
    that the

    property returns `undefined`.


    ```javascript

    person.getWithDefault(''lastName'', ''Doe'');

    ```'
  itemtype: method
  name: getWithDefault
  params:
  - name: keyName
    description: The name of the property to retrieve
    type: String
  - name: defaultValue
    description: The value to return if the property value is undefined
    type: Object
  return:
    description: The property value or the defaultValue.
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 439
  description: ! 'Set the value of a property to the current value plus some amount.


    ```javascript

    person.incrementProperty(''age'');

    team.incrementProperty(''score'', 2);

    ```'
  itemtype: method
  name: incrementProperty
  params:
  - name: keyName
    description: The name of the property to increment
    type: String
  - name: increment
    description: The amount to increment by. Defaults to 1
    type: Object
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 458
  description: ! 'Set the value of a property to the current value minus some amount.


    ```javascript

    player.decrementProperty(''lives'');

    orc.decrementProperty(''health'', 5);

    ```'
  itemtype: method
  name: decrementProperty
  params:
  - name: keyName
    description: The name of the property to decrement
    type: String
  - name: increment
    description: The amount to decrement by. Defaults to 1
    type: Object
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 477
  description: ! 'Set the value of a boolean property to the opposite of it''s

    current value.


    ```javascript

    starship.toggleProperty(''warpDriveEnaged'');

    ```'
  itemtype: method
  name: toggleProperty
  params:
  - name: keyName
    description: The name of the property to toggle
    type: String
  return:
    description: The new property value
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/observable.js
  line: 494
  description: ! 'Returns the cached value of a computed property, if it exists.

    This allows you to inspect the value of a computed property

    without accidentally invoking it if it is intended to be

    generated lazily.'
  itemtype: method
  name: cacheFor
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The cached value of the computed property, if any
    type: Object
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 40
  description: Specifies which properties dictate the arrangedContent's sort order.
  itemtype: property
  name: sortProperties
  type: Array
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/mixins/sortable.js
  line: 47
  description: Specifies the arrangedContent's sort direction
  itemtype: property
  name: sortAscending
  type: Boolean
  class: Ember.SortableMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 51
  description: ! "/**\n    The content array. Must be an object that implements `Ember.Array`
    and/or\n    `Ember.MutableArray.`"
  itemtype: property
  name: content
  type: Ember.Array
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 62
  description: ! 'The array that the proxy pretends to be. In the default `ArrayProxy`

    implementation, this and `content` are the same. Subclasses of `ArrayProxy`

    can override this property to provide things like sorting and filtering.'
  itemtype: property
  name: arrangedContent
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 71
  description: ! 'Should actually retrieve the object at the specified index from
    the

    content. You can override this method in subclasses to transform the

    content item to something new.


    This method will only be called if content is non-`null`.'
  itemtype: method
  name: objectAtContent
  params:
  - name: idx
    description: The index to retrieve.
    type: Number
  return:
    description: the value or undefined if none found
    type: Object
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 86
  description: ! 'Should actually replace the specified objects on the content array.

    You can override this method in subclasses to transform the content item

    into something new.


    This method will only be called if content is non-`null`.'
  itemtype: method
  name: replaceContent
  params:
  - name: idx
    description: The starting index
    type: Number
  - name: amt
    description: The number of items to remove from the content.
    type: Number
  - name: objects
    description: ! "Optional array of objects to insert or null if no\n  objects."
    type: Array
  return:
    description: ''
    type: Void
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 104
  access: private
  tagname: ! 'Invoked when the content property is about to change. Notifies observers
    that the

    entire array content will change.'
  itemtype: method
  name: _contentWillChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/array_proxy.js
  line: 130
  access: private
  tagname: ! 'Invoked when the content property changes. Notifies observers that the

    entire array content has changed.'
  itemtype: method
  name: _contentDidChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 166
  description: ! "Defines the properties that will be concatenated from the superclass\n(instead
    of overridden).\n\nBy default, when you extend an Ember class a property defined
    in\nthe subclass overrides a property with the same name that is defined\nin the
    superclass. However, there are some cases where it is preferable\nto build up
    a property's value by combining the superclass' property\nvalue with the subclass'
    value. An example of this in use within Ember\nis the `classNames` property of
    `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty
    and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty:
    ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n
    \ someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo'],\n});\n\nvar fooBarView
    = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); //
    ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis
    behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar
    view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames:
    ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames');
    // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is
    not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n
    \ classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo',
    'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell to Ember
    that mix\nthe content of the properties.\n\nIn `Ember.View` the `classNameBindings`
    and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis
    feature is available for you to use throughout the Ember object model,\nalthough
    typical app developers are likely to use it infrequently."
  itemtype: property
  name: concatenatedProperties
  type: Array
  default: 'null'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 231
  itemtype: property
  name: isDestroyed
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 237
  itemtype: property
  name: isDestroying
  default: 'false'
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 243
  description: ! 'Destroys an object by setting the `isDestroyed` flag and removing
    its

    metadata, which effectively destroys observers and bindings.


    If you try to set a property on a destroyed object, an exception will be

    raised.


    Note that destruction is scheduled for the end of the run loop and does not

    happen immediately.'
  itemtype: method
  name: destroy
  return:
    description: receiver
    type: Ember.Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 268
  access: private
  tagname: ! 'Invoked by the run loop to actually destroy the object. This is

    scheduled for execution by the `destroy` method.'
  itemtype: method
  name: _scheduledDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 289
  description: ! "Returns a string representation which attempts to provide more information\nthan
    Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n
    \   App.Person = Em.Object.extend()\n    person = App.Person.create()\n    person.toString()
    //=> \"<App.Person:ember1024>\"\n\nIf the object's class is not defined on an
    Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n
    \   Student = App.Person.extend()\n    student = Student.create()\n    student.toString()
    //=> \"<(subclass of App.Person):ember1025>\"\n\nIf the method `toStringExtension`
    is defined, its return value will be\nincluded in the output.\n\n    App.Teacher
    = App.Person.extend({\n      toStringExtension: function(){\n        return this.get('fullName');\n
    \     }\n    });\n    teacher = App.Teacher.create()\n    teacher.toString();
    // #=> \"<App.Teacher:ember1026:Tom Dale>\""
  itemtype: method
  name: toString
  return:
    description: string representation
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 409
  description: ! "In some cases, you may want to annotate computed properties with
    additional\nmetadata about how they function or what values they operate on. For\nexample,
    computed property functions may close over variables that are then\nno longer
    available for introspection.\n\nYou can pass a hash of these values to a computed
    property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n
    \ return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person
    })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty
    from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis
    will return the original hash that was passed to `meta()`."
  itemtype: method
  name: metaForProperty
  params:
  - name: key
    description: property name
    type: String
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/core_object.js
  line: 443
  description: ! 'Iterate over each computed property for the class, passing its name

    and any associated metadata (see `metaForProperty`) to the callback.'
  itemtype: method
  name: eachComputedProperty
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/each_proxy.js
  line: 97
  description: ! 'You can directly access mapped properties by simply requesting them.

    The `unknownProperty` handler will generate an EachArray of each item.'
  itemtype: method
  name: unknownProperty
  params:
  - name: keyName
    description: ''
    type: String
  - name: value
    description: ''
    type: Anything
  class: Ember.EachProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 9
  itemtype: method
  name: onLoad
  params:
  - name: name
    description: name of hook
    type: String
  - name: callback
    description: callback to be called
    type: Function
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/lazy_load.js
  line: 26
  itemtype: method
  name: runLoadHooks
  params:
  - name: name
    description: name of hook
    type: String
  - name: object
    description: object to pass to callbacks
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 126
  description: ! 'Creates an `Ember.NativeArray` from an Array like object.

    Does not modify the original object.'
  itemtype: method
  name: A
  return:
    description: ''
    type: Ember.NativeArray
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/native_array.js
  line: 139
  description: ! 'Activates the mixin on the Array.prototype if not already applied.
    Calling

    this method more than once is safe.'
  itemtype: method
  name: activate
  static: 1
  return:
    description: ''
    type: Void
  class: Ember.NativeArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/object_proxy.js
  line: 98
  description: ! "/**\n  The object whose properties will be forwarded."
  itemtype: property
  name: content
  type: Ember.Object
  default: 'null'
  class: Ember.ObjectProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 112
  description: ! "// ..........................................................\n
    \ // IMPLEMENT ENUMERABLE APIS\n  //\n/**\n    This property will change as the
    number of objects in the set changes."
  itemtype: property
  name: length
  type: number
  default: '0'
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 127
  description: ! 'Clears the set. This is useful if you want to reuse an existing
    set

    without having to recreate it.


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.length;  // 3

    colors.clear();

    colors.length;  // 0

    ```'
  itemtype: method
  name: clear
  return:
    description: An empty Set
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 168
  description: ! "Returns true if the passed object is also an enumerable that contains
    the\nsame objects as the receiver.\n\n```javascript\nvar colors = [\"red\", \"green\",
    \"blue\"],\n    same_colors = new Ember.Set(colors);\n\nsame_colors.isEqual(colors);
    \              // true\nsame_colors.isEqual([\"purple\", \"brown\"]);  // false\n```"
  itemtype: method
  name: isEqual
  params:
  - name: obj
    description: the other object.
    type: Ember.Set
  return:
    description: ''
    type: Boolean
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 198
  description: ! 'Adds an object to the set. Only non-`null` objects can be added
    to a set

    and those can only be added once. If the object is already in the set or

    the passed value is null this method will have no effect.


    This is an alias for `Ember.MutableEnumerable.addObject()`.


    ```javascript

    var colors = new Ember.Set();

    colors.add("blue");     // ["blue"]

    colors.add("blue");     // ["blue"]

    colors.add("red");      // ["blue", "red"]

    colors.add(null);       // ["blue", "red"]

    colors.add(undefined);  // ["blue", "red"]

    ```'
  itemtype: method
  name: add
  params:
  - name: obj
    description: The object to add.
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 220
  description: ! 'Removes the object from the set if it is found. If you pass a `null`
    value

    or an object that is already not in the set, this method will have no

    effect. This is an alias for `Ember.MutableEnumerable.removeObject()`.


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.remove("red");     // ["blue", "green"]

    colors.remove("purple");  // ["blue", "green"]

    colors.remove(null);      // ["blue", "green"]

    ```'
  itemtype: method
  name: remove
  params:
  - name: obj
    description: The object to remove
    type: Object
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 238
  description: ! 'Removes the last element from the set and returns it, or `null`
    if it''s empty.


    ```javascript

    var colors = new Ember.Set(["green", "blue"]);

    colors.pop();  // "blue"

    colors.pop();  // "green"

    colors.pop();  // null

    ```'
  itemtype: method
  name: pop
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 258
  description: ! 'Inserts the given object on to the end of the set. It returns

    the set itself.


    This is an alias for `Ember.MutableEnumerable.addObject()`.


    ```javascript

    var colors = new Ember.Set();

    colors.push("red");   // ["red"]

    colors.push("green"); // ["red", "green"]

    colors.push("blue");  // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: push
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 276
  description: ! 'Removes the last element from the set and returns it, or `null`
    if it''s empty.


    This is an alias for `Ember.Set.pop()`.


    ```javascript

    var colors = new Ember.Set(["green", "blue"]);

    colors.shift();  // "blue"

    colors.shift();  // "green"

    colors.shift();  // null

    ```'
  itemtype: method
  name: shift
  return:
    description: The removed object from the set or null.
    type: Object
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 293
  description: ! 'Inserts the given object on to the end of the set. It returns

    the set itself.


    This is an alias of `Ember.Set.push()`


    ```javascript

    var colors = new Ember.Set();

    colors.unshift("red");    // ["red"]

    colors.unshift("green");  // ["red", "green"]

    colors.unshift("blue");   // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: unshift
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 311
  description: ! 'Adds each object in the passed enumerable to the set.


    This is an alias of `Ember.MutableEnumerable.addObjects()`


    ```javascript

    var colors = new Ember.Set();

    colors.addEach(["red", "green", "blue"]);  // ["red", "green", "blue"]

    ```'
  itemtype: method
  name: addEach
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/set.js
  line: 327
  description: ! 'Removes each object in the passed enumerable to the set.


    This is an alias of `Ember.MutableEnumerable.removeObjects()`


    ```javascript

    var colors = new Ember.Set(["red", "green", "blue"]);

    colors.removeEach(["red", "blue"]);  //  ["green"]

    ```'
  itemtype: method
  name: removeEach
  params:
  - name: objects
    description: the objects to remove.
    type: Ember.Enumerable
  return:
    description: The set itself.
    type: Ember.Set
  class: Ember.Set
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 13
  description: ! 'Defines the hash of localized strings for the current language.
    Used by

    the `Ember.String.loc()` helper. To localize, add string values to this

    hash.'
  itemtype: property
  name: STRINGS
  type: Hash
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/system/string.js
  line: 35
  description: ! 'Apply formatting options to the string. This will look for occurrences

    of "%@" in your string and substitute them with the arguments you pass into

    this method. If you want to control the specific order of replacement,

    you can add a number after the key as well to indicate which argument

    you want to insert.


    Ordered insertions are most useful when building loc strings where values

    you need to insert may appear in different orders.


    ```javascript

    "Hello %@ %@".fmt(''John'', ''Doe'');     // "Hello John Doe"

    "Hello %@2, %@1".fmt(''John'', ''Doe'');  // "Hello Doe, John"

    ```'
  itemtype: method
  name: fmt
  params:
  - name: args
    description: ''
    type: Object...
    optional: true
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 64
  description: ! "Formats the passed string, but first looks up the string in the
    localized\nstrings hash. This is a convenient way to localize text. See\n`Ember.String.fmt()`
    for more information on formatting.\n\nNote that it is traditional but not required
    to prefix localized string\nkeys with an underscore or other character so you
    can easily identify\nlocalized strings.\n\n```javascript\nEmber.STRINGS = {\n
    \ '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nEmber.String.loc(\"_Hello
    World\");  // 'Bonjour le monde';\nEmber.String.loc(\"_Hello %@ %@\", [\"John\",
    \"Smith\"]);  // \"Bonjour John Smith\";\n```"
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: Optional array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 93
  description: ! "Splits a string into separate units separated by spaces, eliminating
    any\nempty strings in the process. This is a convenience method for split that\nis
    mostly useful when applied to the `String.prototype`.\n\n```javascript\nEmber.String.w(\"alpha
    beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// > alpha\n//
    > beta\n// > gamma\n```"
  itemtype: method
  name: w
  params:
  - name: str
    description: The string to split
    type: String
  return:
    description: split string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 114
  description: ! 'Converts a camelized string into all lower case separated by underscores.


    ```javascript

    ''innerHTML''.decamelize();           // ''inner_html''

    ''action_name''.decamelize();        // ''action_name''

    ''css-class-name''.decamelize();     // ''css-class-name''

    ''my favorite items''.decamelize();  // ''my favorite items''

    ```'
  itemtype: method
  name: decamelize
  params:
  - name: str
    description: The string to decamelize.
    type: String
  return:
    description: the decamelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 132
  description: ! 'Replaces underscores or spaces with dashes.


    ```javascript

    ''innerHTML''.dasherize();          // ''inner-html''

    ''action_name''.dasherize();        // ''action-name''

    ''css-class-name''.dasherize();     // ''css-class-name''

    ''my favorite items''.dasherize();  // ''my-favorite-items''

    ```'
  itemtype: method
  name: dasherize
  params:
  - name: str
    description: The string to dasherize.
    type: String
  return:
    description: the dasherized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 160
  description: ! 'Returns the lowerCaseCamel form of a string.


    ```javascript

    ''innerHTML''.camelize();          // ''innerHTML''

    ''action_name''.camelize();        // ''actionName''

    ''css-class-name''.camelize();     // ''cssClassName''

    ''my favorite items''.camelize();  // ''myFavoriteItems''

    ```'
  itemtype: method
  name: camelize
  params:
  - name: str
    description: The string to camelize.
    type: String
  return:
    description: the camelized string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 180
  description: ! 'Returns the UpperCamelCase form of a string.


    ```javascript

    ''innerHTML''.classify();          // ''InnerHTML''

    ''action_name''.classify();        // ''ActionName''

    ''css-class-name''.classify();     // ''CssClassName''

    ''my favorite items''.classify();  // ''MyFavoriteItems''

    ```'
  itemtype: method
  name: classify
  params:
  - name: str
    description: the string to classify
    type: String
  return:
    description: the classified string
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 206
  description: ! 'More general than decamelize. Returns the lower\_case\_and\_underscored

    form of a string.


    ```javascript

    ''innerHTML''.underscore();          // ''inner_html''

    ''action_name''.underscore();        // ''action_name''

    ''css-class-name''.underscore();     // ''css_class_name''

    ''my favorite items''.underscore();  // ''my_favorite_items''

    ```'
  itemtype: method
  name: underscore
  params:
  - name: str
    description: The string to underscore.
    type: String
  return:
    description: the underscored string.
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/system/string.js
  line: 226
  description: ! 'Returns the Capitalized form of a string.


    ```javascript

    ''innerHTML''.capitalize(); // ''InnerHTML''

    ''actionname''.capitalize(); // ''Actionname''

    ''css-class-name''.capitalize(); // ''Css-class-name''

    ''my favorite items''.capitalize(); // ''My favorite items''

    ```'
  itemtype: method
  name: capitalize
  params:
  - name: str
    description: ''
    type: String
  return:
    description: ''
    type: String
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: ../packages/ember-runtime/lib/core.js
  line: 24
  description: ! "Returns a consistent type for the passed item.\n\nUse this instead
    of the built-in `typeof` to get the type of an item.\nIt will return the same
    result across all browsers and includes a bit\nmore detail. Here is what will
    be returned:\n\n    | Return Value  | Meaning                                              |\n
    \   |---------------|------------------------------------------------------|\n
    \   | 'string'      | String primitive                                     |\n
    \   | 'number'      | Number primitive                                     |\n
    \   | 'boolean'     | Boolean primitive                                    |\n
    \   | 'null'        | Null value                                           |\n
    \   | 'undefined'   | Undefined value                                      |\n
    \   | 'function'    | A function                                           |\n
    \   | 'array'       | An instance of Array                                 |\n
    \   | 'class'       | A Ember class (created using Ember.Object.extend())  |\n
    \   | 'instance'    | A Ember object instance                              |\n
    \   | 'error'       | An instance of the Error object                      |\n
    \   | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\nExamples:\n\n```javascript\nEmber.typeOf();
    \                      // 'undefined'\nEmber.typeOf(null);                   //
    'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');
    \             // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(true);
    \                  // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1,2,90]);
    \              // 'array'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());
    \ // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n\n// \"normal\"
    JavaScript object\nEmber.typeOf({a: 'b'});              // 'object'\n```"
  itemtype: method
  name: typeOf
  params:
  - name: item
    description: the item to check
    type: Object
  return:
    description: the type
    type: String
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 85
  description: ! 'Returns true if the passed value is null or undefined. This avoids
    errors

    from JSLint complaining about use of ==, which can be technically

    confusing.


    ```javascript

    Ember.isNone();              // true

    Ember.isNone(null);          // true

    Ember.isNone(undefined);     // true

    Ember.isNone('''');            // false

    Ember.isNone([]);            // false

    Ember.isNone(function(){});  // false

    ```'
  itemtype: method
  name: isNone
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 109
  description: ! 'Verifies that a value is `null` or an empty string, empty array,

    or empty function.


    Constrains the rules on `Ember.isNone` by returning false for empty

    string and empty arrays.


    ```javascript

    Ember.isEmpty();                // true

    Ember.isEmpty(null);            // true

    Ember.isEmpty(undefined);       // true

    Ember.isEmpty('''');              // true

    Ember.isEmpty([]);              // true

    Ember.isEmpty(''Adam Hawkins'');  // false

    Ember.isEmpty([0,1,2]);         // false

    ```'
  itemtype: method
  name: isEmpty
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 136
  description: ! "This will compare two javascript values of possibly different types.\nIt
    will tell you which one is greater than the other by returning:\n\n - -1 if the
    first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first
    is greater than the second.\n\nThe order is calculated based on `Ember.ORDER_DEFINITION`,
    if types are different.\nIn case they have the same type an appropriate comparison
    for this type is made.\n\n ```javascript\n Ember.compare('hello', 'hello');  //
    0\n Ember.compare('abc', 'dfg');      // -1\n Ember.compare(2, 1);              //
    1\n ```"
  itemtype: method
  name: compare
  params:
  - name: v
    description: First value to compare
    type: Object
  - name: w
    description: Second value to compare
    type: Object
  return:
    description: -1 if v < w, 0 if v = w and 1 if v > w.
    type: Number
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 290
  description: ! 'Creates a clone of the passed object. This function can take just
    about

    any type of object and create a clone of it, including primitive values

    (which are not actually cloned because they are immutable).


    If the passed object implements the `clone()` method, then this function

    will simply call that method and return the result.'
  itemtype: method
  name: copy
  params:
  - name: object
    description: The object to clone
    type: Object
  - name: deep
    description: If true, a deep copy of the object is made
    type: Boolean
  return:
    description: The cloned object
    type: Object
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 311
  description: ! 'Convenience method to inspect an object. This method will attempt
    to

    convert the object into a useful string description.


    It is a pretty simple implementation. If you want something more robust,

    use something like JSDump: https://github.com/NV/jsDump'
  itemtype: method
  name: inspect
  params:
  - name: obj
    description: The object you want to inspect.
    type: Object
  return:
    description: A description of the object
    type: String
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 340
  description: ! 'Compares two objects, returning true if they are logically equal.
    This is

    a deeper comparison than a simple triple equal. For sets it will compare the

    internal objects. For any other object that implements `isEqual()` it will

    respect that method.


    ```javascript

    Ember.isEqual(''hello'', ''hello'');  // true

    Ember.isEqual(1, 2);              // false

    Ember.isEqual([4,2], [4,2]);      // false

    ```'
  itemtype: method
  name: isEqual
  params:
  - name: a
    description: first object to compare
    type: Object
  - name: b
    description: second object to compare
    type: Object
  return:
    description: ''
    type: Boolean
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-runtime/lib/core.js
  line: 378
  description: ! 'Returns all of the keys defined on an object or hash. This is useful

    when inspecting objects for debugging. On browsers that support it, this

    uses the native `Object.keys` implementation.'
  itemtype: method
  name: keys
  params:
  - name: obj
    description: ''
    type: Object
  return:
    description: Array containing keys of obj
    type: Array
  class: Ember
  module: ember
  submodule: ember-runtime
- file: ../packages/ember-states/lib/state.js
  line: 15
  description: ! "isState: true,\n\n/**\n  A reference to the parent state."
  itemtype: property
  name: parentState
  type: Ember.State
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 27
  description: The name of this state.
  itemtype: property
  name: name
  type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 35
  description: The full path to this state.
  itemtype: property
  name: path
  type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 52
  access: private
  tagname: ! 'Override the default event firing from `Ember.Evented` to

    also call methods with the given name.'
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 137
  description: ! 'A Boolean value indicating whether the state is a leaf state

    in the state hierarchy. This is `false` if the state has child

    states; otherwise it is true.'
  itemtype: property
  name: isLeaf
  type: Boolean
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 149
  description: ! 'A boolean value indicating whether the state takes a context.

    By default we assume all states take contexts.'
  itemtype: property
  name: hasContext
  default: 'true'
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 158
  description: This is the default transition event.
  itemtype: event
  name: setup
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  - name: context
    description: ''
  see:
  - Ember.StateManager#transitionEvent
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 168
  description: This event fires when the state is entered.
  itemtype: event
  name: enter
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 176
  description: This event fires when the state is exited.
  itemtype: event
  name: exit
  params:
  - name: manager
    description: ''
    type: Ember.StateManager
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state.js
  line: 187
  description: ! "Creates an action function for transitioning to the named state
    while\npreserving context.\n\nThe following example StateManagers are equivalent:\n\n```javascript\naManager
    = Ember.StateManager.create({\n  stateOne: Ember.State.create({\n    changeToStateTwo:
    Ember.State.transitionTo('stateTwo')\n  }),\n  stateTwo: Ember.State.create({})\n})\n\nbManager
    = Ember.StateManager.create({\n  stateOne: Ember.State.create({\n    changeToStateTwo:
    function(manager, context){\n      manager.transitionTo('stateTwo', context)\n
    \   }\n  }),\n  stateTwo: Ember.State.create({})\n})\n```"
  itemtype: method
  name: transitionTo
  static: 1
  params:
  - name: target
    description: ''
    type: String
  class: Ember.State
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 30
  description: ! 'Normalize the passed in enter, exit and resolve states.


    This process also adds `finalState` and `contexts` to the Transition object.'
  itemtype: method
  name: normalize
  params:
  - name: manager
    description: the state manager running the transition
    type: Ember.StateManager
  - name: contexts
    description: a list of contexts passed into `transitionTo`
    type: Array
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 46
  description: ! 'Match each of the contexts passed to `transitionTo` to a state.

    This process may also require adding additional enter and exit

    states if there are more contexts than enter states.'
  itemtype: method
  name: matchContextsToStates
  params:
  - name: contexts
    description: a list of contexts passed into `transitionTo`
    type: Array
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 123
  description: Add any `initialState`s to the list of enter states.
  itemtype: method
  name: addInitialStates
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 143
  description: ! 'Remove any states that were added because the number of contexts

    exceeded the number of explicit enter states, but the context has

    not changed since the last time the state was entered.'
  itemtype: method
  name: removeUnchangedContexts
  params:
  - name: manager
    description: ! "passed in to look up the last\n  context for a states"
    type: Ember.StateManager
  class: Transition
  module: ember
  submodule: ember-states
- file: ../packages/ember-states/lib/state_manager.js
  line: 652
  access: private
  tagname: ! 'When creating a new statemanager, look for a default state to transition

    into. This state can either be named `start`, or can be specified using the

    `initialState` property.'
  itemtype: method
  name: init
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 698
  description: ! 'The current state from among the manager''s possible states. This
    property should

    not be set directly. Use `transitionTo` to move between states by name.'
  itemtype: property
  name: currentState
  type: Ember.State
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 707
  description: ! 'The path of the current state. Returns a string representation of
    the current

    state.'
  itemtype: property
  name: currentPath
  type: String
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 716
  description: The name of transitionEvent that this stateManager will dispatch
  itemtype: property
  name: transitionEvent
  type: String
  default: ! '''setup'''
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 725
  description: ! 'If set to true, `errorOnUnhandledEvents` will cause an exception
    to be

    raised if you attempt to send an event to a state manager that is not

    handled by the current state or any of its parent states.'
  itemtype: property
  name: errorOnUnhandledEvents
  type: Boolean
  default: 'true'
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 747
  description: ! "Finds a state by its state path.\n\nExample:\n\n```javascript\nmanager
    = Ember.StateManager.create({\n  root: Ember.State.create({\n    dashboard: Ember.State.create()\n
    \ })\n});\n\nmanager.getStateByPath(manager, \"root.dashboard\")\n\n// returns
    the dashboard state\n```"
  itemtype: method
  name: getStateByPath
  params:
  - name: root
    description: the state to start searching from
    type: Ember.State
  - name: path
    description: the state path to follow
    type: String
  return:
    description: the state at the end of the path
    type: Ember.State
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-states/lib/state_manager.js
  line: 792
  description: ! 'A state stores its child states in its `states` hash.

    This code takes a path like `posts.show` and looks

    up `root.states.posts.states.show`.


    It returns a list of all of the states from the

    root, which is the list of states to call `enter`

    on.'
  itemtype: method
  name: getStatesInPath
  params:
  - name: root
    description: ''
  - name: path
    description: ''
  class: Ember.StateManager
  module: ember
  submodule: ember-states
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 20
  description: /**
  access: private
  tagname: ! "The root DOM element to which event listeners should be attached. Event\n
    \   listeners will be attached to the document unless this is overridden.\n  Can
    be specified as a DOMElement or a selector string.\n  The default body is a string
    since this may be evaluated before document.body\n    exists in the DOM."
  itemtype: property
  name: rootElement
  type: DOMElement
  default: ! '''body'''
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 39
  access: private
  tagname: ! 'Sets up event listeners for standard browser events.


    This will be called after the browser sends a `DOMContentReady` event. By

    default, it will set up all of the listeners on the document body. If you

    would like to register the listeners on a different element, set the event

    dispatcher''s `root` property.'
  itemtype: method
  name: setup
  params:
  - name: addedEvents
    description: ''
    type: Hash
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/event_dispatcher.js
  line: 102
  access: private
  tagname: ! 'Registers an event listener on the document. If the given event is

    triggered, the provided event handler will be triggered on the target view.


    If the target view does not implement the event handler, or if the handler

    returns `false`, the parent view will be called. The event will continue to

    bubble to each successive parent view until it reaches the top.


    For example, to have the `mouseDown` method called on the target view when

    a `mousedown` event is received from the browser, do the following:


    ```javascript

    setupHandler(''mousedown'', ''mouseDown'');

    ```'
  itemtype: method
  name: setupHandler
  params:
  - name: rootElement
    description: ''
    type: Element
  - name: event
    description: the browser-originated event to listen to
    type: String
  - name: eventName
    description: the name of the method to call on the view
    type: String
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 50
  description: ! "// The root view's element\n  _element: null,\n/**"
  access: private
  tagname: ! "An internal set used to de-dupe class names when `addClass()` is\n    used.
    After each call to `addClass()`, the `classes` property\n    will be updated."
  itemtype: property
  name: elementClasses
  type: Array
  default: ! '[]'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 68
  description: ! 'Array of class names which will be applied in the class attribute.


    You can use `setClasses()` to set this property directly. If you

    use `addClass()`, it will be maintained for you.'
  itemtype: property
  name: classes
  type: Array
  default: ! '[]'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 80
  description: ! 'The id in of the element, to be applied in the id attribute.


    You should not set this property yourself, rather, you should use

    the `id()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementId
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 92
  description: ! 'A hash keyed on the name of the attribute and whose value will be

    applied to that attribute. For example, if you wanted to apply a

    `data-view="Foo.bar"` property to an element, you would set the

    elementAttributes hash to `{''data-view'':''Foo.bar''}`.


    You should not maintain this hash yourself, rather, you should use

    the `attr()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementAttributes
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 107
  description: ! 'A hash keyed on the name of the properties and whose value will
    be

    applied to that property. For example, if you wanted to apply a

    `checked=true` property to an element, you would set the

    elementProperties hash to `{''checked'':true}`.


    You should not maintain this hash yourself, rather, you should use

    the `prop()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementProperties
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 122
  description: ! 'The tagname of the element an instance of `Ember.RenderBuffer` represents.


    Usually, this gets set as the first parameter to `Ember.RenderBuffer`. For

    example, if you wanted to create a `p` tag, then you would call


    ```javascript

    Ember.RenderBuffer(''p'')

    ```'
  itemtype: property
  name: elementTag
  type: String
  default: 'null'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 138
  description: ! 'A hash keyed on the name of the style attribute and whose value
    will

    be applied to that attribute. For example, if you wanted to apply a

    `background-color:black;` style to an element, you would set the

    elementStyle hash to `{''background-color'':''black''}`.


    You should not maintain this hash yourself, rather, you should use

    the `style()` method of `Ember.RenderBuffer`.'
  itemtype: property
  name: elementStyle
  type: Hash
  default: ! '{}'
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 153
  description: ! 'Nested `RenderBuffers` will set this to their parent `RenderBuffer`

    instance.'
  itemtype: property
  name: parentBuffer
  type: Ember._RenderBuffer
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 162
  description: Adds a string of HTML to the `RenderBuffer`.
  itemtype: method
  name: push
  params:
  - name: string
    description: HTML to push into the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 174
  description: Adds a class to the buffer, which will be rendered to the class attribute.
  itemtype: method
  name: addClass
  params:
  - name: className
    description: Class name to add to the buffer
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 194
  description: Sets the elementID to be used for the element.
  itemtype: method
  name: id
  params:
  - name: id
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 209
  description: Adds an attribute which will be rendered to the element.
  itemtype: method
  name: attr
  params:
  - name: name
    description: The name of the attribute
    type: String
  - name: value
    description: The value to add to the attribute
    type: String
  chainable: 1
  return:
    description: this or the current attribute value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 230
  description: Remove an attribute from the list of attributes to render.
  itemtype: method
  name: removeAttr
  params:
  - name: name
    description: The name of the attribute
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 244
  description: Adds an property which will be rendered to the element.
  itemtype: method
  name: prop
  params:
  - name: name
    description: The name of the property
    type: String
  - name: value
    description: The value to add to the property
    type: String
  chainable: 1
  return:
    description: this or the current property value
    type: Ember.RenderBuffer|String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 265
  description: Remove an property from the list of properties to render.
  itemtype: method
  name: removeProp
  params:
  - name: name
    description: The name of the property
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 279
  description: Adds a style to the style attribute which will be rendered to the element.
  itemtype: method
  name: style
  params:
  - name: name
    description: Name of the style
    type: String
  - name: value
    description: ''
    type: String
  chainable: 1
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 435
  itemtype: method
  name: element
  return:
    description: ! "The element corresponding to the generated HTML\n  of this buffer"
    type: DOMElement
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/render_buffer.js
  line: 450
  description: Generates the HTML content for this buffer.
  itemtype: method
  name: string
  return:
    description: The generated HTML
    type: String
  class: Ember.RenderBuffer
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/system/utils.js
  line: 6
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/system/utils.js
  line: 78
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 165
  description: ! "/**\n    A list of items to be displayed by the `Ember.CollectionView`."
  itemtype: property
  name: content
  type: Ember.Array
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 176
  access: private
  tagname: ! 'This provides metadata about what kind of empty view class this

    collection would like if it is being instantiated from another

    system (like Handlebars)'
  itemtype: property
  name: emptyViewClass
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 187
  description: An optional view to display if content is set to an empty array.
  itemtype: property
  name: emptyView
  type: Ember.View
  default: 'null'
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 196
  itemtype: property
  name: itemViewClass
  type: Ember.View
  default: Ember.View
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 217
  access: private
  tagname: ! 'Check to make sure that the content has changed, and if so,

    update the children directly. This is always scheduled

    asynchronously, to allow the element to be created before

    bindings have synchronized and vice versa.'
  itemtype: method
  name: _contentDidChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 278
  description: ! 'Called when a mutation to the underlying content array occurs.


    This method will replay that mutation against the views that compose the

    `Ember.CollectionView`, ensuring that the view reflects the model.


    This array observer is added in `contentDidChange`.'
  itemtype: method
  name: arrayDidChange
  params:
  - name: addedObjects
    description: the objects that were added to the content
    type: Array
  - name: removedObjects
    description: the objects that were removed from the content
    type: Array
  - name: changeIndex
    description: the index at which the changes occurred
    type: Number
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/collection_view.js
  line: 340
  description: ! 'A map of parent tags to their default child tags. You can add

    additional parent tags if you want collection views that use

    a particular parent tag to default to a child tag.'
  itemtype: property
  name: CONTAINER_MAP
  type: Hash
  static: 1
  final: 1
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 249
  access: private
  tagname: Instructs each child view to render to the passed render buffer.
  itemtype: method
  name: render
  params:
  - name: buffer
    description: the buffer to render to
    type: Ember.RenderBuffer
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 265
  access: private
  tagname: ! 'When a child view is removed, destroy its element so that

    it is removed from the DOM.


    The array observer that triggers this action is set up in the

    `renderToBuffer` method.'
  itemtype: method
  name: childViewsWillChange
  params:
  - name: views
    description: the child views array before mutation
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/container_view.js
  line: 295
  access: private
  tagname: ! 'When a child view is added, make sure the DOM gets updated appropriately.


    If the view has already rendered an element, we tell the child view to

    create an element and insert it into the DOM. If the enclosing container

    view has already written to a buffer, but not yet converted that buffer

    into an element, we insert the string representation of the child into the

    appropriate place in the buffer.'
  itemtype: method
  name: childViewsDidChange
  params:
  - name: views
    description: the array of child views afte the mutation has occurred
    type: Ember.Array
  - name: start
    description: the start position of the mutation
    type: Number
  - name: removed
    description: the number of child views removed
    type: Number
  - name: the
    description: number of child views added
    type: Number
  class: Ember.ContainerView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 40
  description: ! 'Global hash of shared templates. This will automatically be populated

    by the build tools so that you can store your Handlebars templates in

    separate files that get loaded into JavaScript at buildtime.'
  itemtype: property
  name: TEMPLATES
  type: Hash
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 73
  description: ! 'If the view is currently inserted into the DOM of a parent view,
    this

    property will point to the parent of the view.'
  itemtype: property
  name: parentView
  type: Ember.View
  default: 'null'
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 107
  access: private
  tagname: ! 'Invoked by the view system when this view needs to produce an HTML

    representation. This method will create a new render buffer, if needed,

    then apply any default attributes, such as class names and visibility.

    Finally, the `render()` method is invoked, which is responsible for

    doing the bulk of the rendering.


    You should not need to override this method; instead, implement the

    `template` property, or if you need more control, override the `render`

    method.'
  itemtype: method
  name: renderToBuffer
  params:
  - name: buffer
    description: ! "the render buffer. If no buffer is\n  passed, a default buffer,
      using the current view's `tagName`, will\n  be used."
    type: Ember.RenderBuffer
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 159
  access: private
  tagname: ! 'Override the default event firing from `Ember.Evented` to

    also call methods with the given name.'
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
    type: String
  class: Ember
  module: ember
  submodule: ember-views
- file: ../packages/ember-views/lib/views/view.js
  line: 763
  description: ! 'concatenatedProperties: [''classNames'', ''classNameBindings'',
    ''attributeBindings''],

    /**'
  itemtype: property
  name: isView
  type: Boolean
  default: 'true'
  final: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 779
  description: ! 'The name of the template to lookup if no template is provided.


    `Ember.View` will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 792
  description: ! 'The name of the layout to lookup if no layout is provided.


    `Ember.View` will look for a template with this name in this view''s

    `templates` object. By default, this will be a global object

    shared in `Ember.TEMPLATES`.'
  itemtype: property
  name: layoutName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 805
  description: The hash in which to look for `templateName`.
  itemtype: property
  name: templates
  type: Ember.Object
  default: Ember.TEMPLATES
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 814
  description: ! 'The template used to render the view. This should be a function
    that

    accepts an optional context parameter and returns a string of HTML that

    will be inserted into the DOM relative to its parent view.


    In general, you should set the `templateName` property instead of setting

    the template yourself.'
  itemtype: property
  name: template
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 844
  description: ! 'The controller managing this view. If this property is set, it will
    be

    made available for use by the template.'
  itemtype: property
  name: controller
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 856
  description: ! 'A view may contain a layout. A layout is a regular template but

    supersedes the `template` property during rendering. It is the

    responsibility of the layout template to retrieve the `template`

    property from the view (or alternatively, call `Handlebars.helpers.yield`,

    `{{yield}}`) to render it in the correct location.


    This is useful for a view that has a shared wrapper, but which delegates

    the rendering of the contents of the wrapper to the `template` property

    on a subclass.'
  itemtype: property
  name: layout
  type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 891
  description: ! 'The object from which templates should access properties.


    This object will be passed to the template function each time the render

    method is called, but it is up to the individual function to decide what

    to do with it.


    By default, this will be the view''s controller.'
  itemtype: property
  name: context
  type: Object
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 912
  access: private
  tagname: ! 'Private copy of the view''s template context. This can be set directly

    by Handlebars without triggering the observer that causes the view

    to be re-rendered.


    The context of a view is looked up as follows:


    1. Supplied context (usually by Handlebars)

    2. Specified controller

    3. `parentView`''s context (for a child of a ContainerView)


    The code in Handlebars that overrides the `_context` property first

    checks to see whether the view has a specified controller. This is

    something of a hack and should be revisited.'
  itemtype: property
  name: _context
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 946
  access: private
  tagname: ! 'If a value that affects template rendering changes, the view should
    be

    re-rendered to reflect the new value.'
  itemtype: method
  name: _displayPropertyDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 958
  description: If `false`, the view will appear hidden in DOM.
  itemtype: property
  name: isVisible
  type: Boolean
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 967
  access: private
  tagname: ! 'Array of child views. You should never edit this array directly.

    Instead, use `appendChild` and `removeFromParent`.'
  itemtype: property
  name: childViews
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 999
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class.'
  itemtype: property
  name: nearestInstanceOf
  return:
    description: Ember.View
  deprecated: true
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 1018
  description: ! 'Return the nearest ancestor that is an instance of the provided

    class or mixin.'
  itemtype: property
  name: nearestOfType
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: ! "Subclass of Ember.View (or Ember.View itself),\n       or an instance
      of Ember.Mixin."
    type: Class,Mixin
- file: ../packages/ember-views/lib/views/view.js
  line: 1039
  description: Return the nearest ancestor that has a given property.
  itemtype: property
  name: nearestWithProperty
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: property
    description: A property name
    type: String
- file: ../packages/ember-views/lib/views/view.js
  line: 1055
  description: ! 'Return the nearest ancestor whose parent is an instance of

    `klass`.'
  itemtype: property
  name: nearestChildOf
  return:
    description: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
- file: ../packages/ember-views/lib/views/view.js
  line: 1072
  access: private
  tagname: When the parent view changes, recursively invalidate `controller`
  itemtype: method
  name: _parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1108
  description: ! 'Called on your view when it should push strings of HTML into a

    `Ember.RenderBuffer`. Most users will want to override the `template`

    or `templateName` properties instead of this method.


    By default, `Ember.View` will look for a function in the `template`

    property and invoke it with the value of `context`. The value of

    `context` will be the view''s controller unless you override it.'
  itemtype: method
  name: render
  params:
  - name: buffer
    description: The render buffer
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1154
  description: ! 'Renders the view again. This will work regardless of whether the

    view is already in the DOM or not. If the view is in the DOM, the

    rendering process will be deferred to give bindings a chance

    to synchronize.


    If children were added during the rendering process using `appendChild`,

    `rerender` will remove them, because they will be added again

    if needed by the next `render`.


    In general, if the display of your view changes, you should modify

    the DOM element directly instead of manually calling `rerender`, which can

    be slow.'
  itemtype: method
  name: rerender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1189
  access: private
  tagname: ! 'Iterates over the view''s `classNameBindings` array, inserts the value

    of the specified property into the `classNames` array, then creates an

    observer to update the view''s element if the bound property ever changes

    in the future.'
  itemtype: method
  name: _applyClassNameBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1267
  access: private
  tagname: ! 'Iterates through the view''s attribute bindings, sets up observers for
    each,

    then applies the current value of the attributes to the passed render buffer.'
  itemtype: method
  name: _applyAttributeBindings
  params:
  - name: buffer
    description: ''
    type: Ember.RenderBuffer
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1304
  access: private
  tagname: ! 'Given a property name, returns a dasherized version of that

    property name if the property evaluates to a non-falsy value.


    For example, if the view has property `isUrgent` that evaluates to true,

    passing `isUrgent` to this method will return `"is-urgent"`.'
  itemtype: method
  name: _classStringForProperty
  params:
  - name: property
    description: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1332
  description: Returns the current DOM element for the view.
  itemtype: property
  name: element
  type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1346
  description: ! 'Returns a jQuery object for this view''s element. If you pass in
    a selector

    string, this method will return a jQuery object, using the current element

    as its buffer.


    For example, calling `view.$(''li'')` will return a jQuery object containing

    all of the `li` elements inside the DOM element of this view.'
  itemtype: property
  name: $
  return:
    description: the CoreQuery object for the DOM node
    type: JQuery
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: selector
    description: a jQuery-compatible selector string
    type: String
    optional: true
- file: ../packages/ember-views/lib/views/view.js
  line: 1391
  description: ! 'Appends the view''s element to the specified parent element.


    If the view does not have an HTML representation yet, `createElement()`

    will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing.


    This is not typically a function that you will need to call directly when

    building your application. You might consider using `Ember.ContainerView`

    instead. If you do need to use `appendTo`, be sure that the target element

    you are providing is associated with an `Ember.Application` and does not

    have an ancestor element that is associated with an Ember view.'
  itemtype: method
  name: appendTo
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1422
  description: ! 'Replaces the content of the specified parent element with this view''s

    element. If the view does not have an HTML representation yet,

    `createElement()` will be called automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the given element until all bindings have

    finished synchronizing'
  itemtype: method
  name: replaceIn
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: received
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1446
  access: private
  tagname: ! "Schedules a DOM operation to occur during the next render phase. This\nensures
    that all bindings have finished synchronizing before the view is\nrendered.\n\nTo
    use, pass a function that performs a DOM operation.\n\nBefore your function is
    called, this view and all child views will receive\nthe `willInsertElement` event.
    After your function is invoked, this view\nand all of its child views will receive
    the `didInsertElement` event.\n\n```javascript\nview._insertElementLater(function()
    {\n  this.createElement();\n  this.$().appendTo('body');\n});\n```"
  itemtype: method
  name: _insertElementLater
  params:
  - name: fn
    description: the function that inserts the element into the DOM
    type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1478
  description: ! 'Appends the view''s element to the document body. If the view does

    not have an HTML representation yet, `createElement()` will be called

    automatically.


    Note that this method just schedules the view to be appended; the DOM

    element will not be appended to the document body until all bindings have

    finished synchronizing.'
  itemtype: method
  name: append
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1494
  description: Removes the view's element from the element to which it is attached.
  itemtype: method
  name: remove
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1514
  description: ! 'Attempts to discover the element in the parent element. The default

    implementation looks for an element with an ID of `elementId` (or the

    view''s guid if `elementId` is null). You can override this method to

    provide your own form of lookup. For example, if you want to discover your

    element using a CSS class name instead of an ID.'
  itemtype: method
  name: findElementInParentElement
  params:
  - name: parentElement
    description: The parent's DOM element
    type: DOMElement
  return:
    description: The discovered element
    type: DOMElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1530
  description: ! 'Creates a DOM representation of the view and all of its

    child views by recursively calling the `render()` method.


    After the element has been created, `didInsertElement` will

    be called on this view and all of its child views.'
  itemtype: method
  name: createElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1549
  description: Called when a view is going to insert an element into the DOM.
  itemtype: event
  name: willInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1556
  description: ! 'Called when the element of the view has been inserted into the DOM.

    Override this function to do any set up that requires an element in the

    document body.'
  itemtype: event
  name: didInsertElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1565
  description: ! 'Called when the view is about to rerender, but before anything has

    been torn down. This is a good opportunity to tear down any manual

    observers you have installed based on the DOM state'
  itemtype: event
  name: willClearRender
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1574
  access: private
  tagname: Run this callback on the current view and recursively on child views.
  itemtype: method
  name: invokeRecursively
  params:
  - name: fn
    description: ''
    type: Function
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1616
  description: ! 'Destroys any existing element along with the element for any child
    views

    as well. If the view does not currently have a element, then this method

    will do nothing.


    If you implement `willDestroyElement()` on your view, then this method will

    be invoked on your view before your element is destroyed to give you a

    chance to clean up any event handlers, etc.


    If you write a `willDestroyElement()` handler, you can assume that your

    `didInsertElement()` handler was called earlier for the same element.


    Normally you will not call or override this method yourself, but you may

    want to implement the above callbacks when it is run.'
  itemtype: method
  name: destroyElement
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1638
  description: ! 'Called when the element of the view is going to be destroyed. Override

    this function to do any teardown that requires an element, like removing

    event listeners.'
  itemtype: event
  name: willDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1647
  access: private
  tagname: ! 'Triggers the `willDestroyElement` event (which invokes the

    `willDestroyElement()` method if it exists) on this view and all child

    views.


    Before triggering `willDestroyElement`, it first triggers the

    `willClearRender` event recursively.'
  itemtype: method
  name: _notifyWillDestroyElement
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1670
  access: private
  tagname: ! 'If this view''s element changes, we need to invalidate the caches of
    our

    child views so that we do not retain references to DOM elements that are

    no longer needed.'
  itemtype: method
  name: _elementDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1685
  description: Called when the parentView property has changed.
  itemtype: event
  name: parentViewDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1753
  description: ! 'Tag name for the view''s outer element. The tag name is only used
    when an

    element is first created. If you change the `tagName` for an element, you

    must destroy and recreate the view element.


    By default, the render buffer will use a `<div>` tag for views.'
  itemtype: property
  name: tagName
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1769
  description: ! 'The WAI-ARIA role of the control represented by this view. For example,
    a

    button may have a role of type ''button'', or a pane may have a role of

    type ''alertdialog''. This property is used by assistive software to help

    visually challenged users navigate rich web applications.


    The full list of valid WAI-ARIA roles is available at:

    http://www.w3.org/TR/wai-aria/roles#roles_categorization'
  itemtype: property
  name: ariaRole
  type: String
  default: 'null'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1784
  description: ! 'Standard CSS class names to apply to the view''s outer element.
    This

    property automatically inherits any class names defined by the view''s

    superclasses as well.'
  itemtype: property
  name: classNames
  type: Array
  default: ! '[''ember-view'']'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1795
  description: ! "A list of properties of the view to apply as class names. If the
    property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n//
    Applies the 'high' class to the view element\nEmber.View.create({\n  classNameBindings:
    ['priority']\n  priority: 'high'\n});\n```\n\nIf the value of the property is
    a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n//
    Applies the 'is-urgent' class to the view element\nEmber.View.create({\n  classNameBindings:
    ['isUrgent']\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom
    value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n//
    Applies the 'urgent' class to the view element\nEmber.View.create({\n  classNameBindings:
    ['isUrgent:urgent']\n  isUrgent: true\n});\n```\n\nThis list of properties is
    inherited from the view's superclasses as well."
  itemtype: property
  name: classNameBindings
  type: Array
  default: ! '[]'
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1838
  description: ! "A list of properties of the view to apply as attributes. If the
    property is\na string value, the value of that string will be applied as the attribute.\n\n```javascript\n//
    Applies the type attribute to the element\n// with the value \"button\", like
    <div type=\"button\">\nEmber.View.create({\n  attributeBindings: ['type'],\n  type:
    'button'\n});\n```\n\nIf the value of the property is a Boolean, the name of that
    property is\nadded as an attribute.\n\n```javascript\n// Renders something like
    <div enabled=\"enabled\">\nEmber.View.create({\n  attributeBindings: ['enabled'],\n
    \ enabled: true\n});\n```"
  itemtype: property
  name: attributeBindings
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1870
  access: private
  tagname: ! "Setup a view, but do not finish waking it up.\n- configure `childViews`\n-
    register the view with the global views hash, which is used for event\n  dispatch"
  itemtype: method
  name: init
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1907
  description: Removes the child view from the parent view.
  itemtype: method
  name: removeChild
  params:
  - name: view
    description: ''
    type: Ember.View
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1933
  description: Removes all children from the `parentView`.
  itemtype: method
  name: removeAllChildren
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1951
  description: ! 'Removes the view from its `parentView`, if one is found. Otherwise

    does nothing.'
  itemtype: method
  name: removeFromParent
  return:
    description: receiver
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 1968
  description: ! 'You must call `destroy` on a view to destroy the view (and all of
    its

    child views). This will remove the view from any parent node, then make

    sure that the DOM element managed by the view can be released by the

    memory manager.'
  itemtype: method
  name: willDestroy
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2016
  description: ! 'Instantiates a view to be added to the childViews array during view

    initialization. You generally will not call this method directly unless

    you are overriding `createChildViews()`. Note that this method will

    automatically configure the correct settings on the new view instance to

    act as a child of the parent.'
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class
  - name: attrs
    description: Attributes to add
    type: Hash
    optional: true
  return:
    description: new instance
    type: Ember.View
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2061
  access: private
  tagname: ! 'When the view''s `isVisible` property changes, toggle the visibility

    element of the actual DOM element.'
  itemtype: method
  name: _isVisibleDidChange
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2142
  access: private
  tagname: Handle events from `Ember.EventDispatcher`
  itemtype: method
  name: handleEvent
  params:
  - name: eventName
    description: ''
    type: String
  - name: evt
    description: ''
    type: Event
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2228
  access: private
  tagname: ! "Parse a path and return an object which holds the parsed properties.\n\nFor
    example a path like \"content.isEnabled:enabled:disabled\" wil return the\nfollowing
    object:\n\n```javascript\n{\n  path: \"content.isEnabled\",\n  className: \"enabled\",\n
    \ falsyClassName: \"disabled\",\n  classNames: \":enabled:disabled\"\n}\n```"
  itemtype: method
  name: _parsePropertyPath
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2272
  access: private
  tagname: ! "Get the class name for a given value, based on the path, optional\n`className`
    and optional `falsyClassName`.\n\n- if a `className` or `falsyClassName` has been
    specified:\n  - if the value is truthy and `className` has been specified, \n
    \   `className` is returned\n  - if the value is falsy and `falsyClassName` has
    been specified, \n    `falsyClassName` is returned\n  - otherwise `null` is returned\n-
    if the value is `true`, the dasherized last part of the supplied path \n  is returned\n-
    if the value is not `false`, `undefined` or `null`, the `value` \n  is returned\n-
    if none of the above rules apply, `null` is returned"
  itemtype: method
  name: _classStringForValue
  params:
  - name: path
    description: ''
  - name: val
    description: ''
  - name: className
    description: ''
  - name: falsyClassName
    description: ''
  static: 1
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/views/view.js
  line: 2333
  description: Global views hash
  itemtype: property
  name: views
  static: 1
  type: Hash
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: ../packages/ember-views/lib/core.js
  line: 9
  description: Alias for jQuery
  itemtype: method
  name: $
  class: Ember
  module: ember
  submodule: ember-views
