---
project:
  name: The Ember API
  description: 'The Ember API: a framework for building ambitious web applications'
  url: http://emberjs.com/
  version: v2.2.0
  sha: v2.2.0
files:
  bower_components/rsvp/lib/rsvp/promise/all.js:
    name: bower_components/rsvp/lib/rsvp/promise/all.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  bower_components/rsvp/lib/rsvp/promise/race.js:
    name: bower_components/rsvp/lib/rsvp/promise/race.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  bower_components/rsvp/lib/rsvp/promise/reject.js:
    name: bower_components/rsvp/lib/rsvp/promise/reject.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  bower_components/rsvp/lib/rsvp/promise/resolve.js:
    name: bower_components/rsvp/lib/rsvp/promise/resolve.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  bower_components/rsvp/lib/rsvp/all-settled.js:
    name: bower_components/rsvp/lib/rsvp/all-settled.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/all.js:
    name: bower_components/rsvp/lib/rsvp/all.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/defer.js:
    name: bower_components/rsvp/lib/rsvp/defer.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/events.js:
    name: bower_components/rsvp/lib/rsvp/events.js
    modules: {}
    classes:
      RSVP.EventTarget: 1
    fors:
      RSVP.EventTarget: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/filter.js:
    name: bower_components/rsvp/lib/rsvp/filter.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/hash-settled.js:
    name: bower_components/rsvp/lib/rsvp/hash-settled.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/hash.js:
    name: bower_components/rsvp/lib/rsvp/hash.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/map.js:
    name: bower_components/rsvp/lib/rsvp/map.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/node.js:
    name: bower_components/rsvp/lib/rsvp/node.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/promise.js:
    name: bower_components/rsvp/lib/rsvp/promise.js
    modules: {}
    classes:
      RSVP.Promise: 1
    fors: {}
    namespaces: {}
  bower_components/rsvp/lib/rsvp/race.js:
    name: bower_components/rsvp/lib/rsvp/race.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/reject.js:
    name: bower_components/rsvp/lib/rsvp/reject.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/resolve.js:
    name: bower_components/rsvp/lib/rsvp/resolve.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  bower_components/rsvp/lib/rsvp/rethrow.js:
    name: bower_components/rsvp/lib/rsvp/rethrow.js
    modules: {}
    classes: {}
    fors:
      RSVP: 1
    namespaces: {}
  packages/ember-application/lib/system/application-instance.js:
    name: packages/ember-application/lib/system/application-instance.js
    modules:
      ember-application: 1
    classes:
      Ember.ApplicationInstance: 1
      "@Ember.ApplicationInstance.BootOptions": 1
    fors: {}
    namespaces:
      "@Ember.ApplicationInstance": 1
  packages/ember-application/lib/system/application.js:
    name: packages/ember-application/lib/system/application.js
    modules: {}
    classes:
      Ember.Application: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-application/lib/system/resolver.js:
    name: packages/ember-application/lib/system/resolver.js
    modules: {}
    classes:
      Ember.DefaultResolver: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-application/lib/utils/validate-type.js:
    name: packages/ember-application/lib/utils/validate-type.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-application/lib/main.js:
    name: packages/ember-application/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-debug/lib/deprecate.js:
    name: packages/ember-debug/lib/deprecate.js
    modules:
      ember-debug: 1
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-debug/lib/main.js:
    name: packages/ember-debug/lib/main.js
    modules: {}
    classes:
      Ember.Debug: 1
    fors: {}
    namespaces: {}
  packages/ember-debug/lib/warn.js:
    name: packages/ember-debug/lib/warn.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-extension-support/lib/container_debug_adapter.js:
    name: packages/ember-extension-support/lib/container_debug_adapter.js
    modules:
      ember-extension-support: 1
    classes:
      Ember.ContainerDebugAdapter: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-extension-support/lib/data_adapter.js:
    name: packages/ember-extension-support/lib/data_adapter.js
    modules: {}
    classes:
      Ember.DataAdapter: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-extension-support/lib/main.js:
    name: packages/ember-extension-support/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/-concat.js:
    name: packages/ember-htmlbars/lib/helpers/-concat.js
    modules:
      ember-templates: 1
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/-html-safe.js:
    name: packages/ember-htmlbars/lib/helpers/-html-safe.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/each-in.js:
    name: packages/ember-htmlbars/lib/helpers/each-in.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/each.js:
    name: packages/ember-htmlbars/lib/helpers/each.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/hash.js:
    name: packages/ember-htmlbars/lib/helpers/hash.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/if_unless.js:
    name: packages/ember-htmlbars/lib/helpers/if_unless.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/loc.js:
    name: packages/ember-htmlbars/lib/helpers/loc.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/log.js:
    name: packages/ember-htmlbars/lib/helpers/log.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helpers/with.js:
    name: packages/ember-htmlbars/lib/helpers/with.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/bind-local.js:
    name: packages/ember-htmlbars/lib/hooks/bind-local.js
    modules:
      ember-htmlbars: 1
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/bind-self.js:
    name: packages/ember-htmlbars/lib/hooks/bind-self.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/bind-shadow-scope.js:
    name: packages/ember-htmlbars/lib/hooks/bind-shadow-scope.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/classify.js:
    name: packages/ember-htmlbars/lib/hooks/classify.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/cleanup-render-node.js:
    name: packages/ember-htmlbars/lib/hooks/cleanup-render-node.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/concat.js:
    name: packages/ember-htmlbars/lib/hooks/concat.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/destroy-render-node.js:
    name: packages/ember-htmlbars/lib/hooks/destroy-render-node.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/element.js:
    name: packages/ember-htmlbars/lib/hooks/element.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/get-child.js:
    name: packages/ember-htmlbars/lib/hooks/get-child.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/get-root.js:
    name: packages/ember-htmlbars/lib/hooks/get-root.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/get-value.js:
    name: packages/ember-htmlbars/lib/hooks/get-value.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/link-render-node.js:
    name: packages/ember-htmlbars/lib/hooks/link-render-node.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/subexpr.js:
    name: packages/ember-htmlbars/lib/hooks/subexpr.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/hooks/update-self.js:
    name: packages/ember-htmlbars/lib/hooks/update-self.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/closure-component.js:
    name: packages/ember-htmlbars/lib/keywords/closure-component.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/collection.js:
    name: packages/ember-htmlbars/lib/keywords/collection.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/component.js:
    name: packages/ember-htmlbars/lib/keywords/component.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/debugger.js:
    name: packages/ember-htmlbars/lib/keywords/debugger.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/each.js:
    name: packages/ember-htmlbars/lib/keywords/each.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/get.js:
    name: packages/ember-htmlbars/lib/keywords/get.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/input.js:
    name: packages/ember-htmlbars/lib/keywords/input.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/mut.js:
    name: packages/ember-htmlbars/lib/keywords/mut.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/outlet.js:
    name: packages/ember-htmlbars/lib/keywords/outlet.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/partial.js:
    name: packages/ember-htmlbars/lib/keywords/partial.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/readonly.js:
    name: packages/ember-htmlbars/lib/keywords/readonly.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/textarea.js:
    name: packages/ember-htmlbars/lib/keywords/textarea.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/unbound.js:
    name: packages/ember-htmlbars/lib/keywords/unbound.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/view.js:
    name: packages/ember-htmlbars/lib/keywords/view.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords/with.js:
    name: packages/ember-htmlbars/lib/keywords/with.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/system/append-templated-view.js:
    name: packages/ember-htmlbars/lib/system/append-templated-view.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/system/bootstrap.js:
    name: packages/ember-htmlbars/lib/system/bootstrap.js
    modules: {}
    classes: {}
    fors:
      Ember.HTMLBars: 1
    namespaces: {}
  packages/ember-htmlbars/lib/system/instrumentation-support.js:
    name: packages/ember-htmlbars/lib/system/instrumentation-support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/system/lookup-helper.js:
    name: packages/ember-htmlbars/lib/system/lookup-helper.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/system/make_bound_helper.js:
    name: packages/ember-htmlbars/lib/system/make_bound_helper.js
    modules: {}
    classes: {}
    fors:
      Ember.HTMLBars: 1
    namespaces: {}
  packages/ember-htmlbars/lib/utils/is-component.js:
    name: packages/ember-htmlbars/lib/utils/is-component.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/utils/string.js:
    name: packages/ember-htmlbars/lib/utils/string.js
    modules: {}
    classes: {}
    fors:
      Ember.String: 1
    namespaces: {}
  packages/ember-htmlbars/lib/helper.js:
    name: packages/ember-htmlbars/lib/helper.js
    modules: {}
    classes:
      Ember.Helper: 1
    fors: {}
    namespaces: {}
  packages/ember-htmlbars/lib/helpers.js:
    name: packages/ember-htmlbars/lib/helpers.js
    modules: {}
    classes: {}
    fors:
      Ember.HTMLBars: 1
    namespaces: {}
  packages/ember-htmlbars/lib/keywords.js:
    name: packages/ember-htmlbars/lib/keywords.js
    modules: {}
    classes: {}
    fors:
      Ember.HTMLBars: 1
    namespaces: {}
  packages/ember-htmlbars/lib/main.js:
    name: packages/ember-htmlbars/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/streams/dependency.js:
    name: packages/ember-metal/lib/streams/dependency.js
    modules: {}
    classes:
      Ember.streams.Dependency: 1
    fors: {}
    namespaces:
      Ember.streams: 1
  packages/ember-metal/lib/streams/stream.js:
    name: packages/ember-metal/lib/streams/stream.js
    modules: {}
    classes:
      Ember.stream.Stream: 1
    fors: {}
    namespaces:
      Ember.stream: 1
  packages/ember-metal/lib/streams/subscriber.js:
    name: packages/ember-metal/lib/streams/subscriber.js
    modules: {}
    classes:
      Ember.streams.Subscriber: 1
    fors: {}
    namespaces:
      Ember.streams: 1
  packages/ember-metal/lib/streams/utils.js:
    name: packages/ember-metal/lib/streams/utils.js
    modules: {}
    classes: {}
    fors:
      Ember.stream: 1
    namespaces: {}
  packages/ember-metal/lib/assign.js:
    name: packages/ember-metal/lib/assign.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/binding.js:
    name: packages/ember-metal/lib/binding.js
    modules: {}
    classes:
      Ember.Binding: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-metal/lib/computed.js:
    name: packages/ember-metal/lib/computed.js
    modules: {}
    classes:
      Ember.ComputedProperty: 1
      Ember.computed: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-metal/lib/computed_macros.js:
    name: packages/ember-metal/lib/computed_macros.js
    modules: {}
    classes: {}
    fors:
      Ember.computed: 1
    namespaces: {}
  packages/ember-metal/lib/core.js:
    name: packages/ember-metal/lib/core.js
    modules: {}
    classes:
      Ember: 1
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/dependent_keys.js:
    name: packages/ember-metal/lib/dependent_keys.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/deprecate_property.js:
    name: packages/ember-metal/lib/deprecate_property.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/error.js:
    name: packages/ember-metal/lib/error.js
    modules: {}
    classes:
      Ember.Error: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-metal/lib/events.js:
    name: packages/ember-metal/lib/events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/expand_properties.js:
    name: packages/ember-metal/lib/expand_properties.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/features.js:
    name: packages/ember-metal/lib/features.js
    modules: {}
    classes:
      Ember.FEATURES: 1
    fors:
      Ember.FEATURES: 1
    namespaces:
      Ember: 1
  packages/ember-metal/lib/get_properties.js:
    name: packages/ember-metal/lib/get_properties.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/injected_property.js:
    name: packages/ember-metal/lib/injected_property.js
    modules: {}
    classes:
      Ember.InjectedProperty: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-metal/lib/instrumentation.js:
    name: packages/ember-metal/lib/instrumentation.js
    modules: {}
    classes:
      Ember.Instrumentation: 1
    fors: {}
    namespaces:
      Ember: 1
      Ember.Instrumentation: 1
  packages/ember-metal/lib/is_blank.js:
    name: packages/ember-metal/lib/is_blank.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/is_empty.js:
    name: packages/ember-metal/lib/is_empty.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/is_none.js:
    name: packages/ember-metal/lib/is_none.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/is_present.js:
    name: packages/ember-metal/lib/is_present.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/libraries.js:
    name: packages/ember-metal/lib/libraries.js
    modules: {}
    classes:
      Libraries: 1
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/logger.js:
    name: packages/ember-metal/lib/logger.js
    modules: {}
    classes:
      Ember.Logger: 1
    fors:
      Ember.Logger: 1
    namespaces:
      Ember: 1
  packages/ember-metal/lib/main.js:
    name: packages/ember-metal/lib/main.js
    modules: {}
    classes:
      Backburner: 1
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/map.js:
    name: packages/ember-metal/lib/map.js
    modules: {}
    classes:
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-metal/lib/merge.js:
    name: packages/ember-metal/lib/merge.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/meta.js:
    name: packages/ember-metal/lib/meta.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/mixin.js:
    name: packages/ember-metal/lib/mixin.js
    modules: {}
    classes:
      Ember.Mixin: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-metal/lib/observer.js:
    name: packages/ember-metal/lib/observer.js
    modules:
      ember-metal: 1
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/properties.js:
    name: packages/ember-metal/lib/properties.js
    modules: {}
    classes:
      Descriptor: 1
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/property_events.js:
    name: packages/ember-metal/lib/property_events.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/property_get.js:
    name: packages/ember-metal/lib/property_get.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/property_set.js:
    name: packages/ember-metal/lib/property_set.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/replace.js:
    name: packages/ember-metal/lib/replace.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/run_loop.js:
    name: packages/ember-metal/lib/run_loop.js
    modules: {}
    classes:
      Ember.run: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-metal/lib/set_properties.js:
    name: packages/ember-metal/lib/set_properties.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-metal/lib/utils.js:
    name: packages/ember-metal/lib/utils.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-metal/lib/watching.js:
    name: packages/ember-metal/lib/watching.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-routing-htmlbars/lib/helpers/query-params.js:
    name: packages/ember-routing-htmlbars/lib/helpers/query-params.js
    modules:
      ember-routing-htmlbars: 1
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-routing-htmlbars/lib/keywords/action.js:
    name: packages/ember-routing-htmlbars/lib/keywords/action.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-routing-htmlbars/lib/keywords/render.js:
    name: packages/ember-routing-htmlbars/lib/keywords/render.js
    modules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    namespaces: {}
  packages/ember-routing-htmlbars/lib/main.js:
    name: packages/ember-routing-htmlbars/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing-views/lib/components/link-to.js:
    name: packages/ember-routing-views/lib/components/link-to.js
    modules:
      ember-routing-views: 1
    classes:
      Ember.LinkComponent: 1
    fors:
      Ember.Templates.helpers: 1
    namespaces:
      Ember: 1
  packages/ember-routing-views/lib/views/outlet.js:
    name: packages/ember-routing-views/lib/views/outlet.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing-views/lib/main.js:
    name: packages/ember-routing-views/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing/lib/ext/controller.js:
    name: packages/ember-routing/lib/ext/controller.js
    modules:
      ember-routing: 1
    classes: {}
    fors:
      Ember.ControllerMixin: 1
    namespaces: {}
  packages/ember-routing/lib/ext/run_loop.js:
    name: packages/ember-routing/lib/ext/run_loop.js
    modules:
      ember-views: 1
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing/lib/location/api.js:
    name: packages/ember-routing/lib/location/api.js
    modules: {}
    classes:
      Ember.Location: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/location/auto_location.js:
    name: packages/ember-routing/lib/location/auto_location.js
    modules: {}
    classes:
      Ember.AutoLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/location/hash_location.js:
    name: packages/ember-routing/lib/location/hash_location.js
    modules: {}
    classes:
      Ember.HashLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/location/history_location.js:
    name: packages/ember-routing/lib/location/history_location.js
    modules: {}
    classes:
      Ember.HistoryLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/location/none_location.js:
    name: packages/ember-routing/lib/location/none_location.js
    modules: {}
    classes:
      Ember.NoneLocation: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/location/util.js:
    name: packages/ember-routing/lib/location/util.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing/lib/services/routing.js:
    name: packages/ember-routing/lib/services/routing.js
    modules: {}
    classes:
      RoutingService: 1
    fors: {}
    namespaces: {}
  packages/ember-routing/lib/system/controller_for.js:
    name: packages/ember-routing/lib/system/controller_for.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-routing/lib/system/dsl.js:
    name: packages/ember-routing/lib/system/dsl.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-routing/lib/system/generate_controller.js:
    name: packages/ember-routing/lib/system/generate_controller.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-routing/lib/system/route.js:
    name: packages/ember-routing/lib/system/route.js
    modules: {}
    classes:
      Ember.Route: 1
    fors:
      Ember.Route: 1
    namespaces:
      Ember: 1
  packages/ember-routing/lib/system/router.js:
    name: packages/ember-routing/lib/system/router.js
    modules: {}
    classes:
      Ember.Router: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-routing/lib/main.js:
    name: packages/ember-routing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/computed/reduce_computed_macros.js:
    name: packages/ember-runtime/lib/computed/reduce_computed_macros.js
    modules:
      ember-runtime: 1
    classes: {}
    fors:
      Ember.computed: 1
    namespaces: {}
  packages/ember-runtime/lib/controllers/controller.js:
    name: packages/ember-runtime/lib/controllers/controller.js
    modules: {}
    classes:
      Ember.Controller: 1
    fors:
      Ember.inject: 1
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/ext/function.js:
    name: packages/ember-runtime/lib/ext/function.js
    modules: {}
    classes: {}
    fors:
      Function: 1
    namespaces: {}
  packages/ember-runtime/lib/ext/string.js:
    name: packages/ember-runtime/lib/ext/string.js
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  packages/ember-runtime/lib/mixins/-proxy.js:
    name: packages/ember-runtime/lib/mixins/-proxy.js
    modules: {}
    classes:
      Ember.ProxyMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/action_handler.js:
    name: packages/ember-runtime/lib/mixins/action_handler.js
    modules: {}
    classes:
      Ember.ActionHandler: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/array.js:
    name: packages/ember-runtime/lib/mixins/array.js
    modules: {}
    classes:
      Ember.Array: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/comparable.js:
    name: packages/ember-runtime/lib/mixins/comparable.js
    modules: {}
    classes:
      Ember.Comparable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/container_proxy.js:
    name: packages/ember-runtime/lib/mixins/container_proxy.js
    modules: {}
    classes:
      ContainerProxyMixin: 1
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/mixins/controller.js:
    name: packages/ember-runtime/lib/mixins/controller.js
    modules: {}
    classes:
      Ember.ControllerMixin: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js:
    name: packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/mixins/copyable.js:
    name: packages/ember-runtime/lib/mixins/copyable.js
    modules: {}
    classes:
      Ember.Copyable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/enumerable.js:
    name: packages/ember-runtime/lib/mixins/enumerable.js
    modules: {}
    classes:
      Ember.Enumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/evented.js:
    name: packages/ember-runtime/lib/mixins/evented.js
    modules: {}
    classes:
      Ember.Evented: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/freezable.js:
    name: packages/ember-runtime/lib/mixins/freezable.js
    modules: {}
    classes:
      Ember.Freezable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/mutable_array.js:
    name: packages/ember-runtime/lib/mixins/mutable_array.js
    modules: {}
    classes:
      Ember.MutableArray: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/mutable_enumerable.js:
    name: packages/ember-runtime/lib/mixins/mutable_enumerable.js
    modules: {}
    classes:
      Ember.MutableEnumerable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/observable.js:
    name: packages/ember-runtime/lib/mixins/observable.js
    modules: {}
    classes:
      Ember.Observable: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/mixins/promise_proxy.js:
    name: packages/ember-runtime/lib/mixins/promise_proxy.js
    modules: {}
    classes:
      Ember.PromiseProxyMixin: 1
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/mixins/registry_proxy.js:
    name: packages/ember-runtime/lib/mixins/registry_proxy.js
    modules: {}
    classes:
      RegistryProxyMixin: 1
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/mixins/target_action_support.js:
    name: packages/ember-runtime/lib/mixins/target_action_support.js
    modules: {}
    classes:
      Ember.TargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/array_proxy.js:
    name: packages/ember-runtime/lib/system/array_proxy.js
    modules: {}
    classes:
      Ember.ArrayProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/core_object.js:
    name: packages/ember-runtime/lib/system/core_object.js
    modules: {}
    classes:
      Ember.CoreObject: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/each_proxy.js:
    name: packages/ember-runtime/lib/system/each_proxy.js
    modules: {}
    classes:
      Ember.EachProxy: 1
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/system/lazy_load.js:
    name: packages/ember-runtime/lib/system/lazy_load.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-runtime/lib/system/namespace.js:
    name: packages/ember-runtime/lib/system/namespace.js
    modules: {}
    classes:
      Ember.Namespace: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/native_array.js:
    name: packages/ember-runtime/lib/system/native_array.js
    modules: {}
    classes:
      Ember.NativeArray: 1
    fors:
      Ember: 1
      Ember.NativeArray: 1
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/object.js:
    name: packages/ember-runtime/lib/system/object.js
    modules: {}
    classes:
      Ember.Object: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/object_proxy.js:
    name: packages/ember-runtime/lib/system/object_proxy.js
    modules: {}
    classes:
      Ember.ObjectProxy: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/service.js:
    name: packages/ember-runtime/lib/system/service.js
    modules: {}
    classes:
      Ember.Service: 1
    fors:
      Ember.inject: 1
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/system/string.js:
    name: packages/ember-runtime/lib/system/string.js
    modules: {}
    classes:
      Ember.String: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/compare.js:
    name: packages/ember-runtime/lib/compare.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-runtime/lib/copy.js:
    name: packages/ember-runtime/lib/copy.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-runtime/lib/core.js:
    name: packages/ember-runtime/lib/core.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/inject.js:
    name: packages/ember-runtime/lib/inject.js
    modules: {}
    classes:
      Ember.inject: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-runtime/lib/is-equal.js:
    name: packages/ember-runtime/lib/is-equal.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-runtime/lib/main.js:
    name: packages/ember-runtime/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-runtime/lib/utils.js:
    name: packages/ember-runtime/lib/utils.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember-testing/lib/adapters/adapter.js:
    name: packages/ember-testing/lib/adapters/adapter.js
    modules:
      ember-testing: 1
    classes:
      Ember.Test.Adapter: 1
    fors: {}
    namespaces:
      Ember.Test: 1
  packages/ember-testing/lib/adapters/qunit.js:
    name: packages/ember-testing/lib/adapters/qunit.js
    modules: {}
    classes:
      Ember.Test.QUnitAdapter: 1
    fors: {}
    namespaces:
      Ember.Test: 1
  packages/ember-testing/lib/helpers.js:
    name: packages/ember-testing/lib/helpers.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-testing/lib/main.js:
    name: packages/ember-testing/lib/main.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-testing/lib/setup_for_testing.js:
    name: packages/ember-testing/lib/setup_for_testing.js
    modules: {}
    classes: {}
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-testing/lib/support.js:
    name: packages/ember-testing/lib/support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-testing/lib/test.js:
    name: packages/ember-testing/lib/test.js
    modules: {}
    classes:
      Ember.Test: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/compat/metamorph_view.js:
    name: packages/ember-views/lib/compat/metamorph_view.js
    modules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/components/component.js:
    name: packages/ember-views/lib/components/component.js
    modules: {}
    classes:
      Ember.Component: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/aria_role_support.js:
    name: packages/ember-views/lib/mixins/aria_role_support.js
    modules: {}
    classes:
      Ember.AriaRoleSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/class_names_support.js:
    name: packages/ember-views/lib/mixins/class_names_support.js
    modules: {}
    classes:
      Ember.ClassNamesSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/empty_view_support.js:
    name: packages/ember-views/lib/mixins/empty_view_support.js
    modules: {}
    classes:
      Ember.EmptyViewSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/instrumentation_support.js:
    name: packages/ember-views/lib/mixins/instrumentation_support.js
    modules: {}
    classes:
      Ember.InstrumentationSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/legacy_view_support.js:
    name: packages/ember-views/lib/mixins/legacy_view_support.js
    modules: {}
    classes:
      Ember.LegacyViewSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/template_rendering_support.js:
    name: packages/ember-views/lib/mixins/template_rendering_support.js
    modules: {}
    classes:
      Ember.TemplateRenderingSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/text_support.js:
    name: packages/ember-views/lib/mixins/text_support.js
    modules: {}
    classes:
      Ember.TextSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/view_child_views_support.js:
    name: packages/ember-views/lib/mixins/view_child_views_support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/mixins/view_context_support.js:
    name: packages/ember-views/lib/mixins/view_context_support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/mixins/view_support.js:
    name: packages/ember-views/lib/mixins/view_support.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/mixins/view_target_action_support.js:
    name: packages/ember-views/lib/mixins/view_target_action_support.js
    modules: {}
    classes:
      Ember.ViewTargetActionSupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/mixins/visibility_support.js:
    name: packages/ember-views/lib/mixins/visibility_support.js
    modules: {}
    classes:
      Ember.VisibilitySupport: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/streams/class_name_binding.js:
    name: packages/ember-views/lib/streams/class_name_binding.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/system/action_manager.js:
    name: packages/ember-views/lib/system/action_manager.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/system/event_dispatcher.js:
    name: packages/ember-views/lib/system/event_dispatcher.js
    modules: {}
    classes:
      Ember.EventDispatcher: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/system/ext.js:
    name: packages/ember-views/lib/system/ext.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/system/utils.js:
    name: packages/ember-views/lib/system/utils.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/states/default.js:
    name: packages/ember-views/lib/views/states/default.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/states/destroying.js:
    name: packages/ember-views/lib/views/states/destroying.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/states/has_element.js:
    name: packages/ember-views/lib/views/states/has_element.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/states/in_dom.js:
    name: packages/ember-views/lib/views/states/in_dom.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/states/pre_render.js:
    name: packages/ember-views/lib/views/states/pre_render.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-views/lib/views/checkbox.js:
    name: packages/ember-views/lib/views/checkbox.js
    modules: {}
    classes:
      Ember.Checkbox: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/collection_view.js:
    name: packages/ember-views/lib/views/collection_view.js
    modules: {}
    classes:
      Ember.CollectionView: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/container_view.js:
    name: packages/ember-views/lib/views/container_view.js
    modules: {}
    classes:
      Ember.ContainerView: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/core_view.js:
    name: packages/ember-views/lib/views/core_view.js
    modules: {}
    classes:
      Ember.CoreView: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/select.js:
    name: packages/ember-views/lib/views/select.js
    modules: {}
    classes:
      Ember.Select: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/text_area.js:
    name: packages/ember-views/lib/views/text_area.js
    modules: {}
    classes:
      Ember.TextArea: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/text_field.js:
    name: packages/ember-views/lib/views/text_field.js
    modules: {}
    classes:
      Ember.TextField: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-views/lib/views/view.js:
    name: packages/ember-views/lib/views/view.js
    modules: {}
    classes:
      Ember.View: 1
    fors:
      Ember: 1
    namespaces:
      Ember: 1
  packages/ember-views/lib/main.js:
    name: packages/ember-views/lib/main.js
    modules: {}
    classes: {}
    fors:
      Ember: 1
    namespaces: {}
  packages/ember/lib/main.js:
    name: packages/ember/lib/main.js
    modules:
      ember: 1
    classes: {}
    fors: {}
    namespaces: {}
modules:
  ember:
    name: ember
    submodules:
      ember-application: 1
      ember-debug: 1
      ember-extension-support: 1
      ember-templates: 1
      ember-htmlbars: 1
      ember-routing-htmlbars: 1
      ember-routing-views: 1
      ember-routing: 1
      ember-views: 1
      ember-runtime: 1
      ember-testing: 1
    classes:
      RSVP: 1
      RSVP.EventTarget: 1
      RSVP.Promise: 1
      Ember.ApplicationInstance: 1
      "@Ember.ApplicationInstance.BootOptions": 1
      Ember.Application: 1
      Ember.DefaultResolver: 1
      Ember: 1
      Ember.Debug: 1
      Ember.ContainerDebugAdapter: 1
      Ember.DataAdapter: 1
      Ember.Templates.helpers: 1
      Ember.HTMLBars: 1
      Ember.String: 1
      Ember.Helper: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.computed: 1
      Ember.Error: 1
      Ember.FEATURES: 1
      Ember.InjectedProperty: 1
      Ember.Instrumentation: 1
      Libraries: 1
      Ember.Logger: 1
      Backburner: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Ember.LinkComponent: 1
      Ember.ControllerMixin: 1
      Ember.Location: 1
      Ember.AutoLocation: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      RoutingService: 1
      Ember.Route: 1
      Ember.Router: 1
      Ember.Controller: 1
      Ember.inject: 1
      Function: 1
      String: 1
      Ember.ProxyMixin: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      ContainerProxyMixin: 1
      Ember.Copyable: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      RegistryProxyMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.EachProxy: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
      Ember.ObjectProxy: 1
      Ember.Service: 1
      Ember.Test.Adapter: 1
      Ember.Test.QUnitAdapter: 1
      Ember.Test: 1
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember.Component: 1
      Ember.AriaRoleSupport: 1
      Ember.ClassNamesSupport: 1
      Ember.EmptyViewSupport: 1
      Ember.InstrumentationSupport: 1
      Ember.LegacyViewSupport: 1
      Ember.TemplateRenderingSupport: 1
      Ember.TextSupport: 1
      Ember.ViewTargetActionSupport: 1
      Ember.VisibilitySupport: 1
      Ember.EventDispatcher: 1
      Ember.Checkbox: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.CoreView: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.View: 1
    fors:
      Ember: 1
      Ember.Templates.helpers: 1
      Ember.HTMLBars: 1
      Ember.String: 1
      Ember.computed: 1
      Ember.FEATURES: 1
      Ember.Logger: 1
      Ember.ControllerMixin: 1
      Ember.Route: 1
      Ember.inject: 1
      Function: 1
      String: 1
      Ember.NativeArray: 1
    namespaces:
      "@Ember.ApplicationInstance": 1
      Ember: 1
      Ember.Instrumentation: 1
      Ember.Test: 1
    tag: module
    file: packages/ember-views/lib/views/view.js
    line: 52
  ember-application:
    name: ember-application
    submodules: {}
    classes:
      Ember.ApplicationInstance: 1
      "@Ember.ApplicationInstance.BootOptions": 1
      Ember.Application: 1
      Ember.DefaultResolver: 1
    fors: {}
    is_submodule: 1
    namespaces:
      "@Ember.ApplicationInstance": 1
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-application/lib/system/resolver.js
    line: 38
    description: |-
      The `ApplicationInstance` encapsulates all of the stateful aspects of a
      running `Application`.

      At a high-level, we break application boot into two distinct phases:

      * Definition time, where all of the classes, templates, and other
        dependencies are loaded (typically in the browser).
      * Run time, where we begin executing the application once everything
        has loaded.

      Definition time can be expensive and only needs to happen once since it is
      an idempotent operation. For example, between test runs and FastBoot
      requests, the application stays the same. It is only the state that we want
      to reset.

      That state is what the `ApplicationInstance` manages: it is responsible for
      creating the container that contains all application state, and disposing of
      it once the particular test run or FastBoot request has finished.
  ember-debug:
    name: ember-debug
    submodules: {}
    classes:
      Ember.Debug: 1
    fors:
      Ember: 1
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: packages/ember-debug/lib/main.js
    line: 221
  ember-extension-support:
    name: ember-extension-support
    submodules: {}
    classes:
      Ember.ContainerDebugAdapter: 1
      Ember.DataAdapter: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-extension-support/lib/data_adapter.js
    line: 14
    description: |-
      The `ContainerDebugAdapter` helps the container and resolver interface
      with tools that debug Ember such as the
      [Ember Extension](https://github.com/tildeio/ember-extension)
      for Chrome and Firefox.

      This class can be extended by a custom resolver implementer
      to override some of the methods with library-specific code.

      The methods likely to be overridden are:

      * `canCatalogEntriesByType`
      * `catalogEntriesByType`

      The adapter will need to be registered
      in the application's container as `container-debug-adapter:main`

      Example:

      ```javascript
      Application.initializer({
        name: "containerDebugAdapter",

        initialize: function(application) {
          application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
        }
      });
      ```
  ember-templates:
    name: ember-templates
    submodules: {}
    classes:
      Ember.Helper: 1
    fors:
      Ember.Templates.helpers: 1
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: packages/ember-htmlbars/lib/helper.js
    line: 8
    access: public
    tagname: ''
    description: |-
      Ember templates are executed by [HTMLBars](https://github.com/tildeio/htmlbars),
      an HTML-friendly version of [Handlebars](http://handlebarsjs.com/). Any valid Handlebars syntax is valid in an Ember template.

      ### Showing a property

      Templates manage the flow of an application's UI, and display state (through
      the DOM) to a user. For example, given a component with the property "name",
      that component's template can use the name in several ways:

      ```javascript
      // app/components/person.js
      export default Ember.Component.extend({
        name: 'Jill'
      });
      ```

      ```handlebars
      {{! app/components/person.hbs }}
      {{name}}
      <div>{{name}}</div>
      <span data-name={{name}}></span>
      ```

      Any time the "name" property on the component changes, the DOM will be
      updated.

      Properties can be chained as well:

      ```handlebars
      {{aUserModel.name}}
      <div>{{listOfUsers.firstObject.name}}</div>
      ```

      ### Using Ember helpers

      When content is passed in mustaches `{{}}`, Ember will first try to find a helper
      or component with that name. For example, the `if` helper:

      ```handlebars
      {{if name "I have a name" "I have no name"}}
      <span data-has-name={{if name true}}></span>
      ```

      The returned value is placed where the `{{}}` is called. The above style is
      called "inline". A second style of helper usage is called "block". For example:

      ```handlebars
      {{#if name}}
        I have a name
      {{else}}
        I have no name
      {{/if}}
      ```

      The block form of helpers allows you to control how the UI is created based
      on the values of properties.

      A third form of helper is called "nested". For example here the concat
      helper will add " Doe" to a displayed name if the person has no last name:

      ```handlebars
      <span data-name={{concat firstName (
       if lastName (concat " " lastName) "Doe"
      )}}></span>
      ```

      Ember's built-in helpers are described under the [Ember.Templates.helpers](/api/classes/Ember.Templates.helpers.html)
      namespace. Documentation on creating custom helpers can be found under
      [Ember.Helper](/api/classes/Ember.Helper.html).

      ### Invoking a Component

      Ember components represent state to the UI of an application. Further
      reading on components can be found under [Ember.Component](/api/classes/Ember.Component.html).
    tag: main
    itemtype: main
  ember-htmlbars:
    name: ember-htmlbars
    submodules: {}
    classes:
      Ember.HTMLBars: 1
    fors:
      Ember.Templates.helpers: 1
      Ember.HTMLBars: 1
      Ember.String: 1
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: packages/ember-htmlbars/lib/hooks/bind-local.js
    line: 1
    description: |-
      [HTMLBars](https://github.com/tildeio/htmlbars) is a [Handlebars](http://handlebarsjs.com/)
        compatible templating engine used by Ember.js. The classes and namespaces
        covered by this documentation attempt to focus on APIs for interacting
        with HTMLBars itself. For more general guidance on Ember.js templates and
        helpers, please see the [ember-templates](/api/modules/ember-templates.html)
        package.
    tag: main
    itemtype: main
    access: public
    tagname: ''
  ember-metal:
    name: ember-metal
    submodules: {}
    classes:
      Ember: 1
      Ember.streams.Dependency: 1
      Ember.stream.Stream: 1
      Ember.streams.Subscriber: 1
      Ember.streams.Ember.stream: 1
      Ember.Binding: 1
      Ember.ComputedProperty: 1
      Ember.computed: 1
      Backburner: 1
      Ember.OrderedSet: 1
      Ember.Map: 1
      Ember.MapWithDefault: 1
      Ember.Mixin: 1
      Descriptor: 1
      Ember.run: 1
    fors:
      Ember.stream: 1
      Ember: 1
      Ember.computed: 1
    namespaces:
      Ember.streams: 1
      Ember.stream: 1
      Ember: 1
    tag: module
    file: packages/ember-metal/lib/run_loop.js
    line: 38
    description: |-
      This namespace contains all Ember methods and functions. Future versions of
      Ember may overwrite this namespace and therefore, you should avoid adding any
      new properties.

      You can also use the shorthand `Em` instead of `Ember`.

      At the heart of Ember is Ember-Runtime, a set of core functions that provide
      cross-platform compatibility and object property observing.  Ember-Runtime is
      small and performance-focused so you can use it alongside other
      cross-platform libraries such as jQuery. For more details, see
      [Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html).
    module: ember
  ember-routing-htmlbars:
    name: ember-routing-htmlbars
    submodules: {}
    classes: {}
    fors:
      Ember.Templates.helpers: 1
    is_submodule: 1
    namespaces: {}
    module: ember
    namespace: ''
    file: packages/ember-routing-htmlbars/lib/helpers/query-params.js
    line: 1
  ember-routing-views:
    name: ember-routing-views
    submodules: {}
    classes:
      Ember.Templates.helpers: 1
      Ember.LinkComponent: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-routing-views/lib/components/link-to.js
    line: 331
    description: |-
      `Ember.LinkComponent` renders an element whose `click` event triggers a
      transition of the application's instance of `Ember.Router` to
      a supplied route by name.

      `Ember.LinkComponent` components are invoked with {{#link-to}}. Properties
      of this class can be overridden with `reopen` to customize application-wide
      behavior.
  ember-routing:
    name: ember-routing
    submodules: {}
    classes:
      Ember.ControllerMixin: 1
      Ember.Location: 1
      Ember.AutoLocation: 1
      Ember.HashLocation: 1
      Ember.HistoryLocation: 1
      Ember.NoneLocation: 1
      RoutingService: 1
      Ember.Route: 1
      Ember.Router: 1
    fors:
      Ember.ControllerMixin: 1
      Ember: 1
      Ember.Route: 1
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-routing/lib/system/router.js
    line: 35
    description: |-
      Ember.Location returns an instance of the correct implementation of
      the `location` API.

      ## Implementations

      You can pass an implementation name (`hash`, `history`, `none`) to force a
      particular implementation to be used in your application.

      ### HashLocation

      Using `HashLocation` results in URLs with a `#` (hash sign) separating the
      server side URL portion of the URL from the portion that is used by Ember.
      This relies upon the `hashchange` event existing in the browser.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'hash'
      });
      ```

      This will result in a posts.new url of `/#/posts/new`.

      ### HistoryLocation

      Using `HistoryLocation` results in URLs that are indistinguishable from a
      standard URL. This relies upon the browser's `history` API.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'history'
      });
      ```

      This will result in a posts.new url of `/posts/new`.

      Keep in mind that your server must serve the Ember app at all the routes you
      define.

      ### AutoLocation

      Using `AutoLocation`, the router will use the best Location class supported by
      the browser it is running in.

      Browsers that support the `history` API will use `HistoryLocation`, those that
      do not, but still support the `hashchange` event will use `HashLocation`, and
      in the rare case neither is supported will use `NoneLocation`.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'auto'
      });
      ```

      This will result in a posts.new url of `/posts/new` for modern browsers that
      support the `history` api or `/#/posts/new` for older ones, like Internet
      Explorer 9 and below.

      When a user visits a link to your application, they will be automatically
      upgraded or downgraded to the appropriate `Location` class, with the URL
      transformed accordingly, if needed.

      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.

      ### NoneLocation

      Using `NoneLocation` causes Ember to not store the applications URL state
      in the actual URL. This is generally used for testing purposes, and is one
      of the changes made when calling `App.setupForTesting()`.

      ## Location API

      Each location implementation must provide the following methods:

      * implementation: returns the string name used to reference the implementation.
      * getURL: returns the current URL.
      * setURL(path): sets the current URL.
      * replaceURL(path): replace the current URL (optional).
      * onUpdateURL(callback): triggers the callback when the URL changes.
      * formatURL(url): formats `url` to be placed into `href` attribute.
      * detect() (optional): instructs the location to do any feature detection
          necessary. If the location needs to redirect to a different URL, it
          can cancel routing by setting the `cancelRouterSetup` property on itself
          to `false`.

      Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
  ember-views:
    name: ember-views
    submodules: {}
    classes:
      Ember._Metamorph: 1
      Ember._MetamorphView: 1
      Ember.Component: 1
      Ember.AriaRoleSupport: 1
      Ember.ClassNamesSupport: 1
      Ember.EmptyViewSupport: 1
      Ember.InstrumentationSupport: 1
      Ember.LegacyViewSupport: 1
      Ember.TemplateRenderingSupport: 1
      Ember.TextSupport: 1
      Ember.VisibilitySupport: 1
      Ember.EventDispatcher: 1
      Ember.Checkbox: 1
      Ember.CollectionView: 1
      Ember.ContainerView: 1
      Ember.Select: 1
      Ember.TextArea: 1
      Ember.TextField: 1
      Ember.View: 1
    fors:
      Ember: 1
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-views/lib/views/view.js
    line: 52
    description: |-
      An `Ember.Component` is a view that is completely
      isolated. Properties accessed in its templates go
      to the view object and actions are targeted at
      the view object. There is no access to the
      surrounding context or outer controller; all
      contextual information must be passed in.

      The easiest way to create an `Ember.Component` is via
      a template. If you name a template
      `components/my-foo`, you will be able to use
      `{{my-foo}}` in other templates, which will make
      an instance of the isolated component.

      ```handlebars
      {{app-profile person=currentUser}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      <img src={{person.avatar}}>
      <p class='signature'>{{person.signature}}</p>
      ```

      You can use `yield` inside a template to
      include the **contents** of any block attached to
      the component. The block will be executed in the
      context of the surrounding context or outer controller:

      ```handlebars
      {{#app-profile person=currentUser}}
        <p>Admin mode</p>
        {{! Executed in the controller's context. }}
      {{/app-profile}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      {{! Executed in the components context. }}
      {{yield}} {{! block contents }}
      ```

      If you want to customize the component, in order to
      handle events or actions, you implement a subclass
      of `Ember.Component` named after the name of the
      component. Note that `Component` needs to be appended to the name of
      your subclass like `AppProfileComponent`.

      For example, you could implement the action
      `hello` for the `app-profile` component:

      ```javascript
      App.AppProfileComponent = Ember.Component.extend({
        actions: {
          hello: function(name) {
            console.log("Hello", name);
          }
        }
      });
      ```

      And then use it in the component's template:

      ```handlebars
      <!-- app-profile template -->

      <h1>{{person.title}}</h1>
      {{yield}} <!-- block contents -->

      <button {{action 'hello' person.name}}>
        Say Hello to {{person.name}}
      </button>
      ```

      Components must have a `-` in their name to avoid
      conflicts with built-in controls that wrap HTML
      elements. This is consistent with the same
      requirement in web components.
  ember-runtime:
    name: ember-runtime
    submodules: {}
    classes:
      Ember.String: 1
      Ember.Controller: 1
      Ember.inject: 1
      Function: 1
      String: 1
      Ember.ProxyMixin: 1
      Ember.ActionHandler: 1
      Ember.Array: 1
      Ember.Comparable: 1
      ContainerProxyMixin: 1
      Ember.Copyable: 1
      Ember.Enumerable: 1
      Ember.Evented: 1
      Ember.Freezable: 1
      Ember.MutableArray: 1
      Ember.MutableEnumerable: 1
      Ember.Observable: 1
      Ember.PromiseProxyMixin: 1
      RegistryProxyMixin: 1
      Ember.TargetActionSupport: 1
      Ember.ArrayProxy: 1
      Ember.CoreObject: 1
      Ember.Namespace: 1
      Ember.NativeArray: 1
      Ember.Object: 1
    fors:
      Ember.computed: 1
      Ember.inject: 1
      Function: 1
      String: 1
      Ember: 1
      Ember.NativeArray: 1
    is_submodule: 1
    namespaces:
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-runtime/lib/system/object.js
    line: 9
    description: |-
      Defines string helper methods including string formatting and localization.
      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be
      added to the `String.prototype` as well.
  ember-testing:
    name: ember-testing
    submodules: {}
    classes:
      Ember.Test.Adapter: 1
      Ember.Test: 1
    fors: {}
    is_submodule: 1
    namespaces:
      Ember.Test: 1
      Ember: 1
    module: ember
    namespace: ''
    file: packages/ember-testing/lib/test.js
    line: 14
    description: |-
      The primary purpose of this class is to create hooks that can be implemented
      by an adapter for various test frameworks.
classes:
  RSVP:
    name: RSVP
    shortname: RSVP
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
  RSVP.EventTarget:
    name: RSVP.EventTarget
    shortname: RSVP.EventTarget
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    file: bower_components/rsvp/lib/rsvp/events.js
    line: 19
  RSVP.Promise:
    name: RSVP.Promise
    shortname: RSVP.Promise
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    file: bower_components/rsvp/lib/rsvp/promise.js
    line: 34
    description: |-
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise’s eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```
    params:
    - name: resolver
      description: ''
      type: Function
    - name: label
      description: |-
        optional string for labeling the promise.
        Useful for tooling.
      type: String
    is_constructor: 1
  Ember.ApplicationInstance:
    name: Ember.ApplicationInstance
    shortname: Ember.ApplicationInstance
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: ''
    file: packages/ember-application/lib/system/application-instance.js
    line: 26
    description: |-
      The `ApplicationInstance` encapsulates all of the stateful aspects of a
      running `Application`.

      At a high-level, we break application boot into two distinct phases:

      * Definition time, where all of the classes, templates, and other
        dependencies are loaded (typically in the browser).
      * Run time, where we begin executing the application once everything
        has loaded.

      Definition time can be expensive and only needs to happen once since it is
      an idempotent operation. For example, between test runs and FastBoot
      requests, the application stays the same. It is only the state that we want
      to reset.

      That state is what the `ApplicationInstance` manages: it is responsible for
      creating the container that contains all application state, and disposing of
      it once the particular test run or FastBoot request has finished.
    access: public
    tagname: ''
    extends: Ember.Object
    uses:
    - RegistryProxyMixin
    - ContainerProxyMixin
  "@Ember.ApplicationInstance.BootOptions":
    name: "@Ember.ApplicationInstance.BootOptions"
    shortname: "@Ember.ApplicationInstance.BootOptions"
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: "@Ember.ApplicationInstance"
    file: packages/ember-application/lib/system/application-instance.js
    line: 351
    description: |-
      A list of boot-time configuration options for customizing the behavior of
      an `Ember.ApplicationInstance`.

      This is an interface class that exists purely to document the available
      options; you do not need to construct it manually. Simply pass a regular
      JavaScript object containing the desired options into methods that require
      one of these options object:

      ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```

      Not all combinations of the supported options are valid. See the documentation
      on `Ember.Application#visit` for the supported configurations.

      Internal, experimental or otherwise unstable flags are marked as private.
    access: public
    tagname: ''
  Ember.Application:
    name: Ember.Application
    shortname: Ember.Application
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: packages/ember-application/lib/system/application.js
    line: 59
    description: |-
      An instance of `Ember.Application` is the starting point for every Ember
      application. It helps to instantiate, initialize and coordinate the many
      objects that make up your app.

      Each Ember app has one and only one `Ember.Application` object. In fact, the
      very first thing you should do in your application is create the instance:

      ```javascript
      window.App = Ember.Application.create();
      ```

      Typically, the application object is the only global variable. All other
      classes in your app should be properties on the `Ember.Application` instance,
      which highlights its first role: a global namespace.

      For example, if you define a view class, it might look like this:

      ```javascript
      App.MyView = Ember.View.extend();
      ```

      By default, calling `Ember.Application.create()` will automatically initialize
      your application by calling the `Ember.Application.initialize()` method. If
      you need to delay initialization, you can call your app's `deferReadiness()`
      method. When you are ready for your app to be initialized, call its
      `advanceReadiness()` method.

      You can define a `ready` method on the `Ember.Application` instance, which
      will be run by Ember when the application is initialized.

      Because `Ember.Application` inherits from `Ember.Namespace`, any classes
      you create will have useful string representations when calling `toString()`.
      See the `Ember.Namespace` documentation for more information.

      While you can think of your `Ember.Application` as a container that holds the
      other classes in your application, there are several other responsibilities
      going on under-the-hood that you may want to understand.

      ### Event Delegation

      Ember uses a technique called _event delegation_. This allows the framework
      to set up a global, shared event listener instead of requiring each view to
      do it manually. For example, instead of each view registering its own
      `mousedown` listener on its associated element, Ember sets up a `mousedown`
      listener on the `body`.

      If a `mousedown` event occurs, Ember will look at the target of the event and
      start walking up the DOM node tree, finding corresponding views and invoking
      their `mouseDown` method as it goes.

      `Ember.Application` has a number of default events that it listens for, as
      well as a mapping from lowercase events to camel-cased view method names. For
      example, the `keypress` event causes the `keyPress` method on the view to be
      called, the `dblclick` event causes `doubleClick` to be called, and so on.

      If there is a bubbling browser event that Ember does not listen for by
      default, you can specify custom events and their corresponding view method
      names by setting the application's `customEvents` property:

      ```javascript
      var App = Ember.Application.create({
        customEvents: {
          // add support for the paste event
          paste: 'paste'
        }
      });
      ```

      To prevent Ember from setting up a listener for a default event,
      specify the event name with a `null` value in the `customEvents`
      property:

      ```javascript
      var App = Ember.Application.create({
        customEvents: {
          // prevent listeners for mouseenter/mouseleave events
          mouseenter: null,
          mouseleave: null
        }
      });
      ```

      By default, the application sets up these event listeners on the document
      body. However, in cases where you are embedding an Ember application inside
      an existing page, you may want it to set up the listeners on an element
      inside the body.

      For example, if only events inside a DOM element with the ID of `ember-app`
      should be delegated, set your application's `rootElement` property:

      ```javascript
      var App = Ember.Application.create({
        rootElement: '#ember-app'
      });
      ```

      The `rootElement` can be either a DOM element or a jQuery-compatible selector
      string. Note that *views appended to the DOM outside the root element will
      not receive events.* If you specify a custom root element, make sure you only
      append views inside it!

      To learn more about the advantages of event delegation and the Ember view
      layer, and a list of the event listeners that are setup by default, visit the
      [Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).

      ### Initializers

      Libraries on top of Ember can add initializers, like so:

      ```javascript
      Ember.Application.initializer({
        name: 'api-adapter',

        initialize: function(application) {
          application.register('api-adapter:main', ApiAdapter);
        }
      });
      ```

      Initializers provide an opportunity to access the internal registry, which
      organizes the different components of an Ember application. Additionally
      they provide a chance to access the instantiated application. Beyond
      being used for libraries, initializers are also a great way to organize
      dependency injection or setup in your own application.

      ### Routing

      In addition to creating your application's router, `Ember.Application` is
      also responsible for telling the router when to start routing. Transitions
      between routes can be logged with the `LOG_TRANSITIONS` flag, and more
      detailed intra-transition logging can be logged with
      the `LOG_TRANSITIONS_INTERNAL` flag:

      ```javascript
      var App = Ember.Application.create({
        LOG_TRANSITIONS: true, // basic logging of successful transitions
        LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
      });
      ```

      By default, the router will begin trying to translate the current URL into
      application state once the browser emits the `DOMContentReady` event. If you
      need to defer routing, you can call the application's `deferReadiness()`
      method. Once routing can begin, call the `advanceReadiness()` method.

      If there is any setup required before routing begins, you can implement a
      `ready()` method on your app that will be invoked immediately before routing
      begins.
    extends: Ember.Namespace
    uses:
    - RegistryProxyMixin
    access: public
    tagname: ''
  Ember.DefaultResolver:
    name: Ember.DefaultResolver
    shortname: Ember.DefaultResolver
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-application
    namespace: Ember
    file: packages/ember-application/lib/system/resolver.js
    line: 38
    description: |-
      The DefaultResolver defines the default lookup rules to resolve
      container lookups before consulting the container for registered
      items:

      * templates are looked up on `Ember.TEMPLATES`
      * other names are looked up on the application after converting
        the name. For example, `controller:post` looks up
        `App.PostController` by default.
      * there are some nuances (see examples below)

      ### How Resolving Works

      The container calls this object's `resolve` method with the
      `fullName` argument.

      It first parses the fullName into an object using `parseName`.

      Then it checks for the presence of a type-specific instance
      method of the form `resolve[Type]` and calls it if it exists.
      For example if it was resolving 'template:post', it would call
      the `resolveTemplate` method.

      Its last resort is to call the `resolveOther` method.

      The methods of this object are designed to be easy to override
      in a subclass. For example, you could enhance how a template
      is resolved like so:

      ```javascript
      App = Ember.Application.create({
        Resolver: Ember.DefaultResolver.extend({
          resolveTemplate: function(parsedName) {
            var resolvedTemplate = this._super(parsedName);
            if (resolvedTemplate) { return resolvedTemplate; }
            return Ember.TEMPLATES['not_found'];
          }
        })
      });
      ```

      Some examples of how names are resolved:

      ```
      'template:post'           //=> Ember.TEMPLATES['post']
      'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']
      'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']
      'template:blogPost'       //=> Ember.TEMPLATES['blogPost']
                                //   OR
                                //   Ember.TEMPLATES['blog_post']
      'controller:post'         //=> App.PostController
      'controller:posts.index'  //=> App.PostsIndexController
      'controller:blog/post'    //=> Blog.PostController
      'controller:basic'        //=> Ember.Controller
      'route:post'              //=> App.PostRoute
      'route:posts.index'       //=> App.PostsIndexRoute
      'route:blog/post'         //=> Blog.PostRoute
      'route:basic'             //=> Ember.Route
      'view:post'               //=> App.PostView
      'view:posts.index'        //=> App.PostsIndexView
      'view:blog/post'          //=> Blog.PostView
      'view:basic'              //=> Ember.View
      'foo:post'                //=> App.PostFoo
      'model:post'              //=> App.Post
      ```
    extends: Ember.Object
    access: public
    tagname: ''
  Ember:
    name: Ember
    shortname: Ember
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: packages/ember-metal/lib/core.js
    line: 8
    access: public
    tagname: ''
    description: |-
      This namespace contains all Ember methods and functions. Future versions of
      Ember may overwrite this namespace and therefore, you should avoid adding any
      new properties.

      You can also use the shorthand `Em` instead of `Ember`.

      At the heart of Ember is Ember-Runtime, a set of core functions that provide
      cross-platform compatibility and object property observing.  Ember-Runtime is
      small and performance-focused so you can use it alongside other
      cross-platform libraries such as jQuery. For more details, see
      [Ember-Runtime](http://emberjs.com/api/modules/ember-runtime.html).
    static: 1
    version: VERSION_STRING_PLACEHOLDER
  Ember.Debug:
    name: Ember.Debug
    shortname: Ember.Debug
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-debug
    namespace: ''
    file: packages/ember-debug/lib/main.js
    line: 221
    access: public
    tagname: ''
  Ember.ContainerDebugAdapter:
    name: Ember.ContainerDebugAdapter
    shortname: Ember.ContainerDebugAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-extension-support
    namespace: Ember
    file: packages/ember-extension-support/lib/container_debug_adapter.js
    line: 16
    description: |-
      The `ContainerDebugAdapter` helps the container and resolver interface
      with tools that debug Ember such as the
      [Ember Extension](https://github.com/tildeio/ember-extension)
      for Chrome and Firefox.

      This class can be extended by a custom resolver implementer
      to override some of the methods with library-specific code.

      The methods likely to be overridden are:

      * `canCatalogEntriesByType`
      * `catalogEntriesByType`

      The adapter will need to be registered
      in the application's container as `container-debug-adapter:main`

      Example:

      ```javascript
      Application.initializer({
        name: "containerDebugAdapter",

        initialize: function(application) {
          application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
        }
      });
      ```
    extends: Ember.Object
    since: 1.5.0
    access: public
    tagname: ''
  Ember.DataAdapter:
    name: Ember.DataAdapter
    shortname: Ember.DataAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-extension-support
    namespace: Ember
    file: packages/ember-extension-support/lib/data_adapter.js
    line: 14
    description: |-
      The `DataAdapter` helps a data persistence library
      interface with tools that debug Ember such
      as the [Ember Extension](https://github.com/tildeio/ember-extension)
      for Chrome and Firefox.

      This class will be extended by a persistence library
      which will override some of the methods with
      library-specific code.

      The methods likely to be overridden are:

      * `getFilters`
      * `detect`
      * `columnsForType`
      * `getRecords`
      * `getRecordColumnValues`
      * `getRecordKeywords`
      * `getRecordFilterValues`
      * `getRecordColor`
      * `observeRecord`

      The adapter will need to be registered
      in the application's container as `dataAdapter:main`

      Example:

      ```javascript
      Application.initializer({
        name: "data-adapter",

        initialize: function(application) {
          application.register('data-adapter:main', DS.DataAdapter);
        }
      });
      ```
    extends: EmberObject
    access: public
    tagname: ''
  Ember.Templates.helpers:
    name: Ember.Templates.helpers
    shortname: Ember.Templates.helpers
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing-views
    namespace: ''
  Ember.HTMLBars:
    name: Ember.HTMLBars
    shortname: Ember.HTMLBars
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-htmlbars
    namespace: ''
  Ember.String:
    name: Ember.String
    shortname: Ember.String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/string.js
    line: 154
    description: |-
      Defines string helper methods including string formatting and localization.
      Unless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be
      added to the `String.prototype` as well.
    static: 1
    access: public
    tagname: ''
  Ember.Helper:
    name: Ember.Helper
    shortname: Ember.Helper
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-templates
    namespace: ''
    file: packages/ember-htmlbars/lib/helper.js
    line: 8
    description: |-
      Ember Helpers are functions that can compute values, and are used in templates.
      For example, this code calls a helper named `format-currency`:

      ```handlebars
      <div>{{format-currency cents currency="$"}}</div>
      ```

      Additionally a helper can be called as a nested helper (sometimes called a
      subexpression). In this example, the computed value of a helper is passed
      to a component named `show-money`:

      ```handlebars
      {{show-money amount=(format-currency cents currency="$")}}
      ```

      Helpers defined using a class must provide a `compute` function. For example:

      ```js
      export default Ember.Helper.extend({
        compute(params, hash) {
          let cents = params[0];
          let currency = hash.currency;
          return `${currency}${cents * 0.01}`;
        }
      });
      ```

      Each time the input to a helper changes, the `compute` function will be
      called again.

      As instances, these helpers also have access to the container an will accept
      injected dependencies.

      Additionally, class helpers can call `recompute` to force a new computation.
    access: public
    tagname: ''
    since: 1.13.0
  Ember.streams.Dependency:
    name: Ember.streams.Dependency
    shortname: Ember.streams.Dependency
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.streams
    file: packages/ember-metal/lib/streams/dependency.js
    line: 14
    access: private
    tagname: ''
    is_constructor: 1
  Ember.stream.Stream:
    name: Ember.stream.Stream
    shortname: Ember.stream.Stream
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.stream
    file: packages/ember-metal/lib/streams/stream.js
    line: 16
    access: private
    tagname: ''
    is_constructor: 1
  Ember.streams.Subscriber:
    name: Ember.streams.Subscriber
    shortname: Ember.streams.Subscriber
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.streams
    file: packages/ember-metal/lib/streams/subscriber.js
    line: 7
    access: private
    tagname: ''
    is_constructor: 1
  Ember.streams.Ember.stream:
    name: Ember.streams.Ember.stream
    shortname: Ember.stream
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember.streams
  Ember.Binding:
    name: Ember.Binding
    shortname: Ember.Binding
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/binding.js
    line: 320
    access: public
    tagname: ''
    description: |-
      An `Ember.Binding` connects the properties of two objects so that whenever
      the value of one property changes, the other property will be changed also.

      ## Automatic Creation of Bindings with `/^*Binding/`-named Properties

      You do not usually create Binding objects directly but instead describe
      bindings in your class or object definition using automatic binding
      detection.

      Properties ending in a `Binding` suffix will be converted to `Ember.Binding`
      instances. The value of this property should be a string representing a path
      to another object or a custom binding instance created using Binding helpers
      (see "One Way Bindings"):

      ```
      valueBinding: "MyApp.someController.title"
      ```

      This will create a binding from `MyApp.someController.title` to the `value`
      property of your object instance automatically. Now the two values will be
      kept in sync.

      ## One Way Bindings

      One especially useful binding customization you can use is the `oneWay()`
      helper. This helper tells Ember that you are only interested in
      receiving changes on the object you are binding from. For example, if you
      are binding to a preference and you want to be notified if the preference
      has changed, but your object will not be changing the preference itself, you
      could do:

      ```
      bigTitlesBinding: Ember.Binding.oneWay("MyApp.preferencesController.bigTitles")
      ```

      This way if the value of `MyApp.preferencesController.bigTitles` changes the
      `bigTitles` property of your object will change also. However, if you
      change the value of your `bigTitles` property, it will not update the
      `preferencesController`.

      One way bindings are almost twice as fast to setup and twice as fast to
      execute because the binding only has to worry about changes to one side.

      You should consider using one way bindings anytime you have an object that
      may be created frequently and you do not intend to change a property; only
      to monitor it for changes (such as in the example above).

      ## Adding Bindings Manually

      All of the examples above show you how to configure a custom binding, but the
      result of these customizations will be a binding template, not a fully active
      Binding instance. The binding will actually become active only when you
      instantiate the object the binding belongs to. It is useful however, to
      understand what actually happens when the binding is activated.

      For a binding to function it must have at least a `from` property and a `to`
      property. The `from` property path points to the object/key that you want to
      bind from while the `to` path points to the object/key you want to bind to.

      When you define a custom binding, you are usually describing the property
      you want to bind from (such as `MyApp.someController.value` in the examples
      above). When your object is created, it will automatically assign the value
      you want to bind `to` based on the name of your binding key. In the
      examples above, during init, Ember objects will effectively call
      something like this on your binding:

      ```javascript
      binding = Ember.Binding.from("valueBinding").to("value");
      ```

      This creates a new binding instance based on the template you provide, and
      sets the to path to the `value` property of the new object. Now that the
      binding is fully configured with a `from` and a `to`, it simply needs to be
      connected to become active. This is done through the `connect()` method:

      ```javascript
      binding.connect(this);
      ```

      Note that when you connect a binding you pass the object you want it to be
      connected to. This object will be used as the root for both the from and
      to side of the binding when inspecting relative paths. This allows the
      binding to be automatically inherited by subclassed objects as well.

      This also allows you to bind between objects using the paths you declare in
      `from` and `to`:

      ```javascript
      // Example 1
      binding = Ember.Binding.from("App.someObject.value").to("value");
      binding.connect(this);

      // Example 2
      binding = Ember.Binding.from("parentView.value").to("App.someObject.value");
      binding.connect(this);
      ```

      Now that the binding is connected, it will observe both the from and to side
      and relay changes.

      If you ever needed to do so (you almost never will, but it is useful to
      understand this anyway), you could manually create an active binding by
      using the `Ember.bind()` helper method. (This is the same method used by
      to setup your bindings on objects):

      ```javascript
      Ember.bind(MyApp.anotherObject, "value", "MyApp.someController.value");
      ```

      Both of these code fragments have the same effect as doing the most friendly
      form of binding creation like so:

      ```javascript
      MyApp.anotherObject = Ember.Object.create({
        valueBinding: "MyApp.someController.value",

        // OTHER CODE FOR THIS OBJECT...
      });
      ```

      Ember's built in binding creation method makes it easy to automatically
      create bindings for you. You should always use the highest-level APIs
      available, even if you understand how it works underneath.
    since: Ember 0.9
  Ember.ComputedProperty:
    name: Ember.ComputedProperty
    shortname: Ember.ComputedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/computed.js
    line: 32
    description: |-
      A computed property transforms an object literal with object's accessor function(s) into a property.

      By default the function backing the computed property will only be called
      once and the result will be cached. You can specify various properties
      that your computed property depends on. This will force the cached
      result to be recomputed if the dependencies are modified.

      In the following example we declare a computed property - `fullName` - by calling
      `.Ember.computed()` with property dependencies (`firstName` and `lastName`) as leading arguments and getter accessor function. The `fullName` getter function
      will be called once (regardless of how many times it is accessed) as long
      as its dependencies have not changed. Once `firstName` or `lastName` are updated
      any future calls (or anything bound) to `fullName` will incorporate the new
      values.

      ```javascript
      let Person = Ember.Object.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,

        fullName: Ember.computed('firstName', 'lastName', function() {
          let firstName = this.get('firstName'),
              lastName  = this.get('lastName');

          return firstName + ' ' + lastName;
        })
      });

      let tom = Person.create({
        firstName: 'Tom',
        lastName: 'Dale'
      });

      tom.get('fullName') // 'Tom Dale'
      ```

      You can also define what Ember should do when setting a computed property by providing additional function (`set`) in hash argument.
      If you try to set a computed property, it will try to invoke setter accessor function with the key and
      value you want to set it to as arguments.

      ```javascript
      let Person = Ember.Object.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,

        fullName: Ember.computed('firstName', 'lastName', {
          get(key) {
            let firstName = this.get('firstName'),
                lastName  = this.get('lastName');

            return firstName + ' ' + lastName;
          },
          set(key, value) {
            let [firstName, lastName] = value.split(' ');

            this.set('firstName', firstName);
            this.set('lastName', lastName);

            return value;
          }
        })
      });

      let person = Person.create();

      person.set('fullName', 'Peter Wagenet');
      person.get('firstName'); // 'Peter'
      person.get('lastName');  // 'Wagenet'
      ```

      You can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.

      You can also mark computed property as `.readOnly()` and block all attempts to set it.

      ```javascript
      let Person = Ember.Object.extend({
        // these will be supplied by `create`
        firstName: null,
        lastName: null,

        fullName: Ember.computed('firstName', 'lastName', {
          get(key) {
            let firstName = this.get('firstName');
            let lastName  = this.get('lastName');

            return firstName + ' ' + lastName;
          }
        }).readOnly()
      });

      let person = Person.create();
      person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
      ```

      Additional resources:
      - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
      - [New computed syntax explained in "Ember 1.12 released" ](http://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
    is_constructor: 1
    access: public
    tagname: ''
  Ember.computed:
    name: Ember.computed
    shortname: Ember.computed
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/computed.js
    line: 535
    description: |-
      This helper returns a new property descriptor that wraps the passed
      computed property function. You can use this helper to define properties
      with mixins or via `Ember.defineProperty()`.

      If you pass function as argument - it will be used as getter.
      You can pass hash with two functions - instead of single function - as argument to provide both getter and setter.

      The `get` function should accept two parameters, `key` and `value`. If `value` is not
      undefined you should set the `value` first. In either case return the
      current value of the property.

      A computed property defined in this way might look like this:

      ```js
      let Person = Ember.Object.extend({
        firstName: 'Betty',
        lastName: 'Jones',

        fullName: Ember.computed('firstName', 'lastName', function() {
          return this.get('firstName') + ' ' + this.get('lastName');
        })
      });

      let client = Person.create();

      client.get('fullName'); // 'Betty Jones'

      client.set('lastName', 'Fuller');
      client.get('fullName'); // 'Betty Fuller'
      ```

      _Note: This is the preferred way to define computed properties when writing third-party
      libraries that depend on or use Ember, since there is no guarantee that the user
      will have prototype extensions enabled._

      You might use this method if you disabled
      [Prototype Extensions](http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/).
      The alternative syntax might look like this
      (if prototype extensions are enabled, which is the default behavior):

      ```js
      fullName() {
        return this.get('firstName') + ' ' + this.get('lastName');
      }.property('firstName', 'lastName')
      ```
    is_constructor: 1
    static: 1
    params:
    - name: dependentKeys*
      description: Optional dependent keys that trigger this computed property.
      type: String
      optional: true
    - name: func
      description: The computed property function.
      type: Function
    return:
      description: property descriptor instance
      type: Ember.ComputedProperty
    access: public
    tagname: ''
  Ember.Error:
    name: Ember.Error
    shortname: Ember.Error
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-metal/lib/error.js
    line: 13
    description: A subclass of the JavaScript Error object for use in Ember.
    extends: Error
    is_constructor: 1
    access: public
    tagname: ''
  Ember.FEATURES:
    name: Ember.FEATURES
    shortname: Ember.FEATURES
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-metal/lib/features.js
    line: 4
    description: |-
      The hash of enabled Canary features. Add to this, any canary features
      before creating your application.

      Alternatively (and recommended), you can also define `EmberENV.FEATURES`
      if you need to enable features flagged at runtime.
    static: 1
    since: 1.1.0
    access: public
    tagname: ''
  Ember.InjectedProperty:
    name: Ember.InjectedProperty
    shortname: Ember.InjectedProperty
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-metal/lib/injected_property.js
    line: 6
    description: Read-only property that returns the result of a container lookup.
    is_constructor: 1
    params:
    - name: type
      description: The container type the property will lookup
      type: String
    - name: name
      description: |-
        (optional) The name the property will lookup, defaults
               to the property's name
      type: String
    access: private
    tagname: ''
  Ember.Instrumentation:
    name: Ember.Instrumentation
    shortname: Ember.Instrumentation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember.Instrumentation
    file: packages/ember-metal/lib/instrumentation.js
    line: 3
    description: |-
      The purpose of the Ember Instrumentation module is
      to provide efficient, general-purpose instrumentation
      for Ember.

      Subscribe to a listener by using `Ember.subscribe`:

      ```javascript
      Ember.subscribe("render", {
        before: function(name, timestamp, payload) {

        },

        after: function(name, timestamp, payload) {

        }
      });
      ```

      If you return a value from the `before` callback, that same
      value will be passed as a fourth parameter to the `after`
      callback.

      Instrument a block of code by using `Ember.instrument`:

      ```javascript
      Ember.instrument("render.handlebars", payload, function() {
        // rendering logic
      }, binding);
      ```

      Event names passed to `Ember.instrument` are namespaced
      by periods, from more general to more specific. Subscribers
      can listen for events by whatever level of granularity they
      are interested in.

      In the above example, the event is `render.handlebars`,
      and the subscriber listened for all events beginning with
      `render`. It would receive callbacks for events named
      `render`, `render.handlebars`, `render.container`, or
      even `render.handlebars.layout`.
    static: 1
    access: private
    tagname: ''
  Libraries:
    name: Libraries
    shortname: Libraries
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: ''
    file: packages/ember-metal/lib/libraries.js
    line: 4
    description: |-
      Helper class that allows you to register your library with Ember.

      Singleton created at `Ember.libraries`.
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Logger:
    name: Ember.Logger
    shortname: Ember.Logger
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-metal/lib/logger.js
    line: 50
    description: |-
      Inside Ember-Metal, simply uses the methods from `imports.console`.
      Override this to provide more robust logging functionality.
    access: public
    tagname: ''
  Backburner:
    name: Backburner
    shortname: Backburner
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: ''
    file: packages/ember-metal/lib/main.js
    line: 307
    access: private
    tagname: ''
  Ember.OrderedSet:
    name: Ember.OrderedSet
    shortname: Ember.OrderedSet
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/map.js
    line: 58
    description: |-
      This class is used internally by Ember and Ember Data.
      Please do not use it at this time. We plan to clean it up
      and add many tests soon.
    is_constructor: 1
    access: private
    tagname: ''
  Ember.Map:
    name: Ember.Map
    shortname: Ember.Map
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/map.js
    line: 226
    description: |-
      A Map stores values indexed by keys. Unlike JavaScript's
      default Objects, the keys of a Map can be any JavaScript
      object.

      Internally, a Map has two data structures:

      1. `keys`: an OrderedSet of all of the existing keys
      2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`

      When a key/value pair is added for the first time, we
      add the key to the `keys` OrderedSet, and create or
      replace an entry in `values`. When an entry is deleted,
      we delete its entry in `keys` and `values`.
    access: private
    tagname: ''
    is_constructor: 1
  Ember.MapWithDefault:
    name: Ember.MapWithDefault
    shortname: Ember.MapWithDefault
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/map.js
    line: 423
    extends: Ember.Map
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: options
      description: ''
      optional: true
      props:
      - name: defaultValue
        description: ''
        type: "*"
        optional: true
  Ember.Mixin:
    name: Ember.Mixin
    shortname: Ember.Mixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/mixin.js
    line: 425
    description: |-
      The `Ember.Mixin` class allows you to create mixins, whose properties can be
      added to other classes. For instance,

      ```javascript
      App.Editable = Ember.Mixin.create({
        edit: function() {
          console.log('starting to edit');
          this.set('isEditing', true);
        },
        isEditing: false
      });

      // Mix mixins into classes by passing them as the first arguments to
      // .extend.
      App.CommentView = Ember.View.extend(App.Editable, {
        template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')
      });

      commentView = App.CommentView.create();
      commentView.edit(); // outputs 'starting to edit'
      ```

      Note that Mixins are created with `Ember.Mixin.create`, not
      `Ember.Mixin.extend`.

      Note that mixins extend a constructor's prototype so arrays and object literals
      defined as properties will be shared amongst objects that implement the mixin.
      If you want to define a property in a mixin that is not shared, you can define
      it either as a computed property or have it be created on initialization of the object.

      ```javascript
      //filters array will be shared amongst any object implementing mixin
      App.Filterable = Ember.Mixin.create({
        filters: Ember.A()
      });

      //filters will be a separate  array for every object implementing the mixin
      App.Filterable = Ember.Mixin.create({
        filters: Ember.computed(function() {return Ember.A();})
      });

      //filters will be created as a separate array during the object's initialization
      App.Filterable = Ember.Mixin.create({
        init: function() {
          this._super.apply(this, arguments);
          this.set("filters", Ember.A());
        }
      });
      ```
    access: public
    tagname: ''
  Descriptor:
    name: Descriptor
    shortname: Descriptor
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: ''
    file: packages/ember-metal/lib/properties.js
    line: 13
    description: |-
      Objects of this type can implement an interface to respond to requests to
      get and set. The default implementation handles simple properties.
    access: private
    tagname: ''
  Ember.run:
    name: Ember.run
    shortname: Ember.run
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-metal
    namespace: Ember
    file: packages/ember-metal/lib/run_loop.js
    line: 38
    description: |-
      Runs the passed target and method inside of a RunLoop, ensuring any
      deferred actions including bindings and views updates are flushed at the
      end.

      Normally you should not need to invoke this method yourself. However if
      you are implementing raw event handlers when interfacing with other
      libraries or plugins, you should probably wrap all of your code inside this
      call.

      ```javascript
      run(function() {
        // code to be executed within a RunLoop
      });
      ```
    static: 1
    is_constructor: 1
    params:
    - name: target
      description: target of method to call
      type: Object
      optional: true
    - name: method
      description: |-
        Method to invoke.
          May be a function or a string. If you pass a string
          then it will be looked up on the passed target.
      type: Function|String
    - name: args*
      description: Any additional arguments you wish to pass to the method.
      type: Object
      optional: true
    return:
      description: return value from invoking the passed function.
      type: Object
    access: public
    tagname: ''
  Ember.LinkComponent:
    name: Ember.LinkComponent
    shortname: Ember.LinkComponent
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing-views
    namespace: Ember
    file: packages/ember-routing-views/lib/components/link-to.js
    line: 331
    description: |-
      `Ember.LinkComponent` renders an element whose `click` event triggers a
      transition of the application's instance of `Ember.Router` to
      a supplied route by name.

      `Ember.LinkComponent` components are invoked with {{#link-to}}. Properties
      of this class can be overridden with `reopen` to customize application-wide
      behavior.
    extends: Ember.Component
    see:
    - "{Ember.Templates.helpers.link-to}"
    access: private
    tagname: ''
  Ember.ControllerMixin:
    name: Ember.ControllerMixin
    shortname: Ember.ControllerMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Controller
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/controller.js
    line: 6
    uses:
    - Ember.ActionHandler
    access: private
    tagname: ''
  Ember.Location:
    name: Ember.Location
    shortname: Ember.Location
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/location/api.js
    line: 10
    description: |-
      Ember.Location returns an instance of the correct implementation of
      the `location` API.

      ## Implementations

      You can pass an implementation name (`hash`, `history`, `none`) to force a
      particular implementation to be used in your application.

      ### HashLocation

      Using `HashLocation` results in URLs with a `#` (hash sign) separating the
      server side URL portion of the URL from the portion that is used by Ember.
      This relies upon the `hashchange` event existing in the browser.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'hash'
      });
      ```

      This will result in a posts.new url of `/#/posts/new`.

      ### HistoryLocation

      Using `HistoryLocation` results in URLs that are indistinguishable from a
      standard URL. This relies upon the browser's `history` API.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'history'
      });
      ```

      This will result in a posts.new url of `/posts/new`.

      Keep in mind that your server must serve the Ember app at all the routes you
      define.

      ### AutoLocation

      Using `AutoLocation`, the router will use the best Location class supported by
      the browser it is running in.

      Browsers that support the `history` API will use `HistoryLocation`, those that
      do not, but still support the `hashchange` event will use `HashLocation`, and
      in the rare case neither is supported will use `NoneLocation`.

      Example:

      ```javascript
      App.Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      App.Router.reopen({
        location: 'auto'
      });
      ```

      This will result in a posts.new url of `/posts/new` for modern browsers that
      support the `history` api or `/#/posts/new` for older ones, like Internet
      Explorer 9 and below.

      When a user visits a link to your application, they will be automatically
      upgraded or downgraded to the appropriate `Location` class, with the URL
      transformed accordingly, if needed.

      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.

      ### NoneLocation

      Using `NoneLocation` causes Ember to not store the applications URL state
      in the actual URL. This is generally used for testing purposes, and is one
      of the changes made when calling `App.setupForTesting()`.

      ## Location API

      Each location implementation must provide the following methods:

      * implementation: returns the string name used to reference the implementation.
      * getURL: returns the current URL.
      * setURL(path): sets the current URL.
      * replaceURL(path): replace the current URL (optional).
      * onUpdateURL(callback): triggers the callback when the URL changes.
      * formatURL(url): formats `url` to be placed into `href` attribute.
      * detect() (optional): instructs the location to do any feature detection
          necessary. If the location needs to redirect to a different URL, it
          can cancel routing by setting the `cancelRouterSetup` property on itself
          to `false`.

      Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
    static: 1
    access: private
    tagname: ''
  Ember.AutoLocation:
    name: Ember.AutoLocation
    shortname: Ember.AutoLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/location/auto_location.js
    line: 24
    description: |-
      Ember.AutoLocation will select the best location option based off browser
      support with the priority order: history, hash, none.

      Clean pushState paths accessed by hashchange-only browsers will be redirected
      to the hash-equivalent and vice versa so future transitions are consistent.

      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.
    static: 1
    access: private
    tagname: ''
  Ember.HashLocation:
    name: Ember.HashLocation
    shortname: Ember.HashLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/location/hash_location.js
    line: 15
    description: |-
      `Ember.HashLocation` implements the location API using the browser's
      hash. At present, it relies on a `hashchange` event existing in the
      browser.
    extends: Ember.Object
    access: private
    tagname: ''
  Ember.HistoryLocation:
    name: Ember.HistoryLocation
    shortname: Ember.HistoryLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/location/history_location.js
    line: 16
    description: |-
      Ember.HistoryLocation implements the location API using the browser's
      history.pushState API.
    extends: Ember.Object
    access: private
    tagname: ''
  Ember.NoneLocation:
    name: Ember.NoneLocation
    shortname: Ember.NoneLocation
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/location/none_location.js
    line: 10
    description: |-
      Ember.NoneLocation does not interact with the browser. It is useful for
      testing, or when you need to manage state with your Router, but temporarily
      don't want it to muck with the URL (for example when you embed your
      application in a larger page).
    extends: Ember.Object
    access: private
    tagname: ''
  RoutingService:
    name: RoutingService
    shortname: RoutingService
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: ''
    file: packages/ember-routing/lib/services/routing.js
    line: 13
    description: |-
      The Routing service is used by LinkComponent, and provides facilities for
      the component/view layer to interact with the router.

      While still private, this service can eventually be opened up, and provides
      the set of API needed for components to control routing without interacting
      with router internals.
    access: private
    tagname: ''
  Ember.Route:
    name: Ember.Route
    shortname: Ember.Route
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/system/route.js
    line: 42
    description: |-
      The `Ember.Route` class is used to define individual routes. Refer to
      the [routing guide](http://emberjs.com/guides/routing/) for documentation.
    extends: Ember.Object
    uses:
    - Ember.ActionHandler
    - Ember.Evented
    access: public
    tagname: ''
  Ember.Router:
    name: Ember.Router
    shortname: Ember.Router
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-routing
    namespace: Ember
    file: packages/ember-routing/lib/system/router.js
    line: 35
    description: |-
      The `Ember.Router` class manages the application state and URLs. Refer to
      the [routing guide](http://emberjs.com/guides/routing/) for documentation.
    extends: Ember.Object
    uses:
    - Ember.Evented
    access: public
    tagname: ''
  Ember.Controller:
    name: Ember.Controller
    shortname: Ember.Controller
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/controllers/controller.js
    line: 12
    extends: Ember.Object
    uses:
    - Ember.ControllerMixin
    access: public
    tagname: ''
  Ember.inject:
    name: Ember.inject
    shortname: Ember.inject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/inject.js
    line: 4
    description: Namespace for injection helper methods.
    static: 1
    access: public
    tagname: ''
  Function:
    name: Function
    shortname: Function
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
  Ember.ProxyMixin:
    name: Ember.ProxyMixin
    shortname: Ember.ProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/-proxy.js
    line: 36
    description: |-
      `Ember.ProxyMixin` forwards all properties not defined by the proxy itself
      to a proxied `content` object.  See Ember.ObjectProxy for more details.
    access: private
    tagname: ''
  Ember.ActionHandler:
    name: Ember.ActionHandler
    shortname: Ember.ActionHandler
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ControllerMixin
    - Ember.Route
    - Ember.CoreView
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/action_handler.js
    line: 10
    description: |-
      `Ember.ActionHandler` is available on some familiar classes including
      `Ember.Route`, `Ember.View`, `Ember.Component`, and `Ember.Controller`.
      (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,
      and `Ember.Route` and available to the above classes through
      inheritance.)
    access: private
    tagname: ''
  Ember.Array:
    name: Ember.Array
    shortname: Ember.Array
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/array.js
    line: 53
    description: |-
      This mixin implements Observer-friendly Array-like behavior. It is not a
      concrete implementation, but it can be used up by other classes that want
      to appear like arrays.

      For example, ArrayProxy is a concrete classes that can
      be instantiated to implement array-like behavior. Both of these classes use
      the Array Mixin by way of the MutableArray mixin, which allows observable
      changes to be made to the underlying array.

      Unlike `Ember.Enumerable,` this mixin defines methods specifically for
      collections that provide index-ordered access to their contents. When you
      are designing code that needs to accept any kind of Array-like object, you
      should use these methods instead of Array primitives because these will
      properly notify observers of changes to the array.

      Although these methods are efficient, they do add a layer of indirection to
      your application so it is a good idea to use them only when you need the
      flexibility of using both true JavaScript arrays and "virtual" arrays such
      as controllers and collections.

      You can use the methods defined in this module to access and modify array
      contents in a KVO-friendly way. You can also be notified whenever the
      membership of an array changes by using `.observes('myArray.[]')`.

      To support `Ember.Array` in your own class, you must override two
      primitives to use it: `length()` and `objectAt()`.

      Note that the Ember.Array mixin also incorporates the `Ember.Enumerable`
      mixin. All `Ember.Array`-like objects are also enumerable.
    uses:
    - Ember.Enumerable
    since: Ember 0.9.0
    access: public
    tagname: ''
  Ember.Comparable:
    name: Ember.Comparable
    shortname: Ember.Comparable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/comparable.js
    line: 8
    description: |-
      Implements some standard methods for comparing objects. Add this mixin to
      any class you create that can compare its instances.

      You should implement the `compare()` method.
    since: Ember 0.9
    access: private
    tagname: ''
  ContainerProxyMixin:
    name: ContainerProxyMixin
    shortname: ContainerProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ApplicationInstance
    module: ember
    submodule: ember-runtime
    namespace: ''
    file: packages/ember-runtime/lib/mixins/container_proxy.js
    line: 9
    description: |-
      ContainerProxyMixin is used to provide public access to specific
      container functionality.
    access: private
    tagname: ''
  Ember.Copyable:
    name: Ember.Copyable
    shortname: Ember.Copyable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/copyable.js
    line: 12
    description: |-
      Implements some standard methods for copying an object. Add this mixin to
      any object you create that can create a copy of itself. This mixin is
      added automatically to the built-in array.

      You should generally implement the `copy()` method to return a copy of the
      receiver.

      Note that `frozenCopy()` will only work if you also implement
      `Ember.Freezable`.
    since: Ember 0.9
    access: private
    tagname: ''
  Ember.Enumerable:
    name: Ember.Enumerable
    shortname: Ember.Enumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Array
    - Ember.MutableEnumerable
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/enumerable.js
    line: 52
    description: |-
      This mixin defines the common interface implemented by enumerable objects
      in Ember. Most of these methods follow the standard Array iteration
      API defined up to JavaScript 1.8 (excluding language-specific features that
      cannot be emulated in older versions of JavaScript).

      This mixin is applied automatically to the Array class on page load, so you
      can use any of these methods on simple arrays. If Array already implements
      one of these methods, the mixin will not override them.

      ## Writing Your Own Enumerable

      To make your own custom class enumerable, you need two items:

      1. You must have a length property. This property should change whenever
         the number of items in your enumerable object changes. If you use this
         with an `Ember.Object` subclass, you should be sure to change the length
         property using `set().`

      2. You must implement `nextObject().` See documentation.

      Once you have these two methods implemented, apply the `Ember.Enumerable` mixin
      to your class and you will be able to enumerate the contents of your object
      like any other collection.

      ## Using Ember Enumeration with Other Libraries

      Many other libraries provide some kind of iterator or enumeration like
      facility. This is often where the most common API conflicts occur.
      Ember's API is designed to be as friendly as possible with other
      libraries by implementing only methods that mostly correspond to the
      JavaScript 1.8 API.
    since: Ember 0.9
    access: private
    tagname: ''
  Ember.Evented:
    name: Ember.Evented
    shortname: Ember.Evented
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.Route
    - Ember.Router
    - Ember.CoreView
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/evented.js
    line: 14
    description: |-
      This mixin allows for Ember objects to subscribe to and emit events.

      ```javascript
      App.Person = Ember.Object.extend(Ember.Evented, {
        greet: function() {
          // ...
          this.trigger('greet');
        }
      });

      var person = App.Person.create();

      person.on('greet', function() {
        console.log('Our person has greeted');
      });

      person.greet();

      // outputs: 'Our person has greeted'
      ```

      You can also chain multiple event subscriptions:

      ```javascript
      person.on('greet', function() {
        console.log('Our person has greeted');
      }).one('greet', function() {
        console.log('Offer one-time special');
      }).off('event', this, forgetThis);
      ```
    access: public
    tagname: ''
  Ember.Freezable:
    name: Ember.Freezable
    shortname: Ember.Freezable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/freezable.js
    line: 11
    description: |-
      The `Ember.Freezable` mixin implements some basic methods for marking an
      object as frozen. Once an object is frozen it should be read only. No changes
      may be made the internal state of the object.

      ## Enforcement

      To fully support freezing in your subclass, you must include this mixin and
      override any method that might alter any property on the object to instead
      raise an exception. You can check the state of an object by checking the
      `isFrozen` property.

      Although future versions of JavaScript may support language-level freezing
      object objects, that is not the case today. Even if an object is freezable,
      it is still technically possible to modify the object, even though it could
      break other parts of your application that do not expect a frozen object to
      change. It is, therefore, very important that you always respect the
      `isFrozen` property on all freezable objects.

      ## Example Usage

      The example below shows a simple object that implement the `Ember.Freezable`
      protocol.

      ```javascript
      Contact = Ember.Object.extend(Ember.Freezable, {
        firstName: null,
        lastName: null,

        // swaps the names
        swapNames: function() {
          if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;
          var tmp = this.get('firstName');
          this.set('firstName', this.get('lastName'));
          this.set('lastName', tmp);
          return this;
        }

      });

      c = Contact.create({ firstName: "John", lastName: "Doe" });
      c.swapNames();  // returns c
      c.freeze();
      c.swapNames();  // EXCEPTION
      ```

      ## Copying

      Usually the `Ember.Freezable` protocol is implemented in cooperation with the
      `Ember.Copyable` protocol, which defines a `frozenCopy()` method that will
      return a frozen object, if the object implements this method as well.
    since: Ember 0.9
    deprecated: true
    deprecationMessage: Use `Object.freeze` instead.
    access: private
    tagname: ''
  Ember.MutableArray:
    name: Ember.MutableArray
    shortname: Ember.MutableArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ArrayProxy
    - Ember.NativeArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/mutable_array.js
    line: 28
    description: |-
      This mixin defines the API for modifying array-like objects. These methods
      can be applied only to a collection that keeps its items in an ordered set.
      It builds upon the Array mixin and adds methods to modify the array.
      One concrete implementations of this class include ArrayProxy.

      It is important to use the methods in this class to modify arrays so that
      changes are observable. This allows the binding system in Ember to function
      correctly.


      Note that an Array can change even if it does not implement this mixin.
      For example, one might implement a SparseArray that cannot be directly
      modified, but if its underlying enumerable changes, it will change also.
    uses:
    - Ember.Array
    - Ember.MutableEnumerable
    access: public
    tagname: ''
  Ember.MutableEnumerable:
    name: Ember.MutableEnumerable
    shortname: Ember.MutableEnumerable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.MutableArray
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/mutable_enumerable.js
    line: 10
    description: |-
      This mixin defines the API for modifying generic enumerables. These methods
      can be applied to an object regardless of whether it is ordered or
      unordered.

      Note that an Enumerable can change even if it does not implement this mixin.
      For example, a MappedEnumerable cannot be directly modified but if its
      underlying enumerable changes, it will change also.

      ## Adding Objects

      To add an object to an enumerable, use the `addObject()` method. This
      method will only add the object to the enumerable if the object is not
      already present and is of a type supported by the enumerable.

      ```javascript
      set.addObject(contact);
      ```

      ## Removing Objects

      To remove an object from an enumerable, use the `removeObject()` method. This
      will only remove the object if it is present in the enumerable, otherwise
      this method has no effect.

      ```javascript
      set.removeObject(contact);
      ```

      ## Implementing In Your Own Code

      If you are implementing an object and want to support this API, just include
      this mixin in your class and implement the required methods. In your unit
      tests, be sure to apply the Ember.MutableEnumerableTests to your object.
    uses:
    - Ember.Enumerable
    access: public
    tagname: ''
  Ember.Observable:
    name: Ember.Observable
    shortname: Ember.Observable
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.NativeArray
    - Ember.Object
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/observable.js
    line: 30
    description: |-
      ## Overview

      This mixin provides properties and property observing functionality, core
      features of the Ember object model.

      Properties and observers allow one object to observe changes to a
      property on another object. This is one of the fundamental ways that
      models, controllers and views communicate with each other in an Ember
      application.

      Any object that has this mixin applied can be used in observer
      operations. That includes `Ember.Object` and most objects you will
      interact with as you write your Ember application.

      Note that you will not generally apply this mixin to classes yourself,
      but you will use the features provided by this module frequently, so it
      is important to understand how to use it.

      ## Using `get()` and `set()`

      Because of Ember's support for bindings and observers, you will always
      access properties using the get method, and set properties using the
      set method. This allows the observing objects to be notified and
      computed properties to be handled properly.

      More documentation about `get` and `set` are below.

      ## Observing Property Changes

      You typically observe property changes simply by adding the `observes`
      call to the end of your method declarations in classes that you write.
      For example:

      ```javascript
      Ember.Object.extend({
        valueObserver: Ember.observer('value', function(sender, key, value, rev) {
          // Executes whenever the "value" property changes
          // See the addObserver method for more information about the callback arguments
        })
      });
      ```

      Although this is the most common way to add an observer, this capability
      is actually built into the `Ember.Object` class on top of two methods
      defined in this mixin: `addObserver` and `removeObserver`. You can use
      these two methods to add and remove observers yourself if you need to
      do so at runtime.

      To add an observer for a property, call:

      ```javascript
      object.addObserver('propertyKey', targetObject, targetAction)
      ```

      This will call the `targetAction` method on the `targetObject` whenever
      the value of the `propertyKey` changes.

      Note that if `propertyKey` is a computed property, the observer will be
      called when any of the property dependencies are changed, even if the
      resulting value of the computed property is unchanged. This is necessary
      because computed properties are not computed until `get` is called.
    access: public
    tagname: ''
  Ember.PromiseProxyMixin:
    name: Ember.PromiseProxyMixin
    shortname: Ember.PromiseProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: ''
    file: packages/ember-runtime/lib/mixins/promise_proxy.js
    line: 36
    description: |-
      A low level mixin making ObjectProxy promise-aware.

      ```javascript
      var ObjectPromiseProxy = Ember.ObjectProxy.extend(Ember.PromiseProxyMixin);

      var proxy = ObjectPromiseProxy.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      proxy.then(function(json){
         // the json
      }, function(reason) {
         // the reason why you have no json
      });
      ```

      the proxy has bindable attributes which
      track the promises life cycle

      ```javascript
      proxy.get('isPending')   //=> true
      proxy.get('isSettled')  //=> false
      proxy.get('isRejected')  //=> false
      proxy.get('isFulfilled') //=> false
      ```

      When the the $.getJSON completes, and the promise is fulfilled
      with json, the life cycle attributes will update accordingly.

      ```javascript
      proxy.get('isPending')   //=> false
      proxy.get('isSettled')   //=> true
      proxy.get('isRejected')  //=> false
      proxy.get('isFulfilled') //=> true
      ```

      As the proxy is an ObjectProxy, and the json now its content,
      all the json properties will be available directly from the proxy.

      ```javascript
      // Assuming the following json:
      {
        firstName: 'Stefan',
        lastName: 'Penner'
      }

      // both properties will accessible on the proxy
      proxy.get('firstName') //=> 'Stefan'
      proxy.get('lastName')  //=> 'Penner'
      ```
    access: public
    tagname: ''
  RegistryProxyMixin:
    name: RegistryProxyMixin
    shortname: RegistryProxyMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.ApplicationInstance
    - Ember.Application
    module: ember
    submodule: ember-runtime
    namespace: ''
    file: packages/ember-runtime/lib/mixins/registry_proxy.js
    line: 9
    description: |-
      RegistryProxyMixin is used to provide public access to specific
      registry functionality.
    access: private
    tagname: ''
  Ember.TargetActionSupport:
    name: Ember.TargetActionSupport
    shortname: Ember.TargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextSupport
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/mixins/target_action_support.js
    line: 12
    description: |-
      `Ember.TargetActionSupport` is a mixin that can be included in a class
      to add a `triggerAction` method with semantics similar to the Handlebars
      `{{action}}` helper. In normal Ember usage, the `{{action}}` helper is
      usually the best choice. This mixin is most often useful when you are
      doing more complex event handling in View objects.

      See also `Ember.ViewTargetActionSupport`, which has
      view-aware defaults for target and actionContext.
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember.ArrayProxy:
    name: Ember.ArrayProxy
    shortname: Ember.ArrayProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/array_proxy.js
    line: 28
    description: |-
      An ArrayProxy wraps any other object that implements `Ember.Array` and/or
      `Ember.MutableArray,` forwarding all requests. This makes it very useful for
      a number of binding use cases or other cases where being able to swap
      out the underlying array is useful.

      A simple example of usage:

      ```javascript
      var pets = ['dog', 'cat', 'fish'];
      var ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });

      ap.get('firstObject');                        // 'dog'
      ap.set('content', ['amoeba', 'paramecium']);
      ap.get('firstObject');                        // 'amoeba'
      ```

      This class can also be useful as a layer to transform the contents of
      an array, as they are accessed. This can be done by overriding
      `objectAtContent`:

      ```javascript
      var pets = ['dog', 'cat', 'fish'];
      var ap = Ember.ArrayProxy.create({
          content: Ember.A(pets),
          objectAtContent: function(idx) {
              return this.get('content').objectAt(idx).toUpperCase();
          }
      });

      ap.get('firstObject'); // . 'DOG'
      ```
    extends: Ember.Object
    uses:
    - Ember.MutableArray
    access: public
    tagname: ''
  Ember.CoreObject:
    name: Ember.CoreObject
    shortname: Ember.CoreObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/core_object.js
    line: 222
    access: public
    tagname: ''
  Ember.EachProxy:
    name: Ember.EachProxy
    shortname: EachProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-runtime/lib/system/each_proxy.js
    line: 15
    description: |-
      This is the object instance returned when you get the `@each` property on an
      array. It uses the unknownProperty handler to automatically create
      EachArray instances for property names.
    access: private
    tagname: ''
  Ember.Namespace:
    name: Ember.Namespace
    shortname: Ember.Namespace
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/namespace.js
    line: 17
    description: |-
      A Namespace is an object usually used to contain other objects or methods
      such as an application or framework. Create a namespace anytime you want
      to define one of these new containers.

      # Example Usage

      ```javascript
      MyFramework = Ember.Namespace.create({
        VERSION: '1.0.0'
      });
      ```
    extends: Ember.Object
    access: public
    tagname: ''
  Ember.NativeArray:
    name: Ember.NativeArray
    shortname: Ember.NativeArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/native_array.js
    line: 21
    description: |-
      The NativeArray mixin contains the properties needed to make the native
      Array support Ember.MutableArray and all of its dependent APIs. Unless you
      have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to
      false, this will be applied automatically. Otherwise you can apply the mixin
      at anytime by calling `Ember.NativeArray.activate`.
    uses:
    - Ember.MutableArray
    - Ember.Observable
    - Ember.Copyable
    access: public
    tagname: ''
  Ember.Object:
    name: Ember.Object
    shortname: Ember.Object
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-runtime
    namespace: Ember
    file: packages/ember-runtime/lib/system/object.js
    line: 9
    description: |-
      `Ember.Object` is the main base class for all Ember objects. It is a subclass
      of `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,
      see the documentation for each of these.
    extends: Ember.CoreObject
    uses:
    - Ember.Observable
    access: public
    tagname: ''
  Ember.ObjectProxy:
    name: Ember.ObjectProxy
    shortname: Ember.ObjectProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-runtime/lib/system/object_proxy.js
    line: 4
    description: |-
      `Ember.ObjectProxy` forwards all properties not defined by the proxy itself
      to a proxied `content` object.

      ```javascript
      object = Ember.Object.create({
        name: 'Foo'
      });

      proxy = Ember.ObjectProxy.create({
        content: object
      });

      // Access and change existing properties
      proxy.get('name')          // 'Foo'
      proxy.set('name', 'Bar');
      object.get('name')         // 'Bar'

      // Create new 'description' property on `object`
      proxy.set('description', 'Foo is a whizboo baz');
      object.get('description')  // 'Foo is a whizboo baz'
      ```

      While `content` is unset, setting a property to be delegated will throw an
      Error.

      ```javascript
      proxy = Ember.ObjectProxy.create({
        content: null,
        flag: null
      });
      proxy.set('flag', true);
      proxy.get('flag');         // true
      proxy.get('foo');          // undefined
      proxy.set('foo', 'data');  // throws Error
      ```

      Delegated properties can be bound to and will change when content is updated.

      Computed properties on the proxy itself can depend on delegated properties.

      ```javascript
      ProxyWithComputedProperty = Ember.ObjectProxy.extend({
        fullName: function () {
          var firstName = this.get('firstName'),
              lastName = this.get('lastName');
          if (firstName && lastName) {
            return firstName + ' ' + lastName;
          }
          return firstName || lastName;
        }.property('firstName', 'lastName')
      });

      proxy = ProxyWithComputedProperty.create();

      proxy.get('fullName');  // undefined
      proxy.set('content', {
        firstName: 'Tom', lastName: 'Dale'
      }); // triggers property change for fullName on proxy

      proxy.get('fullName');  // 'Tom Dale'
      ```
    extends: Ember._ProxyMixin
    access: public
    tagname: ''
  Ember.Service:
    name: Ember.Service
    shortname: Ember.Service
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-runtime/lib/system/service.js
    line: 35
    extends: Ember.Object
    since: 1.10.0
    access: public
    tagname: ''
  Ember.Test.Adapter:
    name: Ember.Test.Adapter
    shortname: Ember.Test.Adapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember.Test
    file: packages/ember-testing/lib/adapters/adapter.js
    line: 10
    description: |-
      The primary purpose of this class is to create hooks that can be implemented
      by an adapter for various test frameworks.
    access: public
    tagname: ''
  Ember.Test.QUnitAdapter:
    name: Ember.Test.QUnitAdapter
    shortname: Ember.Test.QUnitAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember.Test
    file: packages/ember-testing/lib/adapters/qunit.js
    line: 4
    description: |-
      This class implements the methods defined by Ember.Test.Adapter for the
      QUnit testing framework.
    extends: Ember.Test.Adapter
    access: public
    tagname: ''
  Ember.Test:
    name: Ember.Test
    shortname: Ember.Test
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-testing
    namespace: Ember
    file: packages/ember-testing/lib/test.js
    line: 14
    description: |-
      This is a container for an assortment of testing related functionality:

      * Choose your default test adapter (for your framework of choice).
      * Register/Unregister additional test helpers.
      * Setup callbacks to be fired when the test helpers are injected into
        your application.
    access: public
    tagname: ''
  Ember._Metamorph:
    name: Ember._Metamorph
    shortname: Ember._Metamorph
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember._MetamorphView
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/compat/metamorph_view.js
    line: 13
    access: private
    tagname: ''
  Ember._MetamorphView:
    name: Ember._MetamorphView
    shortname: Ember._MetamorphView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/compat/metamorph_view.js
    line: 41
    extends: Ember.View
    uses:
    - Ember._Metamorph
    access: private
    tagname: ''
  Ember.Component:
    name: Ember.Component
    shortname: Ember.Component
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/components/component.js
    line: 32
    description: |-
      An `Ember.Component` is a view that is completely
      isolated. Properties accessed in its templates go
      to the view object and actions are targeted at
      the view object. There is no access to the
      surrounding context or outer controller; all
      contextual information must be passed in.

      The easiest way to create an `Ember.Component` is via
      a template. If you name a template
      `components/my-foo`, you will be able to use
      `{{my-foo}}` in other templates, which will make
      an instance of the isolated component.

      ```handlebars
      {{app-profile person=currentUser}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      <img src={{person.avatar}}>
      <p class='signature'>{{person.signature}}</p>
      ```

      You can use `yield` inside a template to
      include the **contents** of any block attached to
      the component. The block will be executed in the
      context of the surrounding context or outer controller:

      ```handlebars
      {{#app-profile person=currentUser}}
        <p>Admin mode</p>
        {{! Executed in the controller's context. }}
      {{/app-profile}}
      ```

      ```handlebars
      <!-- app-profile template -->
      <h1>{{person.title}}</h1>
      {{! Executed in the components context. }}
      {{yield}} {{! block contents }}
      ```

      If you want to customize the component, in order to
      handle events or actions, you implement a subclass
      of `Ember.Component` named after the name of the
      component. Note that `Component` needs to be appended to the name of
      your subclass like `AppProfileComponent`.

      For example, you could implement the action
      `hello` for the `app-profile` component:

      ```javascript
      App.AppProfileComponent = Ember.Component.extend({
        actions: {
          hello: function(name) {
            console.log("Hello", name);
          }
        }
      });
      ```

      And then use it in the component's template:

      ```handlebars
      <!-- app-profile template -->

      <h1>{{person.title}}</h1>
      {{yield}} <!-- block contents -->

      <button {{action 'hello' person.name}}>
        Say Hello to {{person.name}}
      </button>
      ```

      Components must have a `-` in their name to avoid
      conflicts with built-in controls that wrap HTML
      elements. This is consistent with the same
      requirement in web components.
    extends: Ember.View
    access: public
    tagname: ''
  Ember.AriaRoleSupport:
    name: Ember.AriaRoleSupport
    shortname: Ember.AriaRoleSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/aria_role_support.js
    line: 8
    access: private
    tagname: ''
  Ember.ClassNamesSupport:
    name: Ember.ClassNamesSupport
    shortname: Ember.ClassNamesSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/class_names_support.js
    line: 11
    access: private
    tagname: ''
  Ember.EmptyViewSupport:
    name: Ember.EmptyViewSupport
    shortname: Ember.EmptyViewSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.CollectionView
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/empty_view_support.js
    line: 12
    access: private
    tagname: ''
  Ember.InstrumentationSupport:
    name: Ember.InstrumentationSupport
    shortname: Ember.InstrumentationSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/instrumentation_support.js
    line: 9
    access: public
    tagname: ''
  Ember.LegacyViewSupport:
    name: Ember.LegacyViewSupport
    shortname: Ember.LegacyViewSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/legacy_view_support.js
    line: 9
    access: private
    tagname: ''
  Ember.TemplateRenderingSupport:
    name: Ember.TemplateRenderingSupport
    shortname: Ember.TemplateRenderingSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/template_rendering_support.js
    line: 10
    access: private
    tagname: ''
  Ember.TextSupport:
    name: Ember.TextSupport
    shortname: Ember.TextSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.TextArea
    - Ember.TextField
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/text_support.js
    line: 11
    description: |-
      `TextSupport` is a shared mixin used by both `Ember.TextField` and
      `Ember.TextArea`. `TextSupport` adds a number of methods that allow you to
      specify a controller action to invoke when a certain event is fired on your
      text field or textarea. The specifed controller action would get the current
      value of the field passed in as the only argument unless the value of
      the field is empty. In that case, the instance of the field itself is passed
      in as the only argument.

      Let's use the pressing of the escape key as an example. If you wanted to
      invoke a controller action when a user presses the escape key while on your
      field, you would use the `escape-press` attribute on your field like so:

      ```handlebars
        {{! application.hbs}}

        {{input escape-press='alertUser'}}
      ```

      ```javascript
          App = Ember.Application.create();

          App.ApplicationController = Ember.Controller.extend({
            actions: {
              alertUser: function ( currentValue ) {
                alert( 'escape pressed, current value: ' + currentValue );
              }
            }
          });
      ```

      The following chart is a visual representation of what takes place when the
      escape key is pressed in this scenario:

      ```
      The Template
      +---------------------------+
      |                           |
      | escape-press='alertUser'  |
      |                           |          TextSupport Mixin
      +----+----------------------+          +-------------------------------+
           |                                 | cancel method                 |
           |      escape button pressed      |                               |
           +-------------------------------> | checks for the `escape-press` |
                                             | attribute and pulls out the   |
           +-------------------------------+ | `alertUser` value             |
           |     action name 'alertUser'     +-------------------------------+
           |     sent to controller
           v
      Controller
      +------------------------------------------ +
      |                                           |
      |  actions: {                               |
      |     alertUser: function( currentValue ){  |
      |       alert( 'the esc key was pressed!' ) |
      |     }                                     |
      |  }                                        |
      |                                           |
      +-------------------------------------------+
      ```

      Here are the events that we currently support along with the name of the
      attribute you would need to use on your field. To reiterate, you would use the
      attribute name like so:

      ```handlebars
        {{input attribute-name='controllerAction'}}
      ```

      ```
      +--------------------+----------------+
      |                    |                |
      | event              | attribute name |
      +--------------------+----------------+
      | new line inserted  | insert-newline |
      |                    |                |
      | enter key pressed  | insert-newline |
      |                    |                |
      | cancel key pressed | escape-press   |
      |                    |                |
      | focusin            | focus-in       |
      |                    |                |
      | focusout           | focus-out      |
      |                    |                |
      | keypress           | key-press      |
      |                    |                |
      | keyup              | key-up         |
      |                    |                |
      | keydown            | key-down       |
      +--------------------+----------------+
      ```
    uses:
    - Ember.TargetActionSupport
    extends: Ember.Mixin
    access: private
    tagname: ''
  Ember.ViewTargetActionSupport:
    name: Ember.ViewTargetActionSupport
    shortname: Ember.ViewTargetActionSupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-views/lib/mixins/view_target_action_support.js
    line: 5
    description: |-
      `Ember.ViewTargetActionSupport` is a mixin that can be included in a
      view class to add a `triggerAction` method with semantics similar to
      the Handlebars `{{action}}` helper. It provides intelligent defaults
      for the action's target: the view's controller; and the context that is
      sent with the action: the view's context.

      Note: In normal Ember usage, the `{{action}}` helper is usually the best
      choice. This mixin is most often useful when you are doing more complex
      event handling in custom View subclasses.

      For example:

      ```javascript
      App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
        action: 'save',
        click: function() {
          this.triggerAction(); // Sends the `save` action, along with the current context
                                // to the current controller
        }
      });
      ```

      The `action` can be provided as properties of an optional object argument
      to `triggerAction` as well.

      ```javascript
      App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {
        click: function() {
          this.triggerAction({
            action: 'save'
          }); // Sends the `save` action, along with the current context
              // to the current controller
        }
      });
      ```
    extends: Ember.TargetActionSupport
    access: private
    tagname: ''
  Ember.VisibilitySupport:
    name: Ember.VisibilitySupport
    shortname: Ember.VisibilitySupport
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - Ember.View
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/mixins/visibility_support.js
    line: 14
    access: public
    tagname: ''
  Ember.EventDispatcher:
    name: Ember.EventDispatcher
    shortname: Ember.EventDispatcher
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/system/event_dispatcher.js
    line: 20
    description: |-
      `Ember.EventDispatcher` handles delegating browser events to their
      corresponding `Ember.Views.` For example, when you click on a view,
      `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
      called.
    access: private
    tagname: ''
    extends: Ember.Object
  Ember.Checkbox:
    name: Ember.Checkbox
    shortname: Ember.Checkbox
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/checkbox.js
    line: 10
    description: |-
      The internal class used to create text inputs when the `{{input}}`
      helper is used with `type` of `checkbox`.

      See [Ember.Templates.helpers.input](/api/classes/Ember.Templates.helpers.html#method_input)  for usage details.

      ## Direct manipulation of `checked`

      The `checked` attribute of an `Ember.Checkbox` object should always be set
      through the Ember object or by interacting with its rendered element
      representation via the mouse, keyboard, or touch. Updating the value of the
      checkbox via jQuery will result in the checked value of the object and its
      element losing synchronization.

      ## Layout and LayoutName properties

      Because HTML `input` elements are self closing `layout` and `layoutName`
      properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
      layout section for more information.
    extends: Ember.Component
    access: public
    tagname: ''
  Ember.CollectionView:
    name: Ember.CollectionView
    shortname: Ember.CollectionView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/collection_view.js
    line: 18
    description: |-
      `Ember.CollectionView` is an `Ember.View` descendent responsible for managing
      a collection (an array or array-like object) by maintaining a child view object
      and associated DOM representation for each item in the array and ensuring
      that child views and their associated rendered HTML are updated when items in
      the array are added, removed, or replaced.

      ## Setting content

      The managed collection of objects is referenced as the `Ember.CollectionView`
      instance's `content` property.

      ```javascript
      someItemsView = Ember.CollectionView.create({
        content: ['A', 'B','C']
      })
      ```

      The view for each item in the collection will have its `content` property set
      to the item.

      ## Specifying `itemViewClass`

      By default the view class for each item in the managed collection will be an
      instance of `Ember.View`. You can supply a different class by setting the
      `CollectionView`'s `itemViewClass` property.

      Given the following application code:

      ```javascript
      var App = Ember.Application.create();
      App.ItemListView = Ember.CollectionView.extend({
        classNames: ['a-collection'],
        content: ['A','B','C'],
        itemViewClass: Ember.View.extend({
          template: Ember.HTMLBars.compile("the letter: {{view.content}}")
        })
      });
      ```

      And a simple application template:

      ```handlebars
      {{view 'item-list'}}
      ```

      The following HTML will result:

      ```html
      <div class="ember-view a-collection">
        <div class="ember-view">the letter: A</div>
        <div class="ember-view">the letter: B</div>
        <div class="ember-view">the letter: C</div>
      </div>
      ```

      ## Automatic matching of parent/child tagNames

      Setting the `tagName` property of a `CollectionView` to any of
      "ul", "ol", "table", "thead", "tbody", "tfoot", "tr", or "select" will result
      in the item views receiving an appropriately matched `tagName` property.

      Given the following application code:

      ```javascript
      var App = Ember.Application.create();
      App.UnorderedListView = Ember.CollectionView.create({
        tagName: 'ul',
        content: ['A','B','C'],
        itemViewClass: Ember.View.extend({
          template: Ember.HTMLBars.compile("the letter: {{view.content}}")
        })
      });
      ```

      And a simple application template:

      ```handlebars
      {{view 'unordered-list-view'}}
      ```

      The following HTML will result:

      ```html
      <ul class="ember-view a-collection">
        <li class="ember-view">the letter: A</li>
        <li class="ember-view">the letter: B</li>
        <li class="ember-view">the letter: C</li>
      </ul>
      ```

      Additional `tagName` pairs can be provided by adding to
      `Ember.CollectionView.CONTAINER_MAP`. For example:

      ```javascript
      Ember.CollectionView.CONTAINER_MAP['article'] = 'section'
      ```

      ## Programmatic creation of child views

      For cases where additional customization beyond the use of a single
      `itemViewClass` or `tagName` matching is required CollectionView's
      `createChildView` method can be overridden:

      ```javascript
      App.CustomCollectionView = Ember.CollectionView.extend({
        createChildView: function(viewClass, attrs) {
          if (attrs.content.kind == 'album') {
            viewClass = App.AlbumView;
          } else {
            viewClass = App.SongView;
          }
          return this._super(viewClass, attrs);
        }
      });
      ```

      ## Empty View

      You can provide an `Ember.View` subclass to the `Ember.CollectionView`
      instance as its `emptyView` property. If the `content` property of a
      `CollectionView` is set to `null` or an empty array, an instance of this view
      will be the `CollectionView`s only child.

      ```javascript
      var App = Ember.Application.create();
      App.ListWithNothing = Ember.CollectionView.create({
        classNames: ['nothing'],
        content: null,
        emptyView: Ember.View.extend({
          template: Ember.HTMLBars.compile("The collection is empty")
        })
      });
      ```

      And a simple application template:

      ```handlebars
      {{view 'list-with-nothing'}}
      ```

      The following HTML will result:

      ```html
      <div class="ember-view nothing">
        <div class="ember-view">
          The collection is empty
        </div>
      </div>
      ```

      ## Adding and Removing items

      The `childViews` property of a `CollectionView` should not be directly
      manipulated. Instead, add, remove, replace items from its `content` property.
      This will trigger appropriate changes to its rendered HTML.
    extends: Ember.ContainerView
    uses:
    - Ember.EmptyViewSupport
    since: Ember 0.9
    access: private
    tagname: ''
  Ember.ContainerView:
    name: Ember.ContainerView
    shortname: Ember.ContainerView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/container_view.js
    line: 20
    description: |-
      A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`
      allowing programmatic management of its child views.

      ## Setting Initial Child Views

      The initial array of child views can be set in one of two ways. You can
      provide a `childViews` property at creation time that contains instance of
      `Ember.View`:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: [Ember.View.create(), Ember.View.create()]
      });
      ```

      You can also provide a list of property names whose values are instances of
      `Ember.View`:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: ['aView', 'bView', 'cView'],
        aView: Ember.View.create(),
        bView: Ember.View.create(),
        cView: Ember.View.create()
      });
      ```

      The two strategies can be combined:

      ```javascript
      aContainer = Ember.ContainerView.create({
        childViews: ['aView', Ember.View.create()],
        aView: Ember.View.create()
      });
      ```

      Each child view's rendering will be inserted into the container's rendered
      HTML in the same order as its position in the `childViews` property.

      ## Adding and Removing Child Views

      The container view implements `Ember.MutableArray` allowing programmatic management of its child views.

      To remove a view, pass that view into a `removeObject` call on the container view.

      Given an empty `<body>` the following code

      ```javascript
      aContainer = Ember.ContainerView.create({
        classNames: ['the-container'],
        childViews: ['aView', 'bView'],
        aView: Ember.View.create({
          template: Ember.HTMLBars.compile("A")
        }),
        bView: Ember.View.create({
          template: Ember.HTMLBars.compile("B")
        })
      });

      aContainer.appendTo('body');
      ```

      Results in the HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
      </div>
      ```

      Removing a view

      ```javascript
      aContainer.toArray();  // [aContainer.aView, aContainer.bView]
      aContainer.removeObject(aContainer.get('bView'));
      aContainer.toArray();  // [aContainer.aView]
      ```

      Will result in the following HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
      </div>
      ```

      Similarly, adding a child view is accomplished by adding `Ember.View` instances to the
      container view.

      Given an empty `<body>` the following code

      ```javascript
      aContainer = Ember.ContainerView.create({
        classNames: ['the-container'],
        childViews: ['aView', 'bView'],
        aView: Ember.View.create({
          template: Ember.HTMLBars.compile("A")
        }),
        bView: Ember.View.create({
          template: Ember.HTMLBars.compile("B")
        })
      });

      aContainer.appendTo('body');
      ```

      Results in the HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
      </div>
      ```

      Adding a view

      ```javascript
      AnotherViewClass = Ember.View.extend({
        template: Ember.HTMLBars.compile("Another view")
      });

      aContainer.toArray();  // [aContainer.aView, aContainer.bView]
      aContainer.pushObject(AnotherViewClass.create());
      aContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]
      ```

      Will result in the following HTML

      ```html
      <div class="ember-view the-container">
        <div class="ember-view">A</div>
        <div class="ember-view">B</div>
        <div class="ember-view">Another view</div>
      </div>
      ```

      ## Templates and Layout

      A `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or
      `defaultLayout` property on a container view will not result in the template
      or layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM
      representation will only be the rendered HTML of its child views.
    extends: Ember.View
    deprecated: true
    deprecationMessage: See http://emberjs.com/deprecations/v1.x/#toc_ember-containerview
    access: private
    tagname: ''
  Ember.CoreView:
    name: Ember.CoreView
    shortname: Ember.CoreView
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    namespace: Ember
    file: packages/ember-views/lib/views/core_view.js
    line: 23
    description: |-
      `Ember.CoreView` is an abstract class that exists to give view-like behavior
      to both Ember's main view class `Ember.View` and other classes that don't need
      the fully functionaltiy of `Ember.View`.

      Unless you have specific needs for `CoreView`, you will use `Ember.View`
      in your applications.
    extends: Ember.Object
    deprecated: true
    deprecationMessage: Use `Ember.View` instead.
    uses:
    - Ember.Evented
    - Ember.ActionHandler
    access: private
    tagname: ''
  Ember.Select:
    name: Ember.Select
    shortname: Ember.Select
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/select.js
    line: 69
    description: |-
      The `Ember.Select` view class renders a
      [select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,
      allowing the user to choose from a list of options.

      The text and `value` property of each `<option>` element within the
      `<select>` element are populated from the objects in the `Element.Select`'s
      `content` property. The underlying data object of the selected `<option>` is
      stored in the `Element.Select`'s `value` property.

      ## The Content Property (array of strings)

      The simplest version of an `Ember.Select` takes an array of strings as its
      `content` property. The string will be used as both the `value` property and
      the inner text of each `<option>` element inside the rendered `<select>`.

      Example:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        names: ["Yehuda", "Tom"]
      });
      ```

      ```handlebars
      {{view "select" content=names}}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```

      You can control which `<option>` is selected through the `Ember.Select`'s
      `value` property:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedName: 'Tom',
        names: ["Yehuda", "Tom"]
      });
      ```

      ```handlebars
      {{view "select" content=names value=selectedName}}
      ```

      Would result in the following HTML with the `<option>` for 'Tom' selected:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom" selected="selected">Tom</option>
      </select>
      ```

      A user interacting with the rendered `<select>` to choose "Yehuda" would
      update the value of `selectedName` to "Yehuda".

      ## The Content Property (array of Objects)

      An `Ember.Select` can also take an array of JavaScript or Ember objects as
      its `content` property.

      When using objects you need to tell the `Ember.Select` which property should
      be accessed on each object to supply the `value` attribute of the `<option>`
      and which property should be used to supply the element text.

      The `optionValuePath` option is used to specify the path on each object to
      the desired property for the `value` attribute. The `optionLabelPath`
      specifies the path on each object to the desired property for the
      element's text. Both paths must reference each object itself as `content`:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        programmers: [
          {firstName: "Yehuda", id: 1},
          {firstName: "Tom",    id: 2}
        ]
      });
      ```

      ```handlebars
      {{view "select"
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"}}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2">Tom</option>
      </select>
      ```

      The `value` attribute of the selected `<option>` within an `Ember.Select`
      can be bound to a property on another object:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        programmers: [
          {firstName: "Yehuda", id: 1},
          {firstName: "Tom",    id: 2}
        ],
        currentProgrammer: {
          id: 2
        }
      });
      ```

      ```handlebars
      {{view "select"
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"
             value=currentProgrammer.id}}
      ```

      Would result in the following HTML with a selected option:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2" selected="selected">Tom</option>
      </select>
      ```

      Interacting with the rendered element by selecting the first option
      ('Yehuda') will update the `id` of `currentProgrammer`
      to match the `value` property of the newly selected `<option>`.

      Alternatively, you can control selection through the underlying objects
      used to render each object by binding the `selection` option. When the selected
      `<option>` is changed, the property path provided to `selection`
      will be updated to match the content object of the rendered `<option>`
      element:

      ```javascript

      var yehuda = {firstName: "Yehuda", id: 1, bff4eva: 'tom'}
      var tom = {firstName: "Tom", id: 2, bff4eva: 'yehuda'};

      App.ApplicationController = Ember.Controller.extend({
        selectedPerson: tom,
        programmers: [ yehuda, tom ]
      });
      ```

      ```handlebars
      {{view "select"
             content=programmers
             optionValuePath="content.id"
             optionLabelPath="content.firstName"
             selection=selectedPerson}}
      ```

      Would result in the following HTML with a selected option:

      ```html
      <select class="ember-select">
        <option value="1">Yehuda</option>
        <option value="2" selected="selected">Tom</option>
      </select>
      ```

      Interacting with the rendered element by selecting the first option
      ('Yehuda') will update the `selectedPerson` to match the object of
      the newly selected `<option>`. In this case it is the first object
      in the `programmers`

      ## Supplying a Prompt

      A `null` value for the `Ember.Select`'s `value` or `selection` property
      results in there being no `<option>` with a `selected` attribute:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedProgrammer: null,
        programmers: ["Yehuda", "Tom"]
      });
      ```

      ``` handlebars
      {{view "select"
             content=programmers
             value=selectedProgrammer
      }}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```

      Although `selectedProgrammer` is `null` and no `<option>`
      has a `selected` attribute the rendered HTML will display the
      first item as though it were selected. You can supply a string
      value for the `Ember.Select` to display when there is no selection
      with the `prompt` option:

      ```javascript
      App.ApplicationController = Ember.Controller.extend({
        selectedProgrammer: null,
        programmers: [ "Yehuda", "Tom" ]
      });
      ```

      ```handlebars
      {{view "select"
             content=programmers
             value=selectedProgrammer
             prompt="Please select a name"
      }}
      ```

      Would result in the following HTML:

      ```html
      <select class="ember-select">
        <option>Please select a name</option>
        <option value="Yehuda">Yehuda</option>
        <option value="Tom">Tom</option>
      </select>
      ```
    extends: Ember.View
    access: public
    tagname: ''
    deprecated: true
    deprecationMessage: See http://emberjs.com/deprecations/v1.x/#toc_ember-select
  Ember.TextArea:
    name: Ember.TextArea
    shortname: Ember.TextArea
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/text_area.js
    line: 8
    description: |-
      The internal class used to create textarea element when the `{{textarea}}`
      helper is used.

      See [Ember.Templates.helpers.textarea](/api/classes/Ember.Templates.helpers.html#method_textarea)  for usage details.

      ## Layout and LayoutName properties

      Because HTML `textarea` elements do not contain inner HTML the `layout` and
      `layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
      layout section for more information.
    extends: Ember.Component
    uses:
    - Ember.TextSupport
    access: public
    tagname: ''
  Ember.TextField:
    name: Ember.TextField
    shortname: Ember.TextField
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/text_field.js
    line: 37
    description: |-
      The internal class used to create text inputs when the `{{input}}`
        helper is used with `type` of `text`.
      See [Ember.Templates.helpers.input](/api/classes/Ember.Templates.helpers.html#method_input)  for usage details.
      ## Layout and LayoutName properties
      Because HTML `input` elements are self closing `layout` and `layoutName`
        properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s
        layout section for more information.
    extends: Ember.Component
    uses:
    - Ember.TextSupport
    access: public
    tagname: ''
  Ember.View:
    name: Ember.View
    shortname: Ember.View
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember
    submodule: ember-views
    namespace: Ember
    file: packages/ember-views/lib/views/view.js
    line: 52
    description: |-
      `Ember.View` is the class in Ember responsible for encapsulating templates of
      HTML content, combining templates with data to render as sections of a page's
      DOM, and registering and responding to user-initiated events.

      ## HTML Tag

      The default HTML tag name used for a view's DOM representation is `div`. This
      can be customized by setting the `tagName` property. The following view
      class:

      ```javascript
      ParagraphView = Ember.View.extend({
        tagName: 'em'
      });
      ```

      Would result in instances with the following HTML:

      ```html
      <em id="ember1" class="ember-view"></em>
      ```

      ## HTML `class` Attribute

      The HTML `class` attribute of a view's tag can be set by providing a
      `classNames` property that is set to an array of strings:

      ```javascript
      MyView = Ember.View.extend({
        classNames: ['my-class', 'my-other-class']
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view my-class my-other-class"></div>
      ```

      `class` attribute values can also be set by providing a `classNameBindings`
      property set to an array of properties names for the view. The return value
      of these properties will be added as part of the value for the view's `class`
      attribute. These properties can be computed properties:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['propertyA', 'propertyB'],
        propertyA: 'from-a',
        propertyB: Ember.computed(function() {
          if (someLogic) { return 'from-b'; }
        })
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view from-a from-b"></div>
      ```

      If the value of a class name binding returns a boolean the property name
      itself will be used as the class name if the property is true. The class name
      will not be added if the value is `false` or `undefined`.

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['hovered'],
        hovered: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view hovered"></div>
      ```

      When using boolean class name bindings you can supply a string value other
      than the property name for use as the `class` HTML attribute by appending the
      preferred value after a ":" character when defining the binding:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['awesome:so-very-cool'],
        awesome: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view so-very-cool"></div>
      ```

      Boolean value class name bindings whose property names are in a
      camelCase-style format will be converted to a dasherized format:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view is-urgent"></div>
      ```

      Class name bindings can also refer to object values that are found by
      traversing a path relative to the view itself:

      ```javascript
      MyView = Ember.View.extend({
        classNameBindings: ['messages.empty']
        messages: Ember.Object.create({
          empty: true
        })
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view empty"></div>
      ```

      If you want to add a class name for a property which evaluates to true and
      and a different class name if it evaluates to false, you can pass a binding
      like this:

      ```javascript
      // Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false
      Ember.View.extend({
        classNameBindings: ['isEnabled:enabled:disabled']
        isEnabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view enabled"></div>
      ```

      When isEnabled is `false`, the resulting HTML representation looks like
      this:

      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```

      This syntax offers the convenience to add a class if a property is `false`:

      ```javascript
      // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
      Ember.View.extend({
        classNameBindings: ['isEnabled::disabled']
        isEnabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view"></div>
      ```

      When the `isEnabled` property on the view is set to `false`, it will result
      in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view disabled"></div>
      ```

      Updates to the the value of a class name binding will result in automatic
      update of the  HTML `class` attribute in the view's rendered HTML
      representation. If the value becomes `false` or `undefined` the class name
      will be removed.

      Both `classNames` and `classNameBindings` are concatenated properties. See
      [Ember.Object](/api/classes/Ember.Object.html) documentation for more
      information about concatenated properties.

      ## HTML Attributes

      The HTML attribute section of a view's tag can be set by providing an
      `attributeBindings` property set to an array of property names on the view.
      The return value of these properties will be used as the value of the view's
      HTML associated attribute:

      ```javascript
      AnchorView = Ember.View.extend({
        tagName: 'a',
        attributeBindings: ['href'],
        href: 'http://google.com'
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <a id="ember1" class="ember-view" href="http://google.com"></a>
      ```

      One property can be mapped on to another by placing a ":" between
      the source property and the destination property:

      ```javascript
      AnchorView = Ember.View.extend({
        tagName: 'a',
        attributeBindings: ['url:href'],
        url: 'http://google.com'
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <a id="ember1" class="ember-view" href="http://google.com"></a>
      ```

      Namespaced attributes (e.g. `xlink:href`) are supported, but have to be
      mapped, since `:` is not a valid character for properties in Javascript:

      ```javascript
      UseView = Ember.View.extend({
        tagName: 'use',
        attributeBindings: ['xlinkHref:xlink:href'],
        xlinkHref: '#triangle'
      });
      ```
      Will result in view instances with an HTML representation of:

      ```html
      <use xlink:href="#triangle"></use>
      ```

      If the return value of an `attributeBindings` monitored property is a boolean
      the property will follow HTML's pattern of repeating the attribute's name as
      its value:

      ```javascript
      MyTextInput = Ember.View.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
        disabled: true
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <input id="ember1" class="ember-view" disabled="disabled" />
      ```

      `attributeBindings` can refer to computed properties:

      ```javascript
      MyTextInput = Ember.View.extend({
        tagName: 'input',
        attributeBindings: ['disabled'],
        disabled: Ember.computed(function() {
          if (someLogic) {
            return true;
          } else {
            return false;
          }
        })
      });
      ```

      Updates to the the property of an attribute binding will result in automatic
      update of the  HTML attribute in the view's rendered HTML representation.

      `attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)
      documentation for more information about concatenated properties.

      ## Templates

      The HTML contents of a view's rendered representation are determined by its
      template. Templates can be any function that accepts an optional context
      parameter and returns a string of HTML that will be inserted within the
      view's tag. Most typically in Ember this function will be a compiled
      template.

      ```javascript
      AView = Ember.View.extend({
        template: Ember.HTMLBars.compile('I am the template')
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">I am the template</div>
      ```

      Within an Ember application is more common to define a Handlebars templates as
      part of a page:

      ```html
      <script type='text/x-handlebars' data-template-name='some-template'>
        Hello
      </script>
      ```

      And associate it by name using a view's `templateName` property:

      ```javascript
      AView = Ember.View.extend({
        templateName: 'some-template'
      });
      ```

      If you have nested routes, your Handlebars template will look like this:

      ```html
      <script type='text/x-handlebars' data-template-name='posts/new'>
        <h1>New Post</h1>
      </script>
      ```

      And `templateName` property:

      ```javascript
      AView = Ember.View.extend({
        templateName: 'posts/new'
      });
      ```

      Using a value for `templateName` that does not have a template
      with a matching `data-template-name` attribute will throw an error.

      For views classes that may have a template later defined (e.g. as the block
      portion of a `{{view}}` helper call in another template or in
      a subclass), you can provide a `defaultTemplate` property set to compiled
      template function. If a template is not later provided for the view instance
      the `defaultTemplate` value will be used:

      ```javascript
      AView = Ember.View.extend({
        defaultTemplate: Ember.HTMLBars.compile('I was the default'),
        template: null,
        templateName: null
      });
      ```

      Will result in instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">I was the default</div>
      ```

      If a `template` or `templateName` is provided it will take precedence over
      `defaultTemplate`:

      ```javascript
      AView = Ember.View.extend({
        defaultTemplate: Ember.HTMLBars.compile('I was the default')
      });

      aView = AView.create({
        template: Ember.HTMLBars.compile('I was the template, not default')
      });
      ```

      Will result in the following HTML representation when rendered:

      ```html
      <div id="ember1" class="ember-view">I was the template, not default</div>
      ```

      ## View Context

      The default context of the compiled template is the view's controller:

      ```javascript
      AView = Ember.View.extend({
        template: Ember.HTMLBars.compile('Hello {{excitedGreeting}}')
      });

      aController = Ember.Object.create({
        firstName: 'Barry',
        excitedGreeting: Ember.computed('content.firstName', function() {
          return this.get('content.firstName') + '!!!';
        })
      });

      aView = AView.create({
        controller: aController
      });
      ```

      Will result in an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">Hello Barry!!!</div>
      ```

      A context can also be explicitly supplied through the view's `context`
      property. If the view has neither `context` nor `controller` properties, the
      `parentView`'s context will be used.

      ## Layouts

      Views can have a secondary template that wraps their main template. Like
      primary templates, layouts can be any function that  accepts an optional
      context parameter and returns a string of HTML that will be inserted inside
      view's tag. Views whose HTML element is self closing (e.g. `<input />`)
      cannot have a layout and this property will be ignored.

      Most typically in Ember a layout will be a compiled template.

      A view's layout can be set directly with the `layout` property or reference
      an existing template by name with the `layoutName` property.

      A template used as a layout must contain a single use of the
      `{{yield}}` helper. The HTML contents of a view's rendered `template` will be
      inserted at this location:

      ```javascript
      AViewWithLayout = Ember.View.extend({
        layout: Ember.HTMLBars.compile("<div class='my-decorative-class'>{{yield}}</div>"),
        template: Ember.HTMLBars.compile("I got wrapped")
      });
      ```

      Will result in view instances with an HTML representation of:

      ```html
      <div id="ember1" class="ember-view">
        <div class="my-decorative-class">
          I got wrapped
        </div>
      </div>
      ```

      See [Ember.Templates.helpers.yield](/api/classes/Ember.Templates.helpers.html#method_yield)
      for more information.

      ## Responding to Browser Events

      Views can respond to user-initiated events in one of three ways: method
      implementation, through an event manager, and through `{{action}}` helper use
      in their template or layout.

      ### Method Implementation

      Views can respond to user-initiated events by implementing a method that
      matches the event name. A `jQuery.Event` object will be passed as the
      argument to this method.

      ```javascript
      AView = Ember.View.extend({
        click: function(event) {
          // will be called when when an instance's
          // rendered element is clicked
        }
      });
      ```

      ### Event Managers

      Views can define an object as their `eventManager` property. This object can
      then implement methods that match the desired event names. Matching events
      that occur on the view's rendered HTML or the rendered HTML of any of its DOM
      descendants will trigger this method. A `jQuery.Event` object will be passed
      as the first argument to the method and an  `Ember.View` object as the
      second. The `Ember.View` will be the view whose rendered HTML was interacted
      with. This may be the view with the `eventManager` property or one of its
      descendant views.

      ```javascript
      AView = Ember.View.extend({
        eventManager: Ember.Object.create({
          doubleClick: function(event, view) {
            // will be called when when an instance's
            // rendered element or any rendering
            // of this view's descendant
            // elements is clicked
          }
        })
      });
      ```

      An event defined for an event manager takes precedence over events of the
      same name handled through methods on the view.

      ```javascript
      AView = Ember.View.extend({
        mouseEnter: function(event) {
          // will never trigger.
        },
        eventManager: Ember.Object.create({
          mouseEnter: function(event, view) {
            // takes precedence over AView#mouseEnter
          }
        })
      });
      ```

      Similarly a view's event manager will take precedence for events of any views
      rendered as a descendant. A method name that matches an event name will not
      be called if the view instance was rendered inside the HTML representation of
      a view that has an `eventManager` property defined that handles events of the
      name. Events not handled by the event manager will still trigger method calls
      on the descendant.

      ```javascript
      var App = Ember.Application.create();
      App.OuterView = Ember.View.extend({
        template: Ember.HTMLBars.compile("outer {{#view 'inner'}}inner{{/view}} outer"),
        eventManager: Ember.Object.create({
          mouseEnter: function(event, view) {
            // view might be instance of either
            // OuterView or InnerView depending on
            // where on the page the user interaction occurred
          }
        })
      });

      App.InnerView = Ember.View.extend({
        click: function(event) {
          // will be called if rendered inside
          // an OuterView because OuterView's
          // eventManager doesn't handle click events
        },
        mouseEnter: function(event) {
          // will never be called if rendered inside
          // an OuterView.
        }
      });
      ```

      ### `{{action}}` Helper

      See [Ember.Templates.helpers.action](/api/classes/Ember.Templates.helpers.html#method_action).

      ### Event Names

      All of the event handling approaches described above respond to the same set
      of events. The names of the built-in events are listed below. (The hash of
      built-in events exists in `Ember.EventDispatcher`.) Additional, custom events
      can be registered by using `Ember.Application.customEvents`.

      Touch events:

      * `touchStart`
      * `touchMove`
      * `touchEnd`
      * `touchCancel`

      Keyboard events

      * `keyDown`
      * `keyUp`
      * `keyPress`

      Mouse events

      * `mouseDown`
      * `mouseUp`
      * `contextMenu`
      * `click`
      * `doubleClick`
      * `mouseMove`
      * `focusIn`
      * `focusOut`
      * `mouseEnter`
      * `mouseLeave`

      Form events:

      * `submit`
      * `change`
      * `focusIn`
      * `focusOut`
      * `input`

      HTML5 drag and drop events:

      * `dragStart`
      * `drag`
      * `dragEnter`
      * `dragLeave`
      * `dragOver`
      * `dragEnd`
      * `drop`

      ## `{{view}}` Helper

      Other `Ember.View` instances can be included as part of a view's template by
      using the `{{view}}` helper. See [Ember.Templates.helpers.view](/api/classes/Ember.Templates.helpers.html#method_view)
      for additional information.
    extends: Ember.CoreView
    deprecated: true
    deprecationMessage: See http://emberjs.com/deprecations/v1.x/#toc_ember-view
    uses:
    - Ember.ViewContextSupport
    - Ember.ViewChildViewsSupport
    - Ember.TemplateRenderingSupport
    - Ember.ClassNamesSupport
    - Ember.AttributeBindingsSupport
    - Ember.LegacyViewSupport
    - Ember.InstrumentationSupport
    - Ember.VisibilitySupport
    - Ember.AriaRoleSupport
    access: public
    tagname: ''
classitems:
- file: bower_components/rsvp/lib/rsvp/promise/all.js
  line: 3
  description: |-
    `RSVP.Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.

    Example:

    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.resolve(2);
    var promise3 = RSVP.resolve(3);
    var promises = [ promise1, promise2, promise3 ];

    RSVP.Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```

    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:

    Example:

    ```javascript
    var promise1 = RSVP.resolve(1);
    var promise2 = RSVP.reject(new Error("2"));
    var promise3 = RSVP.reject(new Error("3"));
    var promises = [ promise1, promise2, promise3 ];

    RSVP.Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  itemtype: method
  name: all
  static: 1
  params:
  - name: entries
    description: array of promises
    type: Array
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled when all `promises` have been
      fulfilled, or rejected if any of them become rejected.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/promise/race.js
  line: 13
  description: |-
    `RSVP.Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.

    Example:

    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });

    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });

    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```

    `RSVP.Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:

    ```javascript
    var promise1 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });

    var promise2 = new RSVP.Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });

    RSVP.Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```

    An example real-world use case is implementing timeouts:

    ```javascript
    RSVP.Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  itemtype: method
  name: race
  static: 1
  params:
  - name: entries
    description: array of promises to observe
    type: Array
  - name: label
    description: |-
      optional string for describing the promise returned.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise which settles in the same way as the first passed
      promise to settle.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/promise/reject.js
  line: 6
  description: |-
    `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:

    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    var promise = RSVP.Promise.reject(new Error('WHOOPS'));

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  itemtype: method
  name: reject
  static: 1
  params:
  - name: reason
    description: value that the returned promise will be rejected with.
    type: "*"
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: a promise rejected with the given `reason`.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/promise/resolve.js
  line: 6
  description: |-
    `RSVP.Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:

    ```javascript
    var promise = new RSVP.Promise(function(resolve, reject){
      resolve(1);
    });

    promise.then(function(value){
      // value === 1
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    var promise = RSVP.Promise.resolve(1);

    promise.then(function(value){
      // value === 1
    });
    ```
  itemtype: method
  name: resolve
  static: 1
  params:
  - name: object
    description: value that the returned promise will be resolved with
    type: "*"
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise that will become fulfilled with the given
      `value`
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/all-settled.js
  line: 19
  description: |-
    `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
    a fail-fast method, it waits until all the promises have returned and
    shows you all the results. This is useful if you want to handle multiple
    promises' failure states together as a set.

    Returns a promise that is fulfilled when all the given promises have been
    settled. The return promise is fulfilled with an array of the states of
    the promises passed into the `promises` array argument.

    Each state object will either indicate fulfillment or rejection, and
    provide the corresponding value or reason. The states will take one of
    the following formats:

    ```javascript
    { state: 'fulfilled', value: value }
      or
    { state: 'rejected', reason: reason }
    ```

    Example:

    ```javascript
    var promise1 = RSVP.Promise.resolve(1);
    var promise2 = RSVP.Promise.reject(new Error('2'));
    var promise3 = RSVP.Promise.reject(new Error('3'));
    var promises = [ promise1, promise2, promise3 ];

    RSVP.allSettled(promises).then(function(array){
      // array == [
      //   { state: 'fulfilled', value: 1 },
      //   { state: 'rejected', reason: Error },
      //   { state: 'rejected', reason: Error }
      // ]
      // Note that for the second item, reason.message will be '2', and for the
      // third item, reason.message will be '3'.
    }, function(error) {
      // Not run. (This block would only be called if allSettled had failed,
      // for instance if passed an incorrect argument type.)
    });
    ```
  itemtype: method
  name: allSettled
  static: 1
  params:
  - name: entries
    description: ''
    type: Array
  - name: label
    description: |-
      - optional string that describes the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled with an array of the settled
      states of the constituent promises.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/all.js
  line: 3
  description: This is a convenient alias for `RSVP.Promise.all`.
  itemtype: method
  name: all
  static: 1
  params:
  - name: array
    description: Array of promises.
    type: Array
  - name: label
    description: |-
      An optional label. This is useful
      for tooling.
    type: String
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/defer.js
  line: 3
  description: |-
    `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.
    `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `RSVP.Promise` constructor instead.

    The object returned from `RSVP.defer` is a plain object with three properties:

    * promise - an `RSVP.Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.

    Example:

     ```javascript
     var deferred = RSVP.defer();

     deferred.resolve("Success!");

     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  itemtype: method
  name: defer
  static: 1
  params:
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Object
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/events.js
  line: 24
  description: |-
    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For
    Example:

    ```javascript
    var object = {};

    RSVP.EventTarget.mixin(object);

    object.on('finished', function(event) {
      // handle event
    });

    object.trigger('finished', { detail: value });
    ```

    `EventTarget.mixin` also works with prototypes:

    ```javascript
    var Person = function() {};
    RSVP.EventTarget.mixin(Person.prototype);

    var yehuda = new Person();
    var tom = new Person();

    yehuda.on('poke', function(event) {
      console.log('Yehuda says OW');
    });

    tom.on('poke', function(event) {
      console.log('Tom says OW');
    });

    yehuda.trigger('poke');
    tom.trigger('poke');
    ```
  itemtype: method
  name: mixin
  access: private
  tagname: ''
  params:
  - name: object
    description: object to extend with EventTarget methods
    type: Object
  class: RSVP.EventTarget
- file: bower_components/rsvp/lib/rsvp/events.js
  line: 74
  description: |-
    Registers a callback to be executed when `eventName` is triggered

    ```javascript
    object.on('event', function(eventInfo){
      // handle the event
    });

    object.trigger('event');
    ```
  itemtype: method
  name: 'on'
  access: private
  tagname: ''
  params:
  - name: eventName
    description: name of the event to listen for
    type: String
  - name: callback
    description: function to be called when the event is triggered.
    type: Function
  class: RSVP.EventTarget
- file: bower_components/rsvp/lib/rsvp/events.js
  line: 109
  description: |-
    You can use `off` to stop firing a particular callback for an event:

    ```javascript
    function doStuff() { // do stuff! }
    object.on('stuff', doStuff);

    object.trigger('stuff'); // doStuff will be called

    // Unregister ONLY the doStuff callback
    object.off('stuff', doStuff);
    object.trigger('stuff'); // doStuff will NOT be called
    ```

    If you don't pass a `callback` argument to `off`, ALL callbacks for the
    event will not be executed when the event fires. For example:

    ```javascript
    var callback1 = function(){};
    var callback2 = function(){};

    object.on('stuff', callback1);
    object.on('stuff', callback2);

    object.trigger('stuff'); // callback1 and callback2 will be executed.

    object.off('stuff');
    object.trigger('stuff'); // callback1 and callback2 will not be executed!
    ```
  itemtype: method
  name: 'off'
  access: private
  tagname: ''
  params:
  - name: eventName
    description: event to stop listening to
    type: String
  - name: callback
    description: |-
      optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    type: Function
  class: RSVP.EventTarget
- file: bower_components/rsvp/lib/rsvp/events.js
  line: 163
  description: |-
    Use `trigger` to fire custom events. For example:

    ```javascript
    object.on('foo', function(){
      console.log('foo event happened!');
    });
    object.trigger('foo');
    // 'foo event happened!' logged to the console
    ```

    You can also pass a value as a second argument to `trigger` that will be
    passed as an argument to all event listeners for the event:

    ```javascript
    object.on('foo', function(value){
      console.log(value.name);
    });

    object.trigger('foo', { name: 'bar' });
    // 'bar' logged to the console
    ```
  itemtype: method
  name: trigger
  access: private
  tagname: ''
  params:
  - name: eventName
    description: name of the event to be triggered
    type: String
  - name: options
    description: |-
      optional value to be passed to any event handlers for
      the given `eventName`
    type: "*"
  class: RSVP.EventTarget
- file: bower_components/rsvp/lib/rsvp/filter.js
  line: 6
  description: |-
    `RSVP.filter` is similar to JavaScript's native `filter` method, except that it
     waits for all promises to become fulfilled before running the `filterFn` on
     each item in given to `promises`. `RSVP.filter` returns a promise that will
     become fulfilled with the result of running `filterFn` on the values the
     promises become fulfilled with.

     For example:

     ```javascript

     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.resolve(2);
     var promise3 = RSVP.resolve(3);

     var promises = [promise1, promise2, promise3];

     var filterFn = function(item){
       return item > 1;
     };

     RSVP.filter(promises, filterFn).then(function(result){
       // result is [ 2, 3 ]
     });
     ```

     If any of the `promises` given to `RSVP.filter` are rejected, the first promise
     that is rejected will be given as an argument to the returned promise's
     rejection handler. For example:

     ```javascript
     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.reject(new Error('2'));
     var promise3 = RSVP.reject(new Error('3'));
     var promises = [ promise1, promise2, promise3 ];

     var filterFn = function(item){
       return item > 1;
     };

     RSVP.filter(promises, filterFn).then(function(array){
       // Code here never runs because there are rejected promises!
     }, function(reason) {
       // reason.message === '2'
     });
     ```

     `RSVP.filter` will also wait for any promises returned from `filterFn`.
     For instance, you may want to fetch a list of users then return a subset
     of those users based on some asynchronous operation:

     ```javascript

     var alice = { name: 'alice' };
     var bob   = { name: 'bob' };
     var users = [ alice, bob ];

     var promises = users.map(function(user){
       return RSVP.resolve(user);
     });

     var filterFn = function(user){
       // Here, Alice has permissions to create a blog post, but Bob does not.
       return getPrivilegesForUser(user).then(function(privs){
         return privs.can_create_blog_post === true;
       });
     };
     RSVP.filter(promises, filterFn).then(function(users){
       // true, because the server told us only Alice can create a blog post.
       users.length === 1;
       // false, because Alice is the only user present in `users`
       users[0] === bob;
     });
     ```
  itemtype: method
  name: filter
  static: 1
  params:
  - name: promises
    description: ''
    type: Array
  - name: filterFn
    description: |-
      - function to be called on each resolved value to
       filter the final results.
    type: Function
  - name: label
    description: |-
      optional string describing the promise. Useful for
       tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/hash-settled.js
  line: 23
  description: |-
    `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object
    instead of an array for its `promises` argument.

    Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,
    but like `RSVP.allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.

    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.

    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.Promise.resolve(1),
      yourPromise: RSVP.Promise.resolve(2),
      theirPromise: RSVP.Promise.resolve(3),
      notAPromise: 4
    };

    RSVP.hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```

    If any of the `promises` given to `RSVP.hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.Promise.resolve(1),
      rejectedPromise: RSVP.Promise.reject(new Error('rejection')),
      anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),
    };

    RSVP.hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```

    An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype
    chains.

    Example:

    ```javascript
    function MyConstructor(){
      this.example = RSVP.Promise.resolve('Example');
    }

    MyConstructor.prototype = {
      protoProperty: RSVP.Promise.resolve('Proto Property')
    };

    var myObject = new MyConstructor();

    RSVP.hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  itemtype: method
  name: hashSettled
  params:
  - name: object
    description: ''
    type: Object
  - name: label
    description: |-
      optional string that describes the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled when when all properties of `promises`
      have been settled.
    type: Promise
  static: 1
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/hash.js
  line: 4
  description: |-
    `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array
    for its `promises` argument.

    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      yourPromise: RSVP.resolve(2),
      theirPromise: RSVP.resolve(3),
      notAPromise: 4
    };

    RSVP.hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ````

    If any of the `promises` given to `RSVP.hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.

    Example:

    ```javascript
    var promises = {
      myPromise: RSVP.resolve(1),
      rejectedPromise: RSVP.reject(new Error('rejectedPromise')),
      anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),
    };

    RSVP.hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```

    An important note: `RSVP.hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `RSVP.hash` will NOT preserve prototype
    chains.

    Example:

    ```javascript
    function MyConstructor(){
      this.example = RSVP.resolve('Example');
    }

    MyConstructor.prototype = {
      protoProperty: RSVP.resolve('Proto Property')
    };

    var myObject = new MyConstructor();

    RSVP.hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  itemtype: method
  name: hash
  static: 1
  params:
  - name: object
    description: ''
    type: Object
  - name: label
    description: |-
      optional string that describes the promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled when all properties of `promises`
      have been fulfilled, or rejected if any of them become rejected.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/map.js
  line: 6
  description: |-
    `RSVP.map` is similar to JavaScript's native `map` method, except that it
     waits for all promises to become fulfilled before running the `mapFn` on
     each item in given to `promises`. `RSVP.map` returns a promise that will
     become fulfilled with the result of running `mapFn` on the values the promises
     become fulfilled with.

     For example:

     ```javascript

     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.resolve(2);
     var promise3 = RSVP.resolve(3);
     var promises = [ promise1, promise2, promise3 ];

     var mapFn = function(item){
       return item + 1;
     };

     RSVP.map(promises, mapFn).then(function(result){
       // result is [ 2, 3, 4 ]
     });
     ```

     If any of the `promises` given to `RSVP.map` are rejected, the first promise
     that is rejected will be given as an argument to the returned promise's
     rejection handler. For example:

     ```javascript
     var promise1 = RSVP.resolve(1);
     var promise2 = RSVP.reject(new Error('2'));
     var promise3 = RSVP.reject(new Error('3'));
     var promises = [ promise1, promise2, promise3 ];

     var mapFn = function(item){
       return item + 1;
     };

     RSVP.map(promises, mapFn).then(function(array){
       // Code here never runs because there are rejected promises!
     }, function(reason) {
       // reason.message === '2'
     });
     ```

     `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,
     say you want to get all comments from a set of blog posts, but you need
     the blog posts first because they contain a url to those comments.

     ```javscript

     var mapFn = function(blogPost){
       // getComments does some ajax and returns an RSVP.Promise that is fulfilled
       // with some comments data
       return getComments(blogPost.comments_url);
     };

     // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled
     // with some blog post data
     RSVP.map(getBlogPosts(), mapFn).then(function(comments){
       // comments is the result of asking the server for the comments
       // of all blog posts returned from getBlogPosts()
     });
     ```
  itemtype: method
  name: map
  static: 1
  params:
  - name: promises
    description: ''
    type: Array
  - name: mapFn
    description: function to be called on each fulfilled promise.
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
       Useful for tooling.
    type: String
  return:
    description: |-
      promise that is fulfilled with the result of calling
       `mapFn` on each fulfilled promise or value when they become fulfilled.
        The promise will be rejected if any of the given `promises` become rejected.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/node.js
  line: 73
  description: |-
    `RSVP.denodeify` takes a 'node-style' function and returns a function that
    will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:

    ```javascript
    var fs = require('fs');

    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```

    into:

    ```javascript
    var fs = require('fs');
    var readFile = RSVP.denodeify(fs.readFile);

    readFile('myfile.txt').then(handleData, handleError);
    ```

    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:

    ```javascript
    var request = RSVP.denodeify(require('request'));

    request('http://example.com').then(function(res) {
      // ...
    });
    ```

    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:

    ```javascript
    var request = RSVP.denodeify(require('request'), true);

    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```

    Or if you pass it an array with names it returns the parameters as a hash:

    ```javascript
    var request = RSVP.denodeify(require('request'), ['res', 'body']);

    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```

    Sometimes you need to retain the `this`:

    ```javascript
    var app = require('express')();
    var render = RSVP.denodeify(app.render.bind(app));
    ```

    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:

    ```javascript
    var request = RSVP.denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here

    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```

    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:

    ```javascript
    var fs = require('fs');

    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```

    you can chain the operations together using `then` from the returned promise:

    ```javascript
    var fs = require('fs');
    var readFile = RSVP.denodeify(fs.readFile);
    var writeFile = RSVP.denodeify(fs.writeFile);

    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  itemtype: method
  name: denodeify
  static: 1
  params:
  - name: nodeFunc
    description: |-
      a 'node-style' function that takes a callback as
      its last argument. The callback expects an error to be passed as its first
      argument (if an error occurred, otherwise null), and the value from the
      operation as its second argument ('function(err, value){ }').
    type: Function
  - name: options
    description: |-
      An optional paramter that if set
      to `true` causes the promise to fulfill with the callback's success arguments
      as an array. This is useful if the node function has multiple success
      paramters. If you set this paramter to an array with names, the promise will
      fulfill with a hash with these names as keys and the success parameters as
      values.
    type: Boolean|Array
    optional: true
  return:
    description: |-
      a function that wraps `nodeFunc` to return an
      `RSVP.Promise`
    type: Function
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/promise.js
  line: 184
  description: |-
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.

    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```

    Chaining
    --------

    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.

    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });

    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```

    Assimilation
    ------------

    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.

    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```

    If the assimliated promise rejects, then the downstream promise will also reject.

    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```

    Simple Example
    --------------

    Synchronous Example

    ```javascript
    var result;

    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```

    Errback Example

    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```

    Promise Example;

    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```

    Advanced Example
    --------------

    Synchronous Example

    ```javascript
    var author, books;

    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```

    Errback Example

    ```js

    function foundBooks(books) {

    }

    function failure(reason) {

    }

    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```

    Promise Example;

    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  itemtype: method
  name: then
  params:
  - name: onFulfillment
    description: ''
    type: Function
  - name: onRejection
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: RSVP.Promise
- file: bower_components/rsvp/lib/rsvp/promise.js
  line: 410
  description: |-
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.

    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }

    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }

    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  itemtype: method
  name: catch
  params:
  - name: onRejection
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: RSVP.Promise
- file: bower_components/rsvp/lib/rsvp/promise.js
  line: 442
  description: |-
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves

    Synchronous example:

    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }

    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```

    Asynchronous example:

    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  itemtype: method
  name: finally
  params:
  - name: callback
    description: ''
    type: Function
  - name: label
    description: |-
      optional string for labeling the promise.
      Useful for tooling.
    type: String
  return:
    description: ''
    type: Promise
  class: RSVP.Promise
- file: bower_components/rsvp/lib/rsvp/race.js
  line: 3
  description: This is a convenient alias for `RSVP.Promise.race`.
  itemtype: method
  name: race
  static: 1
  params:
  - name: array
    description: Array of promises.
    type: Array
  - name: label
    description: |-
      An optional label. This is useful
      for tooling.
    type: String
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/reject.js
  line: 3
  description: This is a convenient alias for `RSVP.Promise.reject`.
  itemtype: method
  name: reject
  static: 1
  params:
  - name: reason
    description: value that the returned promise will be rejected with.
    type: "*"
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: a promise rejected with the given `reason`.
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/resolve.js
  line: 3
  description: This is a convenient alias for `RSVP.Promise.resolve`.
  itemtype: method
  name: resolve
  static: 1
  params:
  - name: value
    description: value that the returned promise will be resolved with
    type: "*"
  - name: label
    description: |-
      optional string for identifying the returned promise.
      Useful for tooling.
    type: String
  return:
    description: |-
      a promise that will become fulfilled with the given
      `value`
    type: Promise
  class: RSVP
- file: bower_components/rsvp/lib/rsvp/rethrow.js
  line: 1
  description: |-
    `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.

    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `RSVP.rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.

    ```javascript
    function throws(){
      throw new Error('Whoops!');
    }

    var promise = new RSVP.Promise(function(resolve, reject){
      throws();
    });

    promise.catch(RSVP.rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```

    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  itemtype: method
  name: rethrow
  static: 1
  params:
  - name: reason
    description: reason the promise became rejected.
    type: Error
  throws:
    description: Error
  class: RSVP
- file: packages/ember-application/lib/system/application-instance.js
  line: 54
  description: The `Application` for which this is an instance.
  itemtype: property
  name: application
  type: Ember.Application
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 62
  description: |-
    The DOM events for which the event dispatcher should listen.

    By default, the application's `Ember.EventDispatcher` listens
    for a set of standard DOM events, such as `mousedown` and
    `keyup`, and delegates them to your application's `Ember.View`
    instances.
  access: private
  tagname: ''
  itemtype: property
  name: customEvents
  type: Object
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 75
  description: |-
    The root DOM element of the Application as an element or a
    [jQuery-compatible selector
    string](http://api.jquery.com/category/selectors/).
  access: private
  tagname: ''
  itemtype: property
  name: rootElement
  type: String|DOMElement
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 123
  description: |-
    Initialize the `Ember.ApplicationInstance` and return a promise that resolves
    with the instance itself when the boot process is complete.

    The primary task here is to run any registered instance initializers.

    See the documentation on `BootOptions` for the options it takes.
  access: private
  tagname: ''
  itemtype: method
  name: boot
  params:
  - name: options
    description: ''
  return:
    description: ''
    type: Promise<Ember.ApplicationInstance,Error>
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 144
  description: |-
    Unfortunately, a lot of existing code assumes booting an instance is
    synchronous – specifically, a lot of tests assumes the last call to
    `app.advanceReadiness()` or `app.reset()` will result in a new instance
    being fully-booted when the current runloop completes.

    We would like new code (like the `visit` API) to stop making this assumption,
    so we created the asynchronous version above that returns a promise. But until
    we have migrated all the code, we would have to expose this method for use
    *internally* in places where we need to boot an instance synchronously.
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 207
  description: |-
    This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
    when it has finished creating the root View. By default, we simply take the
    view and append it to the `rootElement` specified on the Application.

    In cases like FastBoot and testing, we can override this hook and implement
    custom behavior, such as serializing to a string and sending over an HTTP
    socket rather than appending to DOM.
  params:
  - name: view
    description: the root-most view
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 223
  description: |-
    Tells the router to start routing. The router will ask the location for the
    current URL of the page to determine the initial URL to start routing to.
    To start the app at a specific URL, call `handleURL` instead.
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 236
  access: private
  tagname: |-
    Sets up the router, initializing the child router and configuring the
    location before routing begins.

    Because setup should only occur once, multiple calls to `setupRouter`
    beyond the first call have no effect.
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 253
  description: |-
    Directs the router to route to a particular URL. This is useful in tests,
    for example, to tell the app to start at a particular URL.
  params:
  - name: url
    description: the URL the router should route to
    type: String
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 267
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 281
  access: private
  tagname: ''
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 292
  description: |-
    Returns the current URL of the app instance. This is useful when your
    app does not update the browsers URL bar (i.e. it uses the `'none'`
    location adapter).
  access: public
  tagname: ''
  return:
    description: the current URL
    type: String
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 308
  description: |-
    Navigate the instance to a particular URL. This is useful in tests, for
    example, or to tell the app to start at a particular URL. This method
    returns a promise that resolves with the app instance when the transition
    is complete, or rejects if the transion was aborted due to an error.
  access: public
  tagname: ''
  params:
  - name: url
    description: the destination URL
    type: String
  return:
    description: ''
    type: Promise
  class: Ember.ApplicationInstance
  module: ember
  submodule: ember-application
- file: packages/ember-application/lib/system/application-instance.js
  line: 374
  description: |-
    Provide a specific instance of jQuery. This is useful in conjunction with
    the `document` option, as it allows you to use a copy of `jQuery` that is
    appropriately bound to the foreign `document` (e.g. a jsdom).

    This is highly experimental and support very incomplete at the moment.
  itemtype: property
  name: jQuery
  type: Object
  default: auto-detected
  access: private
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 388
  description: |-
    Interactive mode: whether we need to set up event delegation and invoke
    lifecycle callbacks on Components.
  itemtype: property
  name: isInteractive
  type: boolean
  default: auto-detected
  access: private
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 399
  description: |-
    Run in a full browser environment.

    When this flag is set to `false`, it will disable most browser-specific
    and interactive features. Specifically:

    * It does not use `jQuery` to append the root view; the `rootElement`
      (either specified as a subsequent option or on the application itself)
      must already be an `Element` in the given `document` (as opposed to a
      string selector).

    * It does not set up an `EventDispatcher`.

    * It does not run any `Component` lifecycle hooks (such as `didInsertElement`).

    * It sets the `location` option to `"none"`. (If you would like to use
      the location adapter specified in the app's router instead, you can also
      specify `{ location: null }` to specifically opt-out.)
  itemtype: property
  name: isBrowser
  type: boolean
  default: auto-detected
  access: public
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 435
  description: |-
    Disable rendering completely.

    When this flag is set to `true`, it will disable the entire rendering
    pipeline. Essentially, this puts the app into "routing-only" mode. No
    templates will be rendered, and no Components will be created.
  itemtype: property
  name: shouldRender
  type: boolean
  default: 'true'
  access: public
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 458
  description: |-
    If present, render into the given `Document` object instead of the
    global `window.document` object.

    In practice, this is only useful in non-browser environment or in
    non-interactive mode, because Ember's `jQuery` dependency is
    implicitly bound to the current document, causing event delegation
    to not work properly when the app is rendered into a foreign
    document object (such as an iframe's `contentDocument`).

    In non-browser mode, this could be a "`Document`-like" object as
    Ember only interact with a small subset of the DOM API in non-
    interactive mode. While the exact requirements have not yet been
    formalized, the `SimpleDOM` library's implementation is known to
    work.
  itemtype: property
  name: document
  type: Document
  default: the global `document` object
  access: public
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 485
  description: |-
    If present, overrides the application's `rootElement` property on
    the instance. This is useful for testing environment, where you
    might want to append the root view to a fixture area.

    In non-browser mode, because Ember does not have access to jQuery,
    this options must be specified as a DOM `Element` object instead of
    a selector string.

    See the documentation on `Ember.Applications`'s `rootElement` for
    details.
  itemtype: property
  name: rootElement
  type: String|Element
  default: 'null'
  access: public
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application-instance.js
  line: 510
  description: |-
    If present, overrides the router's `location` property with this
    value. This is useful for environments where trying to modify the
    URL would be inappropriate.
  itemtype: property
  name: location
  type: string
  default: 'null'
  access: public
  tagname: ''
  class: "@Ember.ApplicationInstance.BootOptions"
  module: ember
  submodule: ember-application
  namespace: "@Ember.ApplicationInstance"
- file: packages/ember-application/lib/system/application.js
  line: 219
  description: |-
    The root DOM element of the Application. This can be specified as an
    element or a
    [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).

    This is the element that will be passed to the Application's,
    `eventDispatcher`, which sets up the listeners for event delegation. Every
    view in your application should be a child of the element you specify here.
  itemtype: property
  name: rootElement
  type: DOMElement
  default: "'body'"
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 235
  description: |-
    The `Ember.EventDispatcher` responsible for delegating events to this
    application's views.

    The event dispatcher is created by the application at initialization time
    and sets up event listeners on the DOM element described by the
    application's `rootElement` property.

    See the documentation for `Ember.EventDispatcher` for more information.
  itemtype: property
  name: eventDispatcher
  type: Ember.EventDispatcher
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 252
  description: |-
    The DOM events for which the event dispatcher should listen.

    By default, the application's `Ember.EventDispatcher` listens
    for a set of standard DOM events, such as `mousedown` and
    `keyup`, and delegates them to your application's `Ember.View`
    instances.

    If you would like additional bubbling events to be delegated to your
    views, set your `Ember.Application`'s `customEvents` property
    to a hash containing the DOM event name as the key and the
    corresponding view method name as the value. Setting an event to
    a value of `null` will prevent a default event listener from being
    added for that event.

    To add new events to be listened to:

    ```javascript
    var App = Ember.Application.create({
      customEvents: {
        // add support for the paste event
        paste: 'paste'
      }
    });
    ```

    To prevent default events from being listened to:

    ```javascript
    var App = Ember.Application.create({
      customEvents: {
        // remove support for mouseenter / mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
  itemtype: property
  name: customEvents
  type: Object
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 296
  description: |-
    Whether the application should automatically start routing and render
    templates to the `rootElement` on DOM ready. While default by true,
    other environments such as FastBoot or a testing harness can set this
    property to `false` and control the precise timing and behavior of the boot
    process.
  itemtype: property
  name: autoboot
  type: Boolean
  default: 'true'
  access: private
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 310
  description: |-
    Whether the application should be configured for the legacy "globals mode".
    Under this mode, the Application object serves as a global namespace for all
    classes.

    ```javascript
    var App = Ember.Application.create({
      ...
    });

    App.Router.reopen({
      location: 'none'
    });

    App.Router.map({
      ...
    });

    App.MyComponent = Ember.Component.extend({
      ...
    });
    ```

    This flag also exposes other internal APIs that assumes the existence of
    a special "default instance", like `App.__container__.lookup(...)`.

    This option is currently not configurable, its value is derived from
    the `autoboot` flag – disabling `autoboot` also implies opting-out of
    globals mode support, although they are ultimately orthogonal concerns.

    Some of the global modes features are already deprecated in 1.x. The
    existence of this flag is to untangle the globals mode code paths from
    the autoboot code paths, so that these legacy features can be reviewed
    for deprecation/removal separately.

    Forcing the (autoboot=true, _globalsMode=false) here and running the tests
    would reveal all the places where we are still relying on these legacy
    behavior internally (mostly just tests).
  itemtype: property
  name: _globalsMode
  type: Boolean
  default: 'true'
  access: private
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 393
  description: Build and configure the registry for the current application.
  access: private
  tagname: ''
  itemtype: method
  name: buildRegistry
  return:
    description: the configured registry
    type: Ember.Registry
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 406
  description: Create an ApplicationInstance for this application.
  access: private
  tagname: ''
  itemtype: method
  name: buildInstance
  return:
    description: the application instance
    type: Ember.ApplicationInstance
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 418
  description: |-
    Enable the legacy globals mode by allowing this application to act
    as a global namespace. See the docs on the `_globalsMode` property
    for details.

    Most of these features are already deprecated in 1.x, so we can
    stop using them internally and try to remove them.
  access: private
  tagname: ''
  itemtype: method
  name: _prepareForGlobalsMode
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 466
  description: |-
    Automatically kick-off the boot process for the application once the
    DOM has become ready.

    The initialization itself is scheduled on the actions queue which
    ensures that code-loading finishes before booting.

    If you are asynchronously loading code, you should call `deferReadiness()`
    to defer booting, and then call `advanceReadiness()` once all of your code
    has finished loading.
  access: private
  tagname: ''
  itemtype: method
  name: waitForDOMReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 488
  description: |-
    This is the autoboot flow:

    1. Boot the app by calling `this.boot()`
    2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
    3. Boot the instance by calling `instance.boot()`
    4. Invoke the `App.ready()` callback
    5. Kick-off routing on the instance

    Ideally, this is all we would need to do:

    ```javascript
    _autoBoot() {
      this.boot().then(() => {
        let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
        return instance.boot();
      }).then((instance) => {
        App.ready();
        instance.startRouting();
      });
    }
    ```

    Unfortunately, we cannot actually write this because we need to participate
    in the "synchronous" boot process. While the code above would work fine on
    the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
    boot a new instance synchronously (see the documentation on `_bootSync()`
    for details).

    Because of this restriction, the actual logic of this method is located
    inside `didBecomeReady()`.
  access: private
  tagname: ''
  itemtype: method
  name: domReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 533
  description: |-
    Use this to defer readiness until some condition is true.

    Example:

    ```javascript
    var App = Ember.Application.create();

    App.deferReadiness();

    // Ember.$ is a reference to the jQuery object/function
    Ember.$.getJSON('/auth-token', function(token) {
      App.token = token;
      App.advanceReadiness();
    });
    ```

    This allows you to perform asynchronous setup logic and defer
    booting your application until the setup has finished.

    However, if the setup requires a loading UI, it might be better
    to use the router for this purpose.
  itemtype: method
  name: deferReadiness
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 565
  description: |-
    Call `advanceReadiness` after any asynchronous setup logic has completed.
    Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
    or the application will never become ready and routing will not begin.
  itemtype: method
  name: advanceReadiness
  see:
  - "{Ember.Application#deferReadiness}"
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 583
  description: |-
    Initialize the application and return a promise that resolves with the `Ember.Application`
    object when the boot process is complete.

    Run any application initializers and run the application load hook. These hooks may
    choose to defer readiness. For example, an authentication hook might want to defer
    readiness until the auth token has been retrieved.

    By default, this method is called automatically on "DOM ready"; however, if autoboot
    is disabled, this is automatically called when the first application instance is
    created via `visit`.
  access: private
  tagname: ''
  itemtype: method
  name: boot
  return:
    description: ''
    type: Promise<Ember.Application,Error>
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 612
  description: |-
    Unfortunately, a lot of existing code assumes the booting process is
    "synchronous". Specifically, a lot of tests assumes the last call to
    `app.advanceReadiness()` or `app.reset()` will result in the app being
    fully-booted when the current runloop completes.

    We would like new code (like the `visit` API) to stop making this assumption,
    so we created the asynchronous version above that returns a promise. But until
    we have migrated all the code, we would have to expose this method for use
    *internally* in places where we need to boot an app "synchronously".
  access: private
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 649
  description: |-
    Reset the application. This is typically used only in tests. It cleans up
    the application in the following order:

    1. Deactivate existing routes
    2. Destroy all objects in the container
    3. Create a new application container
    4. Re-route to the existing url

    Typical Example:

    ```javascript
    var App;

    run(function() {
      App = Ember.Application.create();
    });

    module('acceptance test', {
      setup: function() {
        App.reset();
      }
    });

    test('first test', function() {
      // App is freshly reset
    });

    test('second test', function() {
      // App is again freshly reset
    });
    ```

    Advanced Example:

    Occasionally you may want to prevent the app from initializing during
    setup. This could enable extra configuration, or enable asserting prior
    to the app becoming ready.

    ```javascript
    var App;

    run(function() {
      App = Ember.Application.create();
    });

    module('acceptance test', {
      setup: function() {
        run(function() {
          App.reset();
          App.deferReadiness();
        });
      }
    });

    test('first test', function() {
      ok(true, 'something before app is initialized');

      run(function() {
        App.advanceReadiness();
      });

      ok(true, 'something after app is initialized');
    });
    ```
  itemtype: method
  name: reset
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 740
  access: private
  tagname: ''
  itemtype: method
  name: instanceInitializer
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 748
  access: private
  tagname: ''
  itemtype: method
  name: runInitializers
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 773
  access: private
  tagname: ''
  since: 1.12.0
  itemtype: method
  name: runInstanceInitializers
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 801
  access: private
  tagname: ''
  itemtype: method
  name: didBecomeReady
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 860
  description: |-
    Called when the Application has become ready, immediately before routing
    begins. The call will be delayed until the DOM has become ready.
  itemtype: event
  name: ready
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 869
  description: Set this to provide an alternate class to `Ember.DefaultResolver`
  deprecated: true
  deprecationMessage: Use 'Resolver' instead
  itemtype: property
  name: resolver
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 879
  description: Set this to provide an alternate class to `Ember.DefaultResolver`
  itemtype: property
  name: resolver
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 920
  description: |-
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.

    Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.

    * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.

    ```javascript
    Ember.Application.instanceInitializer({
      name: 'namedinstanceInitializer',

      initialize: function(application) {
        Ember.debug('Running namedInitializer!');
      }
    });
    ```

    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.

    * See Ember.Application.initializer for discussion on the usage of before
    and after.

    Example instanceInitializer to preload data into the store.

    ```javascript
    Ember.Application.initializer({
      name: 'preload-data',

      initialize: function(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
        //
        // Grab the encoded data from the meta tag
        userConfigEncoded = Ember.$('head meta[name=app-user-config]').attr('content');
        // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
        // Lookup the store
        store = application.lookup('service:store');
        // Push the encoded JSON into the store
        store.pushPayload(userConfig);
      }
    });
    ```
  itemtype: method
  name: instanceInitializer
  params:
  - name: instanceInitializer
    description: ''
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 988
  description: |-
    Boot a new instance of `Ember.ApplicationInstance` for the current
    application and navigate it to the given `url`. Returns a `Promise` that
    resolves with the instance when the initial routing and rendering is
    complete, or rejects with any error that occured during the boot process.

    When `autoboot` is disabled, calling `visit` would first cause the
    application to boot, which runs the application initializers.

    This method also takes a hash of boot-time configuration options for
    customizing the instance's behavior. See the documentation on
    `Ember.ApplicationInstance.BootOptions` for details.

    `Ember.ApplicationInstance.BootOptions` is an interface class that exists
    purely to document the available options; you do not need to construct it
    manually. Simply pass a regular JavaScript object containing of the
    desired options:

    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```

    ### Supported Scenarios

    While the `BootOptions` class exposes a large number of knobs, not all
    combinations of them are valid; certain incompatible combinations might
    result in unexpected behavior.

    For example, booting the instance in the full browser environment
    while specifying a foriegn `document` object (e.g. `{ isBrowser: true,
    document: iframe.contentDocument }`) does not work correctly today,
    largely due to Ember's jQuery dependency.

    Currently, there are three officially supported scenarios/configurations.
    Usages outside of these scenarios are not guaranteed to work, but please
    feel free to file bug reports documenting your experience and any issues
    you encountered to help expand support.

    #### Browser Applications (Manual Boot)

    The setup is largely similar to how Ember works out-of-the-box. Normally,
    Ember will boot a default instance for your Application on "DOM ready".
    However, you can customize this behavior by disabling `autoboot`.

    For example, this allows you to render a miniture demo of your application
    into a specific area on your marketing website:

    ```javascript
    import MyApp from 'my-app';

    $(function() {
      let App = MyApp.create({ autoboot: false });

      let options = {
        // Override the router's location adapter to prevent it from updating
        // the URL in the address bar
        location: 'none',

        // Override the default `rootElement` on the app to render into a
        // specific `div` on the page
        rootElement: '#demo'
      };

      // Start the app at the special demo URL
      App.visit('/demo', options);
    });
    ````

    Or perhaps you might want to boot two instances of your app on the same
    page for a split-screen multiplayer experience:

    ```javascript
    import MyApp from 'my-app';

    $(function() {
      let App = MyApp.create({ autoboot: false });

      let sessionId = MyApp.generateSessionID();

      let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
      let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });

      Promise.all([player1, player2]).then(() => {
        // Both apps have completed the initial render
        $('#loading').fadeOut();
      });
    });
    ```

    Do note that each app instance maintains their own registry/container, so
    they will run in complete isolation by default.

    #### Server-Side Rendering (also known as FastBoot)

    This setup allows you to run your Ember app in a server environment using
    Node.js and render its content into static HTML for SEO purposes.

    ```javascript
    const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);

    function renderURL(url) {
      let dom = new SimpleDOM.Document();
      let rootElement = dom.body;
      let options = { isBrowser: false, document: dom, rootElement: rootElement };

      return MyApp.visit(options).then(instance => {
        try {
          return HTMLSerializer.serialize(rootElement.firstChild);
        } finally {
          instance.destroy();
        }
      });
    }
    ```

    In this scenario, because Ember does not have access to a global `document`
    object in the Node.js environment, you must provide one explicitly. In practice,
    in the non-browser environment, the stand-in `document` object only need to
    implement a limited subset of the full DOM API. The `SimpleDOM` library is known
    to work.

    Since there is no access to jQuery in the non-browser environment, you must also
    specify a DOM `Element` object in the same `document` for the `rootElement` option
    (as opposed to a selector string like `"body"`).

    See the documentation on the `isBrowser`, `document` and `rootElement` properties
    on `Ember.ApplicationInstance.BootOptions` for details.

    #### Server-Side Resource Discovery

    This setup allows you to run the routing layer of your Ember app in a server
    environment using Node.js and completely disable rendering. This allows you
    to simulate and discover the resources (i.e. AJAX requests) needed to fufill
    a given request and eagerly "push" these resources to the client.

    ```app/initializers/network-service.js
    import BrowserNetworkService from 'app/services/network/browser';
    import NodeNetworkService from 'app/services/network/node';

    // Inject a (hypothetical) service for abstracting all AJAX calls and use
    // the appropiate implementaion on the client/server. This also allows the
    // server to log all the AJAX calls made during a particular request and use
    // that for resource-discovery purpose.

    export function initialize(application) {
      if (window) { // browser
        application.register('service:network', BrowserNetworkService);
      } else { // node
        application.register('service:network', NodeNetworkService);
      }

      application.inject('route', 'network', 'service:network');
    };

    export default {
      name: 'network-service',
      initialize: initialize
    };
    ```

    ```app/routes/post.js
    import Ember from 'ember';

    // An example of how the (hypothetical) service is used in routes.

    export default Ember.Route.extend({
      model(params) {
        return this.network.fetch(`/api/posts/${params.post_id}.json`);
      },

      afterModel(post) {
        if (post.isExternalContent) {
          return this.network.fetch(`/api/external/?url=${post.externalURL}`);
        } else {
          return post;
        }
      }
    });
    ```

    ```javascript
    // Finally, put all the pieces together

    function discoverResourcesFor(url) {
      return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
        let networkService = instance.lookup('service:network');
        return networkService.requests; // => { "/api/posts/123.json": "..." }
      });
    }
    ```
  itemtype: method
  name: visit
  params:
  - name: url
    description: The initial URL to navigate to
    type: String
  - name: options
    description: ''
    type: Ember.ApplicationInstance.BootOptions
  return:
    description: ''
    type: Promise<Ember.ApplicationInstance, Error>
  access: private
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 1199
  description: |-
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.

    Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.

    * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.

    ```javascript
    Ember.Application.initializer({
      name: 'namedInitializer',

      initialize: function(application) {
        Ember.debug('Running namedInitializer!');
      }
    });
    ```

    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.

    An example of ordering initializers, we create an initializer named `first`:

    ```javascript
    Ember.Application.initializer({
      name: 'first',

      initialize: function(application) {
        Ember.debug('First initializer!');
      }
    });

    // DEBUG: First initializer!
    ```

    We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:

    ```javascript
    Ember.Application.initializer({
      name: 'second',
      after: 'first',

      initialize: function(application) {
        Ember.debug('Second initializer!');
      }
    });

    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```

    Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:

    ```javascript
    Ember.Application.initializer({
      name: 'pre',
      before: 'first',

      initialize: function(application) {
        Ember.debug('Pre initializer!');
      }
    });

    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```

    Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:

    ```javascript
    Ember.Application.initializer({
      name: 'post',
      after: ['first', 'second'],

      initialize: function(application) {
        Ember.debug('Post initializer!');
      }
    });

    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```

    * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.

    Example of using `application` to register an adapter:

    ```javascript
    Ember.Application.initializer({
      name: 'api-adapter',

      initialize: function(application) {
        application.register('api-adapter:main', ApiAdapter);
      }
    });
    ```
  itemtype: method
  name: initializer
  params:
  - name: initializer
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 1319
  description: |-
    This creates a registry with the default Ember naming conventions.

    It also configures the registry:

    * registered views are created every time they are looked up (they are
      not singletons)
    * registered templates are not factories; the registered value is
      returned directly.
    * the router receives the application as its `namespace` property
    * all controllers receive the router as their `target` and `controllers`
      properties
    * all controllers receive the application as their `namespace` property
    * the application view receives the application controller as its
      `controller` property
    * the application view receives the application template as its
      `defaultTemplate` property
  access: public
  tagname: ''
  itemtype: method
  name: buildRegistry
  static: 1
  params:
  - name: namespace
    description: |-
      the application for which to
        build the registry
    type: Ember.Application
  return:
    description: the built registry
    type: Ember.Registry
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/application.js
  line: 1426
  description: |-
    This function defines the default lookup rules for container lookups:

    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container

    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  access: private
  tagname: ''
  itemtype: method
  name: resolverFor
  params:
  - name: namespace
    description: the namespace to look for classes
    type: Ember.Namespace
  return:
    description: the resolved value for a given lookup
    type: "*"
  class: Ember.Application
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 111
  description: |-
    This will be set to the Application instance when it is
    created.
  itemtype: property
  name: namespace
  access: public
  tagname: ''
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 164
  description: |-
    This method is called via the container's resolver method.
    It parses the provided `fullName` and then looks up and
    returns the appropriate template or class.
  itemtype: method
  name: resolve
  params:
  - name: fullName
    description: the lookup string
    type: String
  return:
    description: the resolved factory
    type: Object
  access: public
  tagname: ''
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 196
  description: |-
    Convert the string name of the form 'type:name' to
    a Javascript object with the parsed aspects of the name
    broken out.
  access: public
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: parseName
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 252
  description: |-
    Returns a human-readable description for a fullName. Used by the
    Application namespace in assertions to describe the
    precise name of the class that Ember is looking for, rather than
    container keys.
  access: public
  tagname: ''
  params:
  - name: fullName
    description: the lookup string
    type: String
  itemtype: method
  name: lookupDescription
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 284
  description: |-
    Given a parseName object (output from `parseName`), apply
    the conventions expected by `Ember.Router`
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: useRouterNaming
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 300
  description: Look up the template in Ember.TEMPLATES
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveTemplate
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 322
  description: Lookup the view using `resolveOther`
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveView
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 336
  description: Lookup the controller using `resolveOther`
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveController
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 349
  description: Lookup the route using `resolveOther`
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveRoute
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 363
  description: Lookup the model on the Application namespace
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveModel
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 378
  description: |-
    Look up the specified object (from parsedName) on the appropriate
    namespace (usually on the Application)
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveHelper
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 391
  description: |-
    Look up the specified object (from parsedName) on the appropriate
    namespace (usually on the Application)
  access: public
  tagname: ''
  params:
  - name: parsedName
    description: |-
      a parseName object with the parsed
        fullName lookup string
    type: Object
  itemtype: method
  name: resolveOther
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 412
  itemtype: method
  name: _logLookup
  params:
  - name: found
    description: ''
    type: Boolean
  - name: parsedName
    description: ''
    type: Object
  access: private
  tagname: ''
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 436
  description: Used to iterate all items of a given type.
  itemtype: method
  name: knownForType
  params:
  - name: type
    description: the type to search for
    type: String
  access: private
  tagname: ''
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-application/lib/system/resolver.js
  line: 463
  description: |-
    Converts provided name from the backing namespace into a container lookup name.

    Examples:

    App.FooBarHelper -> helper:foo-bar
    App.THelper -> helper:t
  itemtype: method
  name: translateToContainerFullname
  params:
  - name: type
    description: ''
    type: String
  - name: name
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.DefaultResolver
  module: ember
  submodule: ember-application
  namespace: Ember
- file: packages/ember-debug/lib/deprecate.js
  line: 86
  description: |-
    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only). Ember build tools will remove any calls to
    `Ember.deprecate()` when doing a production build.
  itemtype: method
  name: deprecate
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: test
    description: |-
      A boolean. If falsy, the deprecation
        will be displayed.
    type: Boolean
  - name: options
    description: |-
      An object that can be used to pass
        in a `url` to the transition guide on the emberjs.com website, and a unique
        `id` for this deprecation. The `id` can be used by Ember debugging tools
        to change the behavior (raise, log or silence) for that specific deprecation.
        The `id` should be namespaced by dots, e.g. "view.helper.select".
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 32
  description: |-
    Define an assertion that will throw an exception if the condition is not
    met. Ember build tools will remove any calls to `Ember.assert()` when
    doing a production build. Example:

    ```javascript
    // Test for truthiness
    Ember.assert('Must pass a valid object', obj);

    // Fail unconditionally
    Ember.assert('This code path should never be run');
    ```
  itemtype: method
  name: assert
  params:
  - name: desc
    description: |-
      A description of the assertion. This will become
        the text of the Error thrown if the assertion fails.
    type: String
  - name: test
    description: |-
      Must be truthy for the assertion to pass. If
        falsy, an exception will be thrown.
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 72
  description: |-
    Display a debug notice. Ember build tools will remove any calls to
    `Ember.debug()` when doing a production build.

    ```javascript
    Ember.debug('I\'m a debug notice!');
    ```
  itemtype: method
  name: debug
  params:
  - name: message
    description: A debug message to display.
    type: String
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 88
  description: Display an info notice.
  itemtype: method
  name: info
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 98
  description: |-
    Alias an old, deprecated method with its new counterpart.

    Display a deprecation warning with the provided message and a stack trace
    (Chrome and Firefox only) when the assigned method is called.

    Ember build tools will not remove calls to `Ember.deprecateFunc()`, though
    no warnings will be shown in production.

    ```javascript
    Ember.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);
    ```
  itemtype: method
  name: deprecateFunc
  params:
  - name: message
    description: A description of the deprecation.
    type: String
  - name: options
    description: The options object for Ember.deprecate.
    type: Object
    optional: true
  - name: func
    description: The new function called to replace its deprecated counterpart.
    type: Function
  return:
    description: a new function that wrapped the original function with a deprecation
      warning
    type: Function
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 135
  description: |-
    Run a function meant for debugging. Ember build tools will remove any calls to
    `Ember.runInDebug()` when doing a production build.

    ```javascript
    Ember.runInDebug(() => {
      Ember.Component.reopen({
        didInsertElement() {
          console.log("I'm happy");
        }
      });
    });
    ```
  itemtype: method
  name: runInDebug
  params:
  - name: func
    description: The function to be executed.
    type: Function
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 166
  description: |-
    Will call `Ember.warn()` if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or
    any specific FEATURES flag is truthy.

    This method is called automatically in debug canary builds.
  access: private
  tagname: ''
  itemtype: method
  name: _warnIfUsingStrippedFeatureFlags
  return:
    description: ''
    type: Void
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 228
  description: |-
    Allows for runtime registration of handler functions that override the default deprecation behavior.
    Deprecations are invoked by calls to [Ember.deprecate](http://emberjs.com/api/classes/Ember.html#method_deprecate).
    The following example demonstrates its usage by registering a handler that throws an error if the
    message contains the word "should", otherwise defers to the default handler.

    ```javascript
    Ember.Debug.registerDeprecationHandler((message, options, next) => {
      if (message.indexOf('should') !== -1) {
        throw new Error(`Deprecation message with should: ${message}`);
      } else {
        // defer to whatever handler was registered before this one
        next(message, options);
      }
    }
    ```

    The handler function takes the following arguments:

    <ul>
      <li> <code>message</code> - The message received from the deprecation call. </li>
      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - an id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
          <li> <code>until</code> - is the version number Ember the feature and deprecation will be removed in.</li>
        </ul>
      <li> <code>next</code> - a function that calls into the previously registered handler.</li>
    </ul>
  access: public
  tagname: ''
  static: 1
  itemtype: method
  name: registerDeprecationHandler
  params:
  - name: handler
    description: a function to handle deprecation calls
    type: Function
  since: 2.1.0
  class: Ember.Debug
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/main.js
  line: 264
  description: |-
    Allows for runtime registration of handler functions that override the default warning behavior.
    Warnings are invoked by calls made to [Ember.warn](http://emberjs.com/api/classes/Ember.html#method_warn).
    The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
    default warning behavior.

    ```javascript
    // next is not called, so no warnings get the default behavior
    Ember.Debug.registerWarnHandler(() => {});
    ```

    The handler function takes the following arguments:

    <ul>
      <li> <code>message</code> - The message received from the warn call. </li>
      <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - an id of the warning in the form of <code>package-name.specific-warning</code>.</li>
        </ul>
      <li> <code>next</code> - a function that calls into the previously registered handler.</li>
    </ul>
  access: public
  tagname: ''
  static: 1
  itemtype: method
  name: registerWarnHandler
  params:
  - name: handler
    description: a function to handle warnings
    type: Function
  since: 2.1.0
  class: Ember.Debug
  module: ember
  submodule: ember-debug
- file: packages/ember-debug/lib/warn.js
  line: 26
  description: |-
    Display a warning with the provided message. Ember build tools will
    remove any calls to `Ember.warn()` when doing a production build.
  itemtype: method
  name: warn
  params:
  - name: message
    description: A warning to display.
    type: String
  - name: test
    description: |-
      An optional boolean. If falsy, the warning
        will be displayed.
    type: Boolean
  - name: options
    description: |-
      An ojbect that can be used to pass a unique
        `id` for this warning.  The `id` can be used by Ember debugging tools
        to change the behavior (raise, log, or silence) for that specific warning.
        The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-debug
- file: packages/ember-extension-support/lib/container_debug_adapter.js
  line: 52
  description: |-
    The container of the application being debugged.
    This property will be injected
    on creation.
  itemtype: property
  name: container
  default: 'null'
  access: public
  tagname: ''
  class: Ember.ContainerDebugAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/container_debug_adapter.js
  line: 63
  description: |-
    The resolver instance of the application
    being debugged. This property will be injected
    on creation.
  itemtype: property
  name: resolver
  default: 'null'
  access: public
  tagname: ''
  class: Ember.ContainerDebugAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/container_debug_adapter.js
  line: 74
  description: |-
    Returns true if it is possible to catalog a list of available
    classes in the resolver for a given type.
  itemtype: method
  name: canCatalogEntriesByType
  params:
  - name: type
    description: The type. e.g. "model", "controller", "route"
    type: String
  return:
    description: whether a list is available for this type.
    type: Boolean
  access: public
  tagname: ''
  class: Ember.ContainerDebugAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/container_debug_adapter.js
  line: 91
  description: Returns the available classes a given type.
  itemtype: method
  name: catalogEntriesByType
  params:
  - name: type
    description: The type. e.g. "model", "controller", "route"
    type: String
  return:
    description: An array of strings.
    type: Array
  access: public
  tagname: ''
  class: Ember.ContainerDebugAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 62
  description: |-
    The container of the application being debugged.
    This property will be injected
    on creation.
  itemtype: property
  name: container
  default: 'null'
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 75
  description: |-
    The container-debug-adapter which is used
    to list all models.
  itemtype: property
  name: containerDebugAdapter
  default: undefined
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 86
  description: |-
    Number of attributes to send
    as columns. (Enough to make the record
    identifiable).
  access: private
  tagname: ''
  itemtype: property
  name: attributeLimit
  default: '3'
  since: 1.3.0
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 98
  description: |-
    Ember Data > v1.0.0-beta.18
    requires string model names to be passed
    around instead of the actual factories.

    This is a stamp for the Ember Inspector
    to differentiate between the versions
    to be able to support older versions too.
  access: public
  tagname: ''
  itemtype: property
  name: acceptsModelName
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 112
  description: |-
    Stores all methods that clear observers.
    These methods will be called on destruction.
  access: private
  tagname: ''
  itemtype: property
  name: releaseMethods
  since: 1.3.0
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 122
  description: |-
    Specifies how records can be filtered.
    Records returned will need to have a `filterValues`
    property with a key for every name in the returned array.
  access: public
  tagname: ''
  itemtype: method
  name: getFilters
  return:
    description: |-
      List of objects defining filters.
       The object should have a `name` and `desc` property.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 136
  description: Fetch the model types and observe them for changes.
  access: public
  tagname: ''
  itemtype: method
  name: watchModelTypes
  params:
  - name: typesAdded
    description: |-
      Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
    type: Function
  - name: typesUpdated
    description: |-
      Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
    type: Function
  return:
    description: Method to call to remove all observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 179
  description: Fetch the records of a given type and observe them for changes.
  access: public
  tagname: ''
  itemtype: method
  name: watchRecords
  params:
  - name: modelName
    description: The model name
    type: String
  - name: recordsAdded
    description: |-
      Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} key and value of a table cell
        object: {Object} the actual record object
    type: Function
  - name: recordsUpdated
    description: |-
      Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
    type: Function
  - name: recordsRemoved
    description: |-
      Callback to call when a record has removed.
      Takes the following parameters:
        index: the array index where the records were removed
        count: the number of records removed
    type: Function
  return:
    description: Method to call to remove all observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 247
  description: Clear all observers before destruction
  access: private
  tagname: ''
  itemtype: method
  name: willDestroy
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 259
  description: |-
    Detect whether a class is a model.

    Test that against the model class
    of your persistence library
  access: private
  tagname: ''
  itemtype: method
  name: detect
  params:
  - name: klass
    description: The class to test
    type: Class
  return:
    description: boolean Whether the class is a model class or not
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 274
  description: Get the columns for a given model type.
  access: private
  tagname: ''
  itemtype: method
  name: columnsForType
  params:
  - name: type
    description: The model type
    type: Class
  return:
    description: |-
      An array of columns of the following format:
       name: {String} name of the column
       desc: {String} Humanized description (what would show in a table column name)
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 288
  description: Adds observers to a model type class.
  access: private
  tagname: ''
  itemtype: method
  name: observeModelType
  params:
  - name: modelName
    description: The model type name
    type: String
  - name: typesUpdated
    description: Called when a type is modified.
    type: Function
  return:
    description: The function to call to remove observers
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 322
  description: Wraps a given model type and observes changes to it.
  access: private
  tagname: ''
  itemtype: method
  name: wrapModelType
  params:
  - name: klass
    description: A model class
    type: Class
  - name: modelName
    description: Name of the class
    type: String
  return:
    description: |-
      contains the wrapped type and the function to remove observers
      Format:
        type: {Object} the wrapped type
          The wrapped type has the following format:
            name: {String} name of the type
            count: {Integer} number of records available
            columns: {Columns} array of columns to describe the record
            object: {Class} the actual Model type class
        release: {Function} The function to remove observers
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 355
  description: Fetches all models defined in the application.
  access: private
  tagname: ''
  itemtype: method
  name: getModelTypes
  return:
    description: Array of model types
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 386
  description: |-
    Loops over all namespaces and all objects
    attached to them
  access: private
  tagname: ''
  itemtype: method
  name: _getObjectsOnNamespaces
  return:
    description: Array of model type strings
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 415
  description: Fetches all loaded records for a given type.
  access: private
  tagname: ''
  itemtype: method
  name: getRecords
  return:
    description: |-
      An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 428
  description: Wraps a record and observers changes to it.
  access: private
  tagname: ''
  itemtype: method
  name: wrapRecord
  params:
  - name: record
    description: The record instance.
    type: Object
  return:
    description: |-
      The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 449
  description: Gets the values for each column.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordColumnValues
  return:
    description: |-
      Keys should match column names defined
      by the model type.
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 461
  description: Returns keywords to match when searching records.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordKeywords
  return:
    description: Relevant keywords for search.
    type: Array
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 472
  description: Returns the values of filters defined by `getFilters`.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordFilterValues
  params:
  - name: record
    description: The record instance
    type: Object
  return:
    description: The filter values
    type: Object
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 484
  description: Each record can have a color that represents its state.
  access: private
  tagname: ''
  itemtype: method
  name: getRecordColor
  params:
  - name: record
    description: The record instance
    type: Object
  return:
    description: |-
      The record's color
        Possible options: black, red, blue, green
    type: String
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-extension-support/lib/data_adapter.js
  line: 497
  description: |-
    Observes all relevant properties and re-sends the wrapped record
    when a change occurs.
  access: private
  tagname: ''
  itemtype: method
  name: observerRecord
  params:
  - name: record
    description: The record instance
    type: Object
  - name: recordUpdated
    description: The callback to call when a record is updated.
    type: Function
  return:
    description: The function to call to remove all observers.
    type: Function
  class: Ember.DataAdapter
  module: ember
  submodule: ember-extension-support
  namespace: Ember
- file: packages/ember-htmlbars/lib/helpers/-concat.js
  line: 6
  description: |-
    Concatenates input params together.

    Example:

    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}

    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  access: public
  tagname: ''
  itemtype: method
  name: concat
  since: 1.13.0
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/-html-safe.js
  line: 3
  description: |-
    This private helper is used internally to handle `isVisible: false` for
    Ember.View and Ember.Component.
  access: private
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
- file: packages/ember-htmlbars/lib/helpers/each-in.js
  line: 8
  description: |-
    The `{{each-in}}` helper loops over properties on an object. It is unbound,
    in that new (or removed) properties added to the target object will not be
    rendered.

    For example, given a `user` object that looks like:

    ```javascript
    {
      "name": "Shelly Sails",
      "age": 42
    }
    ```

    This template would display all properties on the `user`
    object in a list:

    ```handlebars
    <ul>
    {{#each-in user as |key value|}}
      <li>{{key}}: {{value}}</li>
    {{/each-in}}
    </ul>
    ```

    Outputting their name and age.
  itemtype: method
  name: each-in
  access: public
  tagname: ''
  since: 2.1.0
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/each.js
  line: 9
  description: |-
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.

    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array.

    ```javascript
    var developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];
    ```

    ```handlebars
    {{#each developers key="name" as |person|}}
      {{person.name}}
      {{! `this` is whatever it was outside the #each }}
    {{/each}}
    ```

    The same rules apply to arrays of primitives.

    ```javascript
    var developerNames = ['Yehuda', 'Tom', 'Paul']
    ```

    ```handlebars
    {{#each developerNames key="@index" as |name|}}
      {{name}}
    {{/each}}
    ```

    ### Specifying Keys

    The `key` option is used to tell Ember how to determine if the array being
    iterated over with `{{#each}}` has changed between renders. By helping Ember
    detect that some elements in the array are the same, DOM elements can be
    re-used, significantly improving rendering speed.

    For example, here's the `{{#each}}` helper with its `key` set to `id`:

    ```handlebars
    {{#each model key="id" as |item|}}
    {{/each}}
    ```

    When this `{{#each}}` re-renders, Ember will match up the previously rendered
    items (and reorder the generated DOM elements) based on each item's `id`
    property.

    By default the item's own reference is used.

    ### {{else}} condition

    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.

    ```handlebars
    {{#each developers as |person|}}
      {{person.name}}
    {{else}}
      <p>Sorry, nobody is available for this task.</p>
    {{/each}}
    ```
  itemtype: method
  name: each
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/hash.js
  line: 6
  description: |-
    Use the `{{hash}}` helper to create a hash to pass as an option to your
    components. This is specially useful for contextual components where you can
    just yield a hash:

    ```handlebars
    {{yield (hash
       name='Sarah'
       title=office
    )}}
    ```

    Would result in an object such as:

    ```js
    { name: 'Sarah', title: this.get('office') }
    ```

    Where the `title` is bound to updates of the `office` property.
  itemtype: method
  name: hash
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: Hash
    type: Object
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/if_unless.js
  line: 9
  description: |-
    Use the `if` block helper to conditionally render a block depending on a
    property. If the property is "falsey", for example: `false`, `undefined`,
     `null`, `""`, `0` or an empty array, the block will not be rendered.

     ```handlebars
    {{! will not render if foo is falsey}}
    {{#if foo}}
      Welcome to the {{foo.bar}}
    {{/if}}
    ```

    You can also specify a template to show if the property is falsey by using
    the `else` helper.

    ```handlebars
    {{!Is it raining outside?}}
    {{#if isRaining}}
      Yes, grab an umbrella!
    {{else}}
      No, it's lovely outside!
    {{/if}}
    ```

    You are also able to combine `else` and `if` helpers to create more complex
    conditional logic.

    ```handlebars
    {{#if isMorning}}
      Good morning
    {{else if isAfternoon}}
      Good afternoon
    {{else}}
      Good night
    {{/if}}
    ```

    You can use `if` inline to conditionally render a single property or string.
    This helper acts like a ternary operator. If the first property is truthy,
    the second argument will be displayed, if not, the third argument will be
    displayed

    ```handlebars
    {{if useLongGreeting "Hello" "Hi"}} Dave
    ```

    Finally, you can use the `if` helper inside another helper as a subexpression.

    ```handlebars
    {{some-component height=(if isBig "100" "10")}}
    ```
  itemtype: method
  name: if
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/if_unless.js
  line: 69
  description: |-
    The `unless` helper is the inverse of the `if` helper. Its block will be
    rendered if the expression contains a falsey value.  All forms of the `if`
    helper can also be used with `unless`.
  itemtype: method
  name: unless
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/loc.js
  line: 8
  description: |-
    Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the
    provided string. This is a convenient way to localize text within a template.
    For example:

    ```javascript
    Ember.STRINGS = {
      '_welcome_': 'Bonjour'
    };
    ```

    ```handlebars
    <div class='message'>
      {{loc '_welcome_'}}
    </div>
    ```

    ```html
    <div class='message'>
      Bonjour
    </div>
    ```

    See [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to
    set up localized string references.
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  see:
  - "{Ember.String#loc}"
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/log.js
  line: 8
  description: |-
    `log` allows you to output the value of variables in the current rendering
    context. `log` also accepts primitive types such as strings or numbers.

    ```handlebars
    {{log "myVariable:" myVariable }}
    ```
  itemtype: method
  name: log
  params:
  - name: values
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers/with.js
  line: 8
  description: |-
    Use the `{{with}}` helper when you want to alias a property to a new name. This is helpful
    for semantic clarity as it allows you to retain default scope or to reference a property from another
    `{{with}}` block.

    If the aliased property is "falsey", for example: `false`, `undefined` `null`, `""`, `0` or
    an empty array, the block will not be rendered.

    ```handlebars
    {{! Will only render if user.posts contains items}}
    {{#with user.posts as |blogPosts|}}
      <div class="notice">
        There are {{blogPosts.length}} blog posts written by {{user.name}}.
      </div>
      {{#each blogPosts as |post|}}
        <li>{{post.title}}</li>
      {{/each}}
    {{/with}}
    ```

    Without the `as` operator, it would be impossible to reference `user.name` in the example above.

    NOTE: The alias should not reuse a name from the bound property path.
    For example: `{{#with foo.bar as |foo|}}` is not supported because it attempts to alias using
    the first part of the property path, `foo`. Instead, use `{{#with foo.bar as |baz|}}`.
  itemtype: method
  name: with
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: HTML string
    type: String
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/collection.js
  line: 11
  description: |-
    `{{collection}}` is a template helper for adding instances of
    `Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)
     for additional information on how a `CollectionView` functions.

    `{{collection}}`'s primary use is as a block helper with a `contentBinding`
    option pointing towards an `Ember.Array`-compatible object. An `Ember.View`
    instance will be created for each item in its `content` property. Each view
    will have its own `content` property set to the appropriate item in the
    collection.

    The provided block will be applied as the template for each item's view.

    Given an empty `<body>` the following template:

    ```handlebars
    {{! application.hbs }}
    {{#collection content=model}}
      Hi {{view.content.name}}
    {{/collection}}
    ```

    And the following application code

    ```javascript
    App = Ember.Application.create();
    App.ApplicationRoute = Ember.Route.extend({
      model: function() {
        return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];
      }
    });
    ```

    The following HTML will result:

    ```html
    <div class="ember-view">
      <div class="ember-view">Hi Yehuda</div>
      <div class="ember-view">Hi Tom</div>
      <div class="ember-view">Hi Peter</div>
    </div>
    ```

    ### Non-block version of collection

    If you provide an `itemViewClass` option that has its own `template` you may
    omit the block.

    The following template:

    ```handlebars
    {{! application.hbs }}
    {{collection content=model itemViewClass="an-item"}}
    ```

    And application code

    ```javascript
    App = Ember.Application.create();
    App.ApplicationRoute = Ember.Route.extend({
      model: function() {
        return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];
      }
    });

    App.AnItemView = Ember.View.extend({
      template: Ember.Handlebars.compile("Greetings {{view.content.name}}")
    });
    ```

    Will result in the HTML structure below

    ```html
    <div class="ember-view">
      <div class="ember-view">Greetings Yehuda</div>
      <div class="ember-view">Greetings Tom</div>
      <div class="ember-view">Greetings Peter</div>
    </div>
    ```

    ### Specifying a CollectionView subclass

    By default the `{{collection}}` helper will create an instance of
    `Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to
    the helper by passing it as the first argument:

    ```handlebars
    {{#collection "my-custom-collection" content=model}}
      Hi {{view.content.name}}
    {{/collection}}
    ```

    This example would look for the class `App.MyCustomCollection`.

    ### Forwarded `item.*`-named Options

    As with the `{{view}}`, helper options passed to the `{{collection}}` will be
    set on the resulting `Ember.CollectionView` as properties. Additionally,
    options prefixed with `item` will be applied to the views rendered for each
    item (note the camelcasing):

    ```handlebars
    {{#collection content=model
                  itemTagName="p"
                  itemClassNames="greeting"}}
      Howdy {{view.content.name}}
    {{/collection}}
    ```

    Will result in the following HTML structure:

    ```html
    <div class="ember-view">
      <p class="ember-view greeting">Howdy Yehuda</p>
      <p class="ember-view greeting">Howdy Tom</p>
      <p class="ember-view greeting">Howdy Peter</p>
    </div>
    ```
  itemtype: method
  name: collection
  deprecated: true
  deprecationMessage: Use `{{each}}` helper instead.
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/component.js
  line: 10
  description: |-
    The `{{component}}` helper lets you add instances of `Ember.Component` to a
    template. See [Ember.Component](/api/classes/Ember.Component.html) for
    additional information on how a `Component` functions.
    `{{component}}`'s primary use is for cases where you want to dynamically
    change which type of component is rendered as the state of your application
    changes. The provided block will be applied as the template for the component.
    Given an empty `<body>` the following template:

    ```handlebars
    {{! application.hbs }}
    {{component infographicComponentName}}
    ```

    And the following application code:

    ```javascript
    export default Ember.Controller.extend({
      infographicComponentName: computed('isMarketOpen', {
        get() {
          if (this.get('isMarketOpen')) {
            return 'live-updating-chart';
          } else {
            return 'market-close-summary';
          }
        }
      })
    });
    ```

    The `live-updating-chart` component will be appended when `isMarketOpen` is
    `true`, and the `market-close-summary` component will be appended when
    `isMarketOpen` is `false`. If the value changes while the app is running,
    the component will be automatically swapped out accordingly.
    Note: You should not use this helper when you are consistently rendering the same
    component. In that case, use standard component syntax, for example:

    ```handlebars
    {{! application.hbs }}
    {{live-updating-chart}}
    ```
  itemtype: method
  name: component
  since: 1.11.0
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/debugger.js
  line: 10
  description: |-
    Execute the `debugger` statement in the current template's context.

    ```handlebars
    {{debugger}}
    ```

    When using the debugger helper you will have access to a `get` function. This
    function retrieves values available in the context of the template.
    For example, if you're wondering why a value `{{foo}}` isn't rendering as
    expected within a template, you could place a `{{debugger}}` statement and,
    when the `debugger;` breakpoint is hit, you can attempt to retrieve this value:

    ```
    > get('foo')
    ```

    `get` is also aware of keywords. So in this situation

    ```handlebars
    {{#each items as |item|}}
      {{debugger}}
    {{/each}}
    ```

    You'll be able to get values from the current item:

    ```
    > get('item.name')
    ```

    You can also access the context of the view to make sure it is the object that
    you expect:

    ```
    > context
    ```
  itemtype: method
  name: debugger
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/keywords/get.js
  line: 105
  description: |-
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.

    For example, these two usages are equivilent:

    ```handlebars
    {{person.height}}
    {{get person "height"}}
    ```

    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:

    ```handlebars
    {{get person factName}}
    ```

    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:

    ```handlebars
    {{get person factName}}
    <button {{action (mut factName) "height"}}>Show height</button>
    <button {{action (mut factName) "weight"}}>Show weight</button>
    ```

    The `{{get}}` helper can also respect mutable values itself. For example:

    ```handlebars
    {{input value=(mut (get person factName)) type="text"}}
    <button {{action (mut factName) "height"}}>Show height</button>
    <button {{action (mut factName) "weight"}}>Show weight</button>
    ```

    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.
  access: public
  tagname: ''
  itemtype: method
  name: get
  since: 2.1.0
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/input.js
  line: 8
  description: |-
    The `{{input}}` helper lets you create an HTML `<input />` component.
    It causes an `Ember.TextField` component to be rendered.  For more info,
    see the [Ember.TextField](/api/classes/Ember.TextField.html) docs and
    the [templates guide](http://emberjs.com/guides/templates/input-helpers/).

    ```handlebars
    {{input value="987"}}
    ```

    renders as:

    ```HTML
    <input type="text" value="987" />
    ```

    ### Text field

    If no `type` option is specified, a default of type 'text' is used.

    Many of the standard HTML attributes may be passed to this helper.

    <table>
      <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>
      <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>
      <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>
      <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>
      <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>
      <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>
      <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>
      <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>
      <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>
      <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>
    </table>


    When set to a quoted string, these values will be directly applied to the HTML
    element. When left unquoted, these values will be bound to a property on the
    template's current rendering context (most typically a controller instance).


    A very common use of this helper is to bind the `value` of an input to an Object's attribute:

    ```handlebars
    Search:
    {{input value=searchWord}}
    ```

    In this example, the inital value in the `<input />` will be set to the value of `searchWord`.
    If the user changes the text, the value of `searchWord` will also be updated.

    ### Actions
    The helper can send multiple actions based on user events.
    The action property defines the action which is sent when
    the user presses the return key.

    ```handlebars
    {{input action="submit"}}
    ```

    The helper allows some user events to send actions.

    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`
    * `key-up`


    For example, if you desire an action to be sent when the input is blurred,
    you only need to setup the action name to the event name property.

    ```handlebars
    {{input focus-out="alertMessage"}}
    ```

    See more about [Text Support Actions](/api/classes/Ember.TextField.html)


    ### Extending `Ember.TextField`

    Internally, `{{input type="text"}}` creates an instance of `Ember.TextField`, passing
    arguments from the helper to `Ember.TextField`'s `create` method. You can extend the
    capabilities of text inputs in your applications by reopening this class. For example,
    if you are building a Bootstrap project where `data-*` attributes are used, you
    can add one to the `TextField`'s `attributeBindings` property:


    ```javascript
    Ember.TextField.reopen({
      attributeBindings: ['data-error']
    });
    ```

    Keep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`
    itself extends `Ember.Component`. Expect isolated component semantics, not
    legacy 1.x view semantics (like `controller` being present).

    See more about [Ember components](/api/classes/Ember.Component.html)


    ### Checkbox

    Checkboxes are special forms of the `{{input}}` helper.  To create a `<checkbox />`:

    ```handlebars
    Emberize Everything:
    {{input type="checkbox" name="isEmberized" checked=isEmberized}}
    ```

    This will bind checked state of this checkbox to the value of `isEmberized`  -- if either one changes,
    it will be reflected in the other.


    The following HTML attributes can be set via the helper:

    * `checked`
    * `disabled`
    * `tabindex`
    * `indeterminate`
    * `name`
    * `autofocus`
    * `form`


    ### Extending `Ember.Checkbox`

    Internally, `{{input type="checkbox"}}` creates an instance of `Ember.Checkbox`, passing
    arguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the
    capablilties of checkbox inputs in your applications by reopening this class. For example,
    if you wanted to add a css class to all checkboxes in your application:

    ```javascript
    Ember.Checkbox.reopen({
      classNames: ['my-app-checkbox']
    });
    ```
  itemtype: method
  name: input
  params:
  - name: options
    description: ''
    type: Hash
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/mut.js
  line: 47
  description: |-
    The `mut` helper lets you __clearly specify__ that a child `Component` can update the
    (mutable) value passed to it, which will __change the value of the parent component__.

    This is very helpful for passing mutable values to a `Component` of any size, but
    critical to understanding the logic of a large/complex `Component`.

    To specify that a parameter is mutable, when invoking the child `Component`:

    ```handlebars
    <my-child child-click-count={{mut totalClicks}} />
    ```

    The child `Component` can then modify the parent's value as needed:

    ```javascript
    // my-child.js
    export default Component.extend({
      click: function() {
        this.attrs.childClickCount.update(this.attrs.childClickCount.value + 1);
      }
    });
    ```

    See a [2.0 blog post](http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html#toc_the-code-mut-code-helper) for
    additional information on using `{{mut}}`.
  access: public
  tagname: ''
  itemtype: method
  name: mut
  params:
  - name: attr
    description: the "two-way" attribute that can be modified.
    type: Object
    optional: true
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/outlet.js
  line: 14
  description: |-
    The `{{outlet}}` helper lets you specify where a child routes will render in
    your template. An important use of the `{{outlet}}` helper is in your
    application's `application.hbs` file:

    ```handlebars
    {{! app/templates/application.hbs }}

    <!-- header content goes here, and will always display -->
    {{my-header}}

    <div class="my-dynamic-content">
      <!-- this content will change based on the current route, which depends on the current URL -->
      {{outlet}}
    </div>

    <!-- footer content goes here, and will always display -->
    {{my-footer}}
    ```

    See [templates guide](http://emberjs.com/guides/templates/the-application-template/) for
    additional information on using `{{outlet}}` in `application.hbs`.

    You may also specify a name for the `{{outlet}}`, which is useful when using more than one
    `{{outlet}}` in a template:

    ```handlebars
    {{outlet "menu"}}
    {{outlet "sidebar"}}
    {{outlet "main"}}
    ```

    Your routes can then render into a specific one of these `outlet`s by specifying the `outlet`
    attribute in your `renderTemplate` function:

    ```javascript
    // app/routes/menu.js

    export default Ember.Route.extend({
      renderTemplate() {
        this.render({ outlet: 'menu' });
      }
    });
    ```

    See the [routing guide](http://emberjs.com/guides/routing/rendering-a-template/) for more
    information on how your `route` interacts with the `{{outlet}}` helper.

    Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
  access: public
  tagname: ''
  itemtype: method
  name: outlet
  params:
  - name: name
    description: ''
    type: String
    optional: true
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/partial.js
  line: 9
  description: |-
    The `partial` helper renders another template without
    changing the template context:

    ```handlebars
    {{foo}}
    {{partial "nav"}}
    ```

    The above example template will render a template named
    "_nav", which has the same context as the parent template
    it's rendered into, so if the "_nav" template also referenced
    `{{foo}}`, it would print the same thing as the `{{foo}}`
    in the above example.

    If a "_nav" template isn't found, the `partial` helper will
    fall back to a template named "nav".

    ### Bound template names

    The parameter supplied to `partial` can also be a path
    to a property containing a template name, e.g.:

    ```handlebars
    {{partial someTemplateName}}
    ```

    The above example will look up the value of `someTemplateName`
    on the template context (e.g. a controller) and use that
    value as the name of the template to render. If the resolved
    value is falsy, nothing will be rendered. If `someTemplateName`
    changes, the partial will be re-rendered using the new template
    name.
  itemtype: method
  name: partial
  params:
  - name: partialName
    description: the name of the template to render minus the leading underscore
    type: String
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/textarea.js
  line: 6
  description: |-
    `{{textarea}}` inserts a new instance of `<textarea>` tag into the template.
    The attributes of `{{textarea}}` match those of the native HTML tags as
    closely as possible.

    The following HTML attributes can be set:

      * `value`
      * `name`
      * `rows`
      * `cols`
      * `placeholder`
      * `disabled`
      * `maxlength`
      * `tabindex`
      * `selectionEnd`
      * `selectionStart`
      * `selectionDirection`
      * `wrap`
      * `readonly`
      * `autofocus`
      * `form`
      * `spellcheck`
      * `required`

    When set to a quoted string, these value will be directly applied to the HTML
    element. When left unquoted, these values will be bound to a property on the
    template's current rendering context (most typically a controller instance).

    Unbound:

    ```handlebars
    {{textarea value="Lots of static text that ISN'T bound"}}
    ```

    Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of static text that ISN'T bound
    </textarea>
    ```

    Bound:

    In the following example, the `writtenWords` property on `App.ApplicationController`
    will be updated live as the user types 'Lots of text that IS bound' into
    the text area of their browser's window.

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound"
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}
    ```

     Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```

    If you wanted a one way binding between the text area and a div tag
    somewhere else on your screen, you could use `Ember.computed.oneWay`:

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound",
      outputWrittenWords: Ember.computed.oneWay("writtenWords")
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}

    <div>
      {{outputWrittenWords}}
    </div>
    ```

    Would result in the following HTML:

    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>

    <-- the following div will be updated in real time as you type -->

    <div>
      Lots of text that IS bound
    </div>
    ```

    Finally, this example really shows the power and ease of Ember when two
    properties are bound to eachother via `Ember.computed.alias`. Type into
    either text area box and they'll both stay in sync. Note that
    `Ember.computed.alias` costs more in terms of performance, so only use it when
    your really binding in both directions:

    ```javascript
    App.ApplicationController = Ember.Controller.extend({
      writtenWords: "Lots of text that IS bound",
      twoWayWrittenWords: Ember.computed.alias("writtenWords")
    });
    ```

    ```handlebars
    {{textarea value=writtenWords}}
    {{textarea value=twoWayWrittenWords}}
    ```

    ```html
    <textarea id="ember1" class="ember-text-area">
      Lots of text that IS bound
    </textarea>

    <-- both updated in real time -->

    <textarea id="ember2" class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```

    ### Actions

    The helper can send multiple actions based on user events.

    The action property defines the action which is send when
    the user presses the return key.

    ```handlebars
    {{input action="submit"}}
    ```

    The helper allows some user events to send actions.

    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`

    For example, if you desire an action to be sent when the input is blurred,
    you only need to setup the action name to the event name property.

    ```handlebars
    {{textarea focus-in="alertMessage"}}
    ```

    See more about [Text Support Actions](/api/classes/Ember.TextArea.html)

    ### Extension

    Internally, `{{textarea}}` creates an instance of `Ember.TextArea`, passing
    arguments from the helper to `Ember.TextArea`'s `create` method. You can
    extend the capabilities of text areas in your application by reopening this
    class. For example, if you are building a Bootstrap project where `data-*`
    attributes are used, you can globally add support for a `data-*` attribute
    on all `{{textarea}}`s' in your app by reopening `Ember.TextArea` or
    `Ember.TextSupport` and adding it to the `attributeBindings` concatenated
    property:

    ```javascript
    Ember.TextArea.reopen({
      attributeBindings: ['data-error']
    });
    ```

    Keep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`
    itself extends `Ember.Component`. Expect isolated component semantics, not
    legacy 1.x view semantics (like `controller` being present).

    See more about [Ember components](/api/classes/Ember.Component.html)
  itemtype: method
  name: textarea
  params:
  - name: options
    description: ''
    type: Hash
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/unbound.js
  line: 10
  description: |-
    The `{{unbound}}` helper disconnects the one-way binding of a property,
    essentially freezing its value at the moment of rendering. For example,
    in this example the display of the variable `name` will not change even
    if it is set with a new value:

    ```handlebars
    {{unbound name}}
    ```

    Like any helper, the `unbound` helper can accept a nested helper expression.
    This allows for custom helpers to be rendered unbound:

    ```handlebars
    {{unbound (some-custom-helper)}}
    {{unbound (capitalize name)}}
    {{! You can use any helper, including unbound, in a nested expression }}
    {{capitalize (unbound name)}}
    ```

    The `unbound` helper only accepts a single argument, and it return an
    unbound value.
  itemtype: method
  name: unbound
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/keywords/view.js
  line: 10
  description: |-
    `{{view}}` inserts a new instance of an `Ember.View` into a template passing its
    options to the `Ember.View`'s `create` method and using the supplied block as
    the view's own template.

    An empty `<body>` and the following template:

    ```handlebars
    A span:
    {{#view tagName="span"}}
      hello.
    {{/view}}
    ```

    Will result in HTML structure:

    ```html
    <body>
      <!-- Note: the handlebars template script
           also results in a rendered Ember.View
           which is the outer <div> here -->

      <div class="ember-view">
        A span:
        <span id="ember1" class="ember-view">
          Hello.
        </span>
      </div>
    </body>
    ```

    ### `parentView` setting

    The `parentView` property of the new `Ember.View` instance created through
    `{{view}}` will be set to the `Ember.View` instance of the template where
    `{{view}}` was called.

    ```javascript
    aView = Ember.View.create({
      template: Ember.Handlebars.compile("{{#view}} my parent: {{parentView.elementId}} {{/view}}")
    });

    aView.appendTo('body');
    ```

    Will result in HTML structure:

    ```html
    <div id="ember1" class="ember-view">
      <div id="ember2" class="ember-view">
        my parent: ember1
      </div>
    </div>
    ```

    ### Setting CSS id and class attributes

    The HTML `id` attribute can be set on the `{{view}}`'s resulting element with
    the `id` option. This option will _not_ be passed to `Ember.View.create`.

    ```handlebars
    {{#view tagName="span" id="a-custom-id"}}
      hello.
    {{/view}}
    ```

    Results in the following HTML structure:

    ```html
    <div class="ember-view">
      <span id="a-custom-id" class="ember-view">
        hello.
      </span>
    </div>
    ```

    The HTML `class` attribute can be set on the `{{view}}`'s resulting element
    with the `class` or `classNameBindings` options. The `class` option will
    directly set the CSS `class` attribute and will not be passed to
    `Ember.View.create`. `classNameBindings` will be passed to `create` and use
    `Ember.View`'s class name binding functionality:

    ```handlebars
    {{#view tagName="span" class="a-custom-class"}}
      hello.
    {{/view}}
    ```

    Results in the following HTML structure:

    ```html
    <div class="ember-view">
      <span id="ember2" class="ember-view a-custom-class">
        hello.
      </span>
    </div>
    ```

    ### Supplying a different view class

    `{{view}}` can take an optional first argument before its supplied options to
    specify a path to a custom view class.

    ```handlebars
    {{#view "custom"}}{{! will look up App.CustomView }}
      hello.
    {{/view}}
    ```

    The first argument can also be a relative path accessible from the current
    context.

    ```javascript
    MyApp = Ember.Application.create({});
    MyApp.OuterView = Ember.View.extend({
      innerViewClass: Ember.View.extend({
        classNames: ['a-custom-view-class-as-property']
      }),
      template: Ember.Handlebars.compile('{{#view view.innerViewClass}} hi {{/view}}')
    });

    MyApp.OuterView.create().appendTo('body');
    ```

    Will result in the following HTML:

    ```html
    <div id="ember1" class="ember-view">
      <div id="ember2" class="ember-view a-custom-view-class-as-property">
        hi
      </div>
    </div>
    ```

    ### Blockless use

    If you supply a custom `Ember.View` subclass that specifies its own template
    or provide a `templateName` option to `{{view}}` it can be used without
    supplying a block. Attempts to use both a `templateName` option and supply a
    block will throw an error.

    ```javascript
    var App = Ember.Application.create();
    App.WithTemplateDefinedView = Ember.View.extend({
      templateName: 'defined-template'
    });
    ```

    ```handlebars
    {{! application.hbs }}
    {{view 'with-template-defined'}}
    ```

    ```handlebars
    {{! defined-template.hbs }}
    Some content for the defined template view.
    ```

    ### `viewName` property

    You can supply a `viewName` option to `{{view}}`. The `Ember.View` instance
    will be referenced as a property of its parent view by this name.

    ```javascript
    aView = Ember.View.create({
      template: Ember.Handlebars.compile('{{#view viewName="aChildByName"}} hi {{/view}}')
    });

    aView.appendTo('body');
    aView.get('aChildByName') // the instance of Ember.View created by {{view}} helper
    ```
  itemtype: method
  name: view
  access: public
  tagname: ''
  deprecated: true
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/system/bootstrap.js
  line: 21
  description: |-
    Find templates stored in the head tag as script tags and make them available
    to `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run
    as as jQuery DOM-ready callback.

    Script tags with `text/x-handlebars` will be compiled
    with Ember's template compiler and are suitable for use as a view's template.
    Those with type `text/x-raw-handlebars` will be compiled with regular
    Handlebars and are suitable for use in views' computed properties.
  access: private
  tagname: ''
  itemtype: method
  name: bootstrap
  static: 1
  params:
  - name: ctx
    description: ''
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/system/instrumentation-support.js
  line: 6
  description: |-
    Provides instrumentation for node managers.

    Wrap your node manager's render and re-render methods
    with this function.
  params:
  - name: component
    description: Component or View instance (optional)
    type: Object
  - name: callback
    description: The function to instrument
    type: Function
  - name: context
    description: The context to call the function with
    type: Object
  return:
    description: Return value from the invoked callback
    type: Object
  access: private
  tagname: ''
  class: Ember.HTMLBars
  module: ember
- file: packages/ember-htmlbars/lib/system/lookup-helper.js
  line: 17
  description: |-
    Used to lookup/resolve handlebars helpers. The lookup order is:

    * Look for a registered helper
    * If a dash exists in the name:
      * Look for a helper registed in the container
      * Use Ember.ComponentLookup to find an Ember.Component that resolves
        to the given name
  access: private
  tagname: ''
  itemtype: method
  name: resolveHelper
  params:
  - name: name
    description: the name of the helper to lookup
    type: String
  return:
    description: ''
    type: Helper
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/system/make_bound_helper.js
  line: 8
  description: |-
    Create a bound helper. Accepts a function that receives the ordered and hash parameters
    from the template. If a bound property was provided in the template it will be resolved to its
    value and any changes to the bound property cause the helper function to be re-run with the updated
    values.

    * `params` - An array of resolved ordered parameters.
    * `hash` - An object containing the hash parameters.

    For example:

    * With an unquoted ordered parameter:

      ```javascript
      {{x-capitalize foo}}
      ```

      Assuming `foo` was set to `"bar"`, the bound helper would receive `["bar"]` as its first argument, and
      an empty hash as its second.

    * With a quoted ordered parameter:

      ```javascript
      {{x-capitalize "foo"}}
      ```

      The bound helper would receive `["foo"]` as its first argument, and an empty hash as its second.

    * With an unquoted hash parameter:

      ```javascript
      {{x-repeat "foo" count=repeatCount}}
      ```

      Assuming that `repeatCount` resolved to 2, the bound helper would receive `["foo"]` as its first argument,
      and { count: 2 } as its second.
  access: private
  tagname: ''
  itemtype: method
  name: makeBoundHelper
  params:
  - name: fn
    description: ''
    type: Function
  since: 1.10.0
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/utils/string.js
  line: 10
  description: |-
    Mark a string as safe for unescaped output with Ember templates. If you
    return HTML from a helper, use this function to
    ensure Ember's rendering layer does not escape the HTML.

    ```javascript
    Ember.String.htmlSafe('<div>someString</div>')
    ```
  itemtype: method
  name: htmlSafe
  static: 1
  return:
    description: a string that will not be html escaped by Handlebars
    type: Handlebars.SafeString
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/helper.js
  line: 51
  description: |-
    On a class-based helper, it may be useful to force a recomputation of that
    helpers value. This is akin to `rerender` on a component.

    For example, this component will rerender when the `currentUser` on a
    session service changes:

    ```js
    // app/helpers/current-user-email.js
    export default Ember.Helper.extend({
      session: Ember.inject.service(),
      onNewUser: Ember.observer('session.currentUser', function() {
        this.recompute();
      }),
      compute() {
        return this.get('session.currentUser.email');
      }
    });
    ```
  itemtype: method
  name: recompute
  access: public
  tagname: ''
  since: 1.13.0
  class: Ember.Helper
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helper.js
  line: 79
  description: Override this function when writing a class-based helper.
  itemtype: method
  name: compute
  params:
  - name: params
    description: The positional arguments to the helper
    type: Array
  - name: hash
    description: The named arguments to the helper
    type: Object
  access: public
  tagname: ''
  since: 1.13.0
  class: Ember.Helper
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helper.js
  line: 94
  description: |-
    In many cases, the ceremony of a full `Ember.Helper` class is not required.
    The `helper` method create pure-function helpers without instances. For
    example:

    ```js
    // app/helpers/format-currency.js
    export default Ember.Helper.helper(function(params, hash) {
      let cents = params[0];
      let currency = hash.currency;
      return `${currency}${cents * 0.01}`;
    });
    ```
  static: 1
  params:
  - name: helper
    description: The helper function
    type: Function
  itemtype: method
  name: helper
  access: public
  tagname: ''
  since: 1.13.0
  class: Ember.Helper
  module: ember
  submodule: ember-templates
- file: packages/ember-htmlbars/lib/helpers.js
  line: 6
  access: private
  tagname: ''
  itemtype: property
  name: helpers
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/helpers.js
  line: 19
  access: private
  tagname: ''
  itemtype: method
  name: _registerHelper
  params:
  - name: name
    description: ''
    type: String
  - name: helperFunc
    description: the helper function to add
    type: Object|Function
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/keywords.js
  line: 8
  access: private
  tagname: ''
  itemtype: property
  name: helpers
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-htmlbars/lib/keywords.js
  line: 19
  access: private
  tagname: ''
  itemtype: method
  name: _registerHelper
  params:
  - name: name
    description: ''
    type: String
  - name: keyword
    description: the keyword to add
    type: Object|Function
  class: Ember.HTMLBars
  module: ember
  submodule: ember-htmlbars
- file: packages/ember-metal/lib/streams/utils.js
  line: 302
  description: |-
    Generate a new stream by providing a source stream and a function that can
    be used to transform the stream's value. In the case of a non-stream object,
    returns the result of the function.

    The value to transform would typically be available to the function you pass
    to `chain()` via scope. For example:

    ```javascript
        var source = ...;  // stream returning a number
                               // or a numeric (non-stream) object
        var result = chain(source, function() {
          var currentValue = read(source);
          return currentValue + 1;
        });
    ```

    In the example, result is a stream if source is a stream, or a number of
    source was numeric.
  access: private
  tagname: ''
  itemtype: method
  name: chain
  params:
  - name: value
    description: A stream or non-stream object
    type: Object|Stream
  - name: fn
    description: |-
      function to be run when the stream value changes, or to
                           be run once in the case of a non-stream object
    type: Function
  return:
    description: |-
      In the case of a stream `value` parameter, a new
                              stream that will be updated with the return value of
                              the provided function `fn`. In the case of a
                              non-stream object, the return value of the provided
                              function `fn`.
    type: Object|Stream
  class: Ember.streams.Ember.stream
  module: ember-metal
- file: packages/ember-metal/lib/assign.js
  line: 1
  description: |-
    Copy properties from a source object to a target object.

    ```javascript
    var a = {first: 'Yehuda'};
    var b = {last: 'Katz'};
    var c = {company: 'Tilde Inc.'};
    Ember.assign(a, b, c); // a === {first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.'}, b === {last: 'Katz'}, c === {company: 'Tilde Inc.'}
    ```
  itemtype: method
  name: assign
  params:
  - name: original
    description: The object to assign into
    type: Object
  - name: args
    description: The objects to copy properties from
    type: Object
    multiple: true
  return:
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/binding.js
  line: 28
  description: |-
    Debug parameter you can turn on. This will log all bindings that fire to
    the console. This should be disabled in production code. Note that you
    can also enable this from the console or temporarily.
  itemtype: property
  name: LOG_BINDINGS
  type: Boolean
  default: 'false'
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/binding.js
  line: 41
  description: |-
    Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)
    instead of local (`foo.bar.baz`).
  itemtype: method
  name: isGlobalPath
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  return:
    description: Boolean
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/binding.js
  line: 75
  description: This copies the Binding so it can be connected to another object.
  itemtype: method
  name: copy
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 92
  description: |-
    This will set `from` property path to the specified value. It will not
    attempt to resolve this property path to an actual object until you
    connect the binding.

    The binding will search for the property path starting at the root object
    you pass when you `connect()` the binding. It follows the same rules as
    `get()` - see that method for more information.
  itemtype: method
  name: from
  params:
  - name: path
    description: the property path to connect to
    type: String
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 111
  description: |-
    This will set the `to` property path to the specified value. It will not
    attempt to resolve this property path to an actual object until you
    connect the binding.

    The binding will search for the property path starting at the root object
    you pass when you `connect()` the binding. It follows the same rules as
    `get()` - see that method for more information.
  itemtype: method
  name: to
  params:
  - name: path
    description: A property path or tuple
    type: String|Tuple
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 130
  description: |-
    Configures the binding as one way. A one-way binding will relay changes
    on the `from` side to the `to` side, but not the other way around. This
    means that if you change the `to` side directly, the `from` side may have
    a different value.
  itemtype: method
  name: oneWay
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 145
  itemtype: method
  name: toString
  return:
    description: string representation of binding
    type: String
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 159
  description: |-
    Attempts to connect this binding instance so that it can receive and relay
    changes. This method will raise an exception if you have not set the
    from/to properties yet.
  itemtype: method
  name: connect
  params:
  - name: obj
    description: The root object for this binding.
    type: Object
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 189
  description: |-
    Disconnects the binding instance. Changes will no longer be relayed. You
    will not usually need to call this method.
  itemtype: method
  name: disconnect
  params:
  - name: obj
    description: The root object you passed when connecting the binding.
    type: Object
  return:
    description: "`this`"
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember.Binding
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/binding.js
  line: 453
  description: |-
    Global helper method to create a new binding. Just pass the root object
    along with a `to` and `from` path to create and connect the binding.
  itemtype: method
  name: bind
  params:
  - name: obj
    description: The root object of the transform.
    type: Object
  - name: to
    description: |-
      The path to the 'to' side of the binding.
        Must be relative to obj.
    type: String
  - name: from
    description: |-
      The path to the 'from' side of the binding.
        Must be relative to obj or a global path.
    type: String
  return:
    description: binding instance
    type: Ember.Binding
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/computed.js
  line: 168
  description: |-
    Call on a computed property to set it into non-cached mode. When in this
    mode the computed property will not automatically cache the return value.

    It also does not automatically fire any change events. You must manually notify
    any changes if you want to observe this property.

    Dependency keys have no effect on volatile properties as they are for cache
    invalidation and notification when cached value is invalidated.

    ```javascript
    let outsideService = Ember.Object.extend({
      value: Ember.computed(function() {
        return OutsideService.getValue();
      }).volatile()
    }).create();
    ```
  itemtype: method
  name: volatile
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 196
  description: |-
    Call on a computed property to set it into read-only mode. When in this
    mode the computed property will throw an error when set.

    ```javascript
    let Person = Ember.Object.extend({
      guid: Ember.computed(function() {
        return 'guid-guid-guid';
      }).readOnly()
    });

    let person = Person.create();

    person.set('guid', 'new-guid'); // will throw an exception
    ```
  itemtype: method
  name: readOnly
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 223
  description: |-
    Sets the dependent keys on this computed property. Pass any number of
    arguments containing key paths that this computed property depends on.

    ```javascript
    let President = Ember.Object.extend({
      fullName: Ember.computed(function() {
        return this.get('firstName') + ' ' + this.get('lastName');

        // Tell Ember that this computed property depends on firstName
        // and lastName
      }).property('firstName', 'lastName')
    });

    let president = President.create({
      firstName: 'Barack',
      lastName: 'Obama'
    });

    president.get('fullName'); // 'Barack Obama'
    ```
  itemtype: method
  name: property
  params:
  - name: path
    description: zero or more property paths
    type: String
    multiple: true
  return:
    description: this
    type: Ember.ComputedProperty
  chainable: 1
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 272
  description: |-
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For example,
    computed property functions may close over variables that are then no longer
    available for introspection.

    You can pass a hash of these values to a computed property like this:

    ```
    person: Ember.computed(function() {
      let personId = this.get('personId');
      return App.Person.create({ id: personId });
    }).meta({ type: App.Person })
    ```

    The hash that you pass to the `meta()` function will be saved on the
    computed property descriptor under the `_meta` key. Ember runtime
    exposes a public API for retrieving these values from classes,
    via the `metaForProperty()` function.
  itemtype: method
  name: meta
  params:
  - name: meta
    description: ''
    type: Object
  chainable: 1
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 328
  description: |-
    Access the value of the function backing the computed property.
    If this property has already been cached, return the cached result.
    Otherwise, call the function passing the property name as an argument.

    ```javascript
    let Person = Ember.Object.extend({
      fullName: Ember.computed('firstName', 'lastName', function(keyName) {
        // the keyName parameter is 'fullName' in this case.
        return this.get('firstName') + ' ' + this.get('lastName');
      })
    });


    let tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });

    tom.get('fullName') // 'Tom Dale'
    ```
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  return:
    description: The return value of the function backing the CP.
    type: Object
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 386
  description: |-
    Set the value of a computed property. If the function that backs your
    computed property does not accept arguments then the default action for
    setting would be to define the property on the current object, and set
    the value of the property to the value being set.

    Generally speaking if you intend for your computed property to be set
    you should pass `set(key, value)` function in hash as argument to `Ember.computed()` along with `get(key)` function.

    ```javascript
    let Person = Ember.Object.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,

      fullName: Ember.computed('firstName', 'lastName', {
        // getter
        get() {
          let firstName = this.get('firstName');
          let lastName = this.get('lastName');

          return firstName + ' ' + lastName;
        },
        // setter
        set(key, value) {
          let [firstName, lastName] = value.split(' ');

          this.set('firstName', firstName);
          this.set('lastName', lastName);

          return value;
        }
      })
    });

    let person = Person.create();

    person.set('fullName', 'Peter Wagenet');
    person.get('firstName'); // 'Peter'
    person.get('lastName');  // 'Wagenet'
    ```
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The key being accessed.
    type: String
  - name: newValue
    description: The new value being assigned.
    type: Object
  return:
    description: The return value of the function backing the CP.
    type: Object
  access: public
  tagname: ''
  class: Ember.ComputedProperty
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed.js
  line: 608
  description: |-
    Returns the cached value for a property, if one exists.
    This can be useful for peeking at the value of a computed
    property that is generated lazily, without accidentally causing
    it to be created.
  itemtype: method
  name: cacheFor
  params:
  - name: obj
    description: the object whose property you want to check
    type: Object
  - name: key
    description: |-
      the name of the property whose cached value you want
        to return
    type: String
  return:
    description: the cached value
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/computed_macros.js
  line: 33
  description: |-
    A computed property that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.

    Example

    ```javascript
    var ToDoList = Ember.Object.extend({
      isDone: Ember.computed.empty('todos')
    });

    var todoList = ToDoList.create({
      todos: ['Unit Test', 'Documentation', 'Release']
    });

    todoList.get('isDone'); // false
    todoList.get('todos').clear();
    todoList.get('isDone'); // true
    ```
  since: 1.6.0
  itemtype: method
  name: empty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which negate
      the original value for property
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 67
  description: |-
    A computed property that returns true if the value of the dependent
    property is NOT null, an empty string, empty array, or empty function.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasStuff: Ember.computed.notEmpty('backpack')
    });

    var hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });

    hamster.get('hasStuff');         // true
    hamster.get('backpack').clear(); // []
    hamster.get('hasStuff');         // false
    ```
  itemtype: method
  name: notEmpty
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which returns true if
      original value for property is not empty.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 98
  description: |-
    A computed property that returns true if the value of the dependent
    property is null or undefined. This avoids errors from JSLint complaining
    about use of ==, which can be technically confusing.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      isHungry: Ember.computed.none('food')
    });

    var hamster = Hamster.create();

    hamster.get('isHungry'); // true
    hamster.set('food', 'Banana');
    hamster.get('isHungry'); // false
    hamster.set('food', null);
    hamster.get('isHungry'); // true
    ```
  itemtype: method
  name: none
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which
      returns true if original value for property is null or undefined.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 132
  description: |-
    A computed property that returns the inverse boolean value
    of the original value for the dependent property.

    Example

    ```javascript
    var User = Ember.Object.extend({
      isAnonymous: Ember.computed.not('loggedIn')
    });

    var user = User.create({loggedIn: false});

    user.get('isAnonymous'); // true
    user.set('loggedIn', true);
    user.get('isAnonymous'); // false
    ```
  itemtype: method
  name: not
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which returns
      inverse of the original value for property
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 163
  description: |-
    A computed property that converts the provided dependent property
    into a boolean value.

    ```javascript
    var Hamster = Ember.Object.extend({
      hasBananas: Ember.computed.bool('numBananas')
    });

    var hamster = Hamster.create();

    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 0);
    hamster.get('hasBananas'); // false
    hamster.set('numBananas', 1);
    hamster.get('hasBananas'); // true
    hamster.set('numBananas', null);
    hamster.get('hasBananas'); // false
    ```
  itemtype: method
  name: bool
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which converts
      to boolean the original value for property
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 196
  description: |-
    A computed property which matches the original value for the
    dependent property against a given RegExp, returning `true`
    if the value matches the RegExp and `false` if it does not.

    Example

    ```javascript
    var User = Ember.Object.extend({
      hasValidEmail: Ember.computed.match('email', /^.+@.+\..+$/)
    });

    var user = User.create({loggedIn: false});

    user.get('hasValidEmail'); // false
    user.set('email', '');
    user.get('hasValidEmail'); // false
    user.set('email', 'ember_hamster@example.com');
    user.get('hasValidEmail'); // true
    ```
  itemtype: method
  name: match
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: regexp
    description: ''
    type: RegExp
  return:
    description: |-
      computed property which match
      the original value for property against a given RegExp
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 233
  description: |-
    A computed property that returns true if the provided dependent property
    is equal to the given value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      napTime: Ember.computed.equal('state', 'sleepy')
    });

    var hamster = Hamster.create();

    hamster.get('napTime'); // false
    hamster.set('state', 'sleepy');
    hamster.get('napTime'); // true
    hamster.set('state', 'hungry');
    hamster.get('napTime'); // false
    ```
  itemtype: method
  name: equal
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: String|Number|Object
  return:
    description: |-
      computed property which returns true if
      the original value for property is equal to the given value.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 267
  description: |-
    A computed property that returns true if the provided dependent property
    is greater than the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gt('numBananas', 10)
    });

    var hamster = Hamster.create();

    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 11);
    hamster.get('hasTooManyBananas'); // true
    ```
  itemtype: method
  name: gt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is greater than given value.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 301
  description: |-
    A computed property that returns true if the provided dependent property
    is greater than or equal to the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      hasTooManyBananas: Ember.computed.gte('numBananas', 10)
    });

    var hamster = Hamster.create();

    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('hasTooManyBananas'); // false
    hamster.set('numBananas', 10);
    hamster.get('hasTooManyBananas'); // true
    ```
  itemtype: method
  name: gte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is greater or equal then given value.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 335
  description: |-
    A computed property that returns true if the provided dependent property
    is less than the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lt('numBananas', 3)
    });

    var hamster = Hamster.create();

    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 2);
    hamster.get('needsMoreBananas'); // true
    ```
  itemtype: method
  name: lt
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is less then given value.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 369
  description: |-
    A computed property that returns true if the provided dependent property
    is less than or equal to the provided value.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      needsMoreBananas: Ember.computed.lte('numBananas', 3)
    });

    var hamster = Hamster.create();

    hamster.get('needsMoreBananas'); // true
    hamster.set('numBananas', 5);
    hamster.get('needsMoreBananas'); // false
    hamster.set('numBananas', 3);
    hamster.get('needsMoreBananas'); // true
    ```
  itemtype: method
  name: lte
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: value
    description: ''
    type: Number
  return:
    description: |-
      computed property which returns true if
      the original value for property is less or equal than given value.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 403
  description: |-
    A computed property that performs a logical `and` on the
    original values for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')
    });

    var hamster = Hamster.create();

    hamster.get('readyForCamp'); // false
    hamster.set('hasTent', true);
    hamster.get('readyForCamp'); // false
    hamster.set('hasBackpack', true);
    hamster.get('readyForCamp'); // true
    hamster.set('hasBackpack', 'Yes');
    hamster.get('readyForCamp'); // 'Yes'
    ```
  itemtype: method
  name: and
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which performs
      a logical `and` on the values of all the original values for properties.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 443
  description: |-
    A computed property which performs a logical `or` on the
    original values for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')
    });

    var hamster = Hamster.create();

    hamster.get('readyForRain'); // false
    hamster.set('hasUmbrella', true);
    hamster.get('readyForRain'); // true
    hamster.set('hasJacket', 'Yes');
    hamster.get('readyForRain'); // 'Yes'
    ```
  itemtype: method
  name: or
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which performs
      a logical `or` on the values of all the original values for properties.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 481
  description: |-
    A computed property that returns the array of values
    for the provided dependent properties.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      clothes: Ember.computed.collect('hat', 'shirt')
    });

    var hamster = Hamster.create();

    hamster.get('clothes'); // [null, null]
    hamster.set('hat', 'Camp Hat');
    hamster.set('shirt', 'Camp Shirt');
    hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']
    ```
  itemtype: method
  name: collect
  params:
  - name: dependentKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computed property which maps
      values of all passed in properties to an array.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 521
  description: |-
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property.

    ```javascript
    var Person = Ember.Object.extend({
      name: 'Alex Matchneer',
      nomen: Ember.computed.alias('name')
    });

    var alex = Person.create();

    alex.get('nomen'); // 'Alex Matchneer'
    alex.get('name');  // 'Alex Matchneer'

    alex.set('nomen', '@machty');
    alex.get('name');  // '@machty'
    ```
  itemtype: method
  name: alias
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates an
      alias to the original value for property.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 549
  description: |-
    Where `computed.alias` aliases `get` and `set`, and allows for bidirectional
    data flow, `computed.oneWay` only provides an aliased `get`. The `set` will
    not mutate the upstream property, rather causes the current property to
    become the value set. This causes the downstream property to permanently
    diverge from the upstream property.

    Example

    ```javascript
    var User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.oneWay('firstName')
    });

    var teddy = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });

    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'
    teddy.get('firstName');             // 'Teddy'
    ```
  itemtype: method
  name: oneWay
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates a
      one way computed property to the original value for property.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 586
  description: |-
    This is a more semantically meaningful alias of `computed.oneWay`,
    whose name is somewhat ambiguous as to which direction the data flows.
  itemtype: method
  name: reads
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates a
        one way computed property to the original value for property.
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 598
  description: |-
    Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides
    a readOnly one way binding. Very often when using `computed.oneWay` one does
    not also want changes to propagate back up, as they will replace the value.

    This prevents the reverse flow, and also throws an exception when it occurs.

    Example

    ```javascript
    var User = Ember.Object.extend({
      firstName: null,
      lastName: null,
      nickName: Ember.computed.readOnly('firstName')
    });

    var teddy = User.create({
      firstName: 'Teddy',
      lastName:  'Zeenny'
    });

    teddy.get('nickName');              // 'Teddy'
    teddy.set('nickName', 'TeddyBear'); // throws Exception
    // throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`
    teddy.get('firstName');             // 'Teddy'
    ```
  itemtype: method
  name: readOnly
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates a
      one way computed property to the original value for property.
    type: Ember.ComputedProperty
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/computed_macros.js
  line: 637
  description: |-
    Creates a new property that is an alias for another property
    on an object. Calls to `get` or `set` this property behave as
    though they were called on the original property, but also
    print a deprecation warning.
  itemtype: method
  name: deprecatingAlias
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: |-
      computed property which creates an
      alias with a deprecation to the original value for property.
    type: Ember.ComputedProperty
  since: 1.7.0
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/core.js
  line: 58
  description: The semantic version.
  itemtype: property
  name: VERSION
  type: String
  default: "'VERSION_STRING_PLACEHOLDER'"
  static: 1
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 69
  description: |-
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  itemtype: property
  name: ENV
  type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 103
  description: |-
    Determines whether Ember should add to `Array`, `Function`, and `String`
    native object prototypes, a few extra methods in order to provide a more
    friendly API.

    We generally recommend leaving this option set to true however, if you need
    to turn it off, you can add the configuration property
    `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.

    Note, when disabled (the default configuration for Ember Addons), you will
    instead have to access all methods and functions from the Ember
    namespace.
  itemtype: property
  name: EXTEND_PROTOTYPES
  type: Boolean
  default: 'true'
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 128
  description: |-
    The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
    a full stack trace during deprecation warnings.
  itemtype: property
  name: LOG_STACKTRACE_ON_DEPRECATION
  type: Boolean
  default: 'true'
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 139
  description: |-
    The `SHIM_ES5` property, when true, tells Ember to add ECMAScript 5 Array
    shims to older browsers.
  itemtype: property
  name: SHIM_ES5
  type: Boolean
  default: Ember.EXTEND_PROTOTYPES
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 150
  description: |-
    The `LOG_VERSION` property, when true, tells Ember to log versions of all
    dependent libraries in use.
  itemtype: property
  name: LOG_VERSION
  type: Boolean
  default: 'true'
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/core.js
  line: 161
  description: An empty function useful for some operations. Always returns `this`.
  itemtype: method
  name: K
  return:
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/deprecate_property.js
  line: 11
  description: |-
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  itemtype: method
  name: deprecateProperty
  params:
  - name: object
    description: The object to add the deprecated property to.
    type: Object
  - name: deprecatedKey
    description: The property to add (and print deprecation warnings upon accessing).
    type: String
  - name: newKey
    description: The property that will be aliased.
    type: String
  access: private
  tagname: ''
  since: 1.7.0
  class: Ember.Error
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 72
  description: Add an event listener
  itemtype: method
  name: addListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: target
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: once
    description: A flag whether a function should only be called once
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 104
  description: |-
    Remove an event listener

    Arguments should match those passed to `Ember.addListener`.
  itemtype: method
  name: removeListener
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: target
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 132
  description: |-
    Suspend listener during callback.

    This should only be used by the target of the event listener
    when it is taking an action that would cause the event, e.g.
    an object might suspend its property change listener while it is
    setting that property.
  itemtype: method
  name: suspendListener
  access: private
  tagname: ''
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: target
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 154
  description: Suspends multiple listeners during a callback.
  itemtype: method
  name: suspendListeners
  access: private
  tagname: ''
  params:
  - name: obj
    description: ''
  - name: eventNames
    description: Array of event names
    type: Array
  - name: target
    description: A target object or a function
    type: Object|Function
  - name: method
    description: A function or the name of a function to be called on `target`
    type: Function|String
  - name: callback
    description: ''
    type: Function
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 175
  description: Return a list of currently watched events
  access: private
  tagname: ''
  itemtype: method
  name: watchedEvents
  params:
  - name: obj
    description: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 187
  description: |-
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  itemtype: method
  name: sendEvent
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  - name: params
    description: Optional parameters for each listener.
    type: Array
  - name: actions
    description: Optional array of actions (listeners).
    type: Array
  return:
    description: 'true'
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 236
  access: private
  tagname: ''
  itemtype: method
  name: hasListeners
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 249
  access: private
  tagname: ''
  itemtype: method
  name: listenersFor
  params:
  - name: obj
    description: ''
  - name: eventName
    description: ''
    type: String
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/events.js
  line: 272
  description: |-
    Define a property as a function that should be executed when
    a specified event or events are triggered.


    ``` javascript
    var Job = Ember.Object.extend({
      logCompleted: Ember.on('completed', function() {
        console.log('Job completed!');
      })
    });

    var job = Job.create();

    Ember.sendEvent(job, 'completed'); // Logs 'Job completed!'
     ```
  itemtype: method
  name: 'on'
  params:
  - name: eventNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/expand_properties.js
  line: 10
  description: |-
    Expands `pattern`, invoking `callback` for each expansion.

    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.

    Example

    ```js
    function echo(arg){ console.log(arg); }

    Ember.expandProperties('foo.bar', echo);              //=> 'foo.bar'
    Ember.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    Ember.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    Ember.expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    Ember.expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
    Ember.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    Ember.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  itemtype: method
  name: expandProperties
  access: private
  tagname: ''
  params:
  - name: pattern
    description: The property pattern to expand.
    type: String
  - name: callback
    description: |-
      The callback to invoke.  It is invoked once per
      expansion, and is passed the expansion.
    type: Function
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/features.js
  line: 19
  description: |-
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.

    You can define the following configuration options:

    * `EmberENV.ENABLE_ALL_FEATURES` - force all features to be enabled.
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  itemtype: method
  name: isEnabled
  params:
  - name: feature
    description: The feature to check
    type: String
  return:
    description: ''
    type: Boolean
  since: 1.1.0
  access: public
  tagname: ''
  class: Ember.FEATURES
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/get_properties.js
  line: 3
  description: |-
    To get multiple properties at once, call `Ember.getProperties`
    with an object followed by a list of strings or an array:

    ```javascript
    Ember.getProperties(record, 'firstName', 'lastName', 'zipCode');
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```

    is equivalent to:

    ```javascript
    Ember.getProperties(record, ['firstName', 'lastName', 'zipCode']);
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  itemtype: method
  name: getProperties
  params:
  - name: obj
    description: ''
    type: Object
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/instrumentation.js
  line: 77
  description: Notifies event's subscribers, calls `before` and `after` hooks.
  itemtype: method
  name: instrument
  params:
  - name: name
    description: Namespaced event name.
    type: String
    optional: true
  - name: _payload
    description: ''
    type: Object
  - name: callback
    description: Function that you're instrumenting.
    type: Function
  - name: binding
    description: Context that instrument function is called with.
    type: Object
  access: private
  tagname: ''
  class: Ember.Instrumentation
  module: ember
  namespace: Ember.Instrumentation
- file: packages/ember-metal/lib/instrumentation.js
  line: 163
  description: Subscribes to a particular event or instrumented block of code.
  itemtype: method
  name: subscribe
  params:
  - name: pattern
    description: Namespaced event name.
    type: String
    optional: true
  - name: object
    description: Before and After hooks.
    type: Object
    optional: true
  return:
    description: ''
    type: Subscriber
  access: private
  tagname: ''
  class: Ember.Instrumentation
  module: ember
  namespace: Ember.Instrumentation
- file: packages/ember-metal/lib/instrumentation.js
  line: 204
  description: Unsubscribes from a particular event or instrumented block of code.
  itemtype: method
  name: unsubscribe
  params:
  - name: subscriber
    description: ''
    type: Object
    optional: true
  access: private
  tagname: ''
  class: Ember.Instrumentation
  module: ember
  namespace: Ember.Instrumentation
- file: packages/ember-metal/lib/instrumentation.js
  line: 226
  description: Resets `Ember.Instrumentation` by flushing list of subscribers.
  itemtype: method
  name: reset
  access: private
  tagname: ''
  class: Ember.Instrumentation
  module: ember
  namespace: Ember.Instrumentation
- file: packages/ember-metal/lib/is_blank.js
  line: 3
  description: |-
    A value is blank if it is empty or a whitespace string.

    ```javascript
    Ember.isBlank();                // true
    Ember.isBlank(null);            // true
    Ember.isBlank(undefined);       // true
    Ember.isBlank('');              // true
    Ember.isBlank([]);              // true
    Ember.isBlank('\n\t');          // true
    Ember.isBlank('  ');            // true
    Ember.isBlank({});              // false
    Ember.isBlank('\n\t Hello');    // false
    Ember.isBlank('Hello world');   // false
    Ember.isBlank([1,2,3]);         // false
    ```
  itemtype: method
  name: isBlank
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/is_empty.js
  line: 4
  description: |-
    Verifies that a value is `null` or an empty string, empty array,
    or empty function.

    Constrains the rules on `Ember.isNone` by returning true for empty
    string and empty arrays.

    ```javascript
    Ember.isEmpty();                // true
    Ember.isEmpty(null);            // true
    Ember.isEmpty(undefined);       // true
    Ember.isEmpty('');              // true
    Ember.isEmpty([]);              // true
    Ember.isEmpty({});              // false
    Ember.isEmpty('Adam Hawkins');  // false
    Ember.isEmpty([0,1,2]);         // false
    ```
  itemtype: method
  name: isEmpty
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/is_none.js
  line: 1
  description: |-
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.

    ```javascript
    Ember.isNone();              // true
    Ember.isNone(null);          // true
    Ember.isNone(undefined);     // true
    Ember.isNone('');            // false
    Ember.isNone([]);            // false
    Ember.isNone(function() {}); // false
    ```
  itemtype: method
  name: isNone
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/is_present.js
  line: 3
  description: |-
    A value is present if it not `isBlank`.

    ```javascript
    Ember.isPresent();                // false
    Ember.isPresent(null);            // false
    Ember.isPresent(undefined);       // false
    Ember.isPresent('');              // false
    Ember.isPresent([]);              // false
    Ember.isPresent('\n\t');          // false
    Ember.isPresent('  ');            // false
    Ember.isPresent({});              // true
    Ember.isPresent(false);           // true
    Ember.isPresent('\n\t Hello');    // true
    Ember.isPresent('Hello world');   // true
    Ember.isPresent([1,2,3]);         // true
    ```
  itemtype: method
  name: isPresent
  params:
  - name: obj
    description: Value to test
    type: Object
  return:
    description: ''
    type: Boolean
  since: 1.8.0
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/logger.js
  line: 59
  description: |-
    Logs the arguments to the console.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.log('log value of foo:', foo);
     // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: log
  params:
  - name: arguments
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/logger.js
  line: 76
  description: |-
    Prints the arguments to the console with a warning icon.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     Ember.Logger.warn('Something happened!');
     // "Something happened!" will be printed to the console with a warning icon.
     ```
  itemtype: method
  name: warn
  params:
  - name: arguments
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/logger.js
  line: 92
  description: |-
    Prints the arguments to the console with an error icon, red text and a stack trace.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     Ember.Logger.error('Danger! Danger!');
     // "Danger! Danger!" will be printed to the console in red text.
     ```
  itemtype: method
  name: error
  params:
  - name: arguments
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/logger.js
  line: 108
  description: |-
    Logs the arguments to the console.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.info('log value of foo:', foo);
     // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: info
  params:
  - name: arguments
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/logger.js
  line: 125
  description: |-
    Logs the arguments to the console in blue text.
    You can pass as many arguments as you want and they will be joined together with a space.

     ```javascript
     var foo = 1;
     Ember.Logger.debug('log value of foo:', foo);
     // "log value of foo: 1" will be printed to the console
     ```
  itemtype: method
  name: debug
  params:
  - name: arguments
    description: ''
    type: "*"
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/logger.js
  line: 142
  description: |-
    If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.

     ```javascript
     Ember.Logger.assert(true); // undefined
     Ember.Logger.assert(true === false); // Throws an Assertion failed error.
     ```
  itemtype: method
  name: assert
  params:
  - name: bool
    description: Value to test
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Logger
  module: ember
  namespace: Ember
- file: packages/ember-metal/lib/main.js
  line: 335
  description: |-
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.

    ```javascript
    Ember.onerror = function(error) {
      Em.$.ajax('/report-error', 'POST', {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      });
    };
    ```

    Internally, `Ember.onerror` is used as Backburner's error handler.
  itemtype: event
  name: onerror
  params:
  - name: error
    description: the error object
    type: Exception
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/map.js
  line: 77
  itemtype: method
  name: create
  static: 1
  return:
    description: ''
    type: Ember.OrderedSet
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 91
  itemtype: method
  name: clear
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 101
  itemtype: method
  name: add
  params:
  - name: obj
    description: ''
  - name: guid
    description: "(optional, and for internal use)"
  return:
    description: ''
    type: Ember.OrderedSet
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 121
  since: 1.8.0
  itemtype: method
  name: delete
  params:
  - name: obj
    description: ''
  - name: _guid
    description: "(optional and for internal use only)"
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 147
  itemtype: method
  name: isEmpty
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 156
  itemtype: method
  name: has
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 171
  itemtype: method
  name: forEach
  params:
  - name: fn
    description: ''
    type: Function
  - name: self
    description: ''
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 199
  itemtype: method
  name: toArray
  return:
    description: ''
    type: Array
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 208
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.OrderedSet
  access: private
  tagname: ''
  class: Ember.OrderedSet
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 259
  itemtype: method
  name: create
  static: 1
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 272
  description: This property will change as the number of objects in the map changes.
  since: 1.8.0
  itemtype: property
  name: size
  type: number
  default: '0'
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 283
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: the value associated with the key, or `undefined`
    type: "*"
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 300
  description: |-
    Adds a value to the map. If a value for the given key has already been
    provided, the new value will replace the old value.
  itemtype: method
  name: set
  params:
  - name: key
    description: ''
    type: "*"
  - name: value
    description: ''
    type: "*"
  return:
    description: ''
    type: Ember.Map
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 327
  description: Removes a value from the map for an associated key.
  since: 1.8.0
  itemtype: method
  name: delete
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: true if an item was removed, false otherwise
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 353
  description: Check whether a key is present.
  itemtype: method
  name: has
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: true if the item was present, false otherwise
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 365
  description: |-
    Iterate over all the keys and values. Calls the function once
    for each key, passing in value, key, and the map being iterated over,
    in that order.

    The keys are guaranteed to be iterated over in insertion order.
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: ''
    type: Function
  - name: self
    description: |-
      if passed, the `this` value inside the
        callback. By default, `this` is the map.
    type: "*"
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 403
  itemtype: method
  name: clear
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 413
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.Map
  access: private
  tagname: ''
  class: Ember.Map
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 437
  itemtype: method
  name: create
  static: 1
  params:
  - name: options
    description: ''
    optional: true
    props:
    - name: defaultValue
      description: ''
      type: "*"
      optional: true
  return:
    description: |-
      If options are passed, returns
        `Ember.MapWithDefault` otherwise returns `Ember.Map`
    type: Ember.MapWithDefault|Ember.Map
  access: private
  tagname: ''
  class: Ember.MapWithDefault
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 459
  description: Retrieve the value associated with a given key.
  itemtype: method
  name: get
  params:
  - name: key
    description: ''
    type: "*"
  return:
    description: the value associated with the key, or the default value
    type: "*"
  access: private
  tagname: ''
  class: Ember.MapWithDefault
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/map.js
  line: 479
  itemtype: method
  name: copy
  return:
    description: ''
    type: Ember.MapWithDefault
  access: private
  tagname: ''
  class: Ember.MapWithDefault
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/merge.js
  line: 4
  description: |-
    Merge the contents of two objects together into the first object.

    ```javascript
    Ember.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}
    var a = {first: 'Yehuda'};
    var b = {last: 'Katz'};
    Ember.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}
    ```
  itemtype: method
  name: merge
  params:
  - name: original
    description: The object to merge into
    type: Object
  - name: updates
    description: The object to copy properties from
    type: Object
  return:
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-metal/lib/meta.js
  line: 302
  description: |-
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.

    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  itemtype: method
  name: meta
  access: private
  tagname: ''
  params:
  - name: obj
    description: The object to retrieve meta for
    type: Object
  - name: writable
    description: |-
      Pass `false` if you do not intend to modify
        the meta hash, allowing the method to avoid making an unnecessary copy.
    type: Boolean
    optional: true
    optdefault: 'true'
  return:
    description: the meta hash for an object
    type: Object
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/mixin.js
  line: 412
  itemtype: method
  name: mixin
  params:
  - name: obj
    description: ''
  - name: mixins
    description: ''
    multiple: true
  return:
    description: obj
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/mixin.js
  line: 516
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    multiple: true
  access: public
  tagname: ''
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/mixin.js
  line: 531
  itemtype: method
  name: reopen
  params:
  - name: arguments
    description: ''
    multiple: true
  access: private
  tagname: ''
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/mixin.js
  line: 569
  itemtype: method
  name: apply
  params:
  - name: obj
    description: ''
  return:
    description: applied object
  access: private
  tagname: ''
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/mixin.js
  line: 598
  itemtype: method
  name: detect
  params:
  - name: obj
    description: ''
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Mixin
  module: ember
  submodule: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/mixin.js
  line: 663
  description: Denotes a required property for a mixin
  itemtype: method
  name: required
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/mixin.js
  line: 686
  description: |-
    Makes a method available via an additional name.

    ```javascript
    App.Person = Ember.Object.extend({
      name: function() {
        return 'Tomhuda Katzdale';
      },
      moniker: Ember.aliasMethod('name')
    });

    var goodGuy = App.Person.create();

    goodGuy.name();    // 'Tomhuda Katzdale'
    goodGuy.moniker(); // 'Tomhuda Katzdale'
    ```
  itemtype: method
  name: aliasMethod
  params:
  - name: methodName
    description: name of the method to alias
    type: String
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/mixin.js
  line: 716
  description: |-
    Specify a method that observes property changes.

    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```

    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  itemtype: method
  name: observer
  params:
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  return:
    description: func
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/mixin.js
  line: 774
  description: |-
    Specify a method that observes property changes.

    ```javascript
    Ember.Object.extend({
      valueObserver: Ember.immediateObserver('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```

    In the future, `Ember.observer` may become asynchronous. In this event,
    `Ember.immediateObserver` will maintain the synchronous behavior.

    Also available as `Function.prototype.observesImmediately` if prototype extensions are
    enabled.
  itemtype: method
  name: _immediateObserver
  params:
  - name: propertyNames
    description: ''
    type: String
    multiple: true
  - name: func
    description: ''
    type: Function
  deprecated: true
  deprecationMessage: Use `Ember.observer` instead.
  return:
    description: func
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-metal
- file: packages/ember-metal/lib/observer.js
  line: 27
  itemtype: method
  name: addObserver
  params:
  - name: obj
    description: ''
  - name: _path
    description: ''
    type: String
  - name: target
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/observer.js
  line: 47
  itemtype: method
  name: removeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: target
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/observer.js
  line: 63
  itemtype: method
  name: _addBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: target
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  deprecated: true
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/observer.js
  line: 93
  itemtype: method
  name: removeBeforeObserver
  params:
  - name: obj
    description: ''
  - name: path
    description: ''
    type: String
  - name: target
    description: ''
    type: Object|Function
  - name: method
    description: ''
    type: Function|String
    optional: true
  deprecated: true
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/properties.js
  line: 41
  description: |-
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `Ember.mixin()` to define new properties.

    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.

    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.

    ## Examples

    ```javascript
    // ES5 compatible mode
    Ember.defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });

    // define a simple property
    Ember.defineProperty(contact, 'lastName', undefined, 'Jolley');

    // define a computed property
    Ember.defineProperty(contact, 'fullName', Ember.computed(function() {
      return this.firstName+' '+this.lastName;
    }).property('firstName', 'lastName'));
    ```
  access: private
  tagname: ''
  itemtype: method
  name: defineProperty
  params:
  - name: obj
    description: the object to define this property on. This may be a prototype.
    type: Object
  - name: keyName
    description: the name of the property
    type: String
  - name: desc
    description: |-
      an instance of `Descriptor` (typically a
        computed property) or an ES5 descriptor.
        You must provide this or `data` but not both.
    type: Descriptor
    optional: true
  - name: data
    description: |-
      something other than a descriptor, that will
        become the explicit value of this property.
    type: "*"
    optional: true
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_events.js
  line: 21
  description: |-
    This function is called just before an object property is about to change.
    It will notify any before observers and prepare caches among other things.

    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyDidChange()` which you should call just
    after the property value changes.
  itemtype: method
  name: propertyWillChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_events.js
  line: 61
  description: |-
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.

    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually along with `Ember.propertyWillChange()` which you should call just
    before the property value changes.
  itemtype: method
  name: propertyDidChange
  params:
  - name: obj
    description: The object with the property that will change
    type: Object
  - name: keyName
    description: The property key (or path) that will change.
    type: String
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_events.js
  line: 200
  itemtype: method
  name: beginPropertyChanges
  chainable: 1
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_events.js
  line: 209
  itemtype: method
  name: endPropertyChanges
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_events.js
  line: 221
  description: |-
    Make a series of property changes together in an
    exception-safe way.

    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  itemtype: method
  name: changeProperties
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    optional: true
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_get.js
  line: 24
  description: |-
    Gets the value of a property on an object. If the property is computed,
    the function will be invoked. If the property is not defined but the
    object implements the `unknownProperty` method then that will be invoked.

    If you plan to run on IE8 and older browsers then you should use this
    method anytime you want to retrieve a property on an object that you don't
    know for sure is private. (Properties beginning with an underscore '_'
    are considered private.)

    On all newer browsers, you only need to use this method to retrieve
    properties if the property might not be defined on the object and you want
    to respect the `unknownProperty` handler. Otherwise you can ignore this
    method.

    Note that if the object itself is `undefined`, this method will throw
    an error.
  itemtype: method
  name: get
  params:
  - name: obj
    description: The object to retrieve from.
    type: Object
  - name: keyName
    description: The property key to retrieve
    type: String
  return:
    description: the property value or `null`.
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_get.js
  line: 91
  description: |-
    Normalizes a target/path pair to reflect that actual target/path that should
    be observed, etc. This takes into account passing in global property
    paths (i.e. a path beginning with a capital letter not defined on the
    target).
  access: private
  tagname: ''
  itemtype: method
  name: normalizeTuple
  params:
  - name: target
    description: The current target. May be `null`.
    type: Object
  - name: path
    description: A path on the target or a global property path.
    type: String
  return:
    description: a temporary array with the normalized target/path pair.
    type: Array
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_set.js
  line: 16
  description: |-
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change. If the
    property is not defined but the object implements the `setUnknownProperty`
    method then that will be invoked as well.
  itemtype: method
  name: set
  params:
  - name: obj
    description: The object to modify.
    type: Object
  - name: keyName
    description: The property key to set
    type: String
  - name: value
    description: The value to set
    type: Object
  return:
    description: the passed value.
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/property_set.js
  line: 132
  description: |-
    Error-tolerant form of `Ember.set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.

    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  itemtype: method
  name: trySet
  params:
  - name: root
    description: The object to modify.
    type: Object
  - name: path
    description: The property path to set
    type: String
  - name: value
    description: The value to set
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/replace.js
  line: 27
  description: |-
    Replaces objects in an array with the passed objects.

    ```javascript
      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]

      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]

      var array = [1,2,3];
      Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]
    ```
  itemtype: method
  name: replace
  deprecated: true
  params:
  - name: array
    description: The array the objects should be inserted into.
    type: Array
  - name: idx
    description: |-
      Starting index in the array to replace. If *idx* >=
      length, then append to the end of the array.
    type: Number
  - name: amt
    description: |-
      Number of elements that should be removed from the array,
      starting at *idx*
    type: Number
  - name: objects
    description: |-
      An array of zero or more objects that should be
      inserted into the array at *idx*
    type: Array
  return:
    description: The modified array.
    type: Array
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
- file: packages/ember-metal/lib/run_loop.js
  line: 70
  description: |-
    If no run-loop is present, it creates a new one. If a run loop is
    present it will queue itself to run on the existing run-loops action
    queue.

    Please note: This is not for normal usage, and should be used sparingly.

    If invoked when not within a run loop:

    ```javascript
    run.join(function() {
      // creates a new run-loop
    });
    ```

    Alternatively, if called within an existing run loop:

    ```javascript
    run(function() {
      // creates a new run-loop
      run.join(function() {
        // joins with the existing run-loop, and queues for invocation on
        // the existing run-loops action queue.
      });
    });
    ```
  itemtype: method
  name: join
  params:
  - name: target
    description: target of method to call
    type: Object
    optional: true
  - name: method
    description: |-
      Method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Any additional arguments you wish to pass to the method.
    type: Object
    optional: true
  return:
    description: |-
      Return value from invoking the passed function. Please note,
      when called within an existing loop, no return value is possible.
    type: Object
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 112
  description: |-
    Allows you to specify which context to call the specified function in while
    adding the execution of that function to the Ember run loop. This ability
    makes this method a great way to asynchronously integrate third-party libraries
    into your Ember application.

    `run.bind` takes two main arguments, the desired context and the function to
    invoke in that context. Any additional arguments will be supplied as arguments
    to the function that is passed in.

    Let's use the creation of a TinyMCE component as an example. Currently,
    TinyMCE provides a setup configuration option we can use to do some processing
    after the TinyMCE instance is initialized but before it is actually rendered.
    We can use that setup option to do some additional setup for our component.
    The component itself could look something like the following:

    ```javascript
    App.RichTextEditorComponent = Ember.Component.extend({
      initializeTinyMCE: Ember.on('didInsertElement', function() {
        tinymce.init({
          selector: '#' + this.$().prop('id'),
          setup: Ember.run.bind(this, this.setupEditor)
        });
      }),

      setupEditor: function(editor) {
        this.set('editor', editor);

        editor.on('change', function() {
          console.log('content changed!');
        });
      }
    });
    ```

    In this example, we use Ember.run.bind to bind the setupEditor method to the
    context of the App.RichTextEditorComponent and to have the invocation of that
    method be safely handled and executed by the Ember run loop.
  itemtype: method
  name: bind
  params:
  - name: target
    description: target of method to call
    type: Object
    optional: true
  - name: method
    description: |-
      Method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Any additional arguments you wish to pass to the method.
    type: Object
    optional: true
  return:
    description: returns a new function that will always have a particular context
    type: Function
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 172
  description: |-
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `run.end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.

    ```javascript
    run.begin();
    // code to be executed within a RunLoop
    run.end();
    ```
  itemtype: method
  name: begin
  return:
    description: ''
    type: Void
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 191
  description: |-
    Ends a RunLoop. This must be called sometime after you call
    `run.begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.

    ```javascript
    run.begin();
    // code to be executed within a RunLoop
    run.end();
    ```
  itemtype: method
  name: end
  return:
    description: ''
    type: Void
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 210
  description: |-
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  itemtype: property
  name: queues
  type: Array
  default: "['sync', 'actions', 'destroy']"
  access: private
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 222
  description: |-
    Adds the passed target/method and any optional arguments to the named
    queue to be executed at the end of the RunLoop. If you have not already
    started a RunLoop when calling this method one will be started for you
    automatically.

    At the end of a RunLoop, any methods scheduled in this way will be invoked.
    Methods will be invoked in an order matching the named queues defined in
    the `run.queues` property.

    ```javascript
    run.schedule('sync', this, function() {
      // this will be executed in the first RunLoop queue, when bindings are synced
      console.log('scheduled on sync queue');
    });

    run.schedule('actions', this, function() {
      // this will be executed in the 'actions' queue, after bindings have synced.
      console.log('scheduled on actions queue');
    });

    // Note the functions will be run in order based on the run queues order.
    // Output would be:
    //   scheduled on sync queue
    //   scheduled on actions queue
    ```
  itemtype: method
  name: schedule
  params:
  - name: queue
    description: |-
      The name of the queue to schedule against.
        Default queues are 'sync' and 'actions'
    type: String
  - name: target
    description: target object to use as the context when invoking a method.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke. If you pass a string it
        will be resolved on the target object at the time the scheduled item is
        invoked allowing you to change the target function.
    type: String|Function
  - name: arguments*
    description: Optional arguments to be passed to the queued method.
    type: Object
    optional: true
  return:
    description: ''
    type: Void
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 275
  description: |-
    Immediately flushes any events scheduled in the 'sync' queue. Bindings
    use this queue so this method is a useful way to immediately force all
    bindings in the application to sync.

    You should call this method anytime you need any changed state to propagate
    throughout the app immediately without repainting the UI (which happens
    in the later 'render' queue added by the `ember-views` package).

    ```javascript
    run.sync();
    ```
  itemtype: method
  name: sync
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 298
  description: |-
    Invokes the passed target/method and optional arguments after a specified
    period of time. The last parameter of this method must always be a number
    of milliseconds.

    You should use this method whenever you need to run some action after a
    period of time instead of using `setTimeout()`. This method will ensure that
    items that expire during the same script execution cycle all execute
    together, which is often more efficient than using a real setTimeout.

    ```javascript
    run.later(myContext, function() {
      // code here will execute within a RunLoop in about 500ms with this == myContext
    }, 500);
    ```
  itemtype: method
  name: later
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: "*"
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 328
  description: |-
    Schedule a function to run one time during the current RunLoop. This is equivalent
    to calling `scheduleOnce` with the "actions" queue.
  itemtype: method
  name: once
  params:
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: Object
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 347
  description: |-
    Schedules a function to run one time in a given queue of the current RunLoop.
    Calling this method with the same queue/target/method combination will have
    no effect (past the initial call).

    Note that although you can pass optional arguments these will not be
    considered when looking for duplicates. New arguments will replace previous
    calls.

    ```javascript
    function sayHi() {
      console.log('hi');
    }

    run(function() {
      run.scheduleOnce('afterRender', myContext, sayHi);
      run.scheduleOnce('afterRender', myContext, sayHi);
      // sayHi will only be executed once, in the afterRender queue of the RunLoop
    });
    ```

    Also note that passing an anonymous function to `run.scheduleOnce` will
    not prevent additional calls with an identical anonymous function from
    scheduling the items multiple times, e.g.:

    ```javascript
    function scheduleIt() {
      run.scheduleOnce('actions', myContext, function() {
        console.log('Closure');
      });
    }

    scheduleIt();
    scheduleIt();

    // "Closure" will print twice, even though we're using `run.scheduleOnce`,
    // because the function we pass to it is anonymous and won't match the
    // previously scheduled operation.
    ```

    Available queues, and their order, can be found at `run.queues`
  itemtype: method
  name: scheduleOnce
  params:
  - name: queue
    description: The name of the queue to schedule against. Default queues are 'sync'
      and 'actions'.
    type: String
    optional: true
  - name: target
    description: The target of the method to invoke.
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: Object
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 404
  description: |-
    Schedules an item to run from within a separate run loop, after
    control has been returned to the system. This is equivalent to calling
    `run.later` with a wait time of 1ms.

    ```javascript
    run.next(myContext, function() {
      // code to be executed in the next run loop,
      // which will be scheduled after the current one
    });
    ```

    Multiple operations scheduled with `run.next` will coalesce
    into the same later run loop, along with any other operations
    scheduled by `run.later` that expire right around the same
    time that `run.next` operations will fire.

    Note that there are often alternatives to using `run.next`.
    For instance, if you'd like to schedule an operation to happen
    after all DOM element operations have completed within the current
    run loop, you can make use of the `afterRender` run loop queue (added
    by the `ember-views` package, along with the preceding `render` queue
    where all the DOM element operations happen). Example:

    ```javascript
    App.MyCollectionView = Ember.CollectionView.extend({
      didInsertElement: function() {
        run.scheduleOnce('afterRender', this, 'processChildElements');
      },
      processChildElements: function() {
        // ... do something with collectionView's child view
        // elements after they've finished rendering, which
        // can't be done within the CollectionView's
        // `didInsertElement` hook because that gets run
        // before the child elements have been added to the DOM.
      }
    });
    ```

    One benefit of the above approach compared to using `run.next` is
    that you will be able to perform DOM/CSS operations before unprocessed
    elements are rendered to the screen, which may prevent flickering or
    other artifacts caused by delaying processing until after rendering.

    The other major benefit to the above approach is that `run.next`
    introduces an element of non-determinism, which can make things much
    harder to test, due to its reliance on `setTimeout`; it's much harder
    to guarantee the order of scheduled operations when they are scheduled
    outside of the current run loop, i.e. with `run.next`.
  itemtype: method
  name: next
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        If you pass a string it will be resolved on the
        target at the time the method is invoked.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: Object
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 468
  description: |-
    Cancels a scheduled item. Must be a value returned by `run.later()`,
    `run.once()`, `run.next()`, `run.debounce()`, or
    `run.throttle()`.

    ```javascript
    var runNext = run.next(myContext, function() {
      // will not be executed
    });

    run.cancel(runNext);

    var runLater = run.later(myContext, function() {
      // will not be executed
    }, 500);

    run.cancel(runLater);

    var runOnce = run.once(myContext, function() {
      // will not be executed
    });

    run.cancel(runOnce);

    var throttle = run.throttle(myContext, function() {
      // will not be executed
    }, 1, false);

    run.cancel(throttle);

    var debounce = run.debounce(myContext, function() {
      // will not be executed
    }, 1);

    run.cancel(debounce);

    var debounceImmediate = run.debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);

    // the 100ms delay until this method can be called again will be cancelled
    run.cancel(debounceImmediate);
    ```
  itemtype: method
  name: cancel
  params:
  - name: timer
    description: Timer object to cancel
    type: Object
  return:
    description: true if cancelled or false/undefined if it wasn't found
    type: Boolean
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 521
  description: |-
    Delay calling the target method until the debounce period has elapsed
    with no additional debounce calls. If `debounce` is called again before
    the specified time has elapsed, the timer is reset and the entire period
    must pass again before the target method is called.

    This method should be used when an event may be called multiple times
    but the action should only be called once when the event is done firing.
    A common example is for scroll events where you only want updates to
    happen once scrolling has ceased.

    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }

    var myContext = { name: 'debounce' };

    run.debounce(myContext, whoRan, 150);

    // less than 150ms passes
    run.debounce(myContext, whoRan, 150);

    // 150ms passes
    // whoRan is invoked with context myContext
    // console logs 'debounce ran.' one time.
    ```

    Immediate allows you to run the function immediately, but debounce
    other calls for this function until the wait time has elapsed. If
    `debounce` is called again before the specified time has elapsed,
    the timer is reset and the entire period must pass again before
    the method can be called again.

    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }

    var myContext = { name: 'debounce' };

    run.debounce(myContext, whoRan, 150, true);

    // console logs 'debounce ran.' one time immediately.
    // 100ms passes
    run.debounce(myContext, whoRan, 150, true);

    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
    run.debounce(myContext, whoRan, 150, true);

    // console logs 'debounce ran.' one time immediately.
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched

    ```
  itemtype: method
  name: debounce
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: wait
    description: Number of milliseconds to wait.
    type: Number
  - name: immediate
    description: |-
      Trigger the function on the leading instead
        of the trailing edge of the wait interval. Defaults to false.
    type: Boolean
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: Array
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 594
  description: |-
    Ensure that the target method is never called more frequently than
    the specified spacing period. The target method is called immediately.

    ```javascript
    function whoRan() {
      console.log(this.name + ' ran.');
    }

    var myContext = { name: 'throttle' };

    run.throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'

    // 50ms passes
    run.throttle(myContext, whoRan, 150);

    // 50ms passes
    run.throttle(myContext, whoRan, 150);

    // 150ms passes
    run.throttle(myContext, whoRan, 150);
    // whoRan is invoked with context myContext
    // console logs 'throttle ran.'
    ```
  itemtype: method
  name: throttle
  params:
  - name: target
    description: target of method to invoke
    type: Object
    optional: true
  - name: method
    description: |-
      The method to invoke.
        May be a function or a string. If you pass a string
        then it will be looked up on the passed target.
    type: Function|String
  - name: args*
    description: Optional arguments to pass to the timeout.
    type: Object
    optional: true
  - name: spacing
    description: Number of milliseconds to space out requests.
    type: Number
  - name: immediate
    description: |-
      Trigger the function on the leading instead
        of the trailing edge of the wait interval. Defaults to true.
    type: Boolean
  return:
    description: Timer information for use in cancelling, see `run.cancel`.
    type: Array
  access: public
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/run_loop.js
  line: 648
  description: |-
    Add a new named queue after the specified queue.

    The queue to add will only be added once.
  itemtype: method
  name: _addQueue
  params:
  - name: name
    description: the name of the queue to add.
    type: String
  - name: after
    description: the name of the queue to add after.
    type: String
  access: private
  tagname: ''
  class: Ember.run
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/set_properties.js
  line: 4
  description: |-
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.

    ```javascript
    var anObject = Ember.Object.create();

    anObject.setProperties({
      firstName: 'Stanley',
      lastName: 'Stuart',
      age: 21
    });
    ```
  itemtype: method
  name: setProperties
  params:
  - name: obj
    description: ''
  - name: properties
    description: ''
    type: Object
  return:
    description: properties
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
  namespace: Ember
- file: packages/ember-metal/lib/utils.js
  line: 9
  description: |-
    Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
    jQuery master. We'll just bootstrap our own uuid now.
  access: private
  tagname: ''
  return:
    description: the uuid
    type: Number
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 18
  description: |-
    Generates a universally unique identifier. This method
    is used internally by Ember for assisting with
    the generation of GUID's and other unique identifiers.
  access: public
  tagname: ''
  return:
    description: "[description]"
    type: Number
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 30
  description: Prefix used for guids through out Ember.
  access: private
  tagname: ''
  itemtype: property
  name: GUID_PREFIX
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 44
  description: |-
    Strongly hint runtimes to intern the provided string.

    When do I need to use this function?

    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.

    Why?

    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.

    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.

    How do I know if my string is a rope or symbol?

    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.

    Some numbers: http://jsperf.com/eval-vs-keys/8

    Known Trick™
  access: private
  tagname: ''
  return:
    description: interned version of the provided string
    type: String
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 102
  description: |-
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.

    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  access: private
  tagname: ''
  itemtype: property
  name: GUID_KEY
  type: String
  final: 1
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 137
  description: |-
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `Ember.guidFor(obj)`, which return an existing guid if available.
  access: private
  tagname: ''
  itemtype: method
  name: generateGuid
  params:
  - name: obj
    description: |-
      Object the guid will be used for. If passed in, the guid will
        be saved on the object and reused whenever you pass the same object
        again.

        If no object is passed, just generate a new guid.
    type: Object
    optional: true
  - name: prefix
    description: |-
      Prefix to place in front of the guid. Useful when you want to
        separate the guid into separate namespaces.
    type: String
    optional: true
  return:
    description: the guid
    type: String
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 175
  description: |-
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `Ember.Object`-based or not, but be aware that it will add a `_guid`
    property.

    You can also use this method on DOM Element objects.
  access: public
  tagname: ''
  itemtype: method
  name: guidFor
  params:
  - name: obj
    description: any object, string, number, Element, or primitive
    type: Object
  return:
    description: the unique guid for this instance.
    type: String
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 283
  description: |-
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  access: private
  tagname: ''
  itemtype: method
  name: wrap
  params:
  - name: func
    description: The function to call
    type: Function
  - name: superFunc
    description: The super function.
    type: Function
  return:
    description: wrapped function.
    type: Function
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 340
  description: |-
    Checks to see if the `methodName` exists on the `obj`.

    ```javascript
    var foo = { bar: function() { return 'bar'; }, baz: null };

    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  itemtype: method
  name: canInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 362
  description: |-
    Checks to see if the `methodName` exists on the `obj`,
    and if it does, invokes it with the arguments passed.

    ```javascript
    var d = new Date('03/15/2013');

    Ember.tryInvoke(d, 'getTime');              // 1363320000000
    Ember.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000
    Ember.tryInvoke(d, 'noSuchMethod', [2014]); // undefined
    ```
  itemtype: method
  name: tryInvoke
  params:
  - name: obj
    description: The object to check for the method
    type: Object
  - name: methodName
    description: The method name to check for
    type: String
  - name: args
    description: The arguments to pass to the method
    type: Array
    optional: true
  return:
    description: the return value of the invoked method or undefined if it cannot
      be invoked
    type: "*"
  access: public
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 394
  description: |-
    Forces the passed object to be part of an array. If the object is already
    an array, it will return the object. Otherwise, it will add the object to
    an array. If obj is `null` or `undefined`, it will return an empty array.

    ```javascript
    Ember.makeArray();            // []
    Ember.makeArray(null);        // []
    Ember.makeArray(undefined);   // []
    Ember.makeArray('lindsay');   // ['lindsay']
    Ember.makeArray([1, 2, 42]);  // [1, 2, 42]

    var controller = Ember.ArrayProxy.create({ content: [] });

    Ember.makeArray(controller) === controller;  // true
    ```
  itemtype: method
  name: makeArray
  params:
  - name: obj
    description: the object
    type: Object
  return:
    description: ''
    type: Array
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 422
  description: |-
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.

    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  itemtype: method
  name: inspect
  params:
  - name: obj
    description: The object you want to inspect.
    type: Object
  return:
    description: A description of the object
    type: String
  since: 1.4.0
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 477
  params:
  - name: t
    description: target
    type: Object
  - name: m
    description: method
    type: Function
  - name: a
    description: args
    type: Array
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/utils.js
  line: 496
  params:
  - name: t
    description: target
    type: Object
  - name: m
    description: method
    type: String
  - name: a
    description: args
    type: Array
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/watching.js
  line: 21
  description: |-
    Starts watching a property on an object. Whenever the property changes,
    invokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the
    primitive used by observers and dependent keys; usually you will never call
    this method directly but instead use higher level methods like
    `Ember.addObserver()`
  access: private
  tagname: ''
  itemtype: method
  name: watch
  params:
  - name: obj
    description: ''
  - name: _keyPath
    description: ''
    type: String
  class: Ember
  module: ember-metal
- file: packages/ember-metal/lib/watching.js
  line: 67
  description: |-
    Tears down the meta on an object so that it can be garbage collected.
    Multiple calls will have no effect.
  itemtype: method
  name: destroy
  params:
  - name: obj
    description: the object to destroy
    type: Object
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember
  module: ember-metal
- file: packages/ember-routing-htmlbars/lib/helpers/query-params.js
  line: 9
  description: |-
    This is a helper to be used in conjunction with the link-to helper.
    It will supply url query parameters to the target route.

    Example

    ```handlebars
    {{#link-to 'posts' (query-params direction="asc")}}Sort{{/link-to}}
    ```
  itemtype: method
  name: query-params
  params:
  - name: hash
    description: takes a hash of query parameters
    type: Object
  return:
    description: A `QueryParams` object for `{{link-to}}`
    type: Object
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-routing-htmlbars
- file: packages/ember-routing-htmlbars/lib/keywords/action.js
  line: 9
  description: |-
    The `{{action}}` helper provides a way to pass triggers for behavior (usually
    just a function) between components, and into components from controllers.

    ### Passing functions with the action helper

    There are three contexts an action helper can be used in. The first two
    contexts to discuss are attribute context, and Handlebars value context.

    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    {{! Examples of Handlebars value context }}
    {{input on-input=(action "save")}}
    {{yield (action "refreshData") andAnotherParam}}
    ```

    In these contexts,
    the helper is called a "closure action" helper. It's behavior is simple:
    If passed a function name, read that function off the `actions` property
    of the current context. Once that function is read (or if a function was
    passed), create a closure over that function and any arguments.

    The resulting value of an action helper used this way is simply a function.
    For example with this attribute context example:

    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    ```

    The resulting template render logic would be:

    ```js
    var div = document.createElement('div');
    var actionFunction = (function(context){
      return function() {
        return context.actions.save.apply(context, arguments);
      };
    })(context);
    div.onclick = actionFunction;
    ```

    Thus when the div is clicked, the action on that context is called.
    Because the `actionFunction` is just a function, closure actions can be
    passed between components the still execute in the correct context.

    Here is an example action handler on a component:

    ```js
    export default Ember.Component.extend({
      actions: {
        save() {
          this.get('model').save();
        }
      }
    });
    ```

    Actions are always looked up on the `actions` property of the current context.
    This avoids collisions in the naming of common actions, such as `destroy`.

    Two options can be passed to the `action` helper when it is used in this way.

    * `target=someProperty` will look to `someProperty` instead of the current
      context for the `actions` hash. This can be useful when targetting a
      service for actions.
    * `value="target.value"` will read the path `target.value` off the first
      argument to the action when it is called and rewrite the first argument
      to be that value. This is useful when attaching actions to event listeners.

    ### Invoking an action

    Closure actions curry both their scope and any arguments. When invoked, any
    additional arguments are added to the already curried list.

    Actions should be invoked using the [sendAction](/api/classes/Ember.Component.html#method_sendAction)
    method. The first argument to `sendAction` is the action to be called, and
    additional arguments are passed to the action function. This has interesting
    properties combined with currying of arguments. For example:

    ```js
    export default Ember.Component.extend({
      actions: {
        // Usage {{input on-input=(action (action 'setName' model) value="target.value")}}
        setName(model, name) {
          model.set('name', name);
        }
      }
    });
    ```

    The first argument (`model`) was curried over, and the run-time argument (`event`)
    becomes a second argument. Action calls be nested this way because each simply
    returns a function. Any function can be passed to the `{{action` helper, including
    other actions.

    Actions invoked with `sendAction` have the same currying behavior as demonstrated
    with `on-input` above. For example:

    ```js
    export default Ember.Component.extend({
      actions: {
        setName(model, name) {
          model.set('name', name);
        }
      }
    });
    ```

    ```handlebars
    {{my-input submit=(action 'setName' model)}}
    ```

    ```js
    // app/components/my-component.js
    export default Ember.Component.extend({
      click() {
        // Note that model is not passed, it was curried in the template
        this.sendAction('submit', 'bob');
      }
    });
    ```

    ### Attaching actions to DOM

    The third context the `{{action` helper can be used in we call "element space".
    For example:

    ```handlebars
    {{! An example of element space }}
    <div {{action "save"}}></div>
    ```

    Used this way, the `{{action}}` helper provides a useful shortcut for
    registering an HTML element within a template for a single DOM event and
    forwarding that interaction to the template's context (controller or component).

    If the context of a template is a controller, actions used this way will
    bubble to routes when the controller does not implement the specified action.
    Once an action hits a route, it will bubble through the route hierarchy.

    ### Event Propagation

    `{{action` helpers called in element space can control event bubbling.

    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:

    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```

    To disable bubbling, pass `bubbles=false` to the helper:

    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```

    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)
    'Responding to Browser Events' for more information.

    ### Specifying DOM event type

    `{{action` helpers called in element space can specify an event type.

    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:

    ```handlebars
    <div {{action "anActionName" on="double-click"}}>
      click me
    </div>
    ```

    See [Event Names](/api/classes/Ember.View.html#toc_event-names) for a list of
    acceptable DOM event names.

    ### Specifying whitelisted modifier keys

    `{{action` helpers called in element space can specify modifier keys.

    By default the `{{action}}` helper will ignore click event with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.

    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```

    This way the `{{action}}` will fire when clicking with the alt key pressed down.

    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.

    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```

    ### Specifying a Target

    A `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:

    ```handlebars
    {{! app/templates/application.hbs }}
    <div {{action "anActionName" target=someService}}>
      click me
    </div>
    ```

    ```javascript
    // app/controllers/application.js
    export default Ember.Controller.extend({
      someService: Ember.inject.service()
    });
    ```
  itemtype: method
  name: action
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-routing-htmlbars/lib/keywords/render.js
  line: 16
  description: |-
    Calling ``{{render}}`` from within a template will insert another
    template that matches the provided name. The inserted template will
    access its properties on its own controller (rather than the controller
    of the parent template).
    If a view class with the same name exists, the view class also will be used.
    Note: A given controller may only be used *once* in your app in this manner.
    A singleton instance of the controller will be created for you.
    Example:

    ```javascript
    App.NavigationController = Ember.Controller.extend({
      who: "world"
    });
    ```

    ```handlebars
    <!-- navigation.hbs -->
    Hello, {{who}}.
    ```

    ```handlebars
    <!-- application.hbs -->
    <h1>My great app</h1>
    {{render "navigation"}}
    ```

    ```html
    <h1>My great app</h1>
    <div class='ember-view'>
      Hello, world.
    </div>
    ```

    Optionally you may provide a second argument: a property path
    that will be bound to the `model` property of the controller.
    If a `model` property path is specified, then a new instance of the
    controller will be created and `{{render}}` can be used multiple times
    with the same name.

    For example if you had this `author` template.

    ```handlebars
    <div class="author">
      Written by {{firstName}} {{lastName}}.
      Total Posts: {{postCount}}
    </div>
    ```

    You could render it inside the `post` template using the `render` helper.

    ```handlebars
    <div class="post">
      <h1>{{title}}</h1>
      <div>{{body}}</div>
      {{render "author" author}}
    </div>
    ```
  itemtype: method
  name: render
  params:
  - name: name
    description: ''
    type: String
  - name: context
    description: ''
    type: Object?
  - name: options
    description: ''
    type: Hash
  return:
    description: HTML string
    type: String
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 6
  description: |-
    The `{{link-to}}` component renders a link to the supplied
    `routeName` passing an optionally supplied model to the
    route as its `model` context of the route. The block
    for `{{link-to}}` becomes the innerHTML of the rendered
    element:

    ```handlebars
    {{#link-to 'photoGallery'}}
      Great Hamster Photos
    {{/link-to}}
    ```

    You can also use an inline form of `{{link-to}}` component by
    passing the link text as the first argument
    to the component:

    ```handlebars
    {{link-to 'Great Hamster Photos' 'photoGallery'}}
    ```

    Both will result in:

    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```

    ### Supplying a tagName
    By default `{{link-to}}` renders an `<a>` element. This can
    be overridden for a single use of `{{link-to}}` by supplying
    a `tagName` option:

    ```handlebars
    {{#link-to 'photoGallery' tagName="li"}}
      Great Hamster Photos
    {{/link-to}}
    ```

    ```html
    <li>
      Great Hamster Photos
    </li>
    ```

    To override this option for your entire application, see
    "Overriding Application-wide Defaults".

    ### Disabling the `link-to` component
    By default `{{link-to}}` is enabled.
    any passed value to the `disabled` component property will disable
    the `link-to` component.

    static use: the `disabled` option:

    ```handlebars
    {{#link-to 'photoGallery' disabled=true}}
      Great Hamster Photos
    {{/link-to}}
    ```

    dynamic use: the `disabledWhen` option:

    ```handlebars
    {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}
      Great Hamster Photos
    {{/link-to}}
    ```

    any passed value to `disabled` will disable it except `undefined`.
    to ensure that only `true` disable the `link-to` component you can
    override the global behaviour of `Ember.LinkComponent`.

    ```javascript
    Ember.LinkComponent.reopen({
      disabled: Ember.computed(function(key, value) {
        if (value !== undefined) {
          this.set('_isDisabled', value === true);
        }
        return value === true ? get(this, 'disabledClass') : false;
      })
    });
    ```

    see "Overriding Application-wide Defaults" for more.

    ### Handling `href`
    `{{link-to}}` will use your application's Router to
    fill the element's `href` property with a url that
    matches the path to the supplied `routeName` for your
    router's configured `Location` scheme, which defaults
    to Ember.HashLocation.

    ### Handling current route
    `{{link-to}}` will apply a CSS class name of 'active'
    when the application's current route matches
    the supplied routeName. For example, if the application's
    current route is 'photoGallery.recent' the following
    use of `{{link-to}}`:

    ```handlebars
    {{#link-to 'photoGallery.recent'}}
      Great Hamster Photos
    {{/link-to}}
    ```

    will result in

    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```

    The CSS class name used for active classes can be customized
    for a single use of `{{link-to}}` by passing an `activeClass`
    option:

    ```handlebars
    {{#link-to 'photoGallery.recent' activeClass="current-url"}}
      Great Hamster Photos
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```

    To override this option for your entire application, see
    "Overriding Application-wide Defaults".

    ### Keeping a link active for other routes

    If you need a link to be 'active' even when it doesn't match
    the current route, you can use the the `current-when`
    argument.

    ```handlebars
    {{#link-to 'photoGallery' current-when='photos'}}
      Photo Gallery
    {{/link-to}}
    ```

    This may be helpful for keeping links active for:

    * non-nested routes that are logically related
    * some secondary menu approaches
    * 'top navigation' with 'sub navigation' scenarios

    A link will be active if `current-when` is `true` or the current
    route is the route this link would transition to.

    To match multiple routes 'space-separate' the routes:

    ```handlebars
    {{#link-to 'gallery' current-when='photos drawings paintings'}}
      Art Gallery
    {{/link-to}}
    ```

    ### Supplying a model
    An optional model argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:

    ```javascript
    App.Router.map(function() {
      this.route("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```

    ```handlebars
    {{#link-to 'photoGallery' aPhoto}}
      {{aPhoto.title}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```

    ### Supplying multiple models
    For deep-linking to route paths that contain multiple
    dynamic segments, multiple model arguments can be used.
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:

    ```javascript
    App.Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
    This argument will become the model context of the linked route:

    ```handlebars
    {{#link-to 'photoGallery.comment' aPhoto comment}}
      {{comment.body}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```

    ### Supplying an explicit dynamic segment value
    If you don't have a model object available to pass to `{{link-to}}`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:

    ```javascript
    App.Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" });
    });
    ```

    ```handlebars
    {{#link-to 'photoGallery' aPhotoId}}
      {{aPhoto.title}}
    {{/link-to}}
    ```

    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```

    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.

    ### Allowing Default Action

     By default the `{{link-to}}` component prevents the default browser action
     by calling `preventDefault()` as this sort of action bubbling is normally
     handled internally and we do not want to take the browser to a new URL (for
     example).

     If you need to override this behavior specify `preventDefault=false` in
     your template:

    ```handlebars
    {{#link-to 'photoGallery' aPhotoId preventDefault=false}}
      {{aPhotoId.title}}
    {{/link-to}}
    ```

    ### Overriding attributes
    You can override any given property of the `Ember.LinkComponent`
    that is generated by the `{{link-to}}` component by passing
    key/value pairs, like so:

    ```handlebars
    {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}
      Uh-mazing!
    {{/link-to}}
    ```

    See [Ember.LinkComponent](/api/classes/Ember.LinkComponent.html) for a
    complete list of overrideable properties. Be sure to also
    check out inherited properties of `LinkComponent`.

    ### Overriding Application-wide Defaults
    ``{{link-to}}`` creates an instance of `Ember.LinkComponent`
    for rendering. To override options for your entire
    application, reopen `Ember.LinkComponent` and supply the
    desired values:

    ``` javascript
    Ember.LinkComponent.reopen({
      activeClass: "is-active",
      tagName: 'li'
    })
    ```

    It is also possible to override the default event in
    this manner:

    ``` javascript
    Ember.LinkComponent.reopen({
      eventName: 'customEventName'
    });
    ```
  itemtype: method
  name: link-to
  params:
  - name: routeName
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
    optional: true
    multiple: true
  - name: options
    description: Handlebars key/value pairs of options, you can override any property
      of Ember.LinkComponent
    type: Object
    optional: true
  return:
    description: HTML string
    type: String
  see:
  - "{Ember.LinkComponent}"
  access: public
  tagname: ''
  class: Ember.Templates.helpers
  module: ember
  submodule: ember-templates
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 351
  deprecated: true
  deprecationMessage: Use current-when instead.
  itemtype: property
  name: currentWhen
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 358
  description: Used to determine when this `LinkComponent` is active.
  itemtype: property
  name: currentWhen
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 366
  description: Sets the `title` attribute of the `LinkComponent`'s HTML element.
  itemtype: property
  name: title
  default: 'null'
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 375
  description: Sets the `rel` attribute of the `LinkComponent`'s HTML element.
  itemtype: property
  name: rel
  default: 'null'
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 384
  description: Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.
  itemtype: property
  name: tabindex
  default: 'null'
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 393
  description: Sets the `target` attribute of the `LinkComponent`'s HTML element.
  since: 1.8.0
  itemtype: property
  name: target
  default: 'null'
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 403
  description: |-
    The CSS class to apply to `LinkComponent`'s element when its `active`
    property is `true`.
  itemtype: property
  name: activeClass
  type: String
  default: active
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 414
  description: |-
    The CSS class to apply to `LinkComponent`'s element when its `loading`
    property is `true`.
  itemtype: property
  name: loadingClass
  type: String
  default: loading
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 425
  description: |-
    The CSS class to apply to a `LinkComponent`'s element when its `disabled`
    property is `true`.
  itemtype: property
  name: disabledClass
  type: String
  default: disabled
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 437
  description: |-
    Determines whether the `LinkComponent` will trigger routing via
    the `replaceWith` routing strategy.
  itemtype: property
  name: replace
  type: Boolean
  default: 'false'
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 448
  description: |-
    By default the `{{link-to}}` component will bind to the `href` and
    `title` attributes. It's discouraged that you override these defaults,
    however you can push onto the array if needed.
  itemtype: property
  name: attributeBindings
  type: Array | String
  default: "['title', 'rel', 'tabindex', 'target']"
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 460
  description: |-
    By default the `{{link-to}}` component will bind to the `active`, `loading`,
    and `disabled` classes. It is discouraged to override these directly.
  itemtype: property
  name: classNameBindings
  type: Array
  default: "['active', 'loading', 'disabled']"
  access: public
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 471
  description: |-
    By default the `{{link-to}}` component responds to the `click` event. You
    can override this globally by setting this property to your custom
    event name.

    This is particularly useful on mobile when one wants to avoid the 300ms
    click delay using some sort of custom `tap` event.
  itemtype: property
  name: eventName
  type: String
  default: click
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 489
  description: |-
    Triggers the `LinkComponent`'s routing behavior. If
    `eventName` is changed to a value other than `click`
    the routing behavior will trigger on that custom event
    instead.
  itemtype: event
  name: click
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 499
  description: |-
    An overridable method called when `LinkComponent` objects are instantiated.

    Example:

    ```javascript
    App.MyLinkComponent = Ember.LinkComponent.extend({
      init: function() {
        this._super.apply(this, arguments);
        Ember.Logger.log('Event is ' + this.get('eventName'));
      }
    });
    ```

    NOTE: If you do override `init` for a framework class like `Ember.View`,
    be sure to call `this._super.apply(this, arguments)` in your
    `init` declaration! If you don't, Ember may not have an opportunity to
    do important setup work, and you'll see strange behavior in your
    application.
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 532
  description: |-
    Accessed as a classname binding to apply the `LinkComponent`'s `disabledClass`
    CSS `class` to the element when the link is disabled.

    When `true` interactions with the element will not trigger route changes.
  itemtype: property
  name: disabled
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 572
  description: |-
    Accessed as a classname binding to apply the `LinkComponent`'s `activeClass`
    CSS `class` to the element when the link is active.

    A `LinkComponent` is considered active when its `currentWhen` property is `true`
    or the application's current route is the route the `LinkComponent` would trigger
    transitions into.

    The `currentWhen` property can match against multiple routes by separating
    route names using the ` ` (space) character.
  itemtype: property
  name: active
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 615
  description: Event handler that invokes the link, activating the associated route.
  access: private
  tagname: ''
  itemtype: method
  name: _invoke
  params:
  - name: event
    description: ''
    type: Event
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 687
  description: |-
    Sets the element's `href` attribute to the url for
    the `LinkComponent`'s targeted route.

    If the `LinkComponent`'s `tagName` is changed to a value other
    than `a`, this property will be ignored.
  itemtype: property
  name: href
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing-views/lib/components/link-to.js
  line: 751
  description: |-
    The default href value to use while a link-to is loading.
    Only applies when tagName is 'a'
  itemtype: property
  name: loadingHref
  type: String
  default: "#"
  access: private
  tagname: ''
  class: Ember.LinkComponent
  module: ember
  submodule: ember-routing-views
  namespace: Ember
- file: packages/ember-routing/lib/ext/controller.js
  line: 12
  description: |-
    Defines which query parameters the controller accepts.
    If you give the names ['category','page'] it will bind
    the values of these query parameters to the variables
    `this.category` and `this.page`
  itemtype: property
  name: queryParams
  access: public
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/ext/controller.js
  line: 23
  itemtype: property
  name: _qpDelegate
  access: private
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/ext/controller.js
  line: 29
  itemtype: method
  name: _qpChanged
  access: private
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/ext/controller.js
  line: 41
  description: |-
    Transition the application into another route. The route may
    be either a single route or route path:

    ```javascript
    aController.transitionToRoute('blogPosts');
    aController.transitionToRoute('blogPosts.recentEntries');
    ```

    Optionally supply a model for the route in question. The model
    will be serialized into the URL using the `serialize` hook of
    the route:

    ```javascript
    aController.transitionToRoute('blogPost', aPost);
    ```

    If a literal is passed (such as a number or a string), it will
    be treated as an identifier instead. In this case, the `model`
    hook of the route will be triggered:

    ```javascript
    aController.transitionToRoute('blogPost', 1);
    ```

    Multiple models will be applied last to first recursively up the
    route tree.

    ```javascript
    App.Router.map(function() {
      this.route('blogPost', { path: ':blogPostId' }, function() {
        this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
      });
    });

    aController.transitionToRoute('blogComment', aPost, aComment);
    aController.transitionToRoute('blogComment', 1, 13);
    ```

    It is also possible to pass a URL (a string that starts with a
    `/`). This is intended for testing and debugging purposes and
    should rarely be used in production code.

    ```javascript
    aController.transitionToRoute('/');
    aController.transitionToRoute('/blog/post/1/comment/13');
    aController.transitionToRoute('/blog/posts?sort=title');
    ```

    An options hash with a `queryParams` property may be provided as
    the final argument to add query parameters to the destination URL.

    ```javascript
    aController.transitionToRoute('blogPost', 1, {
      queryParams: {showComments: 'true'}
    });

    // if you just want to transition the query parameters without changing the route
    aController.transitionToRoute({queryParams: {sort: 'date'}});
    ```

    See also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).
  params:
  - name: name
    description: the name of the route or a URL
    type: String
  - name: models
    description: |-
      the model(s) or identifier(s) to be used
        while transitioning to the route.
    type: "...Object"
  - name: options
    description: |-
      optional hash with a queryParams property
        containing a mapping of query parameters
    type: Object
    optional: true
  itemtype: method
  name: transitionToRoute
  access: public
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/ext/controller.js
  line: 120
  description: |-
    Transition into another route while replacing the current URL, if possible.
    This will replace the current history entry instead of adding a new one.
    Beside that, it is identical to `transitionToRoute` in all other respects.

    ```javascript
    aController.replaceRoute('blogPosts');
    aController.replaceRoute('blogPosts.recentEntries');
    ```

    Optionally supply a model for the route in question. The model
    will be serialized into the URL using the `serialize` hook of
    the route:

    ```javascript
    aController.replaceRoute('blogPost', aPost);
    ```

    If a literal is passed (such as a number or a string), it will
    be treated as an identifier instead. In this case, the `model`
    hook of the route will be triggered:

    ```javascript
    aController.replaceRoute('blogPost', 1);
    ```

    Multiple models will be applied last to first recursively up the
    route tree.

    ```javascript
    App.Router.map(function() {
      this.route('blogPost', { path: ':blogPostId' }, function() {
        this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
      });
    });

    aController.replaceRoute('blogComment', aPost, aComment);
    aController.replaceRoute('blogComment', 1, 13);
    ```

    It is also possible to pass a URL (a string that starts with a
    `/`). This is intended for testing and debugging purposes and
    should rarely be used in production code.

    ```javascript
    aController.replaceRoute('/');
    aController.replaceRoute('/blog/post/1/comment/13');
    ```
  params:
  - name: name
    description: the name of the route or a URL
    type: String
  - name: models
    description: |-
      the model(s) or identifier(s) to be used
      while transitioning to the route.
    type: "...Object"
  itemtype: method
  name: replaceRoute
  access: private
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/location/api.js
  line: 128
  description: |-
    This is deprecated in favor of using the container to lookup the location
    implementation as desired.

    For example:

    ```javascript
    // Given a location registered as follows:
    container.register('location:history-test', HistoryTestLocation);

    // You could create a new instance via:
    container.lookup('location:history-test');
    ```
  itemtype: method
  name: create
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an instance of an implementation of the `location` API
    type: Object
  deprecated: true
  deprecationMessage: |-
    Use the container to lookup the location implementation that you
     need.
  access: private
  tagname: ''
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/api.js
  line: 162
  description: |-
    Returns the current `location.hash` by parsing location.href since browsers
    inconsistently URL-decode `location.hash`.

    https://bugzilla.mozilla.org/show_bug.cgi?id=483304
  access: private
  tagname: ''
  itemtype: method
  name: getHash
  since: 1.4.0
  class: Ember.Location
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 40
  access: private
  tagname: |-
    The browser's `location` object. This is typically equivalent to
    `window.location`, but may be overridden for testing.
  itemtype: property
  name: location
  default: environment.location
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 51
  access: private
  tagname: |-
    The browser's `history` object. This is typically equivalent to
    `window.history`, but may be overridden for testing.
  since: 1.5.1
  itemtype: property
  name: history
  default: environment.history
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 63
  access: private
  tagname: The user agent's global variable. In browsers, this will be `window`.
  since: '1.11'
  itemtype: property
  name: global
  default: environment.global
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 74
  access: private
  tagname: |-
    The browser's `userAgent`. This is typically equivalent to
    `navigator.userAgent`, but may be overridden for testing.
  since: 1.5.1
  itemtype: property
  name: userAgent
  default: environment.history
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 86
  access: private
  tagname: |-
    This property is used by the router to know whether to cancel the routing
    setup process, which is needed while we redirect the browser.
  since: 1.5.1
  itemtype: property
  name: cancelRouterSetup
  default: 'false'
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 98
  access: private
  tagname: Will be pre-pended to path upon state change.
  since: 1.5.1
  itemtype: property
  name: rootURL
  default: "'/'"
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 109
  description: |-
    Called by the router to instruct the location to do any feature detection
    necessary. In the case of AutoLocation, we detect whether to use history
    or hash concrete implementations.
  access: private
  tagname: ''
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 233
  access: private
  tagname: |-
    Returns the current path as it should appear for HistoryLocation supported
    browsers. This may very well differ from the real current path (e.g. if it
    starts off as a hashed URL)
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/auto_location.js
  line: 277
  access: private
  tagname: |-
    Returns the current path as it should appear for HashLocation supported
    browsers. This may very well differ from the real current path.
  itemtype: method
  name: _getHashPath
  class: Ember.AutoLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 32
  access: private
  tagname: Returns normalized location.hash
  since: 1.5.1
  itemtype: method
  name: getHash
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 42
  description: |-
    Returns the normalized URL, constructed from `location.hash`.

    e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.

    By convention, hashed paths must begin with a forward slash, otherwise they
    are not treated as a path so we can distinguish intent.
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 72
  description: |-
    Set the `location.hash` and remembers what was set. This prevents
    `onUpdateURL` callbacks from triggering when the hash was set by
    `HashLocation`.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 86
  description: |-
    Uses location.replace to update the url without a page reload
    or history modification.
  access: private
  tagname: ''
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 99
  description: |-
    Register a callback to be invoked when the hash changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 123
  description: |-
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.

    This is used, for example, when using the {{action}} helper
    to generate a URL based on an event.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/hash_location.js
  line: 138
  description: Cleans up the HashLocation event listener.
  access: private
  tagname: ''
  itemtype: method
  name: willDestroy
  class: Ember.HashLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 33
  description: Used to set state on first call to setURL
  access: private
  tagname: ''
  itemtype: method
  name: initState
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 50
  description: Will be pre-pended to path upon state change
  itemtype: property
  name: rootURL
  default: "'/'"
  access: private
  tagname: ''
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 59
  description: Returns the current `location.pathname` without `rootURL` or `baseURL`
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  return:
    description: url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 84
  description: Uses `history.pushState` to update the url without a page reload.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 100
  description: |-
    Uses `history.replaceState` to update the url without a page reload
    or history modification.
  access: private
  tagname: ''
  itemtype: method
  name: replaceURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 117
  description: |-
    Get the current `history.state`. Checks for if a polyfill is
    required and if so fetches this._historyState. The state returned
    from getState may be null if an iframe has changed a window's
    history.
  access: private
  tagname: ''
  itemtype: method
  name: getState
  return:
    description: state
    type: Object
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 135
  description: Pushes a new state.
  access: private
  tagname: ''
  itemtype: method
  name: pushState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 153
  description: Replaces the current state.
  access: private
  tagname: ''
  itemtype: method
  name: replaceState
  params:
  - name: path
    description: ''
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 170
  description: |-
    Register a callback to be invoked whenever the browser
    history changes, including using forward and back buttons.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 191
  description: Used when using `{{action}}` helper.  The url is always appended to
    the rootURL.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: formatted url
    type: String
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 213
  description: Cleans up the HistoryLocation event listener.
  access: private
  tagname: ''
  itemtype: method
  name: willDestroy
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/history_location.js
  line: 225
  access: private
  tagname: Returns normalized location.hash
  itemtype: method
  name: getHash
  class: Ember.HistoryLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/none_location.js
  line: 25
  description: Returns the current path.
  access: private
  tagname: ''
  itemtype: method
  name: getURL
  return:
    description: path
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/none_location.js
  line: 36
  description: |-
    Set the path and remembers what was set. Using this method
    to change the path will not invoke the `updateURL` callback.
  access: private
  tagname: ''
  itemtype: method
  name: setURL
  params:
  - name: path
    description: ''
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/none_location.js
  line: 48
  description: |-
    Register a callback to be invoked when the path changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
  access: private
  tagname: ''
  itemtype: method
  name: onUpdateURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/none_location.js
  line: 61
  description: Sets the path and calls the `updateURL` callback.
  access: private
  tagname: ''
  itemtype: method
  name: handleURL
  params:
  - name: callback
    description: ''
    type: Function
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/none_location.js
  line: 73
  description: |-
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.

    This is used, for example, when using the {{action}} helper
    to generate a URL based on an event.
  access: private
  tagname: ''
  itemtype: method
  name: formatURL
  params:
  - name: url
    description: ''
    type: String
  return:
    description: url
    type: String
  class: Ember.NoneLocation
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/location/util.js
  line: 1
  access: private
  tagname: Returns the current `location.pathname`, normalized for IE inconsistencies.
  class: RoutingService
  module: ember
  namespace: Ember
- file: packages/ember-routing/lib/location/util.js
  line: 16
  access: private
  tagname: Returns the current `location.search`.
  class: RoutingService
  module: ember
  namespace: Ember
- file: packages/ember-routing/lib/location/util.js
  line: 25
  access: private
  tagname: |-
    Returns the current `location.hash` by parsing location.href since browsers
    inconsistently URL-decode `location.hash`.

    Should be passed the browser's `location` object as the first argument.

    https://bugzilla.mozilla.org/show_bug.cgi?id=483304
  class: RoutingService
  module: ember
  namespace: Ember
- file: packages/ember-routing/lib/location/util.js
  line: 105
  description: |-
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  access: private
  tagname: ''
  class: RoutingService
  module: ember
  namespace: Ember
- file: packages/ember-routing/lib/system/controller_for.js
  line: 6
  description: Finds a controller instance.
  itemtype: method
  name: controllerFor
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/system/generate_controller.js
  line: 9
  description: Generates a controller factory
  itemtype: method
  name: generateControllerFactory
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/system/generate_controller.js
  line: 34
  description: |-
    Generates and instantiates a controller.

    The type of the generated controller factory is derived
    from the context. If the context is an array an array controller
    is generated, if an object, an object controller otherwise, a basic
    controller is generated.
  itemtype: method
  name: generateController
  access: private
  tagname: ''
  since: 1.3.0
  class: Ember
  module: ember
  submodule: ember-routing
- file: packages/ember-routing/lib/system/route.js
  line: 54
  description: |-
    Configuration hash for this route's queryParams. The possible
    configuration options and their defaults are as follows
    (assuming a query param whose controller property is `page`):

    ```javascript
    queryParams: {
      page: {
        // By default, controller query param properties don't
        // cause a full transition when they are changed, but
        // rather only cause the URL to update. Setting
        // `refreshModel` to true will cause an "in-place"
        // transition to occur, whereby the model hooks for
        // this route (and any child routes) will re-fire, allowing
        // you to reload models (e.g., from the server) using the
        // updated query param values.
        refreshModel: false,

        // By default, changes to controller query param properties
        // cause the URL to update via `pushState`, which means an
        // item will be added to the browser's history, allowing
        // you to use the back button to restore the app to the
        // previous state before the query param property was changed.
        // Setting `replace` to true will use `replaceState` (or its
        // hash location equivalent), which causes no browser history
        // item to be added. This options name and default value are
        // the same as the `link-to` helper's `replace` option.
        replace: false,

        // By default, the query param URL key is the same name as
        // the controller property name. Use `as` to specify a
        // different URL key.
        as: 'page'
      }
    }
    ```
  itemtype: property
  name: queryParams
  type: Object
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 98
  description: |-
    The name of the route, dot-delimited.

    For example, a route found at `app/routes/posts/post.js` or
    `app/posts/post/route.js` (with pods) will have a `routeName` of
    `posts.post`.
  itemtype: property
  name: routeName
  type: String
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 111
  access: private
  tagname: ''
  itemtype: property
  name: _qp
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 255
  access: private
  tagname: ''
  itemtype: property
  name: _names
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 262
  access: private
  tagname: ''
  itemtype: method
  name: _stashNames
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 294
  access: private
  tagname: ''
  itemtype: property
  name: _activeQPChanged
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 304
  access: private
  tagname: ''
  itemtype: method
  name: _updatingQPChanged
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 315
  description: |-
    Retrieves parameters, for current route using the state.params
    variable and getQueryParamsFor, using the supplied routeName.
  itemtype: method
  name: paramsFor
  params:
  - name: name
    description: ''
    type: String
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 340
  description: Serializes the query parameter key
  itemtype: method
  name: serializeQueryParamKey
  params:
  - name: controllerPropertyName
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 351
  description: Serializes value of the query parameter based on defaultValueType
  itemtype: method
  name: serializeQueryParam
  params:
  - name: value
    description: ''
    type: Object
  - name: urlKey
    description: ''
    type: String
  - name: defaultValueType
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 370
  description: Deserializes value of the query parameter based on defaultValueType
  itemtype: method
  name: deserializeQueryParam
  params:
  - name: value
    description: ''
    type: Object
  - name: urlKey
    description: ''
    type: String
  - name: defaultValueType
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 396
  access: private
  tagname: ''
  itemtype: property
  name: _optionsForQueryParam
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 405
  description: |-
    A hook you can use to reset controller values either when the model
    changes or the route is exiting.

    ```javascript
    App.ArticlesRoute = Ember.Route.extend({
      // ...

      resetController: function (controller, isExiting, transition) {
        if (isExiting) {
          controller.set('page', 1);
        }
      }
    });
    ```
  itemtype: method
  name: resetController
  params:
  - name: controller
    description: instance
    type: Controller
  - name: isExiting
    description: ''
    type: Boolean
  - name: transition
    description: ''
    type: Object
  since: 1.7.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 430
  access: private
  tagname: ''
  itemtype: method
  name: exit
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 441
  access: private
  tagname: ''
  itemtype: method
  name: _reset
  since: 1.7.0
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 454
  access: private
  tagname: ''
  itemtype: method
  name: enter
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 465
  description: |-
    The name of the view to use by default when rendering this routes template.

    When rendering a template, the route will, by default, determine the
    template and view to use from the name of the route itself. If you need to
    define a specific view, set this property.

    This is useful when multiple routes would benefit from using the same view
    because it doesn't require a custom `renderTemplate` method. For example,
    the following routes will all render using the `App.PostsListView` view:

    ```javascript
    var PostsList = Ember.Route.extend({
      viewName: 'postsList'
    });

    App.PostsIndexRoute = PostsList.extend();
    App.PostsArchivedRoute = PostsList.extend();
    ```
  itemtype: property
  name: viewName
  type: String
  default: 'null'
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 493
  description: |-
    The name of the template to use by default when rendering this routes
    template.

    This is similar with `viewName`, but is useful when you just want a custom
    template without a view.

    ```javascript
    var PostsList = Ember.Route.extend({
      templateName: 'posts/list'
    });

    App.PostsIndexRoute = PostsList.extend();
    App.PostsArchivedRoute = PostsList.extend();
    ```
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 517
  description: |-
    The name of the controller to associate with this route.

    By default, Ember will lookup a route's controller that matches the name
    of the route (i.e. `App.PostController` for `App.PostRoute`). However,
    if you would like to define a specific controller to use, you can do so
    using this property.

    This is useful in many ways, as the controller specified will be:

    * passed to the `setupController` method.
    * used as the controller for the view being rendered by the route.
    * returned from a call to `controllerFor` for the route.
  itemtype: property
  name: controllerName
  type: String
  default: 'null'
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 539
  description: |-
    The `willTransition` action is fired at the beginning of any
    attempted transition with a `Transition` object as the sole
    argument. This action can be used for aborting, redirecting,
    or decorating the transition from the currently active routes.

    A good example is preventing navigation when a form is
    half-filled out:

    ```javascript
    App.ContactFormRoute = Ember.Route.extend({
      actions: {
        willTransition: function(transition) {
          if (this.controller.get('userHasEnteredData')) {
            this.controller.displayNavigationConfirm();
            transition.abort();
          }
        }
      }
    });
    ```

    You can also redirect elsewhere by calling
    `this.transitionTo('elsewhere')` from within `willTransition`.
    Note that `willTransition` will not be fired for the
    redirecting `transitionTo`, since `willTransition` doesn't
    fire when there is already a transition underway. If you want
    subsequent `willTransition` actions to fire for the redirecting
    transition, you must first explicitly call
    `transition.abort()`.
  itemtype: event
  name: willTransition
  params:
  - name: transition
    description: ''
    type: Transition
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 575
  description: |-
    The `didTransition` action is fired after a transition has
    successfully been completed. This occurs after the normal model
    hooks (`beforeModel`, `model`, `afterModel`, `setupController`)
    have resolved. The `didTransition` action has no arguments,
    however, it can be useful for tracking page views or resetting
    state on the controller.

    ```javascript
    App.LoginRoute = Ember.Route.extend({
      actions: {
        didTransition: function() {
          this.controller.get('errors.base').clear();
          return true; // Bubble the didTransition event
        }
      }
    });
    ```
  itemtype: event
  name: didTransition
  since: 1.2.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 599
  description: |-
    The `loading` action is fired on the route when a route's `model`
    hook returns a promise that is not already resolved. The current
    `Transition` object is the first parameter and the route that
    triggered the loading event is the second parameter.

    ```javascript
    App.ApplicationRoute = Ember.Route.extend({
      actions: {
        loading: function(transition, route) {
          var view = Ember.View.create({
            classNames: ['app-loading']
          })
          .append();

          this.router.one('didTransition', function() {
            view.destroy();
          });

          return true; // Bubble the loading event
        }
      }
    });
    ```
  itemtype: event
  name: loading
  params:
  - name: transition
    description: ''
    type: Transition
  - name: route
    description: The route that triggered the loading event
    type: Ember.Route
  since: 1.2.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 631
  description: |-
    When attempting to transition into a route, any of the hooks
    may return a promise that rejects, at which point an `error`
    action will be fired on the partially-entered routes, allowing
    for per-route error handling logic, or shared error handling
    logic defined on a parent route.

    Here is an example of an error handler that will be invoked
    for rejected promises from the various hooks on the route,
    as well as any unhandled errors from child routes:

    ```javascript
    App.AdminRoute = Ember.Route.extend({
      beforeModel: function() {
        return Ember.RSVP.reject('bad things!');
      },

      actions: {
        error: function(error, transition) {
          // Assuming we got here due to the error in `beforeModel`,
          // we can expect that error === "bad things!",
          // but a promise model rejecting would also
          // call this hook, as would any errors encountered
          // in `afterModel`.

          // The `error` hook is also provided the failed
          // `transition`, which can be stored and later
          // `.retry()`d if desired.

          this.transitionTo('login');
        }
      }
    });
    ```

    `error` actions that bubble up all the way to `ApplicationRoute`
    will fire a default error handler that logs the error. You can
    specify your own global default error handler by overriding the
    `error` handler on `ApplicationRoute`:

    ```javascript
    App.ApplicationRoute = Ember.Route.extend({
      actions: {
        error: function(error, transition) {
          this.controllerFor('banner').displayError(error.message);
        }
      }
    });
    ```
  itemtype: event
  name: error
  params:
  - name: error
    description: ''
    type: Error
  - name: transition
    description: ''
    type: Transition
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 686
  description: |-
    This event is triggered when the router enters the route. It is
    not executed when the model for the route changes.

    ```javascript
    App.ApplicationRoute = Ember.Route.extend({
      collectAnalytics: function(){
        collectAnalytics();
      }.on('activate')
    });
    ```
  itemtype: event
  name: activate
  since: 1.9.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 703
  description: |-
    This event is triggered when the router completely exits this
    route. It is not executed when the model for the route changes.

    ```javascript
    App.IndexRoute = Ember.Route.extend({
      trackPageLeaveAnalytics: function(){
        trackPageLeaveAnalytics();
      }.on('deactivate')
    });
    ```
  itemtype: event
  name: deactivate
  since: 1.9.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 720
  description: |-
    The controller associated with this route.

    Example

    ```javascript
    App.FormRoute = Ember.Route.extend({
      actions: {
        willTransition: function(transition) {
          if (this.controller.get('userHasEnteredData') &&
              !confirm('Are you sure you want to abandon progress?')) {
            transition.abort();
          } else {
            // Bubble the `willTransition` action so that
            // parent routes can decide whether or not to abort.
            return true;
          }
        }
      }
    });
    ```
  itemtype: property
  name: controller
  type: Ember.Controller
  since: 1.6.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 849
  description: |-
    This hook is executed when the router completely exits this route. It is
    not executed when the model for the route changes.
  itemtype: method
  name: deactivate
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 858
  description: |-
    This hook is executed when the router enters the route. It is not executed
    when the model for the route changes.
  itemtype: method
  name: activate
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 867
  description: |-
    Transition the application into another route. The route may
    be either a single route or route path:

    ```javascript
    this.transitionTo('blogPosts');
    this.transitionTo('blogPosts.recentEntries');
    ```

    Optionally supply a model for the route in question. The model
    will be serialized into the URL using the `serialize` hook of
    the route:

    ```javascript
    this.transitionTo('blogPost', aPost);
    ```

    If a literal is passed (such as a number or a string), it will
    be treated as an identifier instead. In this case, the `model`
    hook of the route will be triggered:

    ```javascript
    this.transitionTo('blogPost', 1);
    ```

    Multiple models will be applied last to first recursively up the
    route tree.

    ```javascript
    App.Router.map(function() {
      this.route('blogPost', { path:':blogPostId' }, function() {
        this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
      });
    });

    this.transitionTo('blogComment', aPost, aComment);
    this.transitionTo('blogComment', 1, 13);
    ```

    It is also possible to pass a URL (a string that starts with a
    `/`). This is intended for testing and debugging purposes and
    should rarely be used in production code.

    ```javascript
    this.transitionTo('/');
    this.transitionTo('/blog/post/1/comment/13');
    this.transitionTo('/blog/posts?sort=title');
    ```

    An options hash with a `queryParams` property may be provided as
    the final argument to add query parameters to the destination URL.

    ```javascript
    this.transitionTo('blogPost', 1, {
      queryParams: {showComments: 'true'}
    });

    // if you just want to transition the query parameters without changing the route
    this.transitionTo({queryParams: {sort: 'date'}});
    ```

    See also [replaceWith](#method_replaceWith).

    Simple Transition Example

    ```javascript
    App.Router.map(function() {
      this.route('index');
      this.route('secret');
      this.route('fourOhFour', { path: '*:' });
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        moveToSecret: function(context) {
          if (authorized()) {
            this.transitionTo('secret', context);
          } else {
            this.transitionTo('fourOhFour');
          }
        }
      }
    });
    ```

    Transition to a nested route

    ```javascript
    App.Router.map(function() {
      this.route('articles', { path: '/articles' }, function() {
        this.route('new');
      });
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        transitionToNewArticle: function() {
          this.transitionTo('articles.new');
        }
      }
    });
    ```

    Multiple Models Example

    ```javascript
    App.Router.map(function() {
      this.route('index');

      this.route('breakfast', { path: ':breakfastId' }, function() {
        this.route('cereal', { path: ':cerealId', resetNamespace: true });
      });
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        moveToChocolateCereal: function() {
          var cereal = { cerealId: 'ChocolateYumminess' };
          var breakfast = { breakfastId: 'CerealAndMilk' };

          this.transitionTo('cereal', breakfast, cereal);
        }
      }
    });
    ```

    Nested Route with Query String Example

    ```javascript
    App.Router.map(function() {
      this.route('fruits', function() {
        this.route('apples');
      });
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        transitionToApples: function() {
          this.transitionTo('fruits.apples', {queryParams: {color: 'red'}});
        }
      }
    });
    ```
  itemtype: method
  name: transitionTo
  params:
  - name: name
    description: the name of the route or a URL
    type: String
  - name: models
    description: |-
      the model(s) or identifier(s) to be used while
        transitioning to the route.
    type: "...Object"
  - name: options
    description: |-
      optional hash with a queryParams property
        containing a mapping of query parameters
    type: Object
    optional: true
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1026
  description: |-
    Perform a synchronous transition into another route without attempting
    to resolve promises, update the URL, or abort any currently active
    asynchronous transitions (i.e. regular transitions caused by
    `transitionTo` or URL changes).

    This method is handy for performing intermediate transitions on the
    way to a final destination route, and is called internally by the
    default implementations of the `error` and `loading` handlers.
  itemtype: method
  name: intermediateTransitionTo
  params:
  - name: name
    description: the name of the route
    type: String
  - name: models
    description: |-
      the model(s) to be used while transitioning
      to the route.
    type: "...Object"
  since: 1.2.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1048
  description: |-
    Refresh the model on this route and any child routes, firing the
    `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
    to how routes are entered when transitioning in from other route.
    The current route params (e.g. `article_id`) will be passed in
    to the respective model hooks, and if a different model is returned,
    `setupController` and associated route hooks will re-fire as well.

    An example usage of this method is re-querying the server for the
    latest information using the same parameters as when the route
    was first entered.

    Note that this will cause `model` hooks to fire even on routes
    that were provided a model object when the route was initially
    entered.
  itemtype: method
  name: refresh
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1074
  description: |-
    Transition into another route while replacing the current URL, if possible.
    This will replace the current history entry instead of adding a new one.
    Beside that, it is identical to `transitionTo` in all other respects. See
    'transitionTo' for additional information regarding multiple models.

    Example

    ```javascript
    App.Router.map(function() {
      this.route('index');
      this.route('secret');
    });

    App.SecretRoute = Ember.Route.extend({
      afterModel: function() {
        if (!authorized()){
          this.replaceWith('index');
        }
      }
    });
    ```
  itemtype: method
  name: replaceWith
  params:
  - name: name
    description: the name of the route or a URL
    type: String
  - name: models
    description: |-
      the model(s) or identifier(s) to be used while
        transitioning to the route.
    type: "...Object"
  return:
    description: |-
      the transition object associated with this
        attempted transition
    type: Transition
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1110
  description: |-
    Sends an action to the router, which will delegate it to the currently
    active route hierarchy per the bubbling rules explained under `actions`.

    Example

    ```javascript
    App.Router.map(function() {
      this.route('index');
    });

    App.ApplicationRoute = Ember.Route.extend({
      actions: {
        track: function(arg) {
          console.log(arg, 'was clicked');
        }
      }
    });

    App.IndexRoute = Ember.Route.extend({
      actions: {
        trackIfDebug: function(arg) {
          if (debug) {
            this.send('track', arg);
          }
        }
      }
    });
    ```
  itemtype: method
  name: send
  params:
  - name: name
    description: the name of the action to trigger
    type: String
  - name: args
    description: ''
    type: "...*"
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1158
  description: This hook is the entry point for router.js
  access: private
  tagname: ''
  itemtype: method
  name: setup
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1242
  description: |-
    This hook is the first of the route entry validation hooks
    called when an attempt is made to transition into a route
    or one of its children. It is called before `model` and
    `afterModel`, and is appropriate for cases when:

    1) A decision can be made to redirect elsewhere without
       needing to resolve the model first.
    2) Any async operations need to occur first before the
       model is attempted to be resolved.

    This hook is provided the current `transition` attempt
    as a parameter, which can be used to `.abort()` the transition,
    save it for a later `.retry()`, or retrieve values set
    on it from a previous hook. You can also just call
    `this.transitionTo` to another route to implicitly
    abort the `transition`.

    You can return a promise from this hook to pause the
    transition until the promise resolves (or rejects). This could
    be useful, for instance, for retrieving async code from
    the server that is required to enter a route.

    ```javascript
    App.PostRoute = Ember.Route.extend({
      beforeModel: function(transition) {
        if (!App.Post) {
          return Ember.$.getScript('/models/post.js');
        }
      }
    });
    ```

    If `App.Post` doesn't exist in the above example,
    `beforeModel` will use jQuery's `getScript`, which
    returns a promise that resolves after the server has
    successfully retrieved and executed the code from the
    server. Note that if an error were to occur, it would
    be passed to the `error` hook on `Ember.Route`, but
    it's also possible to handle errors specific to
    `beforeModel` right from within the hook (to distinguish
    from the shared error handling behavior of the `error`
    hook):

    ```javascript
    App.PostRoute = Ember.Route.extend({
      beforeModel: function(transition) {
        if (!App.Post) {
          var self = this;
          return Ember.$.getScript('post.js').then(null, function(e) {
            self.transitionTo('help');

            // Note that the above transitionTo will implicitly
            // halt the transition. If you were to return
            // nothing from this promise reject handler,
            // according to promise semantics, that would
            // convert the reject into a resolve and the
            // transition would continue. To propagate the
            // error so that it'd be handled by the `error`
            // hook, you would have to
            return Ember.RSVP.reject(e);
          });
        }
      }
    });
    ```
  itemtype: method
  name: beforeModel
  params:
  - name: transition
    description: ''
    type: Transition
  return:
    description: |-
      if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
    type: Promise
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1319
  description: |-
    This hook is called after this route's model has resolved.
    It follows identical async/promise semantics to `beforeModel`
    but is provided the route's resolved model in addition to
    the `transition`, and is therefore suited to performing
    logic that can only take place after the model has already
    resolved.

    ```javascript
    App.PostsRoute = Ember.Route.extend({
      afterModel: function(posts, transition) {
        if (posts.get('length') === 1) {
          this.transitionTo('post.show', posts.get('firstObject'));
        }
      }
    });
    ```

    Refer to documentation for `beforeModel` for a description
    of transition-pausing semantics when a promise is returned
    from this hook.
  itemtype: method
  name: afterModel
  params:
  - name: resolvedModel
    description: |-
      the value returned from `model`,
        or its resolved value if it was a promise
    type: Object
  - name: transition
    description: ''
    type: Transition
  return:
    description: |-
      if the value returned from this hook is
        a promise, the transition will pause until the transition
        resolves. Otherwise, non-promise return values are not
        utilized in any way.
    type: Promise
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1353
  description: |-
    A hook you can implement to optionally redirect to another route.

    If you call `this.transitionTo` from inside of this hook, this route
    will not be entered in favor of the other hook.

    `redirect` and `afterModel` behave very similarly and are
    called almost at the same time, but they have an important
    distinction in the case that, from one of these hooks, a
    redirect into a child route of this route occurs: redirects
    from `afterModel` essentially invalidate the current attempt
    to enter this route, and will result in this route's `beforeModel`,
    `model`, and `afterModel` hooks being fired again within
    the new, redirecting transition. Redirects that occur within
    the `redirect` hook, on the other hand, will _not_ cause
    these hooks to be fired again the second time around; in
    other words, by the time the `redirect` hook has been called,
    both the resolved model and attempted entry into this route
    are considered to be fully validated.
  itemtype: method
  name: redirect
  params:
  - name: model
    description: the model for this route
    type: Object
  - name: transition
    description: the transition object associated with the current transition
    type: Transition
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1380
  description: Called when the context is changed by router.js.
  access: private
  tagname: ''
  itemtype: method
  name: contextDidChange
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1390
  description: |-
    A hook you can implement to convert the URL into the model for
    this route.

    ```javascript
    App.Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });
    ```

    The model for the `post` route is `store.find('post', params.post_id)`.

    By default, if your route has a dynamic segment ending in `_id`:

    * The model class is determined from the segment (`post_id`'s
      class is `App.Post`)
    * The find method is called on the model class with the value of
      the dynamic segment.

    Note that for routes with dynamic segments, this hook is not always
    executed. If the route is entered through a transition (e.g. when
    using the `link-to` Handlebars helper or the `transitionTo` method
    of routes), and a model context is already provided this hook
    is not called.

    A model context does not include a primitive string or number,
    which does cause the model hook to be called.

    Routes without dynamic segments will always execute the model hook.

    ```javascript
    // no dynamic segment, model hook always called
    this.transitionTo('posts');

    // model passed in, so model hook not called
    thePost = store.find('post', 1);
    this.transitionTo('post', thePost);

    // integer passed in, model hook is called
    this.transitionTo('post', 1);

    // model id passed in, model hook is called
    // useful for forcing the hook to execute
    thePost = store.find('post', 1);
    this.transitionTo('post', thePost.id);
    ```


    This hook follows the asynchronous/promise semantics
    described in the documentation for `beforeModel`. In particular,
    if a promise returned from `model` fails, the error will be
    handled by the `error` hook on `Ember.Route`.

    Example

    ```javascript
    App.PostRoute = Ember.Route.extend({
      model: function(params) {
        return this.store.find('post', params.post_id);
      }
    });
    ```
  itemtype: method
  name: model
  params:
  - name: params
    description: the parameters extracted from the URL
    type: Object
  - name: transition
    description: ''
    type: Transition
  return:
    description: |-
      the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
    type: Object|Promise
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1491
  access: private
  tagname: ''
  itemtype: method
  name: deserialize
  params:
  - name: params
    description: the parameters extracted from the URL
    type: Object
  - name: transition
    description: ''
    type: Transition
  return:
    description: |-
      the model for this route.

      Router.js hook.
    type: Object|Promise
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1504
  itemtype: method
  name: findModel
  params:
  - name: type
    description: the model type
    type: String
  - name: value
    description: the value passed to find
    type: Object
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1516
  description: |-
    Store property provides a hook for data persistence libraries to inject themselves.

    By default, this store property provides the exact same functionality previously
    in the model hook.

    Currently, the required interface is:

    `store.find(modelName, findArguments)`
  itemtype: method
  name: store
  params:
  - name: store
    description: ''
    type: Object
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1551
  description: |-
    A hook you can implement to convert the route's model into parameters
    for the URL.

    ```javascript
    App.Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });

    App.PostRoute = Ember.Route.extend({
      model: function(params) {
        // the server returns `{ id: 12 }`
        return Ember.$.getJSON('/posts/' + params.post_id);
      },

      serialize: function(model) {
        // this will make the URL `/posts/12`
        return { post_id: model.id };
      }
    });
    ```

    The default `serialize` method will insert the model's `id` into the
    route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
    If the route has multiple dynamic segments or does not contain '_id', `serialize`
    will return `Ember.getProperties(model, params)`

    This method is called when `transitionTo` is called with a context
    in order to populate the URL.
  itemtype: method
  name: serialize
  params:
  - name: model
    description: the routes model
    type: Object
  - name: params
    description: |-
      an Array of parameter names for the current
        route (in the example, `['post_id']`.
    type: Array
  return:
    description: the serialized parameters
    type: Object
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1608
  description: |-
    A hook you can use to setup the controller for the current route.

    This method is called with the controller for the current route and the
    model supplied by the `model` hook.

    By default, the `setupController` hook sets the `model` property of
    the controller to the `model`.

    If you implement the `setupController` hook in your Route, it will
    prevent this default behavior. If you want to preserve that behavior
    when implementing your `setupController` function, make sure to call
    `_super`:

    ```javascript
    App.PhotosRoute = Ember.Route.extend({
      model: function() {
        return this.store.find('photo');
      },

      setupController: function (controller, model) {
        // Call _super for default behavior
        this._super(controller, model);
        // Implement your custom setup after
        this.controllerFor('application').set('showingPhotos', true);
      }
    });
    ```

    The provided controller will be one resolved based on the name
    of this route.

    If no explicit controller is defined, Ember will automatically create one.

    As an example, consider the router:

    ```javascript
    App.Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });
    ```

    For the `post` route, a controller named `App.PostController` would
    be used if it is defined. If it is not defined, a basic `Ember.Controller`
    instance would be used.

    Example

    ```javascript
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, model) {
        controller.set('model', model);
      }
    });
    ```
  itemtype: method
  name: setupController
  params:
  - name: controller
    description: instance
    type: Controller
  - name: model
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1675
  description: |-
    Returns the controller for a particular route or name.

    The controller instance must already have been created, either through entering the
    associated route or using `generateController`.

    ```javascript
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, post) {
        this._super(controller, post);
        this.controllerFor('posts').set('currentPost', post);
      }
    });
    ```
  itemtype: method
  name: controllerFor
  params:
  - name: name
    description: the name of the route or controller
    type: String
  return:
    description: ''
    type: Ember.Controller
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1714
  description: |-
    Generates a controller for a route.

    Example

    ```javascript
    App.PostRoute = Ember.Route.extend({
      setupController: function(controller, post) {
        this._super(controller, post);
        this.generateController('posts', post);
      }
    });
    ```
  itemtype: method
  name: generateController
  params:
  - name: name
    description: the name of the controller
    type: String
  - name: model
    description: the model to infer the type of the controller (optional)
    type: Object
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1741
  description: |-
    Returns the resolved model of a parent (or any ancestor) route
    in a route hierarchy.  During a transition, all routes
    must resolve a model object, and if a route
    needs access to a parent route's model in order to
    resolve a model (or just reuse the model from a parent),
    it can call `this.modelFor(theNameOfParentRoute)` to
    retrieve it. If the ancestor route's model was a promise,
    its resolved result is returned.

    Example

    ```javascript
    App.Router.map(function() {
        this.route('post', { path: '/post/:post_id' }, function() {
          this.route('comments', { resetNamespace: true });
        });
    });

    App.CommentsRoute = Ember.Route.extend({
        afterModel: function() {
          this.set('post', this.modelFor('post'));
        }
    });
    ```
  itemtype: method
  name: modelFor
  params:
  - name: name
    description: the name of the route
    type: String
  return:
    description: the model object
    type: Object
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1788
  description: |-
    A hook you can use to render the template for the current route.

    This method is called with the controller for the current route and the
    model supplied by the `model` hook. By default, it renders the route's
    template, configured with the controller for the route.

    This method can be overridden to set up and render additional or
    alternative templates.

    ```javascript
    App.PostsRoute = Ember.Route.extend({
      renderTemplate: function(controller, model) {
        var favController = this.controllerFor('favoritePost');

        // Render the `favoritePost` template into
        // the outlet `posts`, and display the `favoritePost`
        // controller.
        this.render('favoritePost', {
          outlet: 'posts',
          controller: favController
        });
      }
    });
    ```
  itemtype: method
  name: renderTemplate
  params:
  - name: controller
    description: the route's controller
    type: Object
  - name: model
    description: the route's model
    type: Object
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1823
  description: |-
    `render` is used to render a template into a region of another template
    (indicated by an `{{outlet}}`). `render` is used both during the entry
    phase of routing (via the `renderTemplate` hook) and later in response to
    user interaction.

    For example, given the following minimal router and templates:

    ```javascript
    Router.map(function() {
      this.route('photos');
    });
    ```

    ```handlebars
    <!-- application.hbs -->
    <div class='something-in-the-app-hbs'>
      {{outlet "anOutletName"}}
    </div>
    ```

    ```handlebars
    <!-- photos.hbs -->
    <h1>Photos</h1>
    ```

    You can render `photos.hbs` into the `"anOutletName"` outlet of
    `application.hbs` by calling `render`:

    ```javascript
    // posts route
    Ember.Route.extend({
      renderTemplate: function() {
        this.render('photos', {
          into: 'application',
          outlet: 'anOutletName'
        })
      }
    });
    ```

    `render` additionally allows you to supply which `view`, `controller`, and
    `model` objects should be loaded and associated with the rendered template.


    ```javascript
    // posts route
    Ember.Route.extend({
      renderTemplate: function(controller, model){
        this.render('posts', {    // the template to render, referenced by name
          into: 'application',    // the template to render into, referenced by name
          outlet: 'anOutletName', // the outlet inside `options.template` to render into.
          view: 'aViewName',      // the view to use for this template, referenced by name
          controller: 'someControllerName', // the controller to use for this template, referenced by name
          model: model            // the model to set on `options.controller`.
        })
      }
    });
    ```

    The string values provided for the template name, view, and controller
    will eventually pass through to the resolver for lookup. See
    Ember.Resolver for how these are mapped to JavaScript objects in your
    application.

    Not all options need to be passed to `render`. Default values will be used
    based on the name of the route specified in the router or the Route's
    `controllerName`, `viewName` and `templateName` properties.

    For example:

    ```javascript
    // router
    Router.map(function() {
      this.route('index');
      this.route('post', { path: '/posts/:post_id' });
    });
    ```

    ```javascript
    // post route
    PostRoute = App.Route.extend({
      renderTemplate: function() {
        this.render(); // all defaults apply
      }
    });
    ```

    The name of the `PostRoute`, defined by the router, is `post`.

    The following equivalent default options will be applied when
    the Route calls `render`:

    ```javascript
    //
    this.render('post', {  // the template name associated with 'post' Route
      into: 'application', // the parent route to 'post' Route
      outlet: 'main',      // {{outlet}} and {{outlet 'main' are synonymous}},
      view: 'post',        // the view associated with the 'post' Route
      controller: 'post',  // the controller associated with the 'post' Route
    })
    ```

    By default the controller's `model` will be the route's model, so it does not
    need to be passed unless you wish to change which model is being used.
  itemtype: method
  name: render
  params:
  - name: name
    description: the name of the template to render
    type: String
  - name: options
    description: the options
    type: Object
    optional: true
    props:
    - name: into
      description: |-
        the template to render into,
                        referenced by name. Defaults to the parent template
      type: String
      optional: true
    - name: outlet
      description: |-
        the outlet inside `options.template` to render into.
                        Defaults to 'main'
      type: String
      optional: true
    - name: controller
      description: |-
        the controller to use for this template,
                        referenced by name or as a controller instance. Defaults to the Route's paired controller
      type: String|Object
      optional: true
    - name: model
      description: |-
        the model object to set on `options.controller`.
                        Defaults to the return value of the Route's model hook
      type: Object
      optional: true
  access: public
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 1961
  description: |-
    Disconnects a view that has been rendered into an outlet.

    You may pass any or all of the following options to `disconnectOutlet`:

    * `outlet`: the name of the outlet to clear (default: 'main')
    * `parentView`: the name of the view containing the outlet to clear
       (default: the view rendered by the parent route)

    Example:

    ```javascript
    App.ApplicationRoute = App.Route.extend({
      actions: {
        showModal: function(evt) {
          this.render(evt.modalName, {
            outlet: 'modal',
            into: 'application'
          });
        },
        hideModal: function(evt) {
          this.disconnectOutlet({
            outlet: 'modal',
            parentView: 'application'
          });
        }
      }
    });
    ```

    Alternatively, you can pass the `outlet` name directly as a string.

    Example:

    ```javascript
    hideModal: function(evt) {
      this.disconnectOutlet('modal');
    }
    ```
  itemtype: method
  name: disconnectOutlet
  params:
  - name: options
    description: the options hash or outlet name
    type: Object|String
  access: private
  tagname: ''
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/route.js
  line: 2059
  access: private
  tagname: ''
  itemtype: method
  name: teardownViews
  class: Ember.Route
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 46
  description: |-
    The `location` property determines the type of URL's that your
    application will use.

    The following location types are currently available:

    * `history` - use the browser's history API to make the URLs look just like any standard URL
    * `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`
    * `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)
    * `auto` - use the best option based on browser capabilites: `history` if possible, then `hash` if possible, otherwise `none`

    Note: If using ember-cli, this value is defaulted to `auto` by the `locationType` setting of `/config/environment.js`
  itemtype: property
  name: location
  default: "'hash'"
  see:
  - "{Ember.Location}"
  access: public
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 66
  description: |-
    Represents the URL of the root of the application, often '/'. This prefix is
    assumed on all routes defined on this router.
  itemtype: property
  name: rootURL
  default: "'/'"
  access: public
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 120
  description: Represents the current URL.
  itemtype: method
  name: url
  return:
    description: The current URL.
    type: String
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 131
  description: |-
    Initializes the current router instance and sets up the change handling
    event listeners used by the instances `location` implementation.

    A property named `initialURL` will be used to determine the initial URL.
    If no value is found `/` will be used.
  itemtype: method
  name: startRouting
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 177
  description: |-
    Handles updating the paths and notifying any listeners of the URL
    change.

    Triggers the router level `didTransition` hook.

    For example, to notify google analytics when the route changes,
    you could use this hook.  (Note: requires also including GA scripts, etc.)

    ```javascript
    var Router = Ember.Router.extend({
      location: config.locationType,

      didTransition: function() {
        this._super(...arguments);

        return ga('send', 'pageview', {
            'page': this.get('url'),
            'title': this.get('url')
          });
      }
    });
    ```
  itemtype: method
  name: didTransition
  access: public
  tagname: ''
  since: 1.2.0
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 257
  description: |-
    Handles notifying any listeners of an impending URL
    change.

    Triggers the router level `willTransition` hook.
  itemtype: method
  name: willTransition
  access: public
  tagname: ''
  since: 1.11.0
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 325
  description: Determines if the supplied route is currently active.
  itemtype: method
  name: isActive
  params:
  - name: routeName
    description: ''
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 338
  description: |-
    An alternative form of `isActive` that doesn't require
    manual concatenation of the arguments into a single
    array.
  itemtype: method
  name: isActiveIntent
  params:
  - name: routeName
    description: ''
  - name: models
    description: ''
  - name: queryParams
    description: ''
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  since: 1.7.0
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 359
  description: Does this router instance have the given route.
  itemtype: method
  name: hasRoute
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 370
  description: |-
    Resets the state of the router by clearing the current route
    handlers and deactivating them.
  access: private
  tagname: ''
  itemtype: method
  name: reset
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 612
  description: |-
    Returns a merged query params meta object for a given route.
    Useful for asking a route what its known query params are.
  access: private
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-routing/lib/system/router.js
  line: 932
  description: |-
    The `Router.map` function allows you to define mappings from URLs to routes
    in your application. These mappings are defined within the
    supplied callback function using `this.route`.

    The first parameter is the name of the route which is used by default as the
    path name as well.

    The second parameter is the optional options hash. Available options are:
      * `path`: allows you to provide your own path as well as mark dynamic
        segments.
      * `resetNamespace`: false by default; when nesting routes, ember will
        combine the route names to form the fully-qualified route name, which is
        used with `{{link-to}}` or manually transitioning to routes. Setting
        `resetNamespace: true` will cause the route not to inherit from its
        parent route's names. This is handy for resources which can be accessed
        in multiple places as well as preventing extremely long route names.
        Keep in mind that the actual URL path behavior is still retained.

    The third parameter is a function, which can be used to nest routes.
    Nested routes, by default, will have the parent route tree's route name and
    path prepended to it's own.

    ```javascript
    App.Router.map(function(){
      this.route('post', { path: '/post/:post_id' }, function() {
        this.route('edit');
        this.route('comments', { resetNamespace: true }, function() {
          this.route('new');
        });
      });
    });
    ```

    For more detailed documentation and examples please see
    [the guides](http://emberjs.com/guides/routing/defining-your-routes/).
  itemtype: method
  name: map
  params:
  - name: callback
    description: ''
  access: public
  tagname: ''
  class: Ember.Router
  module: ember
  submodule: ember-routing
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 57
  description: |-
    A computed property that returns the sum of the value
    in the dependent array.
  itemtype: method
  name: sum
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the sum of all values in the dependentKey's array
    type: Ember.ComputedProperty
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 72
  description: |-
    A computed property that calculates the maximum value in the
    dependent array. This will return `-Infinity` when the dependent
    array is empty.

    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      maxChildAge: Ember.computed.max('childAges')
    });

    var lordByron = Person.create({ children: [] });

    lordByron.get('maxChildAge'); // -Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('maxChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('maxChildAge'); // 8
    ```
  itemtype: method
  name: max
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the largest value in the dependentKey's array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 110
  description: |-
    A computed property that calculates the minimum value in the
    dependent array. This will return `Infinity` when the dependent
    array is empty.

    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age'),
      minChildAge: Ember.computed.min('childAges')
    });

    var lordByron = Person.create({ children: [] });

    lordByron.get('minChildAge'); // Infinity
    lordByron.get('children').pushObject({
      name: 'Augusta Ada Byron', age: 7
    });
    lordByron.get('minChildAge'); // 7
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('minChildAge'); // 5
    ```
  itemtype: method
  name: min
  params:
  - name: dependentKey
    description: ''
    type: String
  return:
    description: computes the smallest value in the dependentKey's array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 148
  description: |-
    Returns an array mapped via the callback

    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.

    ```javascript
    function(item, index);
    ```

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      excitingChores: Ember.computed.map('chores', function(chore, index) {
        return chore.toUpperCase() + '!';
      })
    });

    var hamster = Hamster.create({
      chores: ['clean', 'write more unit tests']
    });

    hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']
    ```
  itemtype: method
  name: map
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: an array mapped via the callback
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 188
  description: |-
    Returns an array mapped to the specified key.

    ```javascript
    var Person = Ember.Object.extend({
      childAges: Ember.computed.mapBy('children', 'age')
    });

    var lordByron = Person.create({ children: [] });

    lordByron.get('childAges'); // []
    lordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });
    lordByron.get('childAges'); // [7]
    lordByron.get('children').pushObjects([{
      name: 'Allegra Byron',
      age: 5
    }, {
      name: 'Elizabeth Medora Leigh',
      age: 8
    }]);
    lordByron.get('childAges'); // [7, 5, 8]
    ```
  itemtype: method
  name: mapBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  return:
    description: an array mapped to the specified key
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 228
  description: |-
    Filters the array by the callback.

    The callback method you provide should have the following signature.
    `item` is the current item in the iteration.
    `index` is the integer index of the current item in the iteration.
    `array` is the dependant array itself.

    ```javascript
    function(item, index, array);
    ```

    ```javascript
    var Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filter('chores', function(chore, index, array) {
        return !chore.done;
      })
    });

    var hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });

    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]
    ```
  itemtype: method
  name: filter
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: callback
    description: ''
    type: Function
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 271
  description: |-
    Filters the array by the property and value

    ```javascript
    var Hamster = Ember.Object.extend({
      remainingChores: Ember.computed.filterBy('chores', 'done', false)
    });

    var hamster = Hamster.create({
      chores: [
        { name: 'cook', done: true },
        { name: 'clean', done: true },
        { name: 'write more unit tests', done: false }
      ]
    });

    hamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]
    ```
  itemtype: method
  name: filterBy
  params:
  - name: dependentKey
    description: ''
    type: String
  - name: propertyKey
    description: ''
    type: String
  - name: value
    description: ''
    type: "*"
  return:
    description: the filtered array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 314
  description: |-
    A computed property which returns a new array with all the unique
    elements from one or more dependent arrays.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      uniqueFruits: Ember.computed.uniq('fruits')
    });

    var hamster = Hamster.create({
      fruits: [
        'banana',
        'grape',
        'kale',
        'banana'
      ]
    });

    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']
    ```
  itemtype: method
  name: uniq
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      unique elements from the dependent array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 363
  description: Alias for [Ember.computed.uniq](/api/#method_computed_uniq).
  itemtype: method
  name: union
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      unique elements from the dependent array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 375
  description: |-
    A computed property which returns a new array with all the duplicated
    elements from two or more dependent arrays.

    Example

    ```javascript
    var obj = Ember.Object.extend({
      friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')
    }).create({
      adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    });

    obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']
    ```
  itemtype: method
  name: intersect
  params:
  - name: propertyKey
    description: ''
    type: String
    multiple: true
  return:
    description: |-
      computes a new array with all the
      duplicated elements from the dependent arrays
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 430
  description: |-
    A computed property which returns a new array with all the
    properties from the first dependent array that are not in the second
    dependent array.

    Example

    ```javascript
    var Hamster = Ember.Object.extend({
      likes: ['banana', 'grape', 'kale'],
      wants: Ember.computed.setDiff('likes', 'fruits')
    });

    var hamster = Hamster.create({
      fruits: [
        'grape',
        'kale',
      ]
    });

    hamster.get('wants'); // ['banana']
    ```
  itemtype: method
  name: setDiff
  params:
  - name: setAProperty
    description: ''
    type: String
  - name: setBProperty
    description: ''
    type: String
  return:
    description: |-
      computes a new array with all the
      items from the first dependent array that are not in the second
      dependent array
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/computed/reduce_computed_macros.js
  line: 478
  description: |-
    A computed property which returns a new array with all the
    properties from the first dependent array sorted based on a property
    or sort function.

    The callback method you provide should have the following signature:

    ```javascript
    function(itemA, itemB);
    ```

    - `itemA` the first item to compare.
    - `itemB` the second item to compare.

    This function should return negative number (e.g. `-1`) when `itemA` should come before
    `itemB`. It should return positive number (e.g. `1`) when `itemA` should come after
    `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.

    Therefore, if this function is comparing some numeric values, simple `itemA - itemB` or
    `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.

    Example

    ```javascript
    var ToDoList = Ember.Object.extend({
      // using standard ascending sort
      todosSorting: ['name'],
      sortedTodos: Ember.computed.sort('todos', 'todosSorting'),

      // using descending sort
      todosSortingDesc: ['name:desc'],
      sortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),

      // using a custom sort function
      priorityTodos: Ember.computed.sort('todos', function(a, b){
        if (a.priority > b.priority) {
          return 1;
        } else if (a.priority < b.priority) {
          return -1;
        }

        return 0;
      })
    });

    var todoList = ToDoList.create({todos: [
      { name: 'Unit Test', priority: 2 },
      { name: 'Documentation', priority: 3 },
      { name: 'Release', priority: 1 }
    ]});

    todoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]
    todoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]
    todoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]
    ```
  itemtype: method
  name: sort
  params:
  - name: itemsKey
    description: ''
    type: String
  - name: sortDefinition
    description: |-
      a dependent key to an
      array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting
    type: String or Function
  return:
    description: |-
      computes a new sorted array based
      on the sort property array or callback function
    type: Ember.ComputedProperty
  access: public
  tagname: ''
  class: Ember.computed
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/controllers/controller.js
  line: 31
  description: |-
    Creates a property that lazily looks up another controller in the container.
    Can only be used when defining another controller.

    Example:

    ```javascript
    App.PostController = Ember.Controller.extend({
      posts: Ember.inject.controller()
    });
    ```

    This example will create a `posts` property on the `post` controller that
    looks up the `posts` controller in the container, making it easy to
    reference other controllers. This is functionally equivalent to:

    ```javascript
    App.PostController = Ember.Controller.extend({
      needs: 'posts',
      posts: Ember.computed.alias('controllers.posts')
    });
    ```
  itemtype: method
  name: controller
  since: 1.10.0
  params:
  - name: name
    description: |-
      (optional) name of the controller to inject, defaults
             to the property's name
    type: String
  return:
    description: injection descriptor instance
    type: Ember.InjectedProperty
  access: public
  tagname: ''
  class: Ember.inject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/ext/function.js
  line: 15
  description: |-
    The `property` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    `true`, which is the default.

    Computed properties allow you to treat a function like a property:

    ```javascript
    MyApp.President = Ember.Object.extend({
      firstName: '',
      lastName:  '',

      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');
      }.property() // Call this flag to mark the function as a property
    });

    var president = MyApp.President.create({
      firstName: 'Barack',
      lastName: 'Obama'
    });

    president.get('fullName'); // 'Barack Obama'
    ```

    Treating a function like a property is useful because they can work with
    bindings, just like any other property.

    Many computed properties have dependencies on other properties. For
    example, in the above example, the `fullName` property depends on
    `firstName` and `lastName` to determine its value. You can tell Ember
    about these dependencies like this:

    ```javascript
    MyApp.President = Ember.Object.extend({
      firstName: '',
      lastName:  '',

      fullName: function() {
        return this.get('firstName') + ' ' + this.get('lastName');

        // Tell Ember.js that this computed property depends on firstName
        // and lastName
      }.property('firstName', 'lastName')
    });
    ```

    Make sure you list these dependencies so Ember knows when to update
    bindings that connect to a computed property. Changing a dependency
    will not immediately trigger an update of the computed property, but
    will instead clear the cache so that it is updated when the next `get`
    is called on the property.

    See [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).
  itemtype: method
  name: property
  access: public
  tagname: ''
  class: Function
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/function.js
  line: 81
  description: |-
    The `observes` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    true, which is the default.

    You can observe property changes simply by adding the `observes`
    call to the end of your method declarations in classes that you write.
    For example:

    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes whenever the "value" property changes
      }.observes('value')
    });
    ```

    In the future this method may become asynchronous.

    See `Ember.observer`.
  itemtype: method
  name: observes
  access: public
  tagname: ''
  class: Function
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/function.js
  line: 129
  description: |-
    The `observesImmediately` extension of Javascript's Function prototype is
    available when `Ember.EXTEND_PROTOTYPES` or
    `Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.

    You can observe property changes simply by adding the `observesImmediately`
    call to the end of your method declarations in classes that you write.
    For example:

    ```javascript
    Ember.Object.extend({
      valueObserver: function() {
        // Executes immediately after the "value" property changes
      }.observesImmediately('value')
    });
    ```

    In the future, `observes` may become asynchronous. In this event,
    `observesImmediately` will maintain the synchronous behavior.

    See `Ember.immediateObserver`.
  itemtype: method
  name: observesImmediately
  deprecated: true
  access: private
  tagname: ''
  class: Function
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/function.js
  line: 162
  description: |-
    The `on` extension of Javascript's Function prototype is available
    when `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is
    true, which is the default.

    You can listen for events simply by adding the `on` call to the end of
    your method declarations in classes or mixins that you write. For example:

    ```javascript
    Ember.Mixin.create({
      doSomethingWithElement: function() {
        // Executes whenever the "didInsertElement" event fires
      }.on('didInsertElement')
    });
    ```

    See `Ember.on`.
  itemtype: method
  name: 'on'
  access: public
  tagname: ''
  class: Function
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 22
  description: See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).
  itemtype: method
  name: fmt
  access: private
  tagname: ''
  deprecated: true
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 34
  description: See [Ember.String.w](/api/classes/Ember.String.html#method_w).
  itemtype: method
  name: w
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 45
  description: See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).
  itemtype: method
  name: loc
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 56
  description: See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).
  itemtype: method
  name: camelize
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 67
  description: See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).
  itemtype: method
  name: decamelize
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 78
  description: See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).
  itemtype: method
  name: dasherize
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 89
  description: See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).
  itemtype: method
  name: underscore
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 100
  description: See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).
  itemtype: method
  name: classify
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/ext/string.js
  line: 111
  description: See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).
  itemtype: method
  name: capitalize
  access: private
  tagname: ''
  class: String
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/-proxy.js
  line: 45
  description: The object whose properties will be forwarded.
  itemtype: property
  name: content
  type: Ember.Object
  default: 'null'
  access: private
  tagname: ''
  class: Ember.ProxyMixin
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/action_handler.js
  line: 24
  description: |-
    The collection of functions, keyed by name, available on this
    `ActionHandler` as action targets.

    These functions will be invoked when a matching `{{action}}` is triggered
    from within a template and the application's current route is this route.

    Actions can also be invoked from other parts of your application
    via `ActionHandler#send`.

    The `actions` hash will inherit action handlers from
    the `actions` hash defined on extended parent classes
    or mixins rather than just replace the entire hash, e.g.:

    ```js
    App.CanDisplayBanner = Ember.Mixin.create({
      actions: {
        displayBanner: function(msg) {
          // ...
        }
      }
    });

    App.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {
      actions: {
        playMusic: function() {
          // ...
        }
      }
    });

    // `WelcomeRoute`, when active, will be able to respond
    // to both actions, since the actions hash is merged rather
    // then replaced when extending mixins / parent classes.
    this.send('displayBanner');
    this.send('playMusic');
    ```

    Within a Controller, Route, View or Component's action handler,
    the value of the `this` context is the Controller, Route, View or
    Component object:

    ```js
    App.SongRoute = Ember.Route.extend({
      actions: {
        myAction: function() {
          this.controllerFor("song");
          this.transitionTo("other.route");
          ...
        }
      }
    });
    ```

    It is also possible to call `this._super.apply(this, arguments)` from within an
    action handler if it overrides a handler defined on a parent
    class or mixin:

    Take for example the following routes:

    ```js
    App.DebugRoute = Ember.Mixin.create({
      actions: {
        debugRouteInformation: function() {
          console.debug("trololo");
        }
      }
    });

    App.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {
      actions: {
        debugRouteInformation: function() {
          // also call the debugRouteInformation of mixed in App.DebugRoute
          this._super.apply(this, arguments);

          // show additional annoyance
          window.alert(...);
        }
      }
    });
    ```

    ## Bubbling

    By default, an action will stop bubbling once a handler defined
    on the `actions` hash handles it. To continue bubbling the action,
    you must return `true` from the handler:

    ```js
    App.Router.map(function() {
      this.route("album", function() {
        this.route("song");
      });
    });

    App.AlbumRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
        }
      }
    });

    App.AlbumSongRoute = Ember.Route.extend({
      actions: {
        startPlaying: function() {
          // ...

          if (actionShouldAlsoBeTriggeredOnParentRoute) {
            return true;
          }
        }
      }
    });
    ```
  itemtype: property
  name: actions
  type: Object
  default: 'null'
  access: public
  tagname: ''
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/action_handler.js
  line: 145
  description: |-
    Triggers a named action on the `ActionHandler`. Any parameters
    supplied after the `actionName` string will be passed as arguments
    to the action target function.

    If the `ActionHandler` has its `target` property set, actions may
    bubble to the `target`. Bubbling happens when an `actionName` can
    not be found in the `ActionHandler`'s `actions` hash or if the
    action target function returns `true`.

    Example

    ```js
    App.WelcomeRoute = Ember.Route.extend({
      actions: {
        playTheme: function() {
           this.send('playMusic', 'theme.mp3');
        },
        playMusic: function(track) {
          // ...
        }
      }
    });
    ```
  itemtype: method
  name: send
  params:
  - name: actionName
    description: The action to trigger
    type: String
  - name: context
    description: a context to send with the action
    type: "*"
  access: public
  tagname: ''
  class: Ember.ActionHandler
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 92
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Your array must support the `length` property. Your replace methods should
    set this property whenever it changes.
  itemtype: property
  name: length
  type: Number
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 103
  description: |-
    Returns the object at the given `index`. If the given `index` is negative
    or is greater or equal than the array length, returns `undefined`.

    This is one of the primitives you must implement to support `Ember.Array`.
    If your object supports retrieving the value of an array item using `get()`
    (i.e. `myArray.get(0)`), then you do not need to implement this method
    yourself.

    ```javascript
    var arr = ['a', 'b', 'c', 'd'];

    arr.objectAt(0);   // 'a'
    arr.objectAt(3);   // 'd'
    arr.objectAt(-1);  // undefined
    arr.objectAt(4);   // undefined
    arr.objectAt(5);   // undefined
    ```
  itemtype: method
  name: objectAt
  params:
  - name: idx
    description: The index of the item to return.
    type: Number
  return:
    description: item at index or undefined
    type: "*"
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 135
  description: |-
    This returns the objects at the specified indexes, using `objectAt`.

    ```javascript
    var arr = ['a', 'b', 'c', 'd'];

    arr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']
    arr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]
    ```
  itemtype: method
  name: objectsAt
  params:
  - name: indexes
    description: An array of indexes of items to return.
    type: Array
  return:
    description: ''
    type: Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 163
  description: |-
    This is the handler for the special array content property. If you get
    this property, it will return this. If you set this property to a new
    array, it will replace the current content.

    This property overrides the default property defined in `Ember.Enumerable`.
  itemtype: property
  name: "[]"
  return:
    description: this
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 198
  description: |-
    Returns a new array that is a slice of the receiver. This implementation
    uses the observable array methods to retrieve the objects for the new
    slice.

    ```javascript
    var arr = ['red', 'green', 'blue'];

    arr.slice(0);       // ['red', 'green', 'blue']
    arr.slice(0, 2);    // ['red', 'green']
    arr.slice(1, 100);  // ['green', 'blue']
    ```
  itemtype: method
  name: slice
  params:
  - name: beginIndex
    description: "(Optional) index to begin slicing from."
    type: Number
  - name: endIndex
    description: "(Optional) index to end the slice at (but not included)."
    type: Number
  return:
    description: New array with specified slice
    type: Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 244
  description: |-
    Returns the index of the given object's first occurrence.
    If no `startAt` argument is given, the starting location to
    search is 0. If it's negative, will count backward from
    the end of the array. Returns -1 if no match is found.

    ```javascript
    var arr = ['a', 'b', 'c', 'd', 'a'];

    arr.indexOf('a');       //  0
    arr.indexOf('z');       // -1
    arr.indexOf('a', 2);    //  4
    arr.indexOf('a', -1);   //  4
    arr.indexOf('b', 3);    // -1
    arr.indexOf('a', 100);  // -1
    ```
  itemtype: method
  name: indexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 288
  description: |-
    Returns the index of the given object's last occurrence.
    If no `startAt` argument is given, the search starts from
    the last position. If it's negative, will count backward
    from the end of the array. Returns -1 if no match is found.

    ```javascript
    var arr = ['a', 'b', 'c', 'd', 'a'];

    arr.lastIndexOf('a');       //  4
    arr.lastIndexOf('z');       // -1
    arr.lastIndexOf('a', 2);    //  0
    arr.lastIndexOf('a', -1);   //  4
    arr.lastIndexOf('b', 3);    //  1
    arr.lastIndexOf('a', 100);  //  4
    ```
  itemtype: method
  name: lastIndexOf
  params:
  - name: object
    description: the item to search for
    type: Object
  - name: startAt
    description: optional starting location to search, default 0
    type: Number
  return:
    description: index or -1 if not found
    type: Number
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 336
  description: |-
    Adds an array observer to the receiving array. The array observer object
    normally must implement two methods:

    * `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be
      called just before the array is modified.
    * `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be
      called just after the array is modified.

    Both callbacks will be passed the observed object, starting index of the
    change as well a a count of the items to be removed and added. You can use
    these callbacks to optionally inspect the array during the change, clear
    caches, or do any other bookkeeping necessary.

    In addition to passing a target, you can also include an options hash
    which you can use to override the method names that will be invoked on the
    target.
  itemtype: method
  name: addArrayObserver
  params:
  - name: target
    description: The observer object.
    type: Object
  - name: opts
    description: |-
      Optional hash of configuration options including
        `willChange` and `didChange` option.
    type: Object
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 366
  description: |-
    Removes an array observer from the object if the observer is current
    registered. Calling this method multiple times with the same object will
    have no effect.
  itemtype: method
  name: removeArrayObserver
  params:
  - name: target
    description: The object observing the array.
    type: Object
  - name: opts
    description: |-
      Optional hash of configuration options including
        `willChange` and `didChange` option.
    type: Object
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 382
  description: |-
    Becomes true whenever the array currently has observers watching changes
    on the array.
  itemtype: property
  name: hasArrayObservers
  type: Boolean
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 393
  description: |-
    If you are implementing an object that supports `Ember.Array`, call this
    method just before the array content changes to notify any observers and
    invalidate any related properties. Pass the starting index of the change
    as well as a delta of the amounts to change.
  itemtype: method
  name: arrayContentWillChange
  params:
  - name: startIdx
    description: The starting index in the array that will change.
    type: Number
  - name: removeAmt
    description: |-
      The number of items that will be removed. If you
        pass `null` assumes 0
    type: Number
  - name: addAmt
    description: |-
      The number of items that will be added. If you
        pass `null` assumes 0.
    type: Number
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 448
  description: |-
    If you are implementing an object that supports `Ember.Array`, call this
    method just after the array content changes to notify any observers and
    invalidate any related properties. Pass the starting index of the change
    as well as a delta of the amounts to change.
  itemtype: method
  name: arrayContentDidChange
  params:
  - name: startIdx
    description: The starting index in the array that did change.
    type: Number
  - name: removeAmt
    description: |-
      The number of items that were removed. If you
        pass `null` assumes 0
    type: Number
  - name: addAmt
    description: |-
      The number of items that were added. If you
        pass `null` assumes 0.
    type: Number
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/array.js
  line: 516
  description: |-
    Returns a special object that can be used to observe individual properties
    on the array. Just get an equivalent property on this object and it will
    return an enumerable that maps automatically to the named key on the
    member objects.

    If you merely want to watch for any items being added or removed to the array,
    use the `[]` property instead of `@each`.
  itemtype: property
  name: "@each"
  access: public
  tagname: ''
  class: Ember.Array
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/comparable.js
  line: 21
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Override to return the result of the comparison of the two parameters. The
    compare method should return:

    - `-1` if `a < b`
    - `0` if `a == b`
    - `1` if `a > b`

    Default implementation raises an exception.
  itemtype: method
  name: compare
  params:
  - name: a
    description: the first object to compare
    type: Object
  - name: b
    description: the second object to compare
    type: Object
  return:
    description: the result of the comparison
    type: Number
  access: private
  tagname: ''
  class: Ember.Comparable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/container_proxy.js
  line: 17
  description: The container stores state.
  access: private
  tagname: ''
  itemtype: property
  name: __container__
  type: Ember.Container
  class: ContainerProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/container_proxy.js
  line: 25
  description: |-
    Given a fullName return a corresponding instance.

    The default behaviour is for lookup to return a singleton instance.
    The singleton is scoped to the container, allowing multiple containers
    to all have their own locally scoped singletons.

    ```javascript
    var registry = new Registry();
    var container = registry.container();

    registry.register('api:twitter', Twitter);

    var twitter = container.lookup('api:twitter');

    twitter instanceof Twitter; // => true

    // by default the container will return singletons
    var twitter2 = container.lookup('api:twitter');
    twitter2 instanceof Twitter; // => true

    twitter === twitter2; //=> true
    ```

    If singletons are not wanted an optional flag can be provided at lookup.

    ```javascript
    var registry = new Registry();
    var container = registry.container();

    registry.register('api:twitter', Twitter);

    var twitter = container.lookup('api:twitter', { singleton: false });
    var twitter2 = container.lookup('api:twitter', { singleton: false });

    twitter === twitter2; //=> false
    ```
  access: public
  tagname: ''
  itemtype: method
  name: lookup
  params:
  - name: fullName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Any
  class: ContainerProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/container_proxy.js
  line: 71
  description: Given a fullName return the corresponding factory.
  access: private
  tagname: ''
  itemtype: method
  name: _lookupFactory
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: ''
    type: Any
  class: ContainerProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/container_proxy.js
  line: 81
  access: private
  tagname: ''
  class: ContainerProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/controller.js
  line: 16
  description: |-
    The object to which actions from the view should be sent.

    For example, when a Handlebars template uses the `{{action}}` helper,
    it will attempt to send the action to the view's controller's `target`.

    By default, the value of the target property is set to the router, and
    is injected when a controller is instantiated. This injection is defined
    in Ember.Application#buildContainer, and is applied as part of the
    applications initialization process. It can also be set after a controller
    has been instantiated, for instance when using the render helper in a
    template, or when a controller is used as an `itemController`. In most
    cases the `target` property will automatically be set to the logical
    consumer of actions for the controller.
  itemtype: property
  name: target
  default: 'null'
  access: public
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/controller.js
  line: 43
  description: |-
    The controller's current model. When retrieving or modifying a controller's
    model, this property should be used instead of the `content` property.
  itemtype: property
  name: model
  access: public
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/controller.js
  line: 52
  access: private
  tagname: ''
  class: Ember.ControllerMixin
  module: ember
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js
  line: 19
  access: private
  tagname: |-
    Moves `content` to `model`  at extend time if a `model` is not also specified.

    Note that this currently modifies the mixin themselves, which is technically
    dubious but is practically of little consequence. This may change in the
    future.
  itemtype: method
  name: willMergeMixin
  since: 1.4.0
  class: Ember.Copyable
  module: ember
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/copyable.js
  line: 29
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Override to return a copy of the receiver. Default implementation raises
    an exception.
  itemtype: method
  name: copy
  params:
  - name: deep
    description: if `true`, a deep copy of the object should be made
    type: Boolean
  return:
    description: copy of receiver
    type: Object
  access: private
  tagname: ''
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/copyable.js
  line: 42
  description: |-
    If the object implements `Ember.Freezable`, then this will return a new
    copy if the object is not frozen and the receiver if the object is frozen.

    Raises an exception if you try to call this method on a object that does
    not support freezing.

    You should use this method whenever you want a copy of a freezable object
    since a freezable object can simply return itself without actually
    consuming more memory.
  itemtype: method
  name: frozenCopy
  return:
    description: copy of receiver or receiver
    type: Object
  deprecated: true
  deprecationMessage: Use `Object.freeze` instead.
  access: private
  tagname: ''
  class: Ember.Copyable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 92
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Implement this method to make your class enumerable.

    This method will be called repeatedly during enumeration. The index value
    will always begin with 0 and increment monotonically. You don't have to
    rely on the index value to determine what object to return, but you should
    always check the value and start from the beginning when you see the
    requested index is 0.

    The `previousObject` is the object that was returned from the last call
    to `nextObject` for the current iteration. This is a useful way to
    manage iteration if you are tracing a linked list, for example.

    Finally the context parameter will always contain a hash you can use as
    a "scratchpad" to maintain any other state you need in order to iterate
    properly. The context object is reused and is not reset between
    iterations so make sure you setup the context with a fresh state whenever
    the index parameter is 0.

    Generally iterators will continue to call `nextObject` until the index
    reaches the current length-1. If you run out of data before this
    time for some reason, you should simply return undefined.

    The default implementation of this method simply looks up the index.
    This works great on any Array-like objects.
  itemtype: method
  name: nextObject
  params:
  - name: index
    description: the current index of the iteration
    type: Number
  - name: previousObject
    description: |-
      the value returned by the last call to
        `nextObject`.
    type: Object
  - name: context
    description: a context object you can use to maintain state.
    type: Object
  return:
    description: the next object in the iteration or undefined
    type: Object
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 130
  description: |-
    Helper method returns the first object from a collection. This is usually
    used by bindings and other parts of the framework to extract a single
    object if the enumerable contains only one item.

    If you override this method, you should implement it so that it will
    always return the same value each time it is called. If your enumerable
    contains only one object, this method should always return that object.
    If your enumerable is empty, this method should return `undefined`.

    ```javascript
    var arr = ['a', 'b', 'c'];
    arr.get('firstObject');  // 'a'

    var arr = [];
    arr.get('firstObject');  // undefined
    ```
  itemtype: property
  name: firstObject
  return:
    description: the object or undefined
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 166
  description: |-
    Helper method returns the last object from a collection. If your enumerable
    contains only one object, this method should always return that object.
    If your enumerable is empty, this method should return `undefined`.

    ```javascript
    var arr = ['a', 'b', 'c'];
    arr.get('lastObject');  // 'c'

    var arr = [];
    arr.get('lastObject');  // undefined
    ```
  itemtype: property
  name: lastObject
  return:
    description: the last object or undefined
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 205
  description: |-
    Returns `true` if the passed object can be found in the receiver. The
    default version will iterate through the enumerable until the object
    is found. You may want to override this with a more efficient version.

    ```javascript
    var arr = ['a', 'b', 'c'];

    arr.contains('a'); // true
    arr.contains('z'); // false
    ```
  itemtype: method
  name: contains
  params:
  - name: obj
    description: The object to search for.
    type: Object
  return:
    description: "`true` if object is found in enumerable."
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 230
  description: |-
    Iterates through the enumerable, calling the passed function on each
    item. This method corresponds to the `forEach()` method defined in
    JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: forEach
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: receiver
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 281
  description: Alias for `mapBy`
  itemtype: method
  name: getEach
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 291
  description: |-
    Sets the value on the named property for each member. This is more
    efficient than using other methods defined on this helper. If the object
    implements Ember.Observable, the value will be changed to `set(),` otherwise
    it will be set directly. `null` objects are skipped.
  itemtype: method
  name: setEach
  params:
  - name: key
    description: The key to set
    type: String
  - name: value
    description: The object to set
    type: Object
  return:
    description: receiver
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 309
  description: |-
    Maps all of the items in the enumeration to another value, returning
    a new array. This method corresponds to `map()` defined in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the mapped value.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: map
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: The mapped array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 346
  description: |-
    Similar to map, this specialized function returns the value of the named
    property on all items in the enumeration.
  itemtype: method
  name: mapBy
  params:
  - name: key
    description: name of the property
    type: String
  return:
    description: The mapped array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 361
  description: |-
    Returns an array with all of the items in the enumeration that the passed
    function returns true for. This method corresponds to `filter()` defined in
    JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: filter
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A filtered array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 402
  description: |-
    Returns an array with all of the items in the enumeration where the passed
    function returns false. This method is the inverse of filter().

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - *item* is the current item in the iteration.
    - *index* is the current index in the iteration
    - *enumerable* is the enumerable object itself.

    It should return a falsey value to include the item in the results.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as "this" on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: reject
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: A rejected array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 435
  description: |-
    Returns an array with just the items with the matched property. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.
  itemtype: method
  name: filterBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: "*"
    optional: true
  return:
    description: filtered array
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 450
  description: |-
    Returns an array with the items that do not have truthy values for
    key.  You can pass an optional second argument with the target value.  Otherwise
    this will match any property that evaluates to false.
  itemtype: method
  name: rejectBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: rejected array
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 475
  description: |-
    Returns the first item in the array for which the callback returns true.
    This method works similar to the `filter()` method defined in JavaScript 1.6
    except that it will stop working on the array once a match is found.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.
  itemtype: method
  name: find
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: Found item or `undefined`.
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 532
  description: |-
    Returns the first item with a property matching the passed value. You
    can pass an optional second argument with the target value. Otherwise
    this will match any property that evaluates to `true`.

    This method works much like the more generic `find()` method.
  itemtype: method
  name: findBy
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against.
    type: String
    optional: true
  return:
    description: found item or `undefined`
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 549
  description: |-
    Returns `true` if the passed function returns true for every item in the
    enumeration. This corresponds with the `every()` method in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` or `false`.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.

    Example Usage:

    ```javascript
    if (people.every(isEngineer)) {
      Paychecks.addBigBonus();
    }
    ```
  itemtype: method
  name: every
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: ''
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 588
  description: |-
    Returns `true` if the passed property resolves to the value of the second
    argument for all items in the enumerable. This method is often simpler/faster
    than using a callback.
  itemtype: method
  name: isEvery
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against. Defaults to `true`
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 604
  description: |-
    Returns `true` if the passed function returns true for any item in the
    enumeration. This corresponds with the `some()` method in JavaScript 1.6.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(item, index, enumerable);
    ```

    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    It should return the `true` to include the item in the results, `false`
    otherwise.

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context. This is a good way
    to give your iterator function access to the current object.

    Usage Example:

    ```javascript
    if (people.any(isManager)) {
      Paychecks.addBiggerBonus();
    }
    ```
  itemtype: method
  name: any
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  return:
    description: "`true` if the passed function returns `true` for any item"
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 662
  description: |-
    Returns `true` if the passed property resolves to the value of the second
    argument for any item in the enumerable. This method is often simpler/faster
    than using a callback.
  itemtype: method
  name: isAny
  params:
  - name: key
    description: the property to test
    type: String
  - name: value
    description: optional value to test against. Defaults to `true`
    type: String
    optional: true
  return:
    description: ''
    type: Boolean
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 678
  description: |-
    This will combine the values of the enumerator into a single value. It
    is a useful way to collect a summary value from an enumeration. This
    corresponds to the `reduce()` method defined in JavaScript 1.8.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(previousValue, item, index, enumerable);
    ```

    - `previousValue` is the value returned by the last call to the iterator.
    - `item` is the current item in the iteration.
    - `index` is the current index in the iteration.
    - `enumerable` is the enumerable object itself.

    Return the new cumulative value.

    In addition to the callback you can also pass an `initialValue`. An error
    will be raised if you do not pass an initial value and the enumerator is
    empty.

    Note that unlike the other methods, this method does not allow you to
    pass a target object to set as this for the callback. It's part of the
    spec. Sorry.
  itemtype: method
  name: reduce
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: initialValue
    description: Initial value for the reduce
    type: Object
  - name: reducerProperty
    description: internal use only.
    type: String
  return:
    description: The reduced value.
    type: Object
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 726
  description: |-
    Invokes the named method on every object in the receiver that
    implements it. This method corresponds to the implementation in
    Prototype 1.6.
  itemtype: method
  name: invoke
  params:
  - name: methodName
    description: the name of the method
    type: String
  - name: args
    description: optional arguments to pass as well.
    type: Object...
  return:
    description: return values from calling invoke.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 751
  description: |-
    Simply converts the enumerable into a genuine array. The order is not
    guaranteed. Corresponds to the method implemented by Prototype.
  itemtype: method
  name: toArray
  return:
    description: the enumerable as an array.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 769
  description: |-
    Returns a copy of the array with all `null` and `undefined` elements removed.

    ```javascript
    var arr = ['a', null, 'c', undefined];
    arr.compact();  // ['a', 'c']
    ```
  itemtype: method
  name: compact
  return:
    description: the array without null and undefined elements.
    type: Array
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 787
  description: |-
    Returns a new enumerable that excludes the passed value. The default
    implementation returns an array regardless of the receiver type unless
    the receiver does not contain the value.

    ```javascript
    var arr = ['a', 'b', 'a', 'c'];
    arr.without('a');  // ['b', 'c']
    ```
  itemtype: method
  name: without
  params:
  - name: value
    description: ''
    type: Object
  return:
    description: ''
    type: Ember.Enumerable
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 818
  description: |-
    Returns a new enumerable that contains only unique values. The default
    implementation returns an array regardless of the receiver type.

    ```javascript
    var arr = ['a', 'a', 'b', 'b'];
    arr.uniq();  // ['a', 'b']
    ```

    This only works on primitive data types, e.g. Strings, Numbers, etc.
  itemtype: method
  name: uniq
  return:
    description: ''
    type: Ember.Enumerable
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 845
  description: |-
    This property will trigger anytime the enumerable's content changes.
    You can observe this property to be notified of changes to the enumerable's
    content.

    For plain enumerables, this property is read only. `Array` overrides
    this method.
  itemtype: property
  name: "[]"
  type: Array
  return:
    description: this
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 866
  description: |-
    Registers an enumerable observer. Must implement `Ember.EnumerableObserver`
    mixin.
  itemtype: method
  name: addEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Object
    optional: true
  return:
    description: this
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 895
  description: Removes a registered enumerable observer.
  itemtype: method
  name: removeEnumerableObserver
  params:
  - name: target
    description: ''
    type: Object
  - name: opts
    description: ''
    type: Object
    optional: true
  return:
    description: this
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 923
  description: |-
    Becomes true whenever the array currently has observers watching changes
    on the array.
  itemtype: property
  name: hasEnumerableObservers
  type: Boolean
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 936
  description: |-
    Invoke this method just before the contents of your enumerable will
    change. You can either omit the parameters completely or pass the objects
    to be removed or added if available or just a count.
  itemtype: method
  name: enumerableContentWillChange
  params:
  - name: removing
    description: |-
      An enumerable of the objects to
        be removed or the number of items to be removed.
    type: Ember.Enumerable|Number
  - name: adding
    description: |-
      An enumerable of the objects to be
        added or the number of items to be added.
    type: Ember.Enumerable|Number
  chainable: 1
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 989
  description: |-
    Invoke this method when the contents of your enumerable has changed.
    This will notify any observers watching for content changes. If you are
    implementing an ordered enumerable (such as an array), also pass the
    start and end values where the content changed so that it can be used to
    notify range observers.
  itemtype: method
  name: enumerableContentDidChange
  params:
  - name: removing
    description: |-
      An enumerable of the objects to
        be removed or the number of items to be removed.
    type: Ember.Enumerable|Number
  - name: adding
    description: |-
      An enumerable of the objects to
        be added or the number of items to be added.
    type: Ember.Enumerable|Number
  chainable: 1
  access: private
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/enumerable.js
  line: 1044
  description: |-
    Converts the enumerable into an array and sorts by the keys
    specified in the argument.

    You may provide multiple arguments to sort by multiple properties.
  itemtype: method
  name: sortBy
  params:
  - name: property
    description: name(s) to sort on
    type: String
  return:
    description: The sorted array.
    type: Array
  since: 1.2.0
  access: public
  tagname: ''
  class: Ember.Enumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/evented.js
  line: 52
  description: |-
    Subscribes to a named event with given function.

    ```javascript
    person.on('didLoad', function() {
      // fired once the person has loaded
    });
    ```

    An optional target can be passed in as the 2nd argument that will
    be set as the "this" for the callback. This is a good way to give your
    function access to the object triggering the event. When the target
    parameter is used the callback becomes the third argument.
  itemtype: method
  name: 'on'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  access: public
  tagname: ''
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/evented.js
  line: 78
  description: |-
    Subscribes a function to a named event and then cancels the subscription
    after the first time the event is triggered. It is good to use ``one`` when
    you only care about the first time an event has taken place.

    This function takes an optional 2nd argument that will become the "this"
    value for the callback. If this argument is passed then the 3rd argument
    becomes the function.
  itemtype: method
  name: one
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The "this" binding for the callback
    type: Object
    optional: true
  - name: method
    description: The callback to execute
    type: Function
  return:
    description: this
  access: public
  tagname: ''
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/evented.js
  line: 104
  description: |-
    Triggers a named event for the object. Any additional arguments
    will be passed as parameters to the functions that are subscribed to the
    event.

    ```javascript
    person.on('didEat', function(food) {
      console.log('person ate some ' + food);
    });

    person.trigger('didEat', 'broccoli');

    // outputs: person ate some broccoli
    ```
  itemtype: method
  name: trigger
  params:
  - name: name
    description: The name of the event
    type: String
  - name: args
    description: Optional arguments to pass on
    type: Object...
  access: public
  tagname: ''
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/evented.js
  line: 127
  description: Cancels subscription for given name, target, and method.
  itemtype: method
  name: 'off'
  params:
  - name: name
    description: The name of the event
    type: String
  - name: target
    description: The target of the subscription
    type: Object
  - name: method
    description: The function of the subscription
    type: Function
  return:
    description: this
  access: public
  tagname: ''
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/evented.js
  line: 142
  description: Checks to see if object has any subscriptions for named event.
  itemtype: method
  name: has
  params:
  - name: name
    description: The name of the event
    type: String
  return:
    description: does the object have a subscription for event
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Evented
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/freezable.js
  line: 80
  description: |-
    Set to `true` when the object is frozen. Use this property to detect
    whether your object is frozen or not.
  itemtype: property
  name: isFrozen
  type: Boolean
  access: private
  tagname: ''
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/freezable.js
  line: 90
  description: |-
    Freezes the object. Once this method has been called the object should
    no longer allow any properties to be edited.
  itemtype: method
  name: freeze
  return:
    description: receiver
    type: Object
  access: private
  tagname: ''
  class: Ember.Freezable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 51
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    This is one of the primitives you must implement to support `Ember.Array`.
    You should replace amt objects started at idx with the objects in the
    passed array. You should also call `this.enumerableContentDidChange()`
  itemtype: method
  name: replace
  params:
  - name: idx
    description: |-
      Starting index in the array to replace. If
        idx >= length, then append to the end of the array.
    type: Number
  - name: amt
    description: |-
      Number of elements that should be removed from
        the array, starting at *idx*.
    type: Number
  - name: objects
    description: |-
      An array of zero or more objects that should be
        inserted into the array at *idx*
    type: Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 69
  description: |-
    Remove all elements from the array. This is useful if you
    want to reuse an existing array without having to recreate it.

    ```javascript
    var colors = ['red', 'green', 'blue'];

    color.length();   //  3
    colors.clear();   //  []
    colors.length();  //  0
    ```
  itemtype: method
  name: clear
  return:
    description: An empty Array.
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 95
  description: |-
    This will use the primitive `replace()` method to insert an object at the
    specified index.

    ```javascript
    var colors = ['red', 'green', 'blue'];

    colors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']
    colors.insertAt(5, 'orange');  // Error: Index out of range
    ```
  itemtype: method
  name: insertAt
  params:
  - name: idx
    description: index of insert the object at.
    type: Number
  - name: object
    description: object to insert
    type: Object
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 121
  description: |-
    Remove an object at the specified index using the `replace()` primitive
    method. You can pass either a single index, or a start and a length.

    If you pass a start and length that is beyond the
    length this method will throw an `OUT_OF_RANGE_EXCEPTION`.

    ```javascript
    var colors = ['red', 'green', 'blue', 'yellow', 'orange'];

    colors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']
    colors.removeAt(2, 2);  // ['green', 'blue']
    colors.removeAt(4, 2);  // Error: Index out of range
    ```
  itemtype: method
  name: removeAt
  params:
  - name: start
    description: index, start of range
    type: Number
  - name: len
    description: length of passing range
    type: Number
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 159
  description: |-
    Push the object onto the end of the array. Works just like `push()` but it
    is KVO-compliant.

    ```javascript
    var colors = ['red', 'green'];

    colors.pushObject('black');     // ['red', 'green', 'black']
    colors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]
    ```
  itemtype: method
  name: pushObject
  params:
  - name: obj
    description: object to push
    type: "*"
  return:
    description: object same object passed as a param
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 180
  description: |-
    Add the objects in the passed numerable to the end of the array. Defers
    notifying observers of the change until all objects are added.

    ```javascript
    var colors = ['red'];

    colors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']
    ```
  itemtype: method
  name: pushObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 203
  description: |-
    Pop object from array or nil if none are left. Works just like `pop()` but
    it is KVO-compliant.

    ```javascript
    var colors = ['red', 'green', 'blue'];

    colors.popObject();   // 'blue'
    console.log(colors);  // ['red', 'green']
    ```
  itemtype: method
  name: popObject
  return:
    description: object
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 229
  description: |-
    Shift an object from start of array or nil if none are left. Works just
    like `shift()` but it is KVO-compliant.

    ```javascript
    var colors = ['red', 'green', 'blue'];

    colors.shiftObject();  // 'red'
    console.log(colors);   // ['green', 'blue']
    ```
  itemtype: method
  name: shiftObject
  return:
    description: object
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 254
  description: |-
    Unshift an object to start of array. Works just like `unshift()` but it is
    KVO-compliant.

    ```javascript
    var colors = ['red'];

    colors.unshiftObject('yellow');    // ['yellow', 'red']
    colors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']
    ```
  itemtype: method
  name: unshiftObject
  params:
  - name: obj
    description: object to unshift
    type: "*"
  return:
    description: object same object passed as a param
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 275
  description: |-
    Adds the named objects to the beginning of the array. Defers notifying
    observers until all objects have been added.

    ```javascript
    var colors = ['red'];

    colors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']
    colors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function
    ```
  itemtype: method
  name: unshiftObjects
  params:
  - name: objects
    description: the objects to add
    type: Ember.Enumerable
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 296
  description: |-
    Reverse objects in the array. Works just like `reverse()` but it is
    KVO-compliant.
  itemtype: method
  name: reverseObjects
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 315
  description: |-
    Replace all the receiver's content with content of the argument.
    If argument is an empty array receiver will be cleared.

    ```javascript
    var colors = ['red', 'green', 'blue'];

    colors.setObjects(['black', 'white']);  // ['black', 'white']
    colors.setObjects([]);                  // []
    ```
  itemtype: method
  name: setObjects
  params:
  - name: objects
    description: |-
      array whose content will be used for replacing
          the content of the receiver
    type: Ember.Array
  return:
    description: receiver with the new content
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 346
  description: |-
    Remove all occurrences of an object in the array.

    ```javascript
    var cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];

    cities.removeObject('Chicago');  // ['Berlin', 'Lima']
    cities.removeObject('Lima');     // ['Berlin']
    cities.removeObject('Tokyo')     // ['Berlin']
    ```
  itemtype: method
  name: removeObject
  params:
  - name: obj
    description: object to remove
    type: "*"
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_array.js
  line: 374
  description: |-
    Push the object onto the end of the array if it is not already
    present in the array.

    ```javascript
    var cities = ['Chicago', 'Berlin'];

    cities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']
    cities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']
    ```
  itemtype: method
  name: addObject
  params:
  - name: obj
    description: object to add, if not already present
    type: "*"
  return:
    description: receiver
    type: Ember.Array
  access: public
  tagname: ''
  class: Ember.MutableArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 52
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Attempts to add the passed object to the receiver if the object is not
    already present in the collection. If the object is present, this method
    has no effect.

    If the passed object is of a type not supported by the receiver,
    then this method should raise an exception.
  itemtype: method
  name: addObject
  params:
  - name: object
    description: The object to add to the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  access: public
  tagname: ''
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 69
  description: Adds each object in the passed enumerable to the receiver.
  itemtype: method
  name: addObjects
  params:
  - name: objects
    description: the objects to add.
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  access: public
  tagname: ''
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 84
  description: |-
    __Required.__ You must implement this method to apply this mixin.

    Attempts to remove the passed object from the receiver collection if the
    object is present in the collection. If the object is not present,
    this method has no effect.

    If the passed object is of a type not supported by the receiver,
    then this method should raise an exception.
  itemtype: method
  name: removeObject
  params:
  - name: object
    description: The object to remove from the enumerable.
    type: Object
  return:
    description: the passed object
    type: Object
  access: public
  tagname: ''
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/mutable_enumerable.js
  line: 102
  description: Removes each object in the passed enumerable from the receiver.
  itemtype: method
  name: removeObjects
  params:
  - name: objects
    description: the objects to remove
    type: Ember.Enumerable
  return:
    description: receiver
    type: Object
  access: public
  tagname: ''
  class: Ember.MutableEnumerable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 99
  description: |-
    Retrieves the value of a property from the object.

    This method is usually similar to using `object[keyName]` or `object.keyName`,
    however it supports both computed properties and the unknownProperty
    handler.

    Because `get` unifies the syntax for accessing all these kinds
    of properties, it can make many refactorings easier, such as replacing a
    simple property with a computed property, or vice versa.

    ### Computed Properties

    Computed properties are methods defined with the `property` modifier
    declared at the end, such as:

    ```javascript
    fullName: function() {
      return this.get('firstName') + ' ' + this.get('lastName');
    }.property('firstName', 'lastName')
    ```

    When you call `get` on a computed property, the function will be
    called and the return value will be returned instead of the function
    itself.

    ### Unknown Properties

    Likewise, if you try to call `get` on a property whose value is
    `undefined`, the `unknownProperty()` method will be called on the object.
    If this method returns any value other than `undefined`, it will be returned
    instead. This allows you to implement "virtual" properties that are
    not defined upfront.
  itemtype: method
  name: get
  params:
  - name: keyName
    description: The property to retrieve
    type: String
  return:
    description: The property value or undefined.
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 142
  description: |-
    To get the values of multiple properties at once, call `getProperties`
    with a list of strings or an array:

    ```javascript
    record.getProperties('firstName', 'lastName', 'zipCode');
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```

    is equivalent to:

    ```javascript
    record.getProperties(['firstName', 'lastName', 'zipCode']);
    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
    ```
  itemtype: method
  name: getProperties
  params:
  - name: list
    description: of keys to get
    type: String...|Array
  return:
    description: ''
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 167
  description: |-
    Sets the provided key or path to the value.

    This method is generally very similar to calling `object[key] = value` or
    `object.key = value`, except that it provides support for computed
    properties, the `setUnknownProperty()` method and property observers.

    ### Computed Properties

    If you try to set a value on a key that has a computed property handler
    defined (see the `get()` method for an example), then `set()` will call
    that method, passing both the value and key instead of simply changing
    the value itself. This is useful for those times when you need to
    implement a property that is composed of one or more member
    properties.

    ### Unknown Properties

    If you try to set a value on a key that is undefined in the target
    object, then the `setUnknownProperty()` handler will be called instead. This
    gives you an opportunity to implement complex "virtual" properties that
    are not predefined on the object. If `setUnknownProperty()` returns
    undefined, then `set()` will simply set the value on the object.

    ### Property Observers

    In addition to changing the property, `set()` will also register a property
    change with the object. Unless you have placed this call inside of a
    `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
    (i.e. observer methods declared on the same object), will be called
    immediately. Any "remote" observers (i.e. observer methods declared on
    another object) will be placed in a queue and called at a later time in a
    coalesced manner.
  itemtype: method
  name: set
  params:
  - name: keyName
    description: The property to set
    type: String
  - name: value
    description: The value to set or `null`.
    type: Object
  return:
    description: The passed value
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 212
  description: |-
    Sets a list of properties at once. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.

    ```javascript
    record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
    ```
  itemtype: method
  name: setProperties
  params:
  - name: hash
    description: the hash of keys and values to set
    type: Object
  return:
    description: The passed in hash
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 230
  description: |-
    Begins a grouping of property changes.

    You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call this
    method at the beginning of the changes to begin deferring change
    notifications. When you are done making changes, call
    `endPropertyChanges()` to deliver the deferred change notifications and end
    deferring.
  itemtype: method
  name: beginPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  access: private
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 250
  description: |-
    Ends a grouping of property changes.

    You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call
    `beginPropertyChanges()` at the beginning of the changes to defer change
    notifications. When you are done making changes, call this method to
    deliver the deferred change notifications and end deferring.
  itemtype: method
  name: endPropertyChanges
  return:
    description: ''
    type: Ember.Observable
  access: private
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 269
  description: |-
    Notify the observer system that a property is about to change.

    Sometimes you need to change a value directly or indirectly without
    actually calling `get()` or `set()` on it. In this case, you can use this
    method and `propertyDidChange()` instead. Calling these two methods
    together will notify all observers that the property has potentially
    changed value.

    Note that you must always call `propertyWillChange` and `propertyDidChange`
    as a pair. If you do not, it may get the property change groups out of
    order and cause notifications to be delivered more often than you would
    like.
  itemtype: method
  name: propertyWillChange
  params:
  - name: keyName
    description: The property key that is about to change.
    type: String
  return:
    description: ''
    type: Ember.Observable
  access: private
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 293
  description: |-
    Notify the observer system that a property has just changed.

    Sometimes you need to change a value directly or indirectly without
    actually calling `get()` or `set()` on it. In this case, you can use this
    method and `propertyWillChange()` instead. Calling these two methods
    together will notify all observers that the property has potentially
    changed value.

    Note that you must always call `propertyWillChange` and `propertyDidChange`
    as a pair. If you do not, it may get the property change groups out of
    order and cause notifications to be delivered more often than you would
    like.
  itemtype: method
  name: propertyDidChange
  params:
  - name: keyName
    description: The property key that has just changed.
    type: String
  return:
    description: ''
    type: Ember.Observable
  access: private
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 317
  description: |-
    Convenience method to call `propertyWillChange` and `propertyDidChange` in
    succession.
  itemtype: method
  name: notifyPropertyChange
  params:
  - name: keyName
    description: The property key to be notified about.
    type: String
  return:
    description: ''
    type: Ember.Observable
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 332
  description: |-
    Adds an observer on a property.

    This is the core method used to register an observer for a property.

    Once you call this method, any time the key's value is set, your observer
    will be notified. Note that the observers are triggered any time the
    value is set, regardless of whether it has actually changed. Your
    observer should be prepared to handle that.

    You can also pass an optional context parameter to this method. The
    context will be passed to your observer method whenever it is triggered.
    Note that if you add the same target/method pair on a key multiple times
    with different context parameters, your observer will only be called once
    with the last context you passed.

    ### Observer Methods

    Observer methods you pass should generally have the following signature if
    you do not pass a `context` parameter:

    ```javascript
    fooDidChange: function(sender, key, value, rev) { };
    ```

    The sender is the object that changed. The key is the property that
    changes. The value property is currently reserved and unused. The rev
    is the last property revision of the object when it changed, which you can
    use to detect if the key value has really changed or not.

    If you pass a `context` parameter, the context will be passed before the
    revision like so:

    ```javascript
    fooDidChange: function(sender, key, value, context, rev) { };
    ```

    Usually you will not need the value, context or revision parameters at
    the end. In this case, it is common to write observer methods that take
    only a sender and key value as parameters or, if you aren't interested in
    any of these values, to write an observer that has no parameters at all.
  itemtype: method
  name: addObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 384
  description: |-
    Remove an observer you have previously registered on this object. Pass
    the same key, target, and method you passed to `addObserver()` and your
    target will no longer receive notifications.
  itemtype: method
  name: removeObserver
  params:
  - name: key
    description: The key to observer
    type: String
  - name: target
    description: The target object to invoke
    type: Object
  - name: method
    description: The method to invoke.
    type: String|Function
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 399
  description: |-
    Returns `true` if the object currently has observers registered for a
    particular key. You can use this method to potentially defer performing
    an expensive action until someone begins observing a particular property
    on the object.
  itemtype: method
  name: hasObserverFor
  params:
  - name: key
    description: Key to check
    type: String
  return:
    description: ''
    type: Boolean
  access: private
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 414
  description: |-
    Retrieves the value of a property, or a default value in the case that the
    property returns `undefined`.

    ```javascript
    person.getWithDefault('lastName', 'Doe');
    ```
  itemtype: method
  name: getWithDefault
  params:
  - name: keyName
    description: The name of the property to retrieve
    type: String
  - name: defaultValue
    description: The value to return if the property value is undefined
    type: Object
  return:
    description: The property value or the defaultValue.
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 432
  description: |-
    Set the value of a property to the current value plus some amount.

    ```javascript
    person.incrementProperty('age');
    team.incrementProperty('score', 2);
    ```
  itemtype: method
  name: incrementProperty
  params:
  - name: keyName
    description: The name of the property to increment
    type: String
  - name: increment
    description: The amount to increment by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 452
  description: |-
    Set the value of a property to the current value minus some amount.

    ```javascript
    player.decrementProperty('lives');
    orc.decrementProperty('health', 5);
    ```
  itemtype: method
  name: decrementProperty
  params:
  - name: keyName
    description: The name of the property to decrement
    type: String
  - name: decrement
    description: The amount to decrement by. Defaults to 1
    type: Number
  return:
    description: The new property value
    type: Number
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 472
  description: |-
    Set the value of a boolean property to the opposite of its
    current value.

    ```javascript
    starship.toggleProperty('warpDriveEngaged');
    ```
  itemtype: method
  name: toggleProperty
  params:
  - name: keyName
    description: The name of the property to toggle
    type: String
  return:
    description: The new property value
    type: Boolean
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/observable.js
  line: 489
  description: |-
    Returns the cached value of a computed property, if it exists.
    This allows you to inspect the value of a computed property
    without accidentally invoking it if it is intended to be
    generated lazily.
  itemtype: method
  name: cacheFor
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The cached value of the computed property, if any
    type: Object
  access: public
  tagname: ''
  class: Ember.Observable
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 92
  description: |-
    If the proxied promise is rejected this will contain the reason
    provided.
  itemtype: property
  name: reason
  default: 'null'
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 102
  description: Once the proxied promise has settled this will become `false`.
  itemtype: property
  name: isPending
  default: 'true'
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 111
  description: Once the proxied promise has settled this will become `true`.
  itemtype: property
  name: isSettled
  default: 'false'
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 120
  description: Will become `true` if the proxied promise is rejected.
  itemtype: property
  name: isRejected
  default: 'false'
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 129
  description: Will become `true` if the proxied promise is fulfilled.
  itemtype: property
  name: isFulfilled
  default: 'false'
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 138
  description: |-
    The promise whose fulfillment value is being proxied by this object.

    This property must be specified upon creation, and should not be
    changed once created.

    Example:

    ```javascript
    Ember.ObjectProxy.extend(Ember.PromiseProxyMixin).create({
      promise: <thenable>
    });
    ```
  itemtype: property
  name: promise
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 164
  description: |-
    An alias to the proxied promise's `then`.

    See RSVP.Promise.then.
  itemtype: method
  name: then
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 176
  description: |-
    An alias to the proxied promise's `catch`.

    See RSVP.Promise.catch.
  itemtype: method
  name: catch
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/promise_proxy.js
  line: 189
  description: |-
    An alias to the proxied promise's `finally`.

    See RSVP.Promise.finally.
  itemtype: method
  name: finally
  params:
  - name: callback
    description: ''
    type: Function
  return:
    description: ''
    type: RSVP.Promise
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.PromiseProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 19
  description: Given a fullName return the corresponding factory.
  access: public
  tagname: ''
  itemtype: method
  name: resolveRegistration
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: fullName's factory
    type: Function
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 29
  description: |-
    Registers a factory that can be used for dependency injection (with
    `inject`) or for service lookup. Each factory is registered with
    a full name including two parts: `type:name`.

    A simple example:

    ```javascript
    var App = Ember.Application.create();

    App.Orange = Ember.Object.extend();
    App.register('fruit:favorite', App.Orange);
    ```

    Ember will resolve factories from the `App` namespace automatically.
    For example `App.CarsController` will be discovered and returned if
    an application requests `controller:cars`.

    An example of registering a controller with a non-standard name:

    ```javascript
    var App = Ember.Application.create();
    var Session = Ember.Controller.extend();

    App.register('controller:session', Session);

    // The Session controller can now be treated like a normal controller,
    // despite its non-standard name.
    App.ApplicationController = Ember.Controller.extend({
      needs: ['session']
    });
    ```

    Registered factories are **instantiated** by having `create`
    called on them. Additionally they are **singletons**, each time
    they are looked up they return the same instance.

    Some examples modifying that default behavior:

    ```javascript
    var App = Ember.Application.create();

    App.Person = Ember.Object.extend();
    App.Orange = Ember.Object.extend();
    App.Email = Ember.Object.extend();
    App.session = Ember.Object.create();

    App.register('model:user', App.Person, { singleton: false });
    App.register('fruit:favorite', App.Orange);
    App.register('communication:main', App.Email, { singleton: false });
    App.register('session', App.session, { instantiate: false });
    ```
  itemtype: method
  name: register
  params:
  - name: fullName
    description: type:name (e.g., 'model:user')
    type: String
  - name: factory
    description: "(e.g., App.Person)"
    type: Function
  - name: options
    description: "(optional) disable instantiation or singleton usage"
    type: Object
  access: public
  tagname: ''
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 90
  description: |-
    Unregister a factory.

    ```javascript
    var App = Ember.Application.create();
    var User = Ember.Object.extend();
    App.register('model:user', User);

    App.resolveRegistration('model:user').create() instanceof User //=> true

    App.unregister('model:user')
    App.resolveRegistration('model:user') === undefined //=> true
    ```
  access: public
  tagname: ''
  itemtype: method
  name: unregister
  params:
  - name: fullName
    description: ''
    type: String
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 110
  description: Check if a factory is registered.
  access: public
  tagname: ''
  itemtype: method
  name: hasRegistration
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: ''
    type: Boolean
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 120
  description: Register an option for a particular factory.
  access: public
  tagname: ''
  itemtype: method
  name: registerOption
  params:
  - name: fullName
    description: ''
    type: String
  - name: optionName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 131
  description: Return a specific registered option for a particular factory.
  access: public
  tagname: ''
  itemtype: method
  name: registeredOption
  params:
  - name: fullName
    description: ''
    type: String
  - name: optionName
    description: ''
    type: String
  return:
    description: options
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 142
  description: Register options for a particular factory.
  access: public
  tagname: ''
  itemtype: method
  name: registerOptions
  params:
  - name: fullName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 152
  description: Return registered options for a particular factory.
  access: public
  tagname: ''
  itemtype: method
  name: registeredOptions
  params:
  - name: fullName
    description: ''
    type: String
  return:
    description: options
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 162
  description: |-
    Allow registering options for all factories of a type.

    ```javascript
    var App = Ember.Application.create();
    var appInstance = App.buildInstance();

    // if all of type `connection` must not be singletons
    appInstance.optionsForType('connection', { singleton: false });

    appInstance.register('connection:twitter', TwitterConnection);
    appInstance.register('connection:facebook', FacebookConnection);

    var twitter = appInstance.lookup('connection:twitter');
    var twitter2 = appInstance.lookup('connection:twitter');

    twitter === twitter2; // => false

    var facebook = appInstance.lookup('connection:facebook');
    var facebook2 = appInstance.lookup('connection:facebook');

    facebook === facebook2; // => false
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerOptionsForType
  params:
  - name: type
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 193
  description: Return the registered options for all factories of a type.
  access: public
  tagname: ''
  itemtype: method
  name: registeredOptionsForType
  params:
  - name: type
    description: ''
    type: String
  return:
    description: options
    type: Object
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/registry_proxy.js
  line: 203
  description: |-
    Define a dependency injection onto a specific factory or all factories
    of a type.

    When Ember instantiates a controller, view, or other framework component
    it can attach a dependency to that component. This is often used to
    provide services to a set of framework components.

    An example of providing a session object to all controllers:

    ```javascript
    var App = Ember.Application.create();
    var Session = Ember.Object.extend({ isAuthenticated: false });

    // A factory must be registered before it can be injected
    App.register('session:main', Session);

    // Inject 'session:main' onto all factories of the type 'controller'
    // with the name 'session'
    App.inject('controller', 'session', 'session:main');

    App.IndexController = Ember.Controller.extend({
      isLoggedIn: Ember.computed.alias('session.isAuthenticated')
    });
    ```

    Injections can also be performed on specific factories.

    ```javascript
    App.inject(<full_name or type>, <property name>, <full_name>)
    App.inject('route', 'source', 'source:main')
    App.inject('route:application', 'email', 'model:email')
    ```

    It is important to note that injections can only be performed on
    classes that are instantiated by Ember itself. Instantiating a class
    directly (via `create` or `new`) bypasses the dependency injection
    system.

    **Note:** Ember-Data instantiates its models in a unique manner, and consequently
    injections onto models (or all models) will not work as expected. Injections
    on models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`
    to `true`.
  access: public
  tagname: ''
  itemtype: method
  name: inject
  params:
  - name: factoryNameOrType
    description: ''
    type: String
  - name: property
    description: ''
    type: String
  - name: injectionName
    description: ''
    type: String
  class: RegistryProxyMixin
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/mixins/target_action_support.js
  line: 63
  description: |-
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      action: 'save',
      actionContext: Ember.computed.alias('context'),
      click: function() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```

    The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click: function() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```

    The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:

    ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: Ember.computed.alias('controller'),
      click: function() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
  itemtype: method
  name: triggerAction
  params:
  - name: opts
    description: "(optional, with the optional keys action, target and/or actionContext)"
    type: Object
  return:
    description: true if the action was sent successfully and did not return false
    type: Boolean
  access: private
  tagname: ''
  class: Ember.TargetActionSupport
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 69
  description: |-
    The content array. Must be an object that implements `Ember.Array` and/or
    `Ember.MutableArray.`
  itemtype: property
  name: content
  type: Ember.Array
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 95
  description: |-
    The array that the proxy pretends to be. In the default `ArrayProxy`
    implementation, this and `content` are the same. Subclasses of `ArrayProxy`
    can override this property to provide things like sorting and filtering.
  itemtype: property
  name: arrangedContent
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 105
  description: |-
    Should actually retrieve the object at the specified index from the
    content. You can override this method in subclasses to transform the
    content item to something new.

    This method will only be called if content is non-`null`.
  itemtype: method
  name: objectAtContent
  params:
  - name: idx
    description: The index to retrieve.
    type: Number
  return:
    description: the value or undefined if none found
    type: Object
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 121
  description: |-
    Should actually replace the specified objects on the content array.
    You can override this method in subclasses to transform the content item
    into something new.

    This method will only be called if content is non-`null`.
  itemtype: method
  name: replaceContent
  params:
  - name: idx
    description: The starting index
    type: Number
  - name: amt
    description: The number of items to remove from the content.
    type: Number
  - name: objects
    description: |-
      Optional array of objects to insert or null if no
        objects.
    type: Array
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 149
  description: Override to implement content array `willChange` observer.
  itemtype: method
  name: contentArrayWillChange
  params:
  - name: contentArray
    description: the content array
    type: Ember.Array
  - name: start
    description: starting index of the change
    type: Number
  - name: removeCount
    description: count of items removed
    type: Number
  - name: addCount
    description: count of items added
    type: Number
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 161
  description: Override to implement content array `didChange` observer.
  itemtype: method
  name: contentArrayDidChange
  params:
  - name: contentArray
    description: the content array
    type: Ember.Array
  - name: start
    description: starting index of the change
    type: Number
  - name: removeCount
    description: count of items removed
    type: Number
  - name: addCount
    description: count of items added
    type: Number
  access: private
  tagname: ''
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/array_proxy.js
  line: 174
  description: |-
    Invoked when the content property changes. Notifies observers that the
    entire array content has changed.
  access: private
  tagname: ''
  itemtype: method
  name: _contentDidChange
  class: Ember.ArrayProxy
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 235
  description: |-
    An overridable method called when objects are instantiated. By default,
    does nothing unless it is overridden during class definition.

    Example:

    ```javascript
    App.Person = Ember.Object.extend({
      init: function() {
        alert('Name is ' + this.get('name'));
      }
    });

    var steve = App.Person.create({
      name: "Steve"
    });

    // alerts 'Name is Steve'.
    ```

    NOTE: If you do override `init` for a framework class like `Ember.View`,
    be sure to call `this._super.apply(this, arguments)` in your
    `init` declaration! If you don't, Ember may not have an opportunity to
    do important setup work, and you'll see strange behavior in your
    application.
  itemtype: method
  name: init
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 273
  description: |-
    Defines the properties that will be concatenated from the superclass
    (instead of overridden).

    By default, when you extend an Ember class a property defined in
    the subclass overrides a property with the same name that is defined
    in the superclass. However, there are some cases where it is preferable
    to build up a property's value by combining the superclass' property
    value with the subclass' value. An example of this in use within Ember
    is the `classNames` property of `Ember.View`.

    Here is some sample code showing the difference between a concatenated
    property and a normal one:

    ```javascript
    App.BarView = Ember.View.extend({
      someNonConcatenatedProperty: ['bar'],
      classNames: ['bar']
    });

    App.FooBarView = App.BarView.extend({
      someNonConcatenatedProperty: ['foo'],
      classNames: ['foo']
    });

    var fooBarView = App.FooBarView.create();
    fooBarView.get('someNonConcatenatedProperty'); // ['foo']
    fooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']
    ```

    This behavior extends to object creation as well. Continuing the
    above example:

    ```javascript
    var view = App.FooBarView.create({
      someNonConcatenatedProperty: ['baz'],
      classNames: ['baz']
    })
    view.get('someNonConcatenatedProperty'); // ['baz']
    view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
    ```
    Adding a single property that is not an array will just add it in the array:

    ```javascript
    var view = App.FooBarView.create({
      classNames: 'baz'
    })
    view.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']
    ```

    Using the `concatenatedProperties` property, we can tell Ember to mix the
    content of the properties.

    In `Ember.View` the `classNameBindings` and `attributeBindings` properties
    are also concatenated, in addition to `classNames`.

    This feature is available for you to use throughout the Ember object model,
    although typical app developers are likely to use it infrequently. Since
    it changes expectations about behavior of properties, you should properly
    document its usage in each individual concatenated property (to not
    mislead your users to think they can override the property in a subclass).
  itemtype: property
  name: concatenatedProperties
  type: Array
  default: 'null'
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 342
  description: |-
    Defines the properties that will be merged from the superclass
    (instead of overridden).

    By default, when you extend an Ember class a property defined in
    the subclass overrides a property with the same name that is defined
    in the superclass. However, there are some cases where it is preferable
    to build up a property's value by merging the superclass property value
    with the subclass property's value. An example of this in use within Ember
    is the `queryParams` property of routes.

    Here is some sample code showing the difference between a merged
    property and a normal one:

    ```javascript
    App.BarRoute = Ember.Route.extend({
      someNonMergedProperty: {
        nonMerged: 'superclass value of nonMerged'
      },
      queryParams: {
        page: {replace: false},
        limit: {replace: true}
      }
    });

    App.FooBarRoute = App.BarRoute.extend({
      someNonMergedProperty: {
        completelyNonMerged: 'subclass value of nonMerged'
      },
      queryParams: {
        limit: {replace: false}
      }
    });

    var fooBarRoute = App.FooBarRoute.create();

    fooBarRoute.get('someNonMergedProperty');
    // => { completelyNonMerged: 'subclass value of nonMerged' }
    //
    // Note the entire object, including the nonMerged property of
    // the superclass object, has been replaced

    fooBarRoute.get('queryParams');
    // => {
    //   page: {replace: false},
    //   limit: {replace: false}
    // }
    //
    // Note the page remains from the superclass, and the
    // `limit` property's value of `false` has been merged from
    // the subclass.
    ```

    This behavior is not available during object `create` calls. It is only
    available at `extend` time.

    This feature is available for you to use throughout the Ember object model,
    although typical app developers are likely to use it infrequently. Since
    it changes expectations about behavior of properties, you should properly
    document its usage in each individual merged property (to not
    mislead your users to think they can override the property in a subclass).
  itemtype: property
  name: mergedProperties
  type: Array
  default: 'null'
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 411
  description: |-
    Destroyed object property flag.

    if this property is `true` the observers and bindings were already
    removed by the effect of calling the `destroy()` method.
  itemtype: property
  name: isDestroyed
  default: 'false'
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 423
  description: |-
    Destruction scheduled flag. The `destroy()` method has been called.

    The object stays intact until the end of the run loop at which point
    the `isDestroyed` flag is set.
  itemtype: property
  name: isDestroying
  default: 'false'
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 435
  description: |-
    Destroys an object by setting the `isDestroyed` flag and removing its
    metadata, which effectively destroys observers and bindings.

    If you try to set a property on a destroyed object, an exception will be
    raised.

    Note that destruction is scheduled for the end of the run loop and does not
    happen immediately.  It will set an isDestroying flag immediately.
  itemtype: method
  name: destroy
  return:
    description: receiver
    type: Ember.Object
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 458
  description: Override to implement teardown.
  itemtype: method
  name: willDestroy
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 466
  description: |-
    Invoked by the run loop to actually destroy the object. This is
    scheduled for execution by the `destroy` method.
  access: private
  tagname: ''
  itemtype: method
  name: _scheduledDestroy
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 485
  description: |-
    Returns a string representation which attempts to provide more information
    than Javascript's `toString` typically does, in a generic way for all Ember
    objects.

    ```javascript
    App.Person = Em.Object.extend()
    person = App.Person.create()
    person.toString() //=> "<App.Person:ember1024>"
    ```

    If the object's class is not defined on an Ember namespace, it will
    indicate it is a subclass of the registered superclass:

       ```javascript
    Student = App.Person.extend()
    student = Student.create()
    student.toString() //=> "<(subclass of App.Person):ember1025>"
    ```

    If the method `toStringExtension` is defined, its return value will be
    included in the output.

    ```javascript
    App.Teacher = App.Person.extend({
      toStringExtension: function() {
        return this.get('fullName');
      }
    });
    teacher = App.Teacher.create()
    teacher.toString(); //=> "<App.Teacher:ember1026:Tom Dale>"
    ```
  itemtype: method
  name: toString
  return:
    description: string representation
    type: String
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 550
  description: |-
    Creates a new subclass.

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        alert(thing);
       }
    });
    ```

    This defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.

    You can also create a subclass from any existing class by calling its `extend()` method.
    For example, you might want to create a subclass of Ember's built-in `Ember.View` class:

    ```javascript
    App.PersonView = Ember.View.extend({
      tagName: 'li',
      classNameBindings: ['isAdministrator']
    });
    ```

    When defining a subclass, you can override methods but still access the
    implementation of your parent class by calling the special `_super()` method:

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        var name = this.get('name');
        alert(name + ' says: ' + thing);
      }
    });

    App.Soldier = App.Person.extend({
      say: function(thing) {
        this._super(thing + ", sir!");
      },
      march: function(numberOfHours) {
        alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.');
      }
    });

    var yehuda = App.Soldier.create({
      name: "Yehuda Katz"
    });

    yehuda.say("Yes");  // alerts "Yehuda Katz says: Yes, sir!"
    ```

    The `create()` on line #17 creates an *instance* of the `App.Soldier` class.
    The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance
    of the `App.Person` class will *not* have the `march()` method.

    You can also pass `Mixin` classes to add additional properties to the subclass.

    ```javascript
    App.Person = Ember.Object.extend({
      say: function(thing) {
        alert(this.get('name') + ' says: ' + thing);
      }
    });

    App.SingingMixin = Mixin.create({
      sing: function(thing){
        alert(this.get('name') + ' sings: la la la ' + thing);
      }
    });

    App.BroadwayStar = App.Person.extend(App.SingingMixin, {
      dance: function() {
        alert(this.get('name') + ' dances: tap tap tap tap ');
      }
    });
    ```

    The `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.
  itemtype: method
  name: extend
  static: 1
  params:
  - name: mixins
    description: One or more Mixin classes
    type: Mixin
    optional: true
    multiple: true
  - name: arguments
    description: Object containing values to use within the new class
    type: Object
    optional: true
    multiple: true
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 658
  description: |-
    Creates an instance of a class. Accepts either no arguments, or an object
    containing values to initialize the newly instantiated object with.

    ```javascript
    App.Person = Ember.Object.extend({
      helloWorld: function() {
        alert("Hi, my name is " + this.get('name'));
      }
    });

    var tom = App.Person.create({
      name: 'Tom Dale'
    });

    tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
    ```

    `create` will call the `init` function if defined during
    `Ember.AnyObject.extend`

    If no arguments are passed to `create`, it will not set values to the new
    instance during initialization:

    ```javascript
    var noName = App.Person.create();
    noName.helloWorld(); // alerts undefined
    ```

    NOTE: For performance reasons, you cannot declare methods or computed
    properties during `create`. You should instead declare methods and computed
    properties when using `extend`.
  itemtype: method
  name: create
  static: 1
  params:
  - name: arguments
    description: ''
    optional: true
    multiple: true
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 704
  description: |-
    Augments a constructor's prototype with additional
    properties and functions:

    ```javascript
    MyObject = Ember.Object.extend({
      name: 'an object'
    });

    o = MyObject.create();
    o.get('name'); // 'an object'

    MyObject.reopen({
      say: function(msg){
        console.log(msg);
      }
    })

    o2 = MyObject.create();
    o2.say("hello"); // logs "hello"

    o.say("goodbye"); // logs "goodbye"
    ```

    To add functions and properties to the constructor itself,
    see `reopenClass`
  itemtype: method
  name: reopen
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 740
  description: |-
    Augments a constructor's own properties and functions:

    ```javascript
    MyObject = Ember.Object.extend({
      name: 'an object'
    });

    MyObject.reopenClass({
      canBuild: false
    });

    MyObject.canBuild; // false
    o = MyObject.create();
    ```

    In other words, this creates static properties and functions for the class.
    These are only available on the class and not on any instance of that class.

    ```javascript
    App.Person = Ember.Object.extend({
      name : "",
      sayHello : function() {
        alert("Hello. My name is " + this.get('name'));
      }
    });

    App.Person.reopenClass({
      species : "Homo sapiens",
      createPerson: function(newPersonsName){
        return App.Person.create({
          name:newPersonsName
        });
      }
    });

    var tom = App.Person.create({
      name : "Tom Dale"
    });
    var yehuda = App.Person.createPerson("Yehuda Katz");

    tom.sayHello(); // "Hello. My name is Tom Dale"
    yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
    alert(App.Person.species); // "Homo sapiens"
    ```

    Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
    variables. They are only valid on `App.Person`.

    To add functions and properties to instances of
    a constructor by extending the constructor's prototype
    see `reopen`
  itemtype: method
  name: reopenClass
  access: public
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 815
  description: |-
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For
    example, computed property functions may close over variables that are then
    no longer available for introspection.

    You can pass a hash of these values to a computed property like this:

    ```javascript
    person: function() {
      var personId = this.get('personId');
      return App.Person.create({ id: personId });
    }.property().meta({ type: App.Person })
    ```

    Once you've done this, you can retrieve the values saved to the computed
    property from your class like this:

    ```javascript
    MyClass.metaForProperty('person');
    ```

    This will return the original hash that was passed to `meta()`.
  static: 1
  itemtype: method
  name: metaForProperty
  params:
  - name: key
    description: property name
    type: String
  access: private
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 876
  description: |-
    Iterate over each computed property for the class, passing its name
    and any associated metadata (see `metaForProperty`) to the callback.
  static: 1
  itemtype: method
  name: eachComputedProperty
  params:
  - name: callback
    description: ''
    type: Function
  - name: binding
    description: ''
    type: Object
  access: private
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 905
  description: Provides lookup-time type validation for injected properties.
  access: private
  tagname: ''
  itemtype: method
  name: _onLookup
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/core_object.js
  line: 914
  description: |-
    Returns a hash of property names and container names that injected
    properties will lookup on the container lazily.
  itemtype: method
  name: _lazyInjections
  return:
    description: Hash of all lazy injected property keys to container names
    type: Object
  access: private
  tagname: ''
  class: Ember.CoreObject
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/lazy_load.js
  line: 15
  description: |-
    Detects when a specific package of Ember (e.g. 'Ember.Application')
    has fully loaded and is available for extension.

    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:

    ``` javascript
    Ember.onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  itemtype: method
  name: onLoad
  params:
  - name: name
    description: name of hook
    type: String
  - name: callback
    description: callback to be called
    type: Function
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/system/lazy_load.js
  line: 45
  description: |-
    Called when an Ember.js package (e.g Ember.Application) has finished
    loading. Triggers any callbacks registered for this event.
  itemtype: method
  name: runLoadHooks
  params:
  - name: name
    description: name of hook
    type: String
  - name: object
    description: object to pass to callbacks
    type: Object
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/system/native_array.js
  line: 107
  description: |-
    Creates an `Ember.NativeArray` from an Array like object.
    Does not modify the original object. Ember.A is not needed if
    `Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,
    it is recommended that you use Ember.A when creating addons for
    ember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`
    will be `true`.

    Example

    ```js
    var Pagination = Ember.CollectionView.extend({
      tagName: 'ul',
      classNames: ['pagination'],

      init: function() {
        this._super.apply(this, arguments);
        if (!this.get('content')) {
          this.set('content', Ember.A());
        }
      }
    });
    ```
  itemtype: method
  name: A
  return:
    description: ''
    type: Ember.NativeArray
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/system/native_array.js
  line: 141
  description: |-
    Activates the mixin on the Array.prototype if not already applied. Calling
    this method more than once is safe. This will be called when ember is loaded
    unless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`
    set to `false`.

    Example

    ```js
    if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {
      Ember.NativeArray.activate();
    }
    ```
  itemtype: method
  name: activate
  static: 1
  return:
    description: ''
    type: Void
  access: private
  tagname: ''
  class: Ember.NativeArray
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/service.js
  line: 5
  description: |-
    Creates a property that lazily looks up a service in the container. There
    are no restrictions as to what objects a service can be injected into.

    Example:

    ```javascript
    App.ApplicationRoute = Ember.Route.extend({
      authManager: Ember.inject.service('auth'),

      model: function() {
        return this.get('authManager').findCurrentUser();
      }
    });
    ```

    This example will create an `authManager` property on the application route
    that looks up the `auth` service in the container, making it easily
    accessible in the `model` hook.
  itemtype: method
  name: service
  since: 1.10.0
  params:
  - name: name
    description: |-
      (optional) name of the service to inject, defaults to
             the property's name
    type: String
  return:
    description: injection descriptor instance
    type: Ember.InjectedProperty
  access: public
  tagname: ''
  class: Ember.inject
  module: ember
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 142
  description: |-
    Defines the hash of localized strings for the current language. Used by
    the `Ember.String.loc()` helper. To localize, add string values to this
    hash.
  itemtype: property
  name: STRINGS
  type: Object
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-runtime
- file: packages/ember-runtime/lib/system/string.js
  line: 165
  description: |-
    Apply formatting options to the string. This will look for occurrences
    of "%@" in your string and substitute them with the arguments you pass into
    this method. If you want to control the specific order of replacement,
    you can add a number after the key as well to indicate which argument
    you want to insert.

    Ordered insertions are most useful when building loc strings where values
    you need to insert may appear in different orders.

    ```javascript
    "Hello %@ %@".fmt('John', 'Doe');     // "Hello John Doe"
    "Hello %@2, %@1".fmt('John', 'Doe');  // "Hello Doe, John"
    ```
  itemtype: method
  name: fmt
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: An array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  access: public
  tagname: ''
  deprecated: true
  deprecationMessage: 'Use ES6 template strings instead: https://babeljs.io/docs/learn-es6/#template-strings'');'
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 189
  description: |-
    Formats the passed string, but first looks up the string in the localized
    strings hash. This is a convenient way to localize text. See
    `Ember.String.fmt()` for more information on formatting.

    Note that it is traditional but not required to prefix localized string
    keys with an underscore or other character so you can easily identify
    localized strings.

    ```javascript
    Ember.STRINGS = {
      '_Hello World': 'Bonjour le monde',
      '_Hello %@ %@': 'Bonjour %@ %@'
    };

    Ember.String.loc("_Hello World");  // 'Bonjour le monde';
    Ember.String.loc("_Hello %@ %@", ["John", "Smith"]);  // "Bonjour John Smith";
    ```
  itemtype: method
  name: loc
  params:
  - name: str
    description: The string to format
    type: String
  - name: formats
    description: Optional array of parameters to interpolate into string.
    type: Array
  return:
    description: formatted string
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 216
  description: |-
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process. This is a convenience method for split that
    is mostly useful when applied to the `String.prototype`.

    ```javascript
    Ember.String.w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });

    // > alpha
    // > beta
    // > gamma
    ```
  itemtype: method
  name: w
  params:
  - name: str
    description: The string to split
    type: String
  return:
    description: array containing the split strings
    type: Array
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 238
  description: |-
    Converts a camelized string into all lower case separated by underscores.

    ```javascript
    'innerHTML'.decamelize();           // 'inner_html'
    'action_name'.decamelize();        // 'action_name'
    'css-class-name'.decamelize();     // 'css-class-name'
    'my favorite items'.decamelize();  // 'my favorite items'
    ```
  itemtype: method
  name: decamelize
  params:
  - name: str
    description: The string to decamelize.
    type: String
  return:
    description: the decamelized string.
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 255
  description: |-
    Replaces underscores, spaces, or camelCase with dashes.

    ```javascript
    'innerHTML'.dasherize();          // 'inner-html'
    'action_name'.dasherize();        // 'action-name'
    'css-class-name'.dasherize();     // 'css-class-name'
    'my favorite items'.dasherize();  // 'my-favorite-items'
    'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'
    ```
  itemtype: method
  name: dasherize
  params:
  - name: str
    description: The string to dasherize.
    type: String
  return:
    description: the dasherized string.
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 273
  description: |-
    Returns the lowerCamelCase form of a string.

    ```javascript
    'innerHTML'.camelize();          // 'innerHTML'
    'action_name'.camelize();        // 'actionName'
    'css-class-name'.camelize();     // 'cssClassName'
    'my favorite items'.camelize();  // 'myFavoriteItems'
    'My Favorite Items'.camelize();  // 'myFavoriteItems'
    'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'
    ```
  itemtype: method
  name: camelize
  params:
  - name: str
    description: The string to camelize.
    type: String
  return:
    description: the camelized string.
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 292
  description: |-
    Returns the UpperCamelCase form of a string.

    ```javascript
    'innerHTML'.classify();          // 'InnerHTML'
    'action_name'.classify();        // 'ActionName'
    'css-class-name'.classify();     // 'CssClassName'
    'my favorite items'.classify();  // 'MyFavoriteItems'
    'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'
    ```
  itemtype: method
  name: classify
  params:
  - name: str
    description: the string to classify
    type: String
  return:
    description: the classified string
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 310
  description: |-
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.

    ```javascript
    'innerHTML'.underscore();          // 'inner_html'
    'action_name'.underscore();        // 'action_name'
    'css-class-name'.underscore();     // 'css_class_name'
    'my favorite items'.underscore();  // 'my_favorite_items'
    'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'
    ```
  itemtype: method
  name: underscore
  params:
  - name: str
    description: The string to underscore.
    type: String
  return:
    description: the underscored string.
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/system/string.js
  line: 329
  description: |-
    Returns the Capitalized form of a string

    ```javascript
    'innerHTML'.capitalize()         // 'InnerHTML'
    'action_name'.capitalize()       // 'Action_name'
    'css-class-name'.capitalize()    // 'Css-class-name'
    'my favorite items'.capitalize() // 'My favorite items'
    'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/OwnerInvoice'
    ```
  itemtype: method
  name: capitalize
  params:
  - name: str
    description: The string to capitalize.
    type: String
  return:
    description: The capitalized string.
    type: String
  access: public
  tagname: ''
  class: Ember.String
  module: ember
  submodule: ember-runtime
  namespace: Ember
- file: packages/ember-runtime/lib/compare.js
  line: 26
  description: |-
    This will compare two javascript values of possibly different types.
    It will tell you which one is greater than the other by returning:

     - -1 if the first is smaller than the second,
     - 0 if both are equal,
     - 1 if the first is greater than the second.

    The order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.
    In case they have the same type an appropriate comparison for this type is made.

     ```javascript
     Ember.compare('hello', 'hello');  // 0
     Ember.compare('abc', 'dfg');      // -1
     Ember.compare(2, 1);              // 1
     ```
  itemtype: method
  name: compare
  params:
  - name: v
    description: First value to compare
    type: Object
  - name: w
    description: Second value to compare
    type: Object
  return:
    description: "-1 if v < w, 0 if v = w and 1 if v > w."
    type: Number
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/copy.js
  line: 66
  description: |-
    Creates a clone of the passed object. This function can take just about
    any type of object and create a clone of it, including primitive values
    (which are not actually cloned because they are immutable).

    If the passed object implements the `copy()` method, then this function
    will simply call that method and return the result. Please see
    `Ember.Copyable` for further details.
  itemtype: method
  name: copy
  params:
  - name: obj
    description: The object to clone
    type: Object
  - name: deep
    description: If true, a deep copy of the object is made
    type: Boolean
  return:
    description: The cloned object
    type: Object
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/inject.js
  line: 19
  description: |-
    This method allows other Ember modules to register injection helpers for a
    given container type. Helpers are exported to the `inject` namespace as the
    container type itself.
  access: private
  tagname: ''
  itemtype: method
  name: createInjectionHelper
  since: 1.10.0
  params:
  - name: type
    description: The container type the helper will inject
    type: String
  - name: validator
    description: A validation callback that is executed at mixin-time
    type: Function
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/inject.js
  line: 39
  description: |-
    Validation function that runs per-type validation functions once for each
    injected type encountered.
  access: private
  tagname: ''
  itemtype: method
  name: validatePropertyInjections
  since: 1.10.0
  params:
  - name: factory
    description: The factory object
    type: Object
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/is-equal.js
  line: 1
  description: |-
    Compares two objects, returning true if they are logically equal. This is
    a deeper comparison than a simple triple equal. For sets it will compare the
    internal objects. For any other object that implements `isEqual()` it will
    respect that method.

    ```javascript
    Ember.isEqual('hello', 'hello');                   // true
    Ember.isEqual(1, 2);                               // false
    Ember.isEqual([4, 2], [4, 2]);                     // false
    Ember.isEqual({ isEqual() { return true;} }, null) // true
    ```
  itemtype: method
  name: isEqual
  params:
  - name: a
    description: first object to compare
    type: Object
  - name: b
    description: second object to compare
    type: Object
  return:
    description: ''
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/utils.js
  line: 20
  description: |-
    Returns true if the passed object is an array or Array-like.

    Ember Array Protocol:

      - the object has an objectAt property
      - the object is a native Array
      - the object is an Object, and has a length property

    Unlike `Ember.typeOf` this method returns true even if the passed object is
    not formally array but appears to be array-like (i.e. implements `Ember.Array`)

    ```javascript
    Ember.isArray();                                          // false
    Ember.isArray([]);                                        // true
    Ember.isArray(Ember.ArrayProxy.create({ content: [] }));  // true
    ```
  itemtype: method
  name: isArray
  params:
  - name: obj
    description: The object to test
    type: Object
  return:
    description: true if the passed object is an array or Array-like
    type: Boolean
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-runtime/lib/utils.js
  line: 55
  description: |-
    Returns a consistent type for the passed item.

    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:

        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'class'       | An Ember class (created using Ember.Object.extend()) |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from Ember.Object |

    Examples:

    ```javascript
    Ember.typeOf();                       // 'undefined'
    Ember.typeOf(null);                   // 'null'
    Ember.typeOf(undefined);              // 'undefined'
    Ember.typeOf('michael');              // 'string'
    Ember.typeOf(new String('michael'));  // 'string'
    Ember.typeOf(101);                    // 'number'
    Ember.typeOf(new Number(101));        // 'number'
    Ember.typeOf(true);                   // 'boolean'
    Ember.typeOf(new Boolean(true));      // 'boolean'
    Ember.typeOf(Ember.makeArray);        // 'function'
    Ember.typeOf([1, 2, 90]);             // 'array'
    Ember.typeOf(/abc/);                  // 'regexp'
    Ember.typeOf(new Date());             // 'date'
    Ember.typeOf(Ember.Object.extend());  // 'class'
    Ember.typeOf(Ember.Object.create());  // 'instance'
    Ember.typeOf(new Error('teamocil'));  // 'error'

    // 'normal' JavaScript object
    Ember.typeOf({ a: 'b' });             // 'object'
    ```
  itemtype: method
  name: typeOf
  params:
  - name: item
    description: the item to check
    type: Object
  return:
    description: the type
    type: String
  access: public
  tagname: ''
  class: Ember
  module: ember
- file: packages/ember-testing/lib/adapters/adapter.js
  line: 19
  description: |-
    This callback will be called whenever an async operation is about to start.

    Override this to call your framework's methods that handle async
    operations.
  access: public
  tagname: ''
  itemtype: method
  name: asyncStart
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: packages/ember-testing/lib/adapters/adapter.js
  line: 30
  description: This callback will be called whenever an async operation has completed.
  access: public
  tagname: ''
  itemtype: method
  name: asyncEnd
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: packages/ember-testing/lib/adapters/adapter.js
  line: 38
  description: |-
    Override this method with your testing framework's false assertion.
    This function is called whenever an exception occurs causing the testing
    promise to fail.

    QUnit example:

    ```javascript
      exception: function(error) {
        ok(false, error);
      };
    ```
  access: public
  tagname: ''
  itemtype: method
  name: exception
  params:
  - name: error
    description: The exception to be raised.
    type: String
  class: Ember.Test.Adapter
  module: ember
  submodule: ember-testing
  namespace: Ember.Test
- file: packages/ember-testing/lib/helpers.js
  line: 248
  description: |-
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.

    Example:

    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: visit
  params:
  - name: url
    description: the name of the route
    type: String
  return:
    description: ''
    type: RSVP.Promise
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 268
  description: |-
    Clicks an element and triggers any actions triggered by the element's `click`
    event.

    Example:

    ```javascript
    click('.some-jQuery-selector').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: click
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  return:
    description: ''
    type: RSVP.Promise
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 288
  description: |-
    Checks a checkbox. Ensures the presence of the `checked` attribute

    Example:

    ```javascript
    check('#remember-me').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: check
  params:
  - name: selector
    description: |-
      jQuery selector finding an `input[type="checkbox"]`
      element on the DOM to check
    type: String
  return:
    description: ''
    type: RSVP.Promise
  access: private
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 307
  description: |-
    Unchecks a checkbox. Ensures the absence of the `checked` attribute

    Example:

    ```javascript
    uncheck('#remember-me').then(function() {
     // assert something
    });
    ```
  itemtype: method
  name: check
  params:
  - name: selector
    description: |-
      jQuery selector finding an `input[type="checkbox"]`
      element on the DOM to uncheck
    type: String
  return:
    description: ''
    type: RSVP.Promise
  access: private
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 326
  description: |-
    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode

    Example:

    ```javascript
    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {
     // assert something
    });
    ```
  itemtype: method
  name: keyEvent
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  - name: type
    description: the type of key event, e.g. `keypress`, `keydown`, `keyup`
    type: String
  - name: keyCode
    description: the keyCode of the simulated key event
    type: Number
  return:
    description: ''
    type: RSVP.Promise
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 347
  description: |-
    Fills in an input element with some text.

    Example:

    ```javascript
    fillIn('#email', 'you@example.com').then(function() {
      // assert something
    });
    ```
  itemtype: method
  name: fillIn
  params:
  - name: selector
    description: |-
      jQuery selector finding an input element on the DOM
      to fill text with
    type: String
  - name: text
    description: text to place inside the input element
    type: String
  return:
    description: ''
    type: RSVP.Promise
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 367
  description: |-
    Finds an element in the context of the app's container element. A simple alias
    for `app.$(selector)`.

    Example:

    ```javascript
    var $el = find('.my-selector');
    ```
  itemtype: method
  name: find
  params:
  - name: selector
    description: jQuery string selector for element lookup
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 384
  description: |-
    Like `find`, but throws an error if the element selector returns no results.

    Example:

    ```javascript
    var $el = findWithAssert('.doesnt-exist'); // throws error
    ```
  itemtype: method
  name: findWithAssert
  params:
  - name: selector
    description: |-
      jQuery selector string for finding an element within
      the DOM
    type: String
  return:
    description: jQuery object representing the results of the query
    type: Object
  throws:
    description: throws error if jQuery object returned has a length of 0
    type: Error
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 402
  description: |-
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.

    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc).

    Example:

    ```javascript
    Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
      .fillIn('#username', username)
      .fillIn('#password', password)
      .click('.submit')

      return app.testHelpers.wait();
    });
  itemtype: method
  name: wait
  params:
  - name: value
    description: The value to be returned.
    type: Object
  return:
    description: ''
    type: RSVP.Promise
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 430
  description: |-
    Returns the currently active route name.

    Example:

    ```javascript
    function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
    }

    visit('/some/path').then(validateRouteName)
    ```
  itemtype: method
  name: currentRouteName
  return:
    description: The name of the currently active route.
    type: Object
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 450
  description: |-
    Returns the current path.

    Example:

    ```javascript
    function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
    }

    click('#some-link-id').then(validateURL);
    ```
  itemtype: method
  name: currentPath
  return:
    description: The currently active path.
    type: Object
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 470
  description: |-
    Returns the current URL.

    Example:

    ```javascript
    function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
    }

    click('#some-link-id').then(validateURL);
    ```
  itemtype: method
  name: currentURL
  return:
    description: The currently active URL.
    type: Object
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 490
  description: |-
    Pauses the current test - this is useful for debugging while testing or for test-driving.
    It allows you to inspect the state of your application at any point.

    Example (The test will pause before clicking the button):

    ```javascript
    visit('/')
    return pauseTest();

    click('.btn');
    ```
  since: 1.9.0
  itemtype: method
  name: pauseTest
  return:
    description: A promise that will never resolve
    type: Object
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/helpers.js
  line: 510
  description: |-
    Triggers the given DOM event on the element identified by the provided selector.

    Example:

    ```javascript
    triggerEvent('#some-elem-id', 'blur');
    ```

    This is actually used internally by the `keyEvent` helper like so:

    ```javascript
    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });
    ```
  itemtype: method
  name: triggerEvent
  params:
  - name: selector
    description: jQuery selector for finding element on the DOM
    type: String
  - name: context
    description: |-
      jQuery selector that will limit the selector
                               argument to find only within the context's children
    type: String
    optional: true
  - name: type
    description: The event type to be triggered.
    type: String
  - name: options
    description: The options to be passed to jQuery.Event.
    type: Object
    optional: true
  return:
    description: ''
    type: RSVP.Promise
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/setup_for_testing.js
  line: 22
  description: |-
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.

    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  itemtype: method
  name: setupForTesting
  since: 1.5.0
  access: private
  tagname: ''
  class: Ember.Test
  module: ember
  namespace: Ember
- file: packages/ember-testing/lib/support.js
  line: 13
  description: |-
    This method creates a checkbox and triggers the click event to fire the
    passed in handler. It is used to correct for a bug in older versions
    of jQuery (e.g 1.8.3).
  access: private
  tagname: ''
  itemtype: method
  name: testCheckboxClick
  class: Ember.Test
  module: ember
  submodule: ember-testing
- file: packages/ember-testing/lib/test.js
  line: 27
  description: Hash containing all known test helpers.
  itemtype: property
  name: _helpers
  access: private
  tagname: ''
  since: 1.7.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 36
  description: |-
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.

    The helper method will always be called with the current Application as
    the first parameter.

    For example:

    ```javascript
    Ember.Test.registerHelper('boot', function(app) {
      Ember.run(app, app.advanceReadiness);
    });
    ```

    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.

    ```javascript
    App = Ember.Application.create();
    App.injectTestHelpers();
    boot();
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerHelper
  params:
  - name: name
    description: The name of the helper method to add.
    type: String
  - name: helperMethod
    description: ''
    type: Function
  - name: options
    description: ''
    type: Object
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 73
  description: |-
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.

    The helper method will always be called with the current Application as
    the first parameter.

    For example:

    ```javascript
    Ember.Test.registerAsyncHelper('boot', function(app) {
      Ember.run(app, app.advanceReadiness);
    });
    ```

    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.


    For example:

    ```javascript
    Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });

    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerAsyncHelper
  params:
  - name: name
    description: The name of the helper method to add.
    type: String
  - name: helperMethod
    description: ''
    type: Function
  since: 1.2.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 120
  description: |-
    Remove a previously added helper method.

    Example:

    ```javascript
    Ember.Test.unregisterHelper('wait');
    ```
  access: public
  tagname: ''
  itemtype: method
  name: unregisterHelper
  params:
  - name: name
    description: The helper to remove.
    type: String
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 138
  description: |-
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.

    The callback will receive the current application as an argument.

    Example:

    ```javascript
    Ember.Test.onInjectHelpers(function() {
      Ember.$(document).ajaxSend(function() {
        Test.pendingAjaxRequests++;
      });

      Ember.$(document).ajaxComplete(function() {
        Test.pendingAjaxRequests--;
      });
    });
    ```
  access: public
  tagname: ''
  itemtype: method
  name: onInjectHelpers
  params:
  - name: callback
    description: The function to be called.
    type: Function
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 166
  description: |-
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.

    This method should be returned by async helpers such as `wait`.
  access: public
  tagname: ''
  itemtype: method
  name: promise
  params:
  - name: resolver
    description: The function used to resolve the promise.
    type: Function
  - name: label
    description: An optional string for identifying the promise.
    type: String
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 183
  description: |-
    Used to allow ember-testing to communicate with a specific testing
    framework.

    You can manually set it before calling `App.setupForTesting()`.

    Example:

    ```javascript
    Ember.Test.adapter = MyCustomAdapter.create()
    ```

    If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  access: public
  tagname: ''
  itemtype: property
  name: adapter
  type: "{Class} The adapter to be used."
  default: Ember.Test.QUnitAdapter
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 204
  description: |-
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  access: public
  tagname: ''
  itemtype: method
  name: resolve
  params:
  - name: The
    description: value to resolve
    type: Mixed
  since: 1.2.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 220
  description: |-
    This allows ember-testing to play nicely with other asynchronous
    events, such as an application that is waiting for a CSS3
    transition or an IndexDB transaction.

    For example:

    ```javascript
    Ember.Test.registerWaiter(function() {
      return myPendingTransactions() == 0;
    });
    ```
    The `context` argument allows you to optionally specify the `this`
    with which your callback will be invoked.

    For example:

    ```javascript
    Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);
    ```
  access: public
  tagname: ''
  itemtype: method
  name: registerWaiter
  params:
  - name: context
    description: "(optional)"
    type: Object
  - name: callback
    description: ''
    type: Function
  since: 1.2.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 257
  description: |-
    `unregisterWaiter` is used to unregister a callback that was
    registered with `registerWaiter`.
  access: public
  tagname: ''
  itemtype: method
  name: unregisterWaiter
  params:
  - name: context
    description: "(optional)"
    type: Object
  - name: callback
    description: ''
    type: Function
  since: 1.2.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 321
  description: |-
    This property contains the testing helpers for the current application. These
    are created once you call `injectTestHelpers` on your `Ember.Application`
    instance. The included helpers are also available on the `window` object by
    default, but can be used from this object on the individual application also.
  itemtype: property
  name: testHelpers
  type: "{Object}"
  default: "{}"
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 334
  description: |-
    This property will contain the original methods that were registered
    on the `helperContainer` before `injectTestHelpers` is called.

    When `removeTestHelpers` is called, these methods are restored to the
    `helperContainer`.
  itemtype: property
  name: originalMethods
  type: "{Object}"
  default: "{}"
  access: private
  tagname: ''
  since: 1.3.0
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 350
  description: |-
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
  itemtype: property
  name: testing
  type: "{Boolean}"
  default: 'false'
  since: 1.3.0
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 363
  description: |-
    This hook defers the readiness of the application, so that you can start
    the app when your tests are ready to run. It also sets the router's
    location to 'none', so that the window's location will not be modified
    (preventing both accidental leaking of state between tests and interference
    with your testing framework).

    Example:

    ```
    App.setupForTesting();
    ```
  itemtype: method
  name: setupForTesting
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 389
  description: |-
    This will be used as the container to inject the test helpers into. By
    default the helpers are injected into `window`.
  itemtype: property
  name: helperContainer
  type: "{Object} The object to be used for test helpers."
  default: window
  since: 1.2.0
  access: private
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 401
  description: |-
    This injects the test helpers into the `helperContainer` object. If an object is provided
    it will be used as the helperContainer. If `helperContainer` is not set it will default
    to `window`. If a function of the same name has already been defined it will be cached
    (so that it can be reset if the helper is removed with `unregisterHelper` or
    `removeTestHelpers`).

    Any callbacks registered with `onInjectHelpers` will be called once the
    helpers have been injected.

    Example:
    ```
    App.injectTestHelpers();
    ```
  itemtype: method
  name: injectTestHelpers
  access: public
  tagname: ''
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-testing/lib/test.js
  line: 445
  description: |-
    This removes all helpers that have been registered, and resets and functions
    that were overridden by the helpers.

    Example:

    ```javascript
    App.removeTestHelpers();
    ```
  access: public
  tagname: ''
  itemtype: method
  name: removeTestHelpers
  class: Ember.Test
  module: ember
  submodule: ember-testing
  namespace: Ember
- file: packages/ember-views/lib/components/component.js
  line: 180
  description: |-
    If the component is currently inserted into the DOM of a parent view, this
    property will point to the controller of the parent view.
  itemtype: property
  name: targetObject
  type: Ember.Controller
  default: 'null'
  access: private
  tagname: ''
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/components/component.js
  line: 196
  description: |-
    Calls a action passed to a component.

    For example a component for playing or pausing music may translate click events
    into action notifications of "play" or "stop" depending on some internal state
    of the component:

    ```javascript
    // app/components/play-button.js
    export default Ember.Component.extend({
      click() {
        if (this.get('isPlaying')) {
          this.sendAction('play');
        } else {
          this.sendAction('stop');
        }
      }
    });
    ```

    The actions "play" and "stop" must be passed to this `play-button` component:

    ```handlebars
    {{! app/templates/application.hbs }}
    {{play-button play=(action "musicStarted") stop=(action "musicStopped")}}
    ```

    When the component receives a browser `click` event it translate this
    interaction into application-specific semantics ("play" or "stop") and
    calls the specified action.

    ```javascript
    // app/controller/application.js
    export default Ember.Controller.extend({
      actions: {
        musicStarted() {
          // called when the play button is clicked
          // and the music started playing
        },
        musicStopped() {
          // called when the play button is clicked
          // and the music stopped playing
        }
      }
    });
    ```

    If no action is passed to `sendAction` a default name of "action"
    is assumed.

    ```javascript
    // app/components/next-button.js
    export default Ember.Component.extend({
      click() {
        this.sendAction();
      }
    });
    ```

    ```handlebars
    {{! app/templates/application.hbs }}
    {{next-button action=(action "playNextSongInAlbum")}}
    ```

    ```javascript
    // app/controllers/application.js
    App.ApplicationController = Ember.Controller.extend({
      actions: {
        playNextSongInAlbum() {
          ...
        }
      }
    });
    ```
  itemtype: method
  name: sendAction
  params:
  - name: action
    description: the action to call
    type: String
    optional: true
  - name: params
    description: arguments for the action
    type: "*"
    optional: true
  access: public
  tagname: ''
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/components/component.js
  line: 322
  description: |-
    Returns true when the component was invoked with a block template.

    Example (`hasBlock` will be `false`):

    ```hbs
    {{! templates/application.hbs }}

    {{foo-bar}}

    {{! templates/components/foo-bar.hbs }}
    {{#if hasBlock}}
      This will not be printed, because no block was provided
    {{/if}}
    ```

    Example (`hasBlock` will be `true`):

    ```hbs
    {{! templates/application.hbs }}

    {{#foo-bar}}
      Hi!
    {{/foo-bar}}

    {{! templates/components/foo-bar.hbs }}
    {{#if hasBlock}}
      This will be printed because a block was provided
      {{yield}}
    {{/if}}
    ```

    This helper accepts an argument with the name of the block we want to check the presence of.
    This is useful for checking for the presence of the optional inverse block in components.

    ```hbs
    {{! templates/application.hbs }}

    {{#foo-bar}}
      Hi!
    {{else}}
      What's up?
    {{/foo-bar}}

    {{! templates/components/foo-bar.hbs }}
    {{yield}}
    {{#if (hasBlock "inverse")}}
      {{yield to="inverse"}}
    {{else}}
      How are you?
    {{/if}}
    ```
  access: public
  tagname: ''
  itemtype: property
  name: hasBlock
  return:
    description: Boolean
  since: 1.13.0
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
  subprops:
  - name: blockName
    description: The name of the block to check presence of.
    type: String
    optional: true
    optdefault: "\"default\""
- file: packages/ember-views/lib/components/component.js
  line: 382
  description: |-
    Returns true when the component was invoked with a block parameter
    supplied.

    Example (`hasBlockParams` will be `false`):

    ```hbs
    {{! templates/application.hbs }}

    {{#foo-bar}}
      No block parameter.
    {{/foo-bar}}

    {{! templates/components/foo-bar.hbs }}
    {{#if hasBlockParams}}
      This will not be printed, because no block was provided
      {{yield this}}
    {{/if}}
    ```

    Example (`hasBlockParams` will be `true`):

    ```hbs
    {{! templates/application.hbs }}

    {{#foo-bar as |foo|}}
      Hi!
    {{/foo-bar}}

    {{! templates/components/foo-bar.hbs }}
    {{#if hasBlockParams}}
      This will be printed because a block was provided
      {{yield this}}
    {{/if}}
    ```
  access: public
  tagname: ''
  itemtype: property
  name: hasBlockParams
  return:
    description: Boolean
  since: 1.13.0
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/components/component.js
  line: 423
  description: |-
    Enables components to take a list of parameters as arguments

    For example a component that takes two parameters with the names
    `name` and `age`:

    ```javascript
    let MyComponent = Ember.Component.extend;
    MyComponent.reopenClass({
      positionalParams: ['name', 'age']
    });
    ```

    It can then be invoked like this:

    ```hbs
    {{my-component "John" 38}}
    ```

    The parameters can be refered to just like named parameters:

    ```hbs
    Name: {{attrs.name}}, Age: {{attrs.age}}.
    ```

    Using a string instead of an array allows for an arbitrary number of
    parameters:

    ```javascript
    let MyComponent = Ember.Component.extend;
    MyComponent.reopenClass({
      positionalParams: 'names'
    });
    ```

    It can then be invoked like this:

    ```hbs
    {{my-component "John" "Michael" "Scott"}}
    ```

    The parameters can then be refered to by enumerating over the list:

    ```hbs
    {{#each attrs.names as |name|}}{{name}}{{/each}}
    ```
  static: 1
  access: public
  tagname: ''
  itemtype: property
  name: positionalParams
  since: 1.13.0
  class: Ember.Component
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/aria_role_support.js
  line: 16
  description: |-
    The WAI-ARIA role of the control represented by this view. For example, a
    button may have a role of type 'button', or a pane may have a role of
    type 'alertdialog'. This property is used by assistive software to help
    visually challenged users navigate rich web applications.

    The full list of valid WAI-ARIA roles is available at:
    [http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)
  itemtype: property
  name: ariaRole
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.AriaRoleSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/class_names_support.js
  line: 29
  description: |-
    Standard CSS class names to apply to the view's outer element. This
    property automatically inherits any class names defined by the view's
    superclasses as well.
  itemtype: property
  name: classNames
  type: Array
  default: "['ember-view']"
  access: public
  tagname: ''
  class: Ember.ClassNamesSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/class_names_support.js
  line: 41
  description: |-
    A list of properties of the view to apply as class names. If the property
    is a string value, the value of that string will be applied as a class
    name.

    ```javascript
    // Applies the 'high' class to the view element
    Ember.View.extend({
      classNameBindings: ['priority'],
      priority: 'high'
    });
    ```

    If the value of the property is a Boolean, the name of that property is
    added as a dasherized class name.

    ```javascript
    // Applies the 'is-urgent' class to the view element
    Ember.View.extend({
      classNameBindings: ['isUrgent'],
      isUrgent: true
    });
    ```

    If you would prefer to use a custom value instead of the dasherized
    property name, you can pass a binding like this:

    ```javascript
    // Applies the 'urgent' class to the view element
    Ember.View.extend({
      classNameBindings: ['isUrgent:urgent'],
      isUrgent: true
    });
    ```

    This list of properties is inherited from the view's superclasses as well.
  itemtype: property
  name: classNameBindings
  type: Array
  default: "[]"
  access: public
  tagname: ''
  class: Ember.ClassNamesSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/empty_view_support.js
  line: 18
  description: |-
    This provides metadata about what kind of empty view class this
    collection would like if it is being instantiated from another
    system (like Handlebars)
  access: private
  tagname: ''
  itemtype: property
  name: emptyViewClass
  class: Ember.EmptyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/empty_view_support.js
  line: 28
  description: An optional view to display if content is set to an empty array.
  itemtype: property
  name: emptyView
  type: Ember.View
  default: 'null'
  access: private
  tagname: ''
  class: Ember.EmptyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/instrumentation_support.js
  line: 15
  description: Used to identify this view during debugging
  itemtype: property
  name: instrumentDisplay
  type: String
  access: public
  tagname: ''
  class: Ember.InstrumentationSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/legacy_view_support.js
  line: 32
  description: Removes all children from the `parentView`.
  itemtype: method
  name: removeAllChildren
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.LegacyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/legacy_view_support.js
  line: 51
  description: |-
    Return the nearest ancestor whose parent is an instance of
    `klass`.
  itemtype: method
  name: nearestChildOf
  params:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
  return:
    description: Ember.View
  deprecated: true
  access: private
  tagname: ''
  class: Ember.LegacyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/legacy_view_support.js
  line: 76
  description: |-
    Return the nearest ancestor that is an instance of the provided
    class.
  itemtype: method
  name: nearestInstanceOf
  params:
  - name: klass
    description: Subclass of Ember.View (or Ember.View itself)
    type: Class
  return:
    description: Ember.View
  deprecated: true
  access: private
  tagname: ''
  class: Ember.LegacyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/legacy_view_support.js
  line: 101
  description: |-
    If a value that affects template rendering changes, the view should be
    re-rendered to reflect the new value.
  itemtype: method
  name: _contextDidChange
  access: private
  tagname: ''
  class: Ember.LegacyViewSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/template_rendering_support.js
  line: 16
  description: |-
    Called on your view when it should push strings of HTML into a
    `Ember.RenderBuffer`. Most users will want to override the `template`
    or `templateName` properties instead of this method.

    By default, `Ember.View` will look for a function in the `template`
    property and invoke it with the value of `context`. The value of
    `context` will be the view's controller unless you override it.
  itemtype: method
  name: renderBlock
  params:
  - name: buffer
    description: The render buffer
    type: Ember.RenderBuffer
  access: private
  tagname: ''
  class: Ember.TemplateRenderingSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 138
  description: |-
    The action to be sent when the user presses the return key.

    This is similar to the `{{action}}` helper, but is fired when
    the user presses the return key when editing a text field, and sends
    the value of the field as the context.
  itemtype: property
  name: action
  type: String
  default: 'null'
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 152
  description: |-
    The event that should send the action.

    Options are:

    * `enter`: the user pressed enter
    * `keyPress`: the user pressed a key
  itemtype: property
  name: onEvent
  type: String
  default: enter
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 167
  description: |-
    Whether the `keyUp` event that triggers an `action` to be sent continues
    propagating to other views.

    By default, when the user presses the return key on their keyboard and
    the text field has an `action` set, the action will be sent to the view's
    controller and the key event will stop propagating.

    If you would like parent views to receive the `keyUp` event even after an
    action has been dispatched, set `bubbles` to true.
  itemtype: property
  name: bubbles
  type: Boolean
  default: 'false'
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 203
  description: |-
    Allows you to specify a controller action to invoke when either the `enter`
    key is pressed or, in the case of the field being a textarea, when a newline
    is inserted. To use this method, give your field an `insert-newline`
    attribute. The value of that attribute should be the name of the action
    in your controller that you wish to invoke.

    For an example on how to use the `insert-newline` attribute, please
    reference the example near the top of this file.
  itemtype: method
  name: insertNewline
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 222
  description: |-
    Allows you to specify a controller action to invoke when the escape button
    is pressed. To use this method, give your field an `escape-press`
    attribute. The value of that attribute should be the name of the action
    in your controller that you wish to invoke.

    For an example on how to use the `escape-press` attribute, please reference
    the example near the top of this file.
  itemtype: method
  name: cancel
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 239
  description: |-
    Allows you to specify a controller action to invoke when a field receives
    focus. To use this method, give your field a `focus-in` attribute. The value
    of that attribute should be the name of the action in your controller
    that you wish to invoke.

    For an example on how to use the `focus-in` attribute, please reference the
    example near the top of this file.
  itemtype: method
  name: focusIn
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 256
  description: |-
    Allows you to specify a controller action to invoke when a field loses
    focus. To use this method, give your field a `focus-out` attribute. The value
    of that attribute should be the name of the action in your controller
    that you wish to invoke.

    For an example on how to use the `focus-out` attribute, please reference the
    example near the top of this file.
  itemtype: method
  name: focusOut
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 274
  description: |-
    Allows you to specify a controller action to invoke when a key is pressed.
    To use this method, give your field a `key-press` attribute. The value of
    that attribute should be the name of the action in your controller you
    that wish to invoke.

    For an example on how to use the `key-press` attribute, please reference the
    example near the top of this file.
  itemtype: method
  name: keyPress
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 291
  description: |-
    Allows you to specify a controller action to invoke when a key-up event is
    fired. To use this method, give your field a `key-up` attribute. The value
    of that attribute should be the name of the action in your controller
    that you wish to invoke.

    For an example on how to use the `key-up` attribute, please reference the
    example near the top of this file.
  itemtype: method
  name: keyUp
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/text_support.js
  line: 310
  description: |-
    Allows you to specify a controller action to invoke when a key-down event is
    fired. To use this method, give your field a `key-down` attribute. The value
    of that attribute should be the name of the action in your controller that
    you wish to invoke.

    For an example on how to use the `key-down` attribute, please reference the
    example near the top of this file.
  itemtype: method
  name: keyDown
  params:
  - name: event
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.TextSupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/view_child_views_support.js
  line: 15
  description: |-
    Array of child views. You should never edit this array directly.
    Instead, use `appendChild` and `removeFromParent`.
  itemtype: property
  name: childViews
  type: Array
  default: "[]"
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_child_views_support.js
  line: 44
  description: Removes the child view from the parent view.
  itemtype: method
  name: removeChild
  params:
  - name: view
    description: ''
    type: Ember.View
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_child_views_support.js
  line: 70
  description: |-
    Instantiates a view to be added to the childViews array during view
    initialization. You generally will not call this method directly unless
    you are overriding `createChildViews()`. Note that this method will
    automatically configure the correct settings on the new view instance to
    act as a child of the parent.
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class|String
  - name: attrs
    description: Attributes to add
    type: Object
    optional: true
  return:
    description: new instance
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_context_support.js
  line: 14
  description: |-
    The object from which templates should access properties.

    This object will be passed to the template function each time the render
    method is called, but it is up to the individual function to decide what
    to do with it.

    By default, this will be the view's controller.
  itemtype: property
  name: context
  type: Object
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_context_support.js
  line: 37
  description: |-
    Private copy of the view's template context. This can be set directly
    by Handlebars without triggering the observer that causes the view
    to be re-rendered.

    The context of a view is looked up as follows:

    1. Supplied context (usually by Handlebars)
    2. Specified controller
    3. `parentView`'s context (for a child of a ContainerView)

    The code in Handlebars that overrides the `_context` property first
    checks to see whether the view has a specified controller. This is
    something of a hack and should be revisited.
  itemtype: property
  name: _context
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_context_support.js
  line: 76
  description: |-
    The controller managing this view. If this property is set, it will be
    made available for use by the template.
  itemtype: property
  name: controller
  type: Object
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/mixins/view_support.js
  line: 22
  itemtype: property
  name: isView
  type: Boolean
  default: 'true'
  static: 1
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 35
  description: |-
    The name of the template to lookup if no template is provided.

    By default `Ember.View` will lookup a template with this name in
    `Ember.TEMPLATES` (a shared global object).
  itemtype: property
  name: templateName
  type: String
  default: 'null'
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 48
  description: |-
    The name of the layout to lookup if no layout is provided.

    By default `Ember.View` will lookup a template with this name in
    `Ember.TEMPLATES` (a shared global object).
  itemtype: property
  name: layoutName
  type: String
  default: 'null'
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 61
  description: |-
    The template used to render the view. This should be a function that
    accepts an optional context parameter and returns a string of HTML that
    will be inserted into the DOM relative to its parent view.

    In general, you should set the `templateName` property instead of setting
    the template yourself.
  itemtype: property
  name: template
  type: Function
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 86
  description: |-
    A view may contain a layout. A layout is a regular template but
    supersedes the `template` property during rendering. It is the
    responsibility of the layout template to retrieve the `template`
    property from the view (or alternatively, call `Handlebars.helpers.yield`,
    `{{yield}}`) to render it in the correct location.

    This is useful for a view that has a shared wrapper, but which delegates
    the rendering of the contents of the wrapper to the `template` property
    on a subclass.
  itemtype: property
  name: layout
  type: Function
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 129
  description: |-
    Return the nearest ancestor that is an instance of the provided
    class or mixin.
  itemtype: method
  name: nearestOfType
  params:
  - name: klass
    description: |-
      Subclass of Ember.View (or Ember.View itself),
             or an instance of Ember.Mixin.
    type: Class,Mixin
  return:
    description: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 151
  description: Return the nearest ancestor that has a given property.
  itemtype: method
  name: nearestWithProperty
  params:
  - name: property
    description: A property name
    type: String
  return:
    description: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 168
  description: |-
    Renders the view again. This will work regardless of whether the
    view is already in the DOM or not. If the view is in the DOM, the
    rendering process will be deferred to give bindings a chance
    to synchronize.

    If children were added during the rendering process using `appendChild`,
    `rerender` will remove them, because they will be added again
    if needed by the next `render`.

    In general, if the display of your view changes, you should modify
    the DOM element directly instead of manually calling `rerender`, which can
    be slow.
  itemtype: method
  name: rerender
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 193
  description: Returns the current DOM element for the view.
  itemtype: property
  name: element
  type: DOMElement
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 202
  description: |-
    Returns a jQuery object for this view's element. If you pass in a selector
    string, this method will return a jQuery object, using the current element
    as its buffer.

    For example, calling `view.$('li')` will return a jQuery object containing
    all of the `li` elements inside the DOM element of this view.
  itemtype: method
  name: "$"
  params:
  - name: selector
    description: a jQuery-compatible selector string
    type: String
    optional: true
  return:
    description: the jQuery object for the DOM node
    type: JQuery
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 236
  description: |-
    Appends the view's element to the specified parent element.

    If the view does not have an HTML representation yet, `createElement()`
    will be called automatically.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the given element until all bindings have
    finished synchronizing.

    This is not typically a function that you will need to call directly when
    building your application. You might consider using `Ember.ContainerView`
    instead. If you do need to use `appendTo`, be sure that the target element
    you are providing is associated with an `Ember.Application` and does not
    have an ancestor element that is associated with an Ember view.
  itemtype: method
  name: appendTo
  params:
  - name: A
    description: selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 288
  access: private
  tagname: ''
  itemtype: method
  name: renderToElement
  params:
  - name: tagName
    description: The tag of the element to create and render into. Defaults to "body".
    type: String
  return:
    description: element
    type: HTMLBodyElement
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 341
  description: |-
    Replaces the content of the specified parent element with this view's
    element. If the view does not have an HTML representation yet,
    the element will be generated automatically.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the given element until all bindings have
    finished synchronizing
  itemtype: method
  name: replaceIn
  params:
  - name: target
    description: A selector, element, HTML string, or jQuery object
    type: String|DOMElement|jQuery
  return:
    description: received
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 366
  description: |-
    Appends the view's element to the document body. If the view does
    not have an HTML representation yet
    the element will be generated automatically.

    If your application uses the `rootElement` property, you must append
    the view within that element. Rendering views outside of the `rootElement`
    is not supported.

    Note that this method just schedules the view to be appended; the DOM
    element will not be appended to the document body until all bindings have
    finished synchronizing.
  itemtype: method
  name: append
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 387
  description: Removes the view's element from the element to which it is attached.
  itemtype: method
  name: remove
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 406
  description: |-
    The HTML `id` of the view's element in the DOM. You can provide this
    value yourself but it must be unique (just as in HTML):

    ```handlebars
      {{my-component elementId="a-really-cool-id"}}
    ```

    If not manually set a default value will be provided by the framework.

    Once rendered an element's `elementId` is considered immutable and you
    should never change it. If you need to compute a dynamic value for the
    `elementId`, you should do this when the component or element is being
    instantiated:

    ```javascript
      export default Ember.Component.extend({
        setElementId: Ember.on('init', function() {
          var index = this.get('index');
          this.set('elementId', 'component-id' + index);
        })
      });
    ```
  itemtype: property
  name: elementId
  type: String
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 436
  description: |-
    Attempts to discover the element in the parent element. The default
    implementation looks for an element with an ID of `elementId` (or the
    view's guid if `elementId` is null). You can override this method to
    provide your own form of lookup. For example, if you want to discover your
    element using a CSS class name instead of an ID.
  itemtype: method
  name: findElementInParentElement
  params:
  - name: parentElement
    description: The parent's DOM element
    type: DOMElement
  return:
    description: The discovered element
    type: DOMElement
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 453
  description: |-
    Creates a DOM representation of the view and all of its child views by
    recursively calling the `render()` method. Once the element is created,
    it sets the `element` property of the view to the rendered element.

    After the element has been inserted into the DOM, `didInsertElement` will
    be called on this view and all of its child views.
  itemtype: method
  name: createElement
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 473
  description: Called when a view is going to insert an element into the DOM.
  itemtype: event
  name: willInsertElement
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 481
  description: |-
    Called when the element of the view has been inserted into the DOM
    or after the view was re-rendered. Override this function to do any
    set up that requires an element in the document body.

    When a view has children, didInsertElement will be called on the
    child view(s) first, bubbling upwards through the hierarchy.
  itemtype: event
  name: didInsertElement
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 494
  description: |-
    Called when the view is about to rerender, but before anything has
    been torn down. This is a good opportunity to tear down any manual
    observers you have installed based on the DOM state
  itemtype: event
  name: willClearRender
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 504
  description: |-
    Destroys any existing element along with the element for any child views
    as well. If the view does not currently have a element, then this method
    will do nothing.

    If you implement `willDestroyElement()` on your view, then this method will
    be invoked on your view before your element is destroyed to give you a
    chance to clean up any event handlers, etc.

    If you write a `willDestroyElement()` handler, you can assume that your
    `didInsertElement()` handler was called earlier for the same element.

    You should not call or override this method yourself, but you may
    want to implement the above callbacks.
  itemtype: method
  name: destroyElement
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 527
  description: |-
    Called when the element of the view is going to be destroyed. Override
    this function to do any teardown that requires an element, like removing
    event listeners.

    Please note: any property changes made during this event will have no
    effect on object observers.
  itemtype: event
  name: willDestroyElement
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 540
  description: Called when the parentView property has changed.
  itemtype: event
  name: parentViewDidChange
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 552
  description: |-
    Tag name for the view's outer element. The tag name is only used when an
    element is first created. If you change the `tagName` for an element, you
    must destroy and recreate the view element.

    By default, the render buffer will use a `<div>` tag for views.
  itemtype: property
  name: tagName
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 577
  description: |-
    Normally, Ember's component model is "write-only". The component takes a
    bunch of attributes that it got passed in, and uses them to render its
    template.

    One nice thing about this model is that if you try to set a value to the
    same thing as last time, Ember (through HTMLBars) will avoid doing any
    work on the DOM.

    This is not just a performance optimization. If an attribute has not
    changed, it is important not to clobber the element's "hidden state".
    For example, if you set an input's `value` to the same value as before,
    it will clobber selection state and cursor position. In other words,
    setting an attribute is not **always** idempotent.

    This method provides a way to read an element's attribute and also
    update the last value Ember knows about at the same time. This makes
    setting an attribute idempotent.

    In particular, what this means is that if you get an `<input>` element's
    `value` attribute and then re-render the template with the same value,
    it will avoid clobbering the cursor and selection position.

    Since most attribute sets are idempotent in the browser, you typically
    can get away with reading attributes using jQuery, but the most reliable
    way to do so is through this method.
  itemtype: method
  name: readDOMAttr
  params:
  - name: name
    description: the name of the attribute
    type: String
  return:
    description: String
  access: public
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 619
  description: |-
    Setup a view, but do not finish waking it up.

    * configure `childViews`
    * register the view with the global views hash, which is used for event
      dispatch
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 708
  description: |-
    Removes the view from its `parentView`, if one is found. Otherwise
    does nothing.
  itemtype: method
  name: removeFromParent
  return:
    description: receiver
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 726
  description: |-
    You must call `destroy` on a view to destroy the view (and all of its
    child views). This will remove the view from any parent node, then make
    sure that the DOM element managed by the view can be released by the
    memory manager.
  itemtype: method
  name: destroy
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 759
  description: Handle events from `Ember.EventDispatcher`
  itemtype: method
  name: handleEvent
  params:
  - name: eventName
    description: ''
    type: String
  - name: evt
    description: ''
    type: Event
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 771
  description: |-
    Registers the view in the view registry, keyed on the view's `elementId`.
    This is used by the EventDispatcher to locate the view in response to
    events.

    This method should only be called once the view has been inserted into the
    DOM.
  itemtype: method
  name: _register
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_support.js
  line: 787
  description: |-
    Removes the view from the view registry. This should be called when the
    view is removed from DOM.
  itemtype: method
  name: _unregister
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
- file: packages/ember-views/lib/mixins/view_target_action_support.js
  line: 48
  itemtype: property
  name: target
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/mixins/view_target_action_support.js
  line: 53
  itemtype: property
  name: actionContext
  access: private
  tagname: ''
  class: Ember.ViewTargetActionSupport
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/mixins/visibility_support.js
  line: 20
  description: If `false`, the view will appear hidden in DOM.
  itemtype: property
  name: isVisible
  type: Boolean
  default: 'null'
  access: public
  tagname: ''
  class: Ember.VisibilitySupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/mixins/visibility_support.js
  line: 33
  description: |-
    When the view's `isVisible` property changes, toggle the visibility
    element of the actual DOM element.
  itemtype: method
  name: _isVisibleDidChange
  access: private
  tagname: ''
  class: Ember.VisibilitySupport
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/streams/class_name_binding.js
  line: 7
  description: |-
    Parse a path and return an object which holds the parsed properties.

    For example a path like "content.isEnabled:enabled:disabled" will return the
    following object:

    ```javascript
    {
      path: "content.isEnabled",
      className: "enabled",
      falsyClassName: "disabled",
      classNames: ":enabled:disabled"
    }
    ```
  itemtype: method
  name: parsePropertyPath
  static: 1
  access: private
  tagname: ''
  class: Ember.EventDispatcher
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/streams/class_name_binding.js
  line: 53
  description: |-
    Get the class name for a given value, based on the path, optional
    `className` and optional `falsyClassName`.

    - if a `className` or `falsyClassName` has been specified:
      - if the value is truthy and `className` has been specified,
        `className` is returned
      - if the value is falsy and `falsyClassName` has been specified,
        `falsyClassName` is returned
      - otherwise `null` is returned
    - if the value is `true`, the dasherized last part of the supplied path
      is returned
    - if the value is not `false`, `undefined` or `null`, the `value`
      is returned
    - if none of the above rules apply, `null` is returned
  itemtype: method
  name: classStringForValue
  params:
  - name: path
    description: ''
  - name: val
    description: ''
  - name: className
    description: ''
  - name: falsyClassName
    description: ''
  static: 1
  access: private
  tagname: ''
  class: Ember.EventDispatcher
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/system/action_manager.js
  line: 8
  description: Global action id hash.
  access: private
  tagname: ''
  itemtype: property
  name: registeredActions
  type: Object
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/system/event_dispatcher.js
  line: 33
  description: |-
    The set of events names (and associated handler function names) to be setup
    and dispatched by the `EventDispatcher`. Modifications to this list can be done
    at setup time, generally via the `Ember.Application.customEvents` hash.

    To add new events to be listened to:

    ```javascript
    var App = Ember.Application.create({
      customEvents: {
        paste: 'paste'
      }
    });
    ```

    To prevent default events from being listened to:

    ```javascript
    var App = Ember.Application.create({
      customEvents: {
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
  itemtype: property
  name: events
  type: Object
  access: private
  tagname: ''
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/system/event_dispatcher.js
  line: 92
  description: |-
    The root DOM element to which event listeners should be attached. Event
    listeners will be attached to the document unless this is overridden.

    Can be specified as a DOMElement or a selector string.

    The default body is a string since this may be evaluated before document.body
    exists in the DOM.
  access: private
  tagname: ''
  itemtype: property
  name: rootElement
  type: DOMElement
  default: "'body'"
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/system/event_dispatcher.js
  line: 108
  description: |-
    It enables events to be dispatched to the view's `eventManager.` When present,
    this object takes precedence over handling of events on the view itself.

    Note that most Ember applications do not use this feature. If your app also
    does not use it, consider setting this property to false to gain some performance
    improvement by allowing the EventDispatcher to skip the search for the
    `eventManager` on the view tree.

    ```javascript
    var EventDispatcher = Em.EventDispatcher.extend({
      events: {
          click       : 'click',
          focusin     : 'focusIn',
          focusout    : 'focusOut',
          change      : 'change'
      },
      canDispatchToEventManager: false
    });
    container.register('event_dispatcher:main', EventDispatcher);
    ```
  itemtype: property
  name: canDispatchToEventManager
  type: boolean
  default: "'true'"
  since: 1.7.0
  access: private
  tagname: ''
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/system/event_dispatcher.js
  line: 138
  description: |-
    Sets up event listeners for standard browser events.

    This will be called after the browser sends a `DOMContentReady` event. By
    default, it will set up all of the listeners on the document body. If you
    would like to register the listeners on a different element, set the event
    dispatcher's `root` property.
  access: private
  tagname: ''
  itemtype: method
  name: setup
  params:
  - name: addedEvents
    description: ''
    type: Object
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/system/event_dispatcher.js
  line: 175
  description: |-
    Registers an event listener on the rootElement. If the given event is
    triggered, the provided event handler will be triggered on the target view.

    If the target view does not implement the event handler, or if the handler
    returns `false`, the parent view will be called. The event will continue to
    bubble to each successive parent view until it reaches the top.
  access: private
  tagname: ''
  itemtype: method
  name: setupHandler
  params:
  - name: rootElement
    description: ''
    type: Element
  - name: event
    description: the browser-originated event to listen to
    type: String
  - name: eventName
    description: the name of the method to call on the view
    type: String
  class: Ember.EventDispatcher
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/system/utils.js
  line: 13
  access: private
  tagname: ''
  itemtype: method
  name: getViewRange
  params:
  - name: view
    description: ''
    type: Ember.View
  class: Ember.Checkbox
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/system/utils.js
  line: 25
  description: |-
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.

    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  access: private
  tagname: ''
  itemtype: method
  name: getViewClientRects
  params:
  - name: view
    description: ''
    type: Ember.View
  class: Ember.Checkbox
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/system/utils.js
  line: 41
  description: |-
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.

    It is only intended to be used by development tools like the Ember Inpsector
    and may not work on older browsers.
  access: private
  tagname: ''
  itemtype: method
  name: getViewBoundingClientRect
  params:
  - name: view
    description: ''
    type: Ember.View
  class: Ember.Checkbox
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/views/collection_view.js
  line: 185
  description: A list of items to be displayed by the `Ember.CollectionView`.
  itemtype: property
  name: content
  type: Ember.Array
  default: 'null'
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 195
  itemtype: property
  name: itemViewClass
  type: Ember.View
  default: Ember.View
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 203
  description: Setup a CollectionView
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 215
  description: |-
    Check to make sure that the content has changed, and if so,
    update the children directly. This is always scheduled
    asynchronously, to allow the element to be created before
    bindings have synchronized and vice versa.
  access: private
  tagname: ''
  itemtype: method
  name: _contentDidChange
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 242
  description: Ensure that the content implements Ember.Array
  access: private
  tagname: ''
  itemtype: method
  name: _assertArrayLike
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 252
  description: Removes the content and content observers.
  itemtype: method
  name: destroy
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 271
  description: |-
    Called when a mutation to the underlying content array will occur.

    This method will remove any views that are no longer in the underlying
    content array.

    Invokes whenever the content array itself will change.
  itemtype: method
  name: arrayWillChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes will occur
    type: Number
  - name: removed
    description: number of object to be removed from content
    type: Number
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 289
  description: |-
    Called when a mutation to the underlying content array occurs.

    This method will replay that mutation against the views that compose the
    `Ember.CollectionView`, ensuring that the view reflects the model.

    This array observer is added in `contentDidChange`.
  itemtype: method
  name: arrayDidChange
  params:
  - name: content
    description: the managed collection of objects
    type: Array
  - name: start
    description: the index at which the changes occurred
    type: Number
  - name: removed
    description: number of object removed from content
    type: Number
  - name: added
    description: number of object added to content
    type: Number
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 331
  description: |-
    Instantiates a view to be added to the childViews array during view
    initialization. You generally will not call this method directly unless
    you are overriding `createChildViews()`. Note that this method will
    automatically configure the correct settings on the new view instance to
    act as a child of the parent.

    The tag name for the view will be set to the tagName of the viewClass
    passed in.
  itemtype: method
  name: createChildView
  params:
  - name: viewClass
    description: ''
    type: Class
  - name: attrs
    description: Attributes to add
    type: Object
    optional: true
  return:
    description: new instance
    type: Ember.View
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/collection_view.js
  line: 385
  description: |-
    A map of parent tags to their default child tags. You can add
    additional parent tags if you want collection views that use
    a particular parent tag to default to a child tag.
  itemtype: property
  name: CONTAINER_MAP
  type: Object
  static: 1
  final: 1
  access: private
  tagname: ''
  class: Ember.CollectionView
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/core_view.js
  line: 62
  description: |-
    If the view is currently inserted into the DOM of a parent view, this
    property will point to the parent of the view.
  itemtype: property
  name: parentView
  type: Ember.View
  default: 'null'
  access: private
  tagname: ''
  class: Ember.CoreView
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/views/core_view.js
  line: 83
  description: |-
    Override the default event firing from `Ember.Evented` to
    also call methods with the given name.
  itemtype: method
  name: trigger
  params:
  - name: name
    description: ''
    type: String
  access: private
  tagname: ''
  class: Ember.CoreView
  module: ember
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 329
  description: |-
    The `multiple` attribute of the select element. Indicates whether multiple
    options can be selected.
  itemtype: property
  name: multiple
  type: Boolean
  default: 'false'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 340
  description: |-
    The `disabled` attribute of the select element. Indicates whether
    the element is disabled from interactions.
  itemtype: property
  name: disabled
  type: Boolean
  default: 'false'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 351
  description: |-
    The `required` attribute of the select element. Indicates whether
    a selected option is required for form validation.
  itemtype: property
  name: required
  type: Boolean
  default: 'false'
  since: 1.5.0
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 363
  description: |-
    The list of options.

    If `optionLabelPath` and `optionValuePath` are not overridden, this should
    be a list of strings, which will serve simultaneously as labels and values.

    Otherwise, this should be a list of objects. For instance:

    ```javascript
    var App = Ember.Application.create();
    var App.MySelect = Ember.Select.extend({
      content: Ember.A([
          { id: 1, firstName: 'Yehuda' },
          { id: 2, firstName: 'Tom' }
        ]),
      optionLabelPath: 'content.firstName',
      optionValuePath: 'content.id'
    });
    ```
  itemtype: property
  name: content
  type: Array
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 390
  description: |-
    When `multiple` is `false`, the element of `content` that is currently
    selected, if any.

    When `multiple` is `true`, an array of such elements.
  itemtype: property
  name: selection
  type: Object or Array
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 403
  description: |-
    In single selection mode (when `multiple` is `false`), value can be used to
    get the current selection's value or set the selection by its value.

    It is not currently supported in multiple selection mode.
  itemtype: property
  name: value
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 424
  description: |-
    If given, a top-most dummy option will be rendered to serve as a user
    prompt.
  itemtype: property
  name: prompt
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 435
  description: The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionLabelPath
  type: String
  default: "'content'"
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 445
  description: The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).
  itemtype: property
  name: optionValuePath
  type: String
  default: "'content'"
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 455
  description: |-
    The path of the option group.
    When this property is used, `content` should be sorted by `optionGroupPath`.
  itemtype: property
  name: optionGroupPath
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 466
  description: The view class for optgroup.
  itemtype: property
  name: groupView
  type: Ember.View
  default: Ember.SelectOptgroup
  access: public
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/select.js
  line: 497
  description: The view class for option.
  itemtype: property
  name: optionView
  type: Ember.View
  default: Ember.SelectOption
  access: private
  tagname: ''
  class: Ember.Select
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 89
  description: |-
    The `value` attribute of the input element. As the user inputs text, this
    property is updated live.
  itemtype: property
  name: value
  type: String
  default: "\"\""
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 100
  description: The `type` attribute of the input element.
  itemtype: property
  name: type
  type: String
  default: "\"text\""
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 124
  description: The `size` of the text field in characters.
  itemtype: property
  name: size
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 134
  description: The `pattern` attribute of input element.
  itemtype: property
  name: pattern
  type: String
  default: 'null'
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 144
  description: The `min` attribute of input element used with `type="number"` or `type="range"`.
  itemtype: property
  name: min
  type: String
  default: 'null'
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/text_field.js
  line: 155
  description: The `max` attribute of input element used with `type="number"` or `type="range"`.
  itemtype: property
  name: max
  type: String
  default: 'null'
  since: 1.4.0
  access: public
  tagname: ''
  class: Ember.TextField
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/view.js
  line: 40
  description: |-
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
  itemtype: property
  name: TEMPLATES
  type: Object
  access: private
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-views
- file: packages/ember-views/lib/views/view.js
  line: 687
  description: |-
    Given a property name, returns a dasherized version of that
    property name if the property evaluates to a non-falsy value.

    For example, if the view has property `isUrgent` that evaluates to true,
    passing `isUrgent` to this method will return `"is-urgent"`.
  itemtype: method
  name: _classStringForProperty
  params:
  - name: property
    description: ''
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/views/view.js
  line: 739
  description: Global views hash
  itemtype: property
  name: views
  static: 1
  type: Object
  access: private
  tagname: ''
  class: Ember.View
  module: ember
  submodule: ember-views
  namespace: Ember
- file: packages/ember-views/lib/main.js
  line: 45
  description: Alias for jQuery
  itemtype: method
  name: "$"
  access: public
  tagname: ''
  class: Ember
  module: ember
  submodule: ember-views
warnings:
- message: 'replacing incorrect tag: function with method'
  line: " packages/ember-metal/lib/streams/utils.js:302"
- message: 'unknown tag: version'
  line: " packages/ember-metal/lib/core.js:8"
- message: 'replacing incorrect tag: returns with return'
  line: " packages/ember-views/lib/components/component.js:322"
- message: 'replacing incorrect tag: returns with return'
  line: " packages/ember-views/lib/components/component.js:382"
- message: |-
    Missing item type
    Unfortunately, a lot of existing code assumes booting an instance is
    synchronous – specifically, a lot of tests assumes the last call to
    `app.advanceReadiness()` or `app.reset()` will result in a new instance
    being fully-booted when the current runloop completes.

    We would like new code (like the `visit` API) to stop making this assumption,
    so we created the asynchronous version above that returns a promise. But until
    we have migrated all the code, we would have to expose this method for use
    *internally* in places where we need to boot an instance synchronously.
  line: " packages/ember-application/lib/system/application-instance.js:144"
- message: |-
    Missing item type
    This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
    when it has finished creating the root View. By default, we simply take the
    view and append it to the `rootElement` specified on the Application.

    In cases like FastBoot and testing, we can override this hook and implement
    custom behavior, such as serializing to a string and sending over an HTTP
    socket rather than appending to DOM.
  line: " packages/ember-application/lib/system/application-instance.js:207"
- message: |-
    Missing item type
    Tells the router to start routing. The router will ask the location for the
    current URL of the page to determine the initial URL to start routing to.
    To start the app at a specific URL, call `handleURL` instead.
  line: " packages/ember-application/lib/system/application-instance.js:223"
- message: Missing item type
  line: " packages/ember-application/lib/system/application-instance.js:236"
- message: |-
    Missing item type
    Directs the router to route to a particular URL. This is useful in tests,
    for example, to tell the app to start at a particular URL.
  line: " packages/ember-application/lib/system/application-instance.js:253"
- message: Missing item type
  line: " packages/ember-application/lib/system/application-instance.js:267"
- message: Missing item type
  line: " packages/ember-application/lib/system/application-instance.js:281"
- message: |-
    Missing item type
    Returns the current URL of the app instance. This is useful when your
    app does not update the browsers URL bar (i.e. it uses the `'none'`
    location adapter).
  line: " packages/ember-application/lib/system/application-instance.js:292"
- message: |-
    Missing item type
    Navigate the instance to a particular URL. This is useful in tests, for
    example, or to tell the app to start at a particular URL. This method
    returns a promise that resolves with the app instance when the transition
    is complete, or rejects if the transion was aborted due to an error.
  line: " packages/ember-application/lib/system/application-instance.js:308"
- message: |-
    Missing item type
    Unfortunately, a lot of existing code assumes the booting process is
    "synchronous". Specifically, a lot of tests assumes the last call to
    `app.advanceReadiness()` or `app.reset()` will result in the app being
    fully-booted when the current runloop completes.

    We would like new code (like the `visit` API) to stop making this assumption,
    so we created the asynchronous version above that returns a promise. But until
    we have migrated all the code, we would have to expose this method for use
    *internally* in places where we need to boot an app "synchronously".
  line: " packages/ember-application/lib/system/application.js:612"
- message: |-
    Missing item type
    This private helper is used internally to handle `isVisible: false` for
    Ember.View and Ember.Component.
  line: " packages/ember-htmlbars/lib/helpers/-html-safe.js:3"
- message: |-
    Missing item type
    Provides instrumentation for node managers.

    Wrap your node manager's render and re-render methods
    with this function.
  line: " packages/ember-htmlbars/lib/system/instrumentation-support.js:6"
- message: |-
    Missing item type
    Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from
    jQuery master. We'll just bootstrap our own uuid now.
  line: " packages/ember-metal/lib/utils.js:9"
- message: |-
    Missing item type
    Generates a universally unique identifier. This method
    is used internally by Ember for assisting with
    the generation of GUID's and other unique identifiers.
  line: " packages/ember-metal/lib/utils.js:18"
- message: |-
    Missing item type
    Strongly hint runtimes to intern the provided string.

    When do I need to use this function?

    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.

    Why?

    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.

    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.

    How do I know if my string is a rope or symbol?

    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.

    Some numbers: http://jsperf.com/eval-vs-keys/8

    Known Trick™
  line: " packages/ember-metal/lib/utils.js:44"
- message: Missing item type
  line: " packages/ember-metal/lib/utils.js:477"
- message: Missing item type
  line: " packages/ember-metal/lib/utils.js:496"
- message: |-
    Missing item type
    Called by the router to instruct the location to do any feature detection
    necessary. In the case of AutoLocation, we detect whether to use history
    or hash concrete implementations.
  line: " packages/ember-routing/lib/location/auto_location.js:109"
- message: Missing item type
  line: " packages/ember-routing/lib/location/auto_location.js:233"
- message: Missing item type
  line: " packages/ember-routing/lib/location/util.js:1"
- message: Missing item type
  line: " packages/ember-routing/lib/location/util.js:16"
- message: Missing item type
  line: " packages/ember-routing/lib/location/util.js:25"
- message: |-
    Missing item type
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  line: " packages/ember-routing/lib/location/util.js:105"
- message: |-
    Missing item type
    Returns a merged query params meta object for a given route.
    Useful for asking a route what its known query params are.
  line: " packages/ember-routing/lib/system/router.js:612"
- message: Missing item type
  line: " packages/ember-runtime/lib/mixins/container_proxy.js:81"
- message: Missing item type
  line: " packages/ember-runtime/lib/mixins/controller.js:52"
