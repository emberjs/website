---
project:
  name: The ember-data API
  description: 'The ember-data API: a data persistence library for Ember.js'
  version: 1.0.0-beta.6
  logo: http://f.cl.ly/items/1A1L432s022u1O1q1V3p/ember%20logo.png
  url: https://github.com/emberjs/data
  sha: v1.0.0-beta.6
files:
  "../packages/activemodel-adapter/lib/system/active_model_adapter.js":
    name: "../packages/activemodel-adapter/lib/system/active_model_adapter.js"
    modules: {}
    classes:
      DS.ActiveModelAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/activemodel-adapter/lib/system/active_model_serializer.js":
    name: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js":
    name: "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js"
    modules: {}
    classes:
      DS.EmbeddedRecordsMixin: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/adapters/fixture_adapter.js":
    name: "../packages/ember-data/lib/adapters/fixture_adapter.js"
    modules: {}
    classes:
      DS.FixtureAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/adapters/rest_adapter.js":
    name: "../packages/ember-data/lib/adapters/rest_adapter.js"
    modules: {}
    classes:
      DS.RESTAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/ext/date.js":
    name: "../packages/ember-data/lib/ext/date.js"
    modules: {}
    classes:
      Ember.Date: 1
    fors: {}
    namespaces:
      Ember: 1
  "../packages/ember-data/lib/serializers/json_serializer.js":
    name: "../packages/ember-data/lib/serializers/json_serializer.js"
    modules: {}
    classes:
      DS.JSONSerializer: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/serializers/rest_serializer.js":
    name: "../packages/ember-data/lib/serializers/rest_serializer.js"
    modules: {}
    classes:
      DS.RESTSerializer: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/changes/attribute_change.js":
    name: "../packages/ember-data/lib/system/changes/attribute_change.js"
    modules: {}
    classes:
      DS.AttributeChange: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/changes/relationship_change.js":
    name: "../packages/ember-data/lib/system/changes/relationship_change.js"
    modules: {}
    classes:
      DS.RelationshipChange: 1
      DS.RelationshipChangeAdd: 1
      DS.RelationshipChangeRemove: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/debug/debug_adapter.js":
    name: "../packages/ember-data/lib/system/debug/debug_adapter.js"
    modules: {}
    classes:
      DS.DebugAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/debug/debug_info.js":
    name: "../packages/ember-data/lib/system/debug/debug_info.js"
    modules: {}
    classes: {}
    fors:
      DS.Model: 1
    namespaces: {}
  "../packages/ember-data/lib/system/model/attributes.js":
    name: "../packages/ember-data/lib/system/model/attributes.js"
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/model/errors.js":
    name: "../packages/ember-data/lib/system/model/errors.js"
    modules: {}
    classes:
      DS.Errors: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/model/model.js":
    name: "../packages/ember-data/lib/system/model/model.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/model/states.js":
    name: "../packages/ember-data/lib/system/model/states.js"
    modules: {}
    classes:
      DS.RootState: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js":
    name: "../packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js"
    modules: {}
    classes:
      DS.AdapterPopulatedRecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/record_arrays/filtered_record_array.js":
    name: "../packages/ember-data/lib/system/record_arrays/filtered_record_array.js"
    modules: {}
    classes:
      DS.FilteredRecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/record_arrays/many_array.js":
    name: "../packages/ember-data/lib/system/record_arrays/many_array.js"
    modules: {}
    classes:
      DS.ManyArray: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/record_arrays/record_array.js":
    name: "../packages/ember-data/lib/system/record_arrays/record_array.js"
    modules: {}
    classes:
      DS.RecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/relationships/belongs_to.js":
    name: "../packages/ember-data/lib/system/relationships/belongs_to.js"
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/relationships/ext.js":
    name: "../packages/ember-data/lib/system/relationships/ext.js"
    modules: {}
    classes:
      DS.Model: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/relationships/has_many.js":
    name: "../packages/ember-data/lib/system/relationships/has_many.js"
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces: {}
  "../packages/ember-data/lib/system/adapter.js":
    name: "../packages/ember-data/lib/system/adapter.js"
    modules: {}
    classes:
      DS.InvalidError: 1
      DS.Adapter: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/changes.js":
    name: "../packages/ember-data/lib/system/changes.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/system/container_proxy.js":
    name: "../packages/ember-data/lib/system/container_proxy.js"
    modules: {}
    classes:
      DS.ContainerProxy: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/debug.js":
    name: "../packages/ember-data/lib/system/debug.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/system/model.js":
    name: "../packages/ember-data/lib/system/model.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/system/record_array_manager.js":
    name: "../packages/ember-data/lib/system/record_array_manager.js"
    modules: {}
    classes:
      DS.RecordArrayManager: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/system/record_arrays.js":
    name: "../packages/ember-data/lib/system/record_arrays.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/system/relationships.js":
    name: "../packages/ember-data/lib/system/relationships.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/system/store.js":
    name: "../packages/ember-data/lib/system/store.js"
    modules: {}
    classes:
      DS.Store: 1
      DS.PromiseArray: 1
      DS.PromiseObject: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/transforms/base.js":
    name: "../packages/ember-data/lib/transforms/base.js"
    modules: {}
    classes:
      DS.Transform: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/transforms/boolean.js":
    name: "../packages/ember-data/lib/transforms/boolean.js"
    modules: {}
    classes:
      DS.BooleanTransform: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/transforms/date.js":
    name: "../packages/ember-data/lib/transforms/date.js"
    modules: {}
    classes:
      DS.DateTransform: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/transforms/number.js":
    name: "../packages/ember-data/lib/transforms/number.js"
    modules: {}
    classes:
      DS.NumberTransform: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/transforms/string.js":
    name: "../packages/ember-data/lib/transforms/string.js"
    modules: {}
    classes:
      DS.StringTransform: 1
    fors: {}
    namespaces:
      DS: 1
  "../packages/ember-data/lib/adapters.js":
    name: "../packages/ember-data/lib/adapters.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/core.js":
    name: "../packages/ember-data/lib/core.js"
    modules: {}
    classes:
      DS: 1
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/initializers.js":
    name: "../packages/ember-data/lib/initializers.js"
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-data/lib/main.js":
    name: "../packages/ember-data/lib/main.js"
    modules:
      ember-data: 1
    classes: {}
    fors: {}
    namespaces: {}
  "../packages/ember-inflector/lib/ext/string.js":
    name: "../packages/ember-inflector/lib/ext/string.js"
    modules: {}
    classes: {}
    fors:
      String: 1
    namespaces: {}
  "../packages/ember-inflector/lib/system/inflector.js":
    name: "../packages/ember-inflector/lib/system/inflector.js"
    modules: {}
    classes:
      Ember.Inflector: 1
    fors: {}
    namespaces:
      Ember: 1
modules:
  ember-data:
    name: ember-data
    submodules: {}
    classes:
      DS.ActiveModelAdapter: 1
      DS.EmbeddedRecordsMixin: 1
      DS.FixtureAdapter: 1
      DS.RESTAdapter: 1
      Ember.Date: 1
      DS.JSONSerializer: 1
      DS.RESTSerializer: 1
      DS.AttributeChange: 1
      DS.RelationshipChange: 1
      DS.RelationshipChangeAdd: 1
      DS.RelationshipChangeRemove: 1
      DS.DebugAdapter: 1
      DS.Model: 1
      DS: 1
      DS.Errors: 1
      DS.RootState: 1
      DS.AdapterPopulatedRecordArray: 1
      DS.FilteredRecordArray: 1
      DS.ManyArray: 1
      DS.RecordArray: 1
      DS.InvalidError: 1
      DS.Adapter: 1
      DS.ContainerProxy: 1
      DS.RecordArrayManager: 1
      DS.Store: 1
      DS.PromiseArray: 1
      DS.PromiseObject: 1
      DS.Transform: 1
      DS.BooleanTransform: 1
      DS.DateTransform: 1
      DS.NumberTransform: 1
      DS.StringTransform: 1
      String: 1
      Ember.Inflector: 1
    fors:
      DS.Model: 1
      DS: 1
      String: 1
    namespaces:
      DS: 1
      Ember: 1
    tag: main
    file: "../packages/ember-inflector/lib/system/inflector.js"
    line: 20
    description: Ember Data
    itemtype: main
classes:
  DS.ActiveModelAdapter:
    name: DS.ActiveModelAdapter
    shortname: DS.ActiveModelAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/activemodel-adapter/lib/system/active_model_adapter.js"
    line: 14
    description: |-
      The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate
      with a JSON API that uses an underscored naming convention instead of camelcasing.
      It has been designed to work out of the box with the
      [active_model_serializers](http://github.com/rails-api/active_model_serializers)
      Ruby gem.

      This adapter extends the DS.RESTAdapter by making consistent use of the camelization,
      decamelization and pluralization methods to normalize the serialized JSON into a
      format that is compatible with a conventional Rails backend and Ember Data.

      ## JSON Structure

      The ActiveModelAdapter expects the JSON returned from your server to follow
      the REST adapter conventions substituting underscored keys for camelcased ones.

      ### Conventional Names

      Attribute names in your JSON payload should be the underscored versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.FamousPerson = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "famous_person": {
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation": "President"
        }
      }
      ```
    is_constructor: 1
    extends: DS.Adapter
  DS.EmbeddedRecordsMixin:
    name: DS.EmbeddedRecordsMixin
    shortname: DS.EmbeddedRecordsMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js"
    line: 4
    description: |-
      The EmbeddedRecordsMixin allows you to add embedded record support to your
      serializers.
      To set up embedded records, you include the mixin into the serializer and then
      define your embedded relations.

      ```js
      App.PostSerializer = DS.ActiveModelSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          comments: {embedded: 'always'}
        }
      })
      ```

      Currently only `{embedded: 'always'}` records are supported.
  DS.FixtureAdapter:
    name: DS.FixtureAdapter
    shortname: DS.FixtureAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
    line: 13
    description: |-
      `DS.FixtureAdapter` is an adapter that loads records from memory.
      Its primarily used for development and testing. You can also use
      `DS.FixtureAdapter` while working on the API but are not ready to
      integrate yet. It is a fully functioning adapter. All CRUD methods
      are implemented. You can also implement query logic that a remote
      system would do. Its possible to do develop your entire application
      with `DS.FixtureAdapter`.

      For information on how to use the `FixtureAdapter` in your
      application please see the [FixtureAdapter
      guide](/guides/models/the-fixture-adapter/).
    extends: DS.Adapter
  DS.RESTAdapter:
    name: DS.RESTAdapter
    shortname: DS.RESTAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/adapters/rest_adapter.js"
    line: 13
    description: |-
      The REST adapter allows your store to communicate with an HTTP server by
      transmitting JSON via XHR. Most Ember.js apps that consume a JSON API
      should use the REST adapter.

      This adapter is designed around the idea that the JSON exchanged with
      the server should be conventional.

      ## JSON Structure

      The REST adapter expects the JSON returned from your server to follow
      these conventions.

      ### Object Root

      The JSON payload should be an object that contains the record inside a
      root property. For example, in response to a `GET` request for
      `/posts/1`, the JSON should look like this:

      ```js
      {
        "post": {
          "title": "I'm Running to Reform the W3C's Tag",
          "author": "Yehuda Katz"
        }
      }
      ```

      ### Conventional Names

      Attribute names in your JSON payload should be the camelCased versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.Person = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "person": {
          "firstName": "Barack",
          "lastName": "Obama",
          "occupation": "President"
        }
      }
      ```

      ## Customization

      ### Endpoint path customization

      Endpoint paths can be prefixed with a `namespace` by setting the namespace
      property on the adapter:

      ```js
      DS.RESTAdapter.reopen({
        namespace: 'api/1'
      });
      ```
      Requests for `App.Person` would now target `/api/1/people/1`.

      ### Host customization

      An adapter can target other hosts by setting the `host` property.

      ```js
      DS.RESTAdapter.reopen({
        host: 'https://api.example.com'
      });
      ```

      ### Headers customization

      Some APIs require HTTP headers, e.g. to provide an API key. An array of
      headers can be added to the adapter which are passed with every request:

      ```js
      DS.RESTAdapter.reopen({
        headers: {
          "API_KEY": "secret key",
          "ANOTHER_HEADER": "Some header value"
        }
      });
      ```
    is_constructor: 1
    extends: DS.Adapter
  Ember.Date:
    name: Ember.Date
    shortname: Ember.Date
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: Ember
    file: "../packages/ember-data/lib/ext/date.js"
    line: 5
    description: |-
      Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>

      © 2011 Colin Snover <http://zetafleet.com>

      Released under MIT license.
    static: 1
  DS.JSONSerializer:
    name: DS.JSONSerializer
    shortname: DS.JSONSerializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/serializers/json_serializer.js"
    line: 11
    description: |-
      In Ember Data a Serializer is used to serialize and deserialize
      records when they are transferred in and out of an external source.
      This process involves normalizing property names, transforming
      attribute values and serializing relationships.

      For maximum performance Ember Data recommends you use the
      [RESTSerializer](DS.RESTSerializer.html) or one of its subclasses.

      `JSONSerializer` is useful for simpler or legacy backends that may
      not support the http://jsonapi.org/ spec.
  DS.RESTSerializer:
    name: DS.RESTSerializer
    shortname: DS.RESTSerializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/serializers/rest_serializer.js"
    line: 15
    description: |-
      Normally, applications will use the `RESTSerializer` by implementing
      the `normalize` method and individual normalizations under
      `normalizeHash`.

      This allows you to do whatever kind of munging you need, and is
      especially useful if your server is inconsistent and you need to
      do munging differently for many different kinds of responses.

      See the `normalize` documentation for more information.

      ## Across the Board Normalization

      There are also a number of hooks that you might find useful to defined
      across-the-board rules for your payload. These rules will be useful
      if your server is consistent, or if you're building an adapter for
      an infrastructure service, like Parse, and want to encode service
      conventions.

      For example, if all of your keys are underscored and all-caps, but
      otherwise consistent with the names you use in your models, you
      can implement across-the-board rules for how to convert an attribute
      name in your model to a key in your JSON.

      ```js
      App.ApplicationSerializer = DS.RESTSerializer.extend({
        keyForAttribute: function(attr) {
          return Ember.String.underscore(attr).toUpperCase();
        }
      });
      ```

      You can also implement `keyForRelationship`, which takes the name
      of the relationship as the first parameter, and the kind of
      relationship (`hasMany` or `belongsTo`) as the second parameter.
    extends: DS.JSONSerializer
  DS.AttributeChange:
    name: DS.AttributeChange
    shortname: DS.AttributeChange
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/changes/attribute_change.js"
    line: 5
    description: |-
      An AttributeChange object is created whenever a record's
      attribute changes value. It is used to track changes to a
      record between transaction commits.
    access: private
    tagname: ''
    is_constructor: 1
  DS.RelationshipChange:
    name: DS.RelationshipChange
    shortname: DS.RelationshipChange
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/changes/relationship_change.js"
    line: 285
    access: private
    tagname: ''
    is_constructor: 1
  DS.RelationshipChangeAdd:
    name: DS.RelationshipChangeAdd
    shortname: DS.RelationshipChangeAdd
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/changes/relationship_change.js"
    line: 29
    access: private
    tagname: ''
    is_constructor: 1
  DS.RelationshipChangeRemove:
    name: DS.RelationshipChangeRemove
    shortname: DS.RelationshipChangeRemove
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/changes/relationship_change.js"
    line: 39
    access: private
    tagname: ''
    is_constructor: 1
  DS.DebugAdapter:
    name: DS.DebugAdapter
    shortname: DS.DebugAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/debug/debug_adapter.js"
    line: 6
    description: Extend `Ember.DataAdapter` with ED specific code.
    extends: Ember.DataAdapter
    access: private
    tagname: ''
  DS.Model:
    name: DS.Model
    shortname: DS.Model
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/relationships/ext.js"
    line: 14
    description: |-
      These observers observe all `belongsTo` relationships on the record. See
      `relationships/ext` to see how these observers get their dependencies.
    extends: Ember.Object
    uses:
    - Ember.Evented
  DS:
    name: DS
    shortname: DS
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: ''
    file: "../packages/ember-data/lib/core.js"
    line: 5
    description: All Ember Data methods and functions are defined inside of this namespace.
    static: 1
  DS.Errors:
    name: DS.Errors
    shortname: DS.Errors
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/model/errors.js"
    line: 7
    description: Holds validation errors for a given record organized by attribute
      names.
    extends: Ember.Object
    uses:
    - Ember.Enumerable
    - Ember.Evented
  DS.RootState:
    name: DS.RootState
    shortname: DS.RootState
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/model/states.js"
    line: 10
    description: |-
      ### State

      Each record has a `currentState` property that explicitly tracks what
      state a record is in at any given time. For instance, if a record is
      newly created and has not yet been sent to the adapter to be saved,
      it would be in the `root.loaded.created.uncommitted` state.  If a
      record has had local modifications made to it that are in the
      process of being saved, the record would be in the
      `root.loaded.updated.inFlight` state. (These state paths will be
      explained in more detail below.)

      Events are sent by the record or its store to the record's
      `currentState` property. How the state reacts to these events is
      dependent on which state it is in. In some states, certain events
      will be invalid and will cause an exception to be raised.

      States are hierarchical and every state is a substate of the
      `RootState`. For example, a record can be in the
      `root.deleted.uncommitted` state, then transition into the
      `root.deleted.inFlight` state. If a child state does not implement
      an event handler, the state manager will attempt to invoke the event
      on all parent states until the root state is reached. The state
      hierarchy of a record is described in terms of a path string. You
      can determine a record's current state by getting the state's
      `stateName` property:

      ```javascript
      record.get('currentState.stateName');
      //=> "root.created.uncommitted"
       ```

      The hierarchy of valid states that ship with ember data looks like
      this:

      ```text
      * root
        * deleted
          * saved
          * uncommitted
          * inFlight
        * empty
        * loaded
          * created
            * uncommitted
            * inFlight
          * saved
          * updated
            * uncommitted
            * inFlight
        * loading
      ```

      The `DS.Model` states are themselves stateless. What we mean is
      that, the hierarchical states that each of *those* points to is a
      shared data structure. For performance reasons, instead of each
      record getting its own copy of the hierarchy of states, each record
      points to this global, immutable shared instance. How does a state
      know which record it should be acting on? We pass the record
      instance into the state's event handlers as the first argument.

      The record passed as the first parameter is where you should stash
      state about the record if needed; you should never store data on the state
      object itself.

      ### Events and Flags

      A state may implement zero or more events and flags.

      #### Events

      Events are named functions that are invoked when sent to a record. The
      record will first look for a method with the given name on the
      current state. If no method is found, it will search the current
      state's parent, and then its grandparent, and so on until reaching
      the top of the hierarchy. If the root is reached without an event
      handler being found, an exception will be raised. This can be very
      helpful when debugging new features.

      Here's an example implementation of a state with a `myEvent` event handler:

      ```javascript
      aState: DS.State.create({
        myEvent: function(manager, param) {
          console.log("Received myEvent with", param);
        }
      })
      ```

      To trigger this event:

      ```javascript
      record.send('myEvent', 'foo');
      //=> "Received myEvent with foo"
      ```

      Note that an optional parameter can be sent to a record's `send()` method,
      which will be passed as the second parameter to the event handler.

      Events should transition to a different state if appropriate. This can be
      done by calling the record's `transitionTo()` method with a path to the
      desired state. The state manager will attempt to resolve the state path
      relative to the current state. If no state is found at that path, it will
      attempt to resolve it relative to the current state's parent, and then its
      parent, and so on until the root is reached. For example, imagine a hierarchy
      like this:

          * created
            * uncommitted <-- currentState
            * inFlight
          * updated
            * inFlight

      If we are currently in the `uncommitted` state, calling
      `transitionTo('inFlight')` would transition to the `created.inFlight` state,
      while calling `transitionTo('updated.inFlight')` would transition to
      the `updated.inFlight` state.

      Remember that *only events* should ever cause a state transition. You should
      never call `transitionTo()` from outside a state's event handler. If you are
      tempted to do so, create a new event and send that to the state manager.

      #### Flags

      Flags are Boolean values that can be used to introspect a record's current
      state in a more user-friendly way than examining its state path. For example,
      instead of doing this:

      ```javascript
      var statePath = record.get('stateManager.currentPath');
      if (statePath === 'created.inFlight') {
        doSomething();
      }
      ```

      You can say:

      ```javascript
      if (record.get('isNew') && record.get('isSaving')) {
        doSomething();
      }
      ```

      If your state does not set a value for a given flag, the value will
      be inherited from its parent (or the first place in the state hierarchy
      where it is defined).

      The current set of flags are defined below. If you want to add a new flag,
      in addition to the area below, you will also need to declare it in the
      `DS.Model` class.


       * [isEmpty](DS.Model.html#property_isEmpty)
       * [isLoading](DS.Model.html#property_isLoading)
       * [isLoaded](DS.Model.html#property_isLoaded)
       * [isDirty](DS.Model.html#property_isDirty)
       * [isSaving](DS.Model.html#property_isSaving)
       * [isDeleted](DS.Model.html#property_isDeleted)
       * [isNew](DS.Model.html#property_isNew)
       * [isValid](DS.Model.html#property_isValid)
  DS.AdapterPopulatedRecordArray:
    name: DS.AdapterPopulatedRecordArray
    shortname: DS.AdapterPopulatedRecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js"
    line: 9
    description: |-
      Represents an ordered list of records whose order and membership is
      determined by the adapter. For example, a query sent to the adapter
      may trigger a search on the server, whose results would be loaded
      into an instance of the `AdapterPopulatedRecordArray`.
    extends: DS.RecordArray
  DS.FilteredRecordArray:
    name: DS.FilteredRecordArray
    shortname: DS.FilteredRecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/record_arrays/filtered_record_array.js"
    line: 9
    description: |-
      Represents a list of records whose membership is determined by the
      store. As records are created, loaded, or modified, the store
      evaluates them to determine if they should be part of the record
      array.
    extends: DS.RecordArray
  DS.ManyArray:
    name: DS.ManyArray
    shortname: DS.ManyArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
    line: 10
    description: |-
      A `ManyArray` is a `RecordArray` that represents the contents of a has-many
      relationship.

      The `ManyArray` is instantiated lazily the first time the relationship is
      requested.

      ### Inverses

      Often, the relationships in Ember Data applications will have
      an inverse. For example, imagine the following models are
      defined:

      ```javascript
      App.Post = DS.Model.extend({
        comments: DS.hasMany('comment')
      });

      App.Comment = DS.Model.extend({
        post: DS.belongsTo('post')
      });
      ```

      If you created a new instance of `App.Post` and added
      a `App.Comment` record to its `comments` has-many
      relationship, you would expect the comment's `post`
      property to be set to the post that contained
      the has-many.

      We call the record to which a relationship belongs the
      relationship's _owner_.
    extends: DS.RecordArray
  DS.RecordArray:
    name: DS.RecordArray
    shortname: DS.RecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
    line: 7
    description: |-
      A record array is an array that contains records of a certain type. The record
      array materializes records as needed when they are retrieved for the first
      time. You should not create record arrays yourself. Instead, an instance of
      `DS.RecordArray` or its subclasses will be returned by your application's store
      in response to queries.
    extends: Ember.ArrayProxy
    uses:
    - Ember.Evented
  DS.InvalidError:
    name: DS.InvalidError
    shortname: DS.InvalidError
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/adapter.js"
    line: 10
    description: |-
      A `DS.InvalidError` is used by an adapter to signal the external API
      was unable to process a request because the content was not
      semantically correct or meaningful per the API. Usually this means a
      record failed some form of server side validation. When a promise
      from an adapter is rejected with a `DS.InvalidError` the record will
      transition to the `invalid` state and the errors will be set to the
      `errors` property on the record.

      Example

      ```javascript
      App.ApplicationAdapter = DS.RESTAdapter.extend({
        ajaxError: function(jqXHR) {
          var error = this._super(jqXHR);

          if (jqXHR && jqXHR.status === 422) {
            var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)["errors"];
            return new DS.InvalidError(jsonErrors);
          } else {
            return error;
          }
        }
      });
      ```
  DS.Adapter:
    name: DS.Adapter
    shortname: DS.Adapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/adapter.js"
    line: 49
    description: |-
      An adapter is an object that receives requests from a store and
      translates them into the appropriate action to take against your
      persistence layer. The persistence layer is usually an HTTP API, but
      may be anything, such as the browser's local storage. Typically the
      adapter is not invoked directly instead its functionality is accessed
      through the `store`.

      ### Creating an Adapter

      First, create a new subclass of `DS.Adapter`:

      ```javascript
      App.MyAdapter = DS.Adapter.extend({
        // ...your code here
      });
      ```

      To tell your store which adapter to use, set its `adapter` property:

      ```javascript
      App.store = DS.Store.create({
        adapter: 'MyAdapter'
      });
      ```

      `DS.Adapter` is an abstract base class that you should override in your
      application to customize it for your backend. The minimum set of methods
      that you should implement is:

        * `find()`
        * `createRecord()`
        * `updateRecord()`
        * `deleteRecord()`
        * `findAll()`
        * `findQuery()`

      To improve the network performance of your application, you can optimize
      your adapter by overriding these lower-level methods:

        * `findMany()`


      For an example implementation, see `DS.RESTAdapter`, the
      included REST adapter.
    extends: Ember.Object
  DS.ContainerProxy:
    name: DS.ContainerProxy
    shortname: DS.ContainerProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/container_proxy.js"
    line: 1
    description: |-
      This is used internally to enable deprecation of container paths and provide
      a decent message to the user indicating how to fix the issue.
    access: private
    tagname: ''
  DS.RecordArrayManager:
    name: DS.RecordArrayManager
    shortname: DS.RecordArrayManager
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/record_array_manager.js"
    line: 8
    access: private
    tagname: ''
    extends: Ember.Object
  DS.Store:
    name: DS.Store
    shortname: DS.Store
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/store.js"
    line: 44
    description: |-
      The store contains all of the data for records loaded from the server.
      It is also responsible for creating instances of `DS.Model` that wrap
      the individual data for a record, so that they can be bound to in your
      Handlebars templates.

      Define your application's store like this:

      ```javascript
      MyApp.Store = DS.Store.extend();
      ```

      Most Ember.js applications will only have a single `DS.Store` that is
      automatically created by their `Ember.Application`.

      You can retrieve models from the store in several ways. To retrieve a record
      for a specific id, use `DS.Store`'s `find()` method:

      ```javascript
      var person = store.find('person', 123);
      ```

      If your application has multiple `DS.Store` instances (an unusual case), you can
      specify which store should be used:

      ```javascript
      var person = store.find(App.Person, 123);
      ```

      By default, the store will talk to your backend using a standard
      REST mechanism. You can customize how the store talks to your
      backend by specifying a custom adapter:

      ```javascript
       MyApp.store = DS.Store.create({
         adapter: 'MyApp.CustomAdapter'
       });
       ```

      You can learn more about writing a custom adapter by reading the `DS.Adapter`
      documentation.
    extends: Ember.Object
  DS.PromiseArray:
    name: DS.PromiseArray
    shortname: DS.PromiseArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/store.js"
    line: 1474
    description: |-
      A `PromiseArray` is an object that acts like both an `Ember.Array`
      and a promise. When the promise is resolved the the resulting value
      will be set to the `PromiseArray`'s `content` property. This makes
      it easy to create data bindings with the `PromiseArray` that will be
      updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseArray = DS.PromiseArray.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseArray.get('length'); // 0

      promiseArray.then(function() {
        promiseArray.get('length'); // 100
      });
      ```
    extends: Ember.ArrayProxy
    uses:
    - Ember.PromiseProxyMixin
  DS.PromiseObject:
    name: DS.PromiseObject
    shortname: DS.PromiseObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/system/store.js"
    line: 1504
    description: |-
      A `PromiseObject` is an object that acts like both an `Ember.Object`
      and a promise. When the promise is resolved the the resulting value
      will be set to the `PromiseObject`'s `content` property. This makes
      it easy to create data bindings with the `PromiseObject` that will
      be updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseObject = DS.PromiseObject.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseObject.get('name'); // null

      promiseObject.then(function() {
        promiseObject.get('name'); // 'Tomster'
      });
      ```
    extends: Ember.ObjectProxy
    uses:
    - Ember.PromiseProxyMixin
  DS.Transform:
    name: DS.Transform
    shortname: DS.Transform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/transforms/base.js"
    line: 1
    description: |-
      The `DS.Transform` class is used to serialize and deserialize model
      attributes when they are saved or loaded from an
      adapter. Subclassing `DS.Transform` is useful for creating custom
      attributes. All subclasses of `DS.Transform` must implement a
      `serialize` and a `deserialize` method.

      Example

      ```javascript
      App.RawTransform = DS.Transform.extend({
        deserialize: function(serialized) {
          return serialized;
        },
        serialize: function(deserialized) {
          return deserialized;
        }
      });
      ```

      Usage

      ```javascript
      var attr = DS.attr;
      App.Requirement = DS.Model.extend({
        name: attr('string'),
        optionsArray: attr('raw')
      });
      ```
  DS.BooleanTransform:
    name: DS.BooleanTransform
    shortname: DS.BooleanTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/transforms/boolean.js"
    line: 2
    description: |-
      The `DS.BooleanTransform` class is used to serialize and deserialize
      boolean attributes on Ember Data record objects. This transform is
      used when `boolean` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```javascript
      var attr = DS.attr;
      App.User = DS.Model.extend({
        isAdmin: attr('boolean'),
        name: attr('string'),
        email: attr('string')
      });
      ```
    extends: DS.Transform
  DS.DateTransform:
    name: DS.DateTransform
    shortname: DS.DateTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/transforms/date.js"
    line: 1
    description: |-
      The `DS.DateTransform` class is used to serialize and deserialize
      date attributes on Ember Data record objects. This transform is used
      when `date` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      ```javascript
      var attr = DS.attr;
      App.Score = DS.Model.extend({
        value: attr('number'),
        player: DS.belongsTo('player'),
        date: attr('date')
      });
      ```
    extends: DS.Transform
  DS.NumberTransform:
    name: DS.NumberTransform
    shortname: DS.NumberTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/transforms/number.js"
    line: 2
    description: |-
      The `DS.NumberTransform` class is used to serialize and deserialize
      numeric attributes on Ember Data record objects. This transform is
      used when `number` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```javascript
      var attr = DS.attr;
      App.Score = DS.Model.extend({
        value: attr('number'),
        player: DS.belongsTo('player'),
        date: attr('date')
      });
      ```
    extends: DS.Transform
  DS.StringTransform:
    name: DS.StringTransform
    shortname: DS.StringTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: "../packages/ember-data/lib/transforms/string.js"
    line: 3
    description: |-
      The `DS.StringTransform` class is used to serialize and deserialize
      string attributes on Ember Data record objects. This transform is
      used when `string` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```javascript
      var attr = DS.attr;
      App.User = DS.Model.extend({
        isAdmin: attr('boolean'),
        name: attr('string'),
        email: attr('string')
      });
      ```
    extends: DS.Transform
  String:
    name: String
    shortname: String
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: ''
  Ember.Inflector:
    name: Ember.Inflector
    shortname: Ember.Inflector
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: Ember
    file: "../packages/ember-inflector/lib/system/inflector.js"
    line: 20
    description: |-
      Inflector.Ember provides a mechanism for supplying inflection rules for your
      application. Ember includes a default set of inflection rules, and provides an
      API for providing additional rules.

      Examples:

      Creating an inflector with no rules.

      ```js
      var inflector = new Ember.Inflector();
      ```

      Creating an inflector with the default ember ruleset.

      ```js
      var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);

      inflector.pluralize('cow') //=> 'kine'
      inflector.singularize('kine') //=> 'cow'
      ```

      Creating an inflector and adding rules later.

      ```javascript
      var inflector = Ember.Inflector.inflector;

      inflector.pluralize('advice') // => 'advices'
      inflector.uncountable('advice');
      inflector.pluralize('advice') // => 'advice'

      inflector.pluralize('formula') // => 'formulas'
      inflector.irregular('formula', 'formulae');
      inflector.pluralize('formula') // => 'formulae'

      // you would not need to add these as they are the default rules
      inflector.plural(/$/, 's');
      inflector.singular(/s$/i, '');
      ```

      Creating an inflector with a nondefault ruleset.

      ```javascript
      var rules = {
        plurals:  [ /$/, 's' ],
        singular: [ /\s$/, '' ],
        irregularPairs: [
          [ 'cow', 'kine' ]
        ],
        uncountable: [ 'fish' ]
      };

      var inflector = new Ember.Inflector(rules);
      ```
classitems:
- file: "../packages/activemodel-adapter/lib/system/active_model_adapter.js"
  line: 65
  description: |-
    The ActiveModelAdapter overrides the `pathForType` method to build
    underscored URLs by decamelizing and pluralizing the object type name.

    ```js
      this.pathForType("famousPerson");
      //=> "famous_people"
    ```
  itemtype: method
  name: pathForType
  params:
  - name: type
    description: ''
    type: String
  return:
    description: String
  class: DS.ActiveModelAdapter
  module: ember-data
  namespace: DS
- file: "../packages/activemodel-adapter/lib/system/active_model_adapter.js"
  line: 84
  description: |-
    The ActiveModelAdapter overrides the `ajaxError` method
    to return a DS.InvalidError for all 422 Unprocessable Entity
    responses.

    A 422 HTTP response from the server generally implies that the request
    was well formed but the API was unable to process it because the
    content was not semantically correct or meaningful per the API.

    For more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918
    https://tools.ietf.org/html/rfc4918#section-11.2
  itemtype: method
  name: ajaxError
  params:
  - name: jqXHR
    description: ''
  return:
    description: error
  class: DS.ActiveModelAdapter
  module: ember-data
  namespace: DS
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 18
  description: Converts camelcased attributes to underscored when serializing.
  itemtype: method
  name: keyForAttribute
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: String
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 29
  description: |-
    Underscores relationship names and appends "_id" or "_ids" when serializing
    relationship keys.
  itemtype: method
  name: keyForRelationship
  params:
  - name: key
    description: ''
    type: String
  - name: kind
    description: ''
    type: String
  return:
    description: String
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 49
  description: Does not serialize hasMany relationships by default.
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 54
  description: Underscores the JSON root keys when serializing.
  itemtype: method
  name: serializeIntoHash
  params:
  - name: hash
    description: ''
    type: Object
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  - name: options
    description: ''
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 68
  description: Serializes a polymorphic type as a fully capitalized model name.
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 85
  description: Extracts the model typeKey from underscored root objects.
  itemtype: method
  name: typeForRoot
  params:
  - name: root
    description: ''
    type: String
  return:
    description: String the model's typeKey
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 97
  description: |-
    Add extra step to `DS.RESTSerializer.normalize` so links are
    normalized.

    If your payload looks like this

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "flagged_comments": "api/comments/flagged" }
      }
    }
    ```
    The normalized version would look like this

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "flaggedComments": "api/comments/flagged" }
      }
    }
    ```
  itemtype: method
  name: normalize
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: hash
    description: ''
    type: Object
  - name: prop
    description: ''
    type: String
  return:
    description: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 137
  description: Convert `snake_cased` links  to `camelCase`
  itemtype: method
  name: normalizeLinks
  params:
  - name: hash
    description: ''
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/active_model_serializer.js"
  line: 159
  description: |-
    Normalize the polymorphic type from the JSON.

    Normalize:
    ```js
      {
        id: "1"
        minion: { type: "evil_minion", id: "12"}
      }
    ```

    To:
    ```js
      {
        id: "1"
        minion: { type: "evilMinion", id: "12"}
      }
    ```
  itemtype: method
  name: normalizeRelationships
  access: private
  tagname: ''
  class: DS.EmbeddedRecordsMixin
  module: ember-data
- file: "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js"
  line: 25
  description: Serialize has-may relationship when it is configured as embedded objects.
  itemtype: method
  name: serializeHasMany
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js"
  line: 47
  description: |-
    Extract embedded objects out of the payload for a single object
    and add them as sideloaded objects instead.
  itemtype: method
  name: extractSingle
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: "../packages/activemodel-adapter/lib/system/embedded_records_mixin.js"
  line: 62
  description: |-
    Extract embedded objects out of a standard payload
    and add them as sideloaded objects instead.
  itemtype: method
  name: extractArray
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 34
  description: |-
    If `simulateRemoteResponse` is `true` the `FixtureAdapter` will
    wait a number of milliseconds before resolving promises with the
    fixture values. The wait time can be configured via the `latency`
    property.
  itemtype: property
  name: simulateRemoteResponse
  type: "{Boolean}"
  default: 'true'
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 46
  description: |-
    By default the `FixtureAdapter` will simulate a wait of the
    `latency` milliseconds before resolving promises with the fixture
    values. This behavior can be turned off via the
    `simulateRemoteResponse` property.
  itemtype: property
  name: latency
  type: "{Number}"
  default: '50'
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 58
  description: Implement this method in order to provide data associated with a type
  itemtype: method
  name: fixturesForType
  params:
  - name: type
    description: ''
    type: Subclass of DS.Model
  return:
    description: ''
    type: Array
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 80
  description: Implement this method in order to query fixtures data
  itemtype: method
  name: queryFixtures
  params:
  - name: fixture
    description: ''
    type: Array
  - name: query
    description: ''
    type: Object
  - name: type
    description: ''
    type: Subclass of DS.Model
  return:
    description: ''
    type: Promise|Array
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 93
  itemtype: method
  name: updateFixtures
  params:
  - name: type
    description: ''
    type: Subclass of DS.Model
  - name: fixture
    description: ''
    type: Array
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 110
  description: Implement this method in order to provide json for CRUD methods
  itemtype: method
  name: mockJSON
  params:
  - name: type
    description: ''
    type: Subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 121
  itemtype: method
  name: generateIdForRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: record
    description: ''
    type: DS.Model
  return:
    description: id
    type: String
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 131
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: id
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 155
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: ids
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 180
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: sinceToken
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 198
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: query
    description: ''
    type: Object
  - name: recordArray
    description: ''
    type: DS.AdapterPopulatedRecordArray
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 221
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 238
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/fixture_adapter.js"
  line: 255
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 115
  description: |-
    Endpoint paths can be prefixed with a `namespace` by setting the namespace
    property on the adapter:

    ```javascript
    DS.RESTAdapter.reopen({
      namespace: 'api/1'
    });
    ```

    Requests for `App.Post` would now target `/api/1/post/`.
  itemtype: property
  name: namespace
  type: "{String}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 131
  description: |-
    An adapter can target other hosts by setting the `host` property.

    ```javascript
    DS.RESTAdapter.reopen({
      host: 'https://api.example.com'
    });
    ```

    Requests for `App.Post` would now target `https://api.example.com/post/`.
  itemtype: property
  name: host
  type: "{String}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 146
  description: |-
    Some APIs require HTTP headers, e.g. to provide an API key. An array of
    headers can be added to the adapter which are passed with every request:

    ```javascript
    DS.RESTAdapter.reopen({
      headers: {
        "API_KEY": "secret key",
        "ANOTHER_HEADER": "Some header value"
      }
    });
    ```
  itemtype: property
  name: headers
  type: "{Object}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 163
  description: |-
    Called by the store in order to fetch the JSON for a given
    type and ID.

    The `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.

    This method performs an HTTP `GET` request with the id provided as part of the query string.
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: id
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 182
  description: |-
    Called by the store in order to fetch a JSON array for all
    of the records for a given type.

    The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: sinceToken
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 206
  description: |-
    Called by the store in order to fetch a JSON array for
    the records that match a particular query.

    The `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.

    The `query` argument is a simple JavaScript object that will be passed directly
    to the server as parameters.
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: query
    description: ''
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 227
  description: |-
    Called by the store in order to fetch a JSON array for
    the unloaded records in a has-many relationship that were originally
    specified as IDs.

    For example, if the original payload looks like:

    ```js
    {
      "id": 1,
      "title": "Rails is omakase",
      "comments": [ 1, 2, 3 ]
    }
    ```

    The IDs will be passed as a URL-encoded Array of IDs, in this form:

    ```
    ids[]=1&ids[]=2&ids[]=3
    ```

    Many servers, such as Rails and PHP, will automatically convert this URL-encoded array
    into an Array for you on the server-side. If you want to encode the
    IDs, differently, just override this (one-line) method.

    The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: ids
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 265
  description: |-
    Called by the store in order to fetch a JSON array for
    the unloaded records in a has-many relationship that were originally
    specified as a URL (inside of `links`).

    For example, if your original payload looks like this:

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "comments": "/posts/1/comments" }
      }
    }
    ```

    This method will be called with the parent record and `/posts/1/comments`.

    The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.
    If the URL is host-relative (starting with a single slash), the
    request will use the host specified on the adapter (if any).
  itemtype: method
  name: findHasMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: record
    description: ''
    type: DS.Model
  - name: url
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 306
  description: |-
    Called by the store in order to fetch a JSON array for
    the unloaded records in a belongs-to relationship that were originally
    specified as a URL (inside of `links`).

    For example, if your original payload looks like this:

    ```js
    {
      "person": {
        "id": 1,
        "name": "Tom Dale",
        "links": { "group": "/people/1/group" }
      }
    }
    ```

    This method will be called with the parent record and `/people/1/group`.

    The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.
  itemtype: method
  name: findBelongsTo
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: record
    description: ''
    type: DS.Model
  - name: url
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 340
  description: |-
    Called by the store when a newly created record is
    saved via the `save` method on a model record instance.

    The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
    to a URL computed by `buildURL`.

    See `serialize` for information on how to customize the serialized form
    of a record.
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 365
  description: |-
    Called by the store when an existing record is saved
    via the `save` method on a model record instance.

    The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
    to a URL computed by `buildURL`.

    See `serialize` for information on how to customize the serialized form
    of a record.
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 392
  description: |-
    Called by the store when a record is deleted.

    The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 409
  description: |-
    Builds a URL for a given type and optional ID.

    By default, it pluralizes the type's name (for example, 'post'
    becomes 'posts' and 'person' becomes 'people'). To override the
    pluralization see [pathForType](#method_pathForType).

    If an ID is specified, it adds the ID to the path generated
    for the type, separated by a `/`.
  itemtype: method
  name: buildURL
  params:
  - name: type
    description: ''
    type: String
  - name: id
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 440
  itemtype: method
  name: urlPrefix
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  - name: parentUrl
    description: ''
    type: String
  return:
    description: urlPrefix
    type: String
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 475
  description: |-
    Determines the pathname for a given type.

    By default, it pluralizes the type's name (for example,
    'post' becomes 'posts' and 'person' becomes 'people').

    ### Pathname customization

    For example if you have an object LineItem with an
    endpoint of "/line_items/".

    ```js
    DS.RESTAdapter.reopen({
      pathForType: function(type) {
        var decamelized = Ember.String.decamelize(type);
        return Ember.String.pluralize(decamelized);
      };
    });
    ```
  itemtype: method
  name: pathForType
  params:
  - name: type
    description: ''
    type: String
  return:
    description: path
    type: String
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 504
  description: |-
    Takes an ajax response, and returns a relevant error.

    Returning a `DS.InvalidError` from this method will cause the
    record to transition into the `invalid` state and make the
    `errors` object available on the record.

    ```javascript
    App.ApplicationAdapter = DS.RESTAdapter.extend({
      ajaxError: function(jqXHR) {
        var error = this._super(jqXHR);

        if (jqXHR && jqXHR.status === 422) {
          var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)["errors"];

          return new DS.InvalidError(jsonErrors);
        } else {
          return error;
        }
      }
    });
    ```

    Note: As a correctness optimization, the default implementation of
    the `ajaxError` method strips out the `then` method from jquery's
    ajax response (jqXHR). This is important because the jqXHR's
    `then` method fulfills the promise with itself resulting in a
    circular "thenable" chain which may cause problems for some
    promise libraries.
  itemtype: method
  name: ajaxError
  params:
  - name: jqXHR
    description: ''
    type: Object
  return:
    description: jqXHR
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 546
  description: |-
    Takes a URL, an HTTP method and a hash of data, and makes an
    HTTP request.

    When the server responds with a payload, Ember Data will call into `extractSingle`
    or `extractArray` (depending on whether the original query was for one record or
    many records).

    By default, `ajax` method has the following behavior:

    * It sets the response `dataType` to `"json"`
    * If the HTTP method is not `"GET"`, it sets the `Content-Type` to be
      `application/json; charset=utf-8`
    * If the HTTP method is not `"GET"`, it stringifies the data passed in. The
      data is the serialized record in the case of a save.
    * Registers success and failure handlers.
  itemtype: method
  name: ajax
  access: private
  tagname: ''
  params:
  - name: url
    description: ''
    type: String
  - name: type
    description: The request type GET, POST, PUT, DELETE etc.
    type: String
  - name: hash
    description: ''
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/adapters/rest_adapter.js"
  line: 588
  itemtype: method
  name: ajaxOptions
  access: private
  tagname: ''
  params:
  - name: url
    description: ''
    type: String
  - name: type
    description: The request type GET, POST, PUT, DELETE etc.
    type: String
  - name: hash
    description: ''
    type: Object
  return:
    description: hash
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/ext/date.js"
  line: 20
  itemtype: method
  name: parse
  params:
  - name: date
    description: ''
  class: Ember.Date
  module: ember-data
  namespace: Ember
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 27
  description: |-
    The primaryKey is used when serializing and deserializing
    data. Ember Data always uses the `id` property to store the id of
    the record. The external source may not always follow this
    convention. In these cases it is useful to override the
    primaryKey property to match the primaryKey of your external
    store.

    Example

    ```javascript
    App.ApplicationSerializer = DS.JSONSerializer.extend({
      primaryKey: '_id'
    });
    ```
  itemtype: property
  name: primaryKey
  type: "{String}"
  default: "'id'"
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 49
  description: |-
    Given a subclass of `DS.Model` and a JSON object this method will
    iterate through each attribute of the `DS.Model` and invoke the
    `DS.Transform#deserialize` method on the matching property of the
    JSON object.  This method is typically called after the
    serializer's `normalize` method.
  itemtype: method
  name: applyTransforms
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: data
    description: The data to transform
    type: Object
  return:
    description: data The transformed data object
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 71
  description: |-
    Normalizes a part of the JSON payload returned by
    the server. You should override this method, munge the hash
    and call super if you have generic normalization to do.

    It takes the type of the record that is being normalized
    (as a DS.Model class), the property where the hash was
    originally found, and the hash to normalize.

    You can use this method, for example, to normalize underscored keys to camelized
    or other general-purpose normalizations.

    Example

    ```javascript
    App.ApplicationSerializer = DS.JSONSerializer.extend({
      normalize: function(type, hash) {
        var fields = Ember.get(type, 'fields');
        fields.forEach(function(field) {
          var payloadField = Ember.String.underscore(field);
          if (field === payloadField) { return; }

          hash[field] = hash[payloadField];
          delete hash[payloadField];
        });
        return this._super.apply(this, arguments);
      }
    });
    ```
  itemtype: method
  name: normalize
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: hash
    description: ''
    type: Object
  return:
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 114
  description: |-
    Called when a record is saved in order to convert the
    record into JSON.

    By default, it creates a JSON object with a key for
    each attribute and belongsTo relationship.

    For example, consider this model:

    ```javascript
    App.Comment = DS.Model.extend({
      title: DS.attr(),
      body: DS.attr(),

      author: DS.belongsTo('user')
    });
    ```

    The default serialization would create a JSON object like:

    ```javascript
    {
      "title": "Rails is unagi",
      "body": "Rails? Omakase? O_O",
      "author": 12
    }
    ```

    By default, attributes are passed through as-is, unless
    you specified an attribute type (`DS.attr('date')`). If
    you specify a transform, the JavaScript value will be
    serialized when inserted into the JSON hash.

    By default, belongs-to relationships are converted into
    IDs when inserted into the JSON hash.

    ## IDs

    `serialize` takes an options hash with a single option:
    `includeId`. If this option is `true`, `serialize` will,
    by default include the ID in the JSON object it builds.

    The adapter passes in `includeId: true` when serializing
    a record for `createRecord`, but not for `updateRecord`.

    ## Customization

    Your server may expect a different JSON format than the
    built-in serialization format.

    In that case, you can implement `serialize` yourself and
    return a JSON hash of your choosing.

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      serialize: function(post, options) {
        var json = {
          POST_TTL: post.get('title'),
          POST_BDY: post.get('body'),
          POST_CMS: post.get('comments').mapProperty('id')
        }

        if (options.includeId) {
          json.POST_ID_ = post.get('id');
        }

        return json;
      }
    });
    ```

    ## Customizing an App-Wide Serializer

    If you want to define a serializer for your entire
    application, you'll probably want to use `eachAttribute`
    and `eachRelationship` on the record.

    ```javascript
    App.ApplicationSerializer = DS.JSONSerializer.extend({
      serialize: function(record, options) {
        var json = {};

        record.eachAttribute(function(name) {
          json[serverAttributeName(name)] = record.get(name);
        })

        record.eachRelationship(function(name, relationship) {
          if (relationship.kind === 'hasMany') {
            json[serverHasManyName(name)] = record.get(name).mapBy('id');
          }
        });

        if (options.includeId) {
          json.ID_ = record.get('id');
        }

        return json;
      }
    });

    function serverAttributeName(attribute) {
      return attribute.underscore().toUpperCase();
    }

    function serverHasManyName(name) {
      return serverAttributeName(name.singularize()) + "_IDS";
    }
    ```

    This serializer will generate JSON that looks like this:

    ```javascript
    {
      "TITLE": "Rails is omakase",
      "BODY": "Yep. Omakase.",
      "COMMENT_IDS": [ 1, 2, 3 ]
    }
    ```

    ## Tweaking the Default JSON

    If you just want to do some small tweaks on the default JSON,
    you can call super first and make the tweaks on the returned
    JSON.

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      serialize: function(record, options) {
        var json = this._super.apply(this, arguments);

        json.subject = json.title;
        delete json.title;

        return json;
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: record
    description: ''
    type: subclass of DS.Model
  - name: options
    description: ''
    type: Object
  return:
    description: json
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 283
  description: |-
    `serializeAttribute` can be used to customize how `DS.attr`
    properties are serialized

    For example if you wanted to ensure all you attributes were always
    serialized as properties on an `attributes` object you could
    write:

    ```javascript
    App.ApplicationSerializer = DS.JSONSerializer.extend({
      serializeAttribute: function(record, json, key, attributes) {
        json.attributes = json.attributes || {};
        this._super(record, json.attributes, key, attributes);
      }
    });
    ```
  itemtype: method
  name: serializeAttribute
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: key
    description: ''
    type: String
  - name: attribute
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 322
  description: |-
    `serializeBelongsTo` can be used to customize how `DS.belongsTo`
    properties are serialized.

    Example

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      serializeBelongsTo: function(record, json, relationship) {
        var key = relationship.key;

        var belongsTo = get(record, key);

        key = this.keyForRelationship ? this.keyForRelationship(key, "belongsTo") : key;

        json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.toJSON();
      }
    });
    ```
  itemtype: method
  name: serializeBelongsTo
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 365
  description: |-
    `serializeHasMany` can be used to customize how `DS.hasMany`
    properties are serialized.

    Example

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      serializeHasMany: function(record, json, relationship) {
        var key = relationship.key;
        if (key === 'comments') {
          return;
        } else {
          this._super.apply(this, arguments);
        }
      }
    });
    ```
  itemtype: method
  name: serializeHasMany
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 400
  description: |-
    You can use this method to customize how polymorphic objects are
    serialized. Objects are considered to be polymorphic if
    `{polymorphic: true}` is pass as the second argument to the
    `DS.belongsTo` function.

    Example

    ```javascript
    App.CommentSerializer = DS.JSONSerializer.extend({
      serializePolymorphicType: function(record, json, relationship) {
        var key = relationship.key,
            belongsTo = get(record, key);
        key = this.keyForAttribute ? this.keyForAttribute(key) : key;
        json[key + "_type"] = belongsTo.constructor.typeKey;
      }
    });
       ```
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 428
  description: |-
    The `extract` method is used to deserialize payload data from the
    server. By default the `JSONSerializer` does not push the records
    into the store. However records that subclass `JSONSerializer`
    such as the `RESTSerializer` may push records into the store as
    part of the extract call.

    This method delegates to a more specific extract method based on
    the `requestType`.

    Example

    ```javascript
    var get = Ember.get;
    socket.on('message', function(message) {
      var modelName = message.model;
      var data = message.data;
      var type = store.modelFor(modelName);
      var serializer = store.serializerFor(type.typeKey);
      var record = serializer.extract(store, type, data, get(data, 'id'), 'single');
      store.push(modelName, record);
    });
    ```
  itemtype: method
  name: extract
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: String or Number
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 467
  description: |-
    `extractFindAll` is a hook into the extract method used when a
    call is made to `DS.Store#findAll`. By default this method is an
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 479
  description: |-
    `extractFindQuery` is a hook into the extract method used when a
    call is made to `DS.Store#findQuery`. By default this method is an
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 491
  description: |-
    `extractFindMany` is a hook into the extract method used when a
    call is made to `DS.Store#findMany`. By default this method is
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 503
  description: |-
    `extractFindHasMany` is a hook into the extract method used when a
    call is made to `DS.Store#findHasMany`. By default this method is
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindHasMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 516
  description: |-
    `extractCreateRecord` is a hook into the extract method used when a
    call is made to `DS.Store#createRecord`. By default this method is
    alias for [extractSave](#method_extractSave).
  itemtype: method
  name: extractCreateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 528
  description: |-
    `extractUpdateRecord` is a hook into the extract method used when
    a call is made to `DS.Store#update`. By default this method is alias
    for [extractSave](#method_extractSave).
  itemtype: method
  name: extractUpdateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 540
  description: |-
    `extractDeleteRecord` is a hook into the extract method used when
    a call is made to `DS.Store#deleteRecord`. By default this method is
    alias for [extractSave](#method_extractSave).
  itemtype: method
  name: extractDeleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 553
  description: |-
    `extractFind` is a hook into the extract method used when
    a call is made to `DS.Store#find`. By default this method is
    alias for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractFind
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 565
  description: |-
    `extractFindBelongsTo` is a hook into the extract method used when
    a call is made to `DS.Store#findBelongsTo`. By default this method is
    alias for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractFindBelongsTo
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 577
  description: |-
    `extractSave` is a hook into the extract method used when a call
    is made to `DS.Model#save`. By default this method is alias
    for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractSave
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 590
  description: |-
    `extractSingle` is used to deserialize a single record returned
    from the adapter.

    Example

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      extractSingle: function(store, type, payload) {
        payload.comments = payload._embedded.comment;
        delete payload._embedded;

        return this._super(store, type, payload);
      },
    });
    ```
  itemtype: method
  name: extractSingle
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 617
  description: |-
    `extractArray` is used to deserialize an array of records
    returned from the adapter.

    Example

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      extractArray: function(store, type, payload) {
        return payload.map(function(json) {
          return this.extractSingle(json);
        }, this);
      }
    });
    ```
  itemtype: method
  name: extractArray
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 643
  description: |-
    `extractMeta` is used to deserialize any meta information in the
    adapter payload. By default Ember Data expects meta information to
    be located on the `meta` property of the payload object.

    Example

    ```javascript
    App.PostSerializer = DS.JSONSerializer.extend({
      extractMeta: function(store, type, payload) {
        if (payload && payload._pagination) {
          store.metaForType(type, payload._pagination);
          delete payload._pagination;
        }
      }
    });
    ```
  itemtype: method
  name: extractMeta
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 673
  description: |-
    `keyForAttribute` can be used to define rules for how to convert an
    attribute name in your model to a key in your JSON.

    Example

    ```javascript
    App.ApplicationSerializer = DS.RESTSerializer.extend({
      keyForAttribute: function(attr) {
        return Ember.String.underscore(attr).toUpperCase();
      }
    });
    ```
  itemtype: method
  name: keyForAttribute
  params:
  - name: key
    description: ''
    type: String
  return:
    description: normalized key
    type: String
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 693
  description: |-
    `keyForRelationship` can be used to define a custom key when
    serializing relationship properties. By default `JSONSerializer`
    does not provide an implementation of this method.

    Example

     ```javascript
     App.PostSerializer = DS.JSONSerializer.extend({
       keyForRelationship: function(key, relationship) {
          return 'rel_' + Ember.String.underscore(key);
       }
     });
     ```
  itemtype: method
  name: keyForRelationship
  params:
  - name: key
    description: ''
    type: String
  - name: relationship
    description: type
    type: String
  return:
    description: normalized key
    type: String
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/json_serializer.js"
  line: 716
  itemtype: method
  name: transformFor
  access: private
  tagname: ''
  params:
  - name: attributeType
    description: ''
    type: String
  - name: skipAssertion
    description: ''
    type: Boolean
  return:
    description: transform
    type: DS.Transform
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 56
  description: |-
    If you want to do normalizations specific to some part of the payload, you
    can specify those under `normalizeHash`.

    For example, given the following json where the the `IDs` under
    `"comments"` are provided as `_id` instead of `id`.

    ```javascript
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2 ]
      },
      "comments": [{
        "_id": 1,
        "body": "FIRST"
      }, {
        "_id": 2,
        "body": "Rails is unagi"
      }]
    }
    ```

    You use `normalizeHash` to normalize just the comments:

    ```javascript
    App.PostSerializer = DS.RESTSerializer.extend({
      normalizeHash: {
        comments: function(hash) {
          hash.id = hash._id;
          delete hash._id;
          return hash;
        }
      }
    });
    ```

    The key under `normalizeHash` is usually just the original key
    that was in the original payload. However, key names will be
    impacted by any modifications done in the `normalizePayload`
    method. The `DS.RESTSerializer`'s default implementation makes no
    changes to the payload keys.
  itemtype: property
  name: normalizeHash
  type: "{Object}"
  default: undefined
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 105
  description: |-
    Normalizes a part of the JSON payload returned by
    the server. You should override this method, munge the hash
    and call super if you have generic normalization to do.

    It takes the type of the record that is being normalized
    (as a DS.Model class), the property where the hash was
    originally found, and the hash to normalize.

    For example, if you have a payload that looks like this:

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2 ]
      },
      "comments": [{
        "id": 1,
        "body": "FIRST"
      }, {
        "id": 2,
        "body": "Rails is unagi"
      }]
    }
    ```

    The `normalize` method will be called three times:

    * With `App.Post`, `"posts"` and `{ id: 1, title: "Rails is omakase", ... }`
    * With `App.Comment`, `"comments"` and `{ id: 1, body: "FIRST" }`
    * With `App.Comment`, `"comments"` and `{ id: 2, body: "Rails is unagi" }`

    You can use this method, for example, to normalize underscored keys to camelized
    or other general-purpose normalizations.

    If you want to do normalizations specific to some part of the payload, you
    can specify those under `normalizeHash`.

    For example, if the `IDs` under `"comments"` are provided as `_id` instead of
    `id`, you can specify how to normalize just the comments:

    ```js
    App.PostSerializer = DS.RESTSerializer.extend({
      normalizeHash: {
        comments: function(hash) {
          hash.id = hash._id;
          delete hash._id;
          return hash;
        }
      }
    });
    ```

    The key under `normalizeHash` is just the original key that was in the original
    payload.
  itemtype: method
  name: normalize
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: hash
    description: ''
    type: Object
  - name: prop
    description: ''
    type: String
  return:
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 183
  description: |-
    You can use this method to normalize all payloads, regardless of whether they
    represent single records or an array.

    For example, you might want to remove some extraneous data from the payload:

    ```js
    App.ApplicationSerializer = DS.RESTSerializer.extend({
      normalizePayload: function(type, payload) {
        delete payload.version;
        delete payload.status;
        return payload;
      }
    });
    ```
  itemtype: method
  name: normalizePayload
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: hash
    description: ''
    type: Object
  return:
    description: the normalized payload
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 208
  itemtype: method
  name: normalizeId
  access: private
  tagname: ''
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 221
  itemtype: method
  name: normalizeUsingDeclaredMapping
  access: private
  tagname: ''
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 242
  itemtype: method
  name: normalizeAttributes
  access: private
  tagname: ''
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 260
  itemtype: method
  name: normalizeRelationships
  access: private
  tagname: ''
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 278
  description: |-
    Called when the server has returned a payload representing
    a single record, such as in response to a `find` or `save`.

    It is your opportunity to clean up the server's response into the normalized
    form expected by Ember Data.

    If you want, you can just restructure the top-level of your payload, and
    do more fine-grained normalization in the `normalize` method.

    For example, if you have a payload like this in response to a request for
    post 1:

    ```js
    {
      "id": 1,
      "title": "Rails is omakase",

      "_embedded": {
        "comment": [{
          "_id": 1,
          "comment_title": "FIRST"
        }, {
          "_id": 2,
          "comment_title": "Rails is unagi"
        }]
      }
    }
    ```

    You could implement a serializer that looks like this to get your payload
    into shape:

    ```js
    App.PostSerializer = DS.RESTSerializer.extend({
      // First, restructure the top-level so it's organized by type
      extractSingle: function(store, type, payload, id, requestType) {
        var comments = payload._embedded.comment;
        delete payload._embedded;

        payload = { comments: comments, post: payload };
        return this._super(store, type, payload, id, requestType);
      },

      normalizeHash: {
        // Next, normalize individual comments, which (after `extract`)
        // are now located under `comments`
        comments: function(hash) {
          hash.id = hash._id;
          hash.title = hash.comment_title;
          delete hash._id;
          delete hash.comment_title;
          return hash;
        }
      }
    })
    ```

    When you call super from your own implementation of `extractSingle`, the
    built-in implementation will find the primary record in your normalized
    payload and push the remaining records into the store.

    The primary record is the single hash found under `post` or the first
    element of the `posts` array.

    The primary record has special meaning when the record is being created
    for the first time or updated (`createRecord` or `updateRecord`). In
    particular, it will update the properties of the record that was saved.
  itemtype: method
  name: extractSingle
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: String
  - name: requestType
    description: ''
    type: "'find'|'createRecord'|'updateRecord'|'deleteRecord'"
  return:
    description: the primary response to the original request
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 400
  description: |-
    Called when the server has returned a payload representing
    multiple records, such as in response to a `findAll` or `findQuery`.

    It is your opportunity to clean up the server's response into the normalized
    form expected by Ember Data.

    If you want, you can just restructure the top-level of your payload, and
    do more fine-grained normalization in the `normalize` method.

    For example, if you have a payload like this in response to a request for
    all posts:

    ```js
    {
      "_embedded": {
        "post": [{
          "id": 1,
          "title": "Rails is omakase"
        }, {
          "id": 2,
          "title": "The Parley Letter"
        }],
        "comment": [{
          "_id": 1,
          "comment_title": "Rails is unagi"
          "post_id": 1
        }, {
          "_id": 2,
          "comment_title": "Don't tread on me",
          "post_id": 2
        }]
      }
    }
    ```

    You could implement a serializer that looks like this to get your payload
    into shape:

    ```js
    App.PostSerializer = DS.RESTSerializer.extend({
      // First, restructure the top-level so it's organized by type
      // and the comments are listed under a post's `comments` key.
      extractArray: function(store, type, payload, id, requestType) {
        var posts = payload._embedded.post;
        var comments = [];
        var postCache = {};

        posts.forEach(function(post) {
          post.comments = [];
          postCache[post.id] = post;
        });

        payload._embedded.comment.forEach(function(comment) {
          comments.push(comment);
          postCache[comment.post_id].comments.push(comment);
          delete comment.post_id;
        }

        payload = { comments: comments, posts: payload };

        return this._super(store, type, payload, id, requestType);
      },

      normalizeHash: {
        // Next, normalize individual comments, which (after `extract`)
        // are now located under `comments`
        comments: function(hash) {
          hash.id = hash._id;
          hash.title = hash.comment_title;
          delete hash._id;
          delete hash.comment_title;
          return hash;
        }
      }
    })
    ```

    When you call super from your own implementation of `extractArray`, the
    built-in implementation will find the primary array in your normalized
    payload and push the remaining records into the store.

    The primary array is the array found under `posts`.

    The primary record has special meaning when responding to `findQuery`
    or `findHasMany`. In particular, the primary array will become the
    list of records in the record array that kicked off the request.

    If your primary array contains secondary (embedded) records of the same type,
    you cannot place these into the primary array `posts`. Instead, place the
    secondary items into an underscore prefixed property `_posts`, which will
    push these items into the store and will not affect the resulting query.
  itemtype: method
  name: extractArray
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: payload
    description: ''
    type: Object
  - name: requestType
    description: ''
    type: "'findAll'|'findMany'|'findHasMany'|'findQuery'"
  return:
    description: |-
      The primary array that was returned in response
        to the original query.
    type: Array
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 536
  description: |-
    This method allows you to push a payload containing top-level
    collections of records organized per type.

    ```js
    {
      "posts": [{
        "id": "1",
        "title": "Rails is omakase",
        "author", "1",
        "comments": [ "1" ]
      }],
      "comments": [{
        "id": "1",
        "body": "FIRST"
      }],
      "users": [{
        "id": "1",
        "name": "@d2h"
      }]
    }
    ```

    It will first normalize the payload, so you can use this to push
    in data streaming in from your server structured the same way
    that fetches and saves are structured.
  itemtype: method
  name: pushPayload
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: payload
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 583
  description: |-
    You can use this method to normalize the JSON root keys returned
    into the model type expected by your store.

    For example, your server may return underscored root keys rather than
    the expected camelcased versions.

    ```js
    App.ApplicationSerializer = DS.RESTSerializer.extend({
      typeForRoot: function(root) {
        var camelized = Ember.String.camelize(root);
        return Ember.String.singularize(camelized);
      }
    });
    ```
  itemtype: method
  name: typeForRoot
  params:
  - name: root
    description: ''
    type: String
  return:
    description: the model's typeKey
    type: String
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 609
  description: |-
    Called when a record is saved in order to convert the
    record into JSON.

    By default, it creates a JSON object with a key for
    each attribute and belongsTo relationship.

    For example, consider this model:

    ```js
    App.Comment = DS.Model.extend({
      title: DS.attr(),
      body: DS.attr(),

      author: DS.belongsTo('user')
    });
    ```

    The default serialization would create a JSON object like:

    ```js
    {
      "title": "Rails is unagi",
      "body": "Rails? Omakase? O_O",
      "author": 12
    }
    ```

    By default, attributes are passed through as-is, unless
    you specified an attribute type (`DS.attr('date')`). If
    you specify a transform, the JavaScript value will be
    serialized when inserted into the JSON hash.

    By default, belongs-to relationships are converted into
    IDs when inserted into the JSON hash.

    ## IDs

    `serialize` takes an options hash with a single option:
    `includeId`. If this option is `true`, `serialize` will,
    by default include the ID in the JSON object it builds.

    The adapter passes in `includeId: true` when serializing
    a record for `createRecord`, but not for `updateRecord`.

    ## Customization

    Your server may expect a different JSON format than the
    built-in serialization format.

    In that case, you can implement `serialize` yourself and
    return a JSON hash of your choosing.

    ```js
    App.PostSerializer = DS.RESTSerializer.extend({
      serialize: function(post, options) {
        var json = {
          POST_TTL: post.get('title'),
          POST_BDY: post.get('body'),
          POST_CMS: post.get('comments').mapProperty('id')
        }

        if (options.includeId) {
          json.POST_ID_ = post.get('id');
        }

        return json;
      }
    });
    ```

    ## Customizing an App-Wide Serializer

    If you want to define a serializer for your entire
    application, you'll probably want to use `eachAttribute`
    and `eachRelationship` on the record.

    ```js
    App.ApplicationSerializer = DS.RESTSerializer.extend({
      serialize: function(record, options) {
        var json = {};

        record.eachAttribute(function(name) {
          json[serverAttributeName(name)] = record.get(name);
        })

        record.eachRelationship(function(name, relationship) {
          if (relationship.kind === 'hasMany') {
            json[serverHasManyName(name)] = record.get(name).mapBy('id');
          }
        });

        if (options.includeId) {
          json.ID_ = record.get('id');
        }

        return json;
      }
    });

    function serverAttributeName(attribute) {
      return attribute.underscore().toUpperCase();
    }

    function serverHasManyName(name) {
      return serverAttributeName(name.singularize()) + "_IDS";
    }
    ```

    This serializer will generate JSON that looks like this:

    ```js
    {
      "TITLE": "Rails is omakase",
      "BODY": "Yep. Omakase.",
      "COMMENT_IDS": [ 1, 2, 3 ]
    }
    ```

    ## Tweaking the Default JSON

    If you just want to do some small tweaks on the default JSON,
    you can call super first and make the tweaks on the returned
    JSON.

    ```js
    App.PostSerializer = DS.RESTSerializer.extend({
      serialize: function(record, options) {
        var json = this._super(record, options);

        json.subject = json.title;
        delete json.title;

        return json;
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: record
    description: ''
  - name: options
    description: ''
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 755
  description: |-
    You can use this method to customize the root keys serialized into the JSON.
    By default the REST Serializer sends camelized root keys.
    For example, your server may expect underscored root objects.

    ```js
    App.ApplicationSerializer = DS.RESTSerializer.extend({
      serializeIntoHash: function(data, type, record, options) {
        var root = Ember.String.decamelize(type.typeKey);
        data[root] = this.serialize(record, options);
      }
    });
    ```
  itemtype: method
  name: serializeIntoHash
  params:
  - name: hash
    description: ''
    type: Object
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  - name: options
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/serializers/rest_serializer.js"
  line: 780
  description: |-
    You can use this method to customize how polymorphic objects are serialized.
    By default the JSON Serializer creates the key by appending `Type` to
    the attribute and value from the model's camelcased model name.
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/changes/attribute_change.js"
  line: 38
  description: |-
    If the AttributeChange is destroyed (either by being rolled back
    or being committed), remove it from the list of pending changes
    on the record.
  itemtype: method
  name: destroy
  class: DS.AttributeChange
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/changes/relationship_change.js"
  line: 306
  description: Get the name of the relationship on the belongsTo side.
  itemtype: method
  name: getFirstRecordName
  return:
    description: ''
    type: String
  class: DS.RelationshipChange
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/changes/relationship_change.js"
  line: 317
  itemtype: method
  name: destroy
  access: private
  tagname: ''
  class: DS.RelationshipChange
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/changes/relationship_change.js"
  line: 334
  itemtype: method
  name: getFirstRecord
  access: private
  tagname: ''
  class: DS.RelationshipChange
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/debug/debug_info.js"
  line: 5
  description: |-
    Provides info about the model for debugging purposes
    by grouping the properties into more semantic groups.

    Meant to be used by debugging tools such as the Chrome Ember Extension.

    - Groups all attributes in "Attributes" group.
    - Groups all belongsTo relationships in "Belongs To" group.
    - Groups all hasMany relationships in "Has Many" group.
    - Groups all flags in "Flags" group.
    - Flags relationship CPs as expensive properties.
  itemtype: method
  name: _debugInfo
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/attributes.js"
  line: 14
  description: |-
    A map whose keys are the attributes of the model (properties
    described by DS.attr) and whose values are the meta object for the
    property.

    Example

    ```javascript

    App.Person = DS.Model.extend({
      firstName: attr('string'),
      lastName: attr('string'),
      birthday: attr('date')
    });

    var attributes = Ember.get(App.Person, 'attributes')

    attributes.forEach(function(name, meta) {
      console.log(name, meta);
    });

    // prints:
    // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
    // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
    // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
    ```
  itemtype: property
  name: attributes
  static: 1
  type: "{Ember.Map}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/attributes.js"
  line: 61
  description: |-
    A map whose keys are the attributes of the model (properties
    described by DS.attr) and whose values are type of transformation
    applied to each attribute. This map does not include any
    attributes that do not have an transformation type.

    Example

    ```javascript
    App.Person = DS.Model.extend({
      firstName: attr(),
      lastName: attr('string'),
      birthday: attr('date')
    });

    var transformedAttributes = Ember.get(App.Person, 'transformedAttributes')

    transformedAttributes.forEach(function(field, type) {
      console.log(field, type);
    });

    // prints:
    // lastName string
    // birthday date
    ```
  itemtype: property
  name: transformedAttributes
  static: 1
  type: "{Ember.Map}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/attributes.js"
  line: 104
  description: |-
    Iterates through the attributes of the model, calling the passed function on each
    attribute.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(name, meta);
    ```

    - `name` the name of the current property in the iteration
    - `meta` the meta object for the attribute property in the iteration

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context.

    Example

    ```javascript
    App.Person = DS.Model.extend({
      firstName: attr('string'),
      lastName: attr('string'),
      birthday: attr('date')
    });

    App.Person.eachAttribute(function(name, meta) {
      console.log(name, meta);
    });

    // prints:
    // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
    // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
    // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
       ```
  itemtype: method
  name: eachAttribute
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/attributes.js"
  line: 151
  description: |-
    Iterates through the transformedAttributes of the model, calling
    the passed function on each attribute. Note the callback will not be
    called for any attributes that do not have an transformation type.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(name, type);
    ```

    - `name` the name of the current property in the iteration
    - `type` a string containing the name of the type of transformed
      applied to the attribute

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context.

    Example

    ```javascript
    App.Person = DS.Model.extend({
      firstName: attr(),
      lastName: attr('string'),
      birthday: attr('date')
    });

    App.Person.eachTransformedAttribute(function(name, type) {
      console.log(name, type);
    });

    // prints:
    // lastName string
    // birthday date
       ```
  itemtype: method
  name: eachTransformedAttribute
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: target
    description: The target object to use
    type: Object
    optional: true
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/attributes.js"
  line: 231
  description: |-
    `DS.attr` defines an attribute on a [DS.Model](DS.Model.html).
    By default, attributes are passed through as-is, however you can specify an
    optional type to have the value automatically transformed.
    Ember Data ships with four basic transform types: `string`, `number`,
    `boolean` and `date`. You can define your own transforms by subclassing
    [DS.Transform](DS.Transform.html).

    `DS.attr` takes an optional hash as a second parameter, currently
    supported options are:

    - `defaultValue`: Pass a string or a function to be called to set the attribute
                      to a default value if none is supplied.

    Example

    ```javascript
    var attr = DS.attr;

    App.User = DS.Model.extend({
      username: attr('string'),
      email: attr('string'),
      verified: attr('boolean', {defaultValue: false})
    });
    ```
  itemtype: method
  name: attr
  params:
  - name: type
    description: the attribute type
    type: String
  - name: options
    description: a hash of options
    type: Object
  return:
    description: ''
    type: Attribute
  class: DS
  module: ember-data
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 17
  description: Register with target handler
  itemtype: method
  name: registerHandlers
  params:
  - name: target
    description: ''
    type: Object
  - name: becameInvalid
    description: ''
    type: Function
  - name: becameValid
    description: ''
    type: Function
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 30
  itemtype: property
  name: errorsByAttributeName
  type: "{Ember.MapWithDefault}"
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 57
  description: Returns errors for a given attribute
  itemtype: method
  name: errorsFor
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: ''
    type: Array
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 68
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 72
  itemtype: property
  name: content
  type: "{Array}"
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 81
  itemtype: method
  name: unknownProperty
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 91
  itemtype: method
  name: nextObject
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 99
  description: Total number of errors.
  itemtype: property
  name: length
  type: "{Number}"
  readonly: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 108
  itemtype: property
  name: isEmpty
  type: "{Boolean}"
  readonly: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 115
  description: |-
    Adds error messages to a given attribute and sends
    `becameInvalid` event to the record.
  itemtype: method
  name: add
  params:
  - name: attribute
    description: ''
    type: String
  - name: messages
    description: ''
    type: Array|String
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 137
  itemtype: method
  name: _findOrCreateMessages
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 152
  description: |-
    Removes all error messages from the given attribute and sends
    `becameValid` event to the record if there no more errors left.
  itemtype: method
  name: remove
  params:
  - name: attribute
    description: ''
    type: String
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 173
  description: |-
    Removes all error messages and sends `becameValid` event
    to the record.
  itemtype: method
  name: clear
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/errors.js"
  line: 188
  description: Checks if there is error messages for the given attribute.
  itemtype: method
  name: has
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: true if there some errors on given attribute
    type: Boolean
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 25
  description: |-
    If this property is `true` the record is in the `empty`
    state. Empty is the first state all records enter after they have
    been created. Most records created by the store will quickly
    transition to the `loading` state if data needs to be fetched from
    the server or the `created` state if the record is created on the
    client. A record can also enter the empty state if the adapter is
    unable to locate the record.
  itemtype: property
  name: isEmpty
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 39
  description: |-
    If this property is `true` the record is in the `loading` state. A
    record enters this state when the store asks the adapter for its
    data. It remains in this state until the adapter provides the
    requested data.
  itemtype: property
  name: isLoading
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 50
  description: |-
    If this property is `true` the record is in the `loaded` state. A
    record enters this state when its data is populated. Most of a
    record's lifecycle is spent inside substates of the `loaded`
    state.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('isLoaded'); // true

    store.find('model', 1).then(function(model) {
      model.get('isLoaded'); // true
    });
    ```
  itemtype: property
  name: isLoaded
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 72
  description: |-
    If this property is `true` the record is in the `dirty` state. The
    record has local changes that have not yet been saved by the
    adapter. This includes records that have been created (but not yet
    saved) or deleted.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('isDirty'); // true

    store.find('model', 1).then(function(model) {
      model.get('isDirty'); // false
      model.set('foo', 'some value');
      model.set('isDirty'); // true
    });
    ```
  itemtype: property
  name: isDirty
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 96
  description: |-
    If this property is `true` the record is in the `saving` state. A
    record enters the saving state when `save` is called, but the
    adapter has not yet acknowledged that the changes have been
    persisted to the backend.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('isSaving'); // false
    var promise = record.save();
    record.get('isSaving'); // true
    promise.then(function() {
      record.get('isSaving'); // false
    });
    ```
  itemtype: property
  name: isSaving
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 119
  description: |-
    If this property is `true` the record is in the `deleted` state
    and has been marked for deletion. When `isDeleted` is true and
    `isDirty` is true, the record is deleted locally but the deletion
    was not yet persisted. When `isSaving` is true, the change is
    in-flight. When both `isDirty` and `isSaving` are false, the
    change has persisted.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('isDeleted'); // false
    record.deleteRecord();
    record.get('isDeleted'); // true
    ```
  itemtype: property
  name: isDeleted
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 141
  description: |-
    If this property is `true` the record is in the `new` state. A
    record will be in the `new` state when it has been created on the
    client and the adapter has not yet report that it was successfully
    saved.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('isNew'); // true

    record.save().then(function(model) {
      model.get('isNew'); // false
    });
    ```
  itemtype: property
  name: isNew
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 163
  description: |-
    If this property is `true` the record is in the `valid` state. A
    record will be in the `valid` state when no client-side
    validations have failed and the adapter did not report any
    server-side validation failures.
  itemtype: property
  name: isValid
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 174
  description: |-
    If the record is in the dirty state this property will report what
    kind of change has caused it to move into the dirty
    state. Possible values are:

    - `created` The record has been created by the client and not yet saved to the adapter.
    - `updated` The record has been updated by the client and not yet saved to the adapter.
    - `deleted` The record has been deleted by the client and not yet saved to the adapter.

    Example

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('dirtyType'); // 'created'
    ```
  itemtype: property
  name: dirtyType
  type: "{String}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 196
  description: |-
    If `true` the adapter reported that it was unable to save local
    changes to the backend. This may also result in the record having
    its `isValid` property become false if the adapter reported that
    server-side validations failed.

    Example

    ```javascript
    record.get('isError'); // false
    record.set('foo', 'invalid value');
    record.save().then(null, function() {
      record.get('isError'); // true
    });
    ```
  itemtype: property
  name: isError
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 217
  description: |-
    If `true` the store is attempting to reload the record form the adapter.

    Example

    ```javascript
    record.get('isReloading'); // false
    record.reload();
    record.get('isReloading'); // true
    ```
  itemtype: property
  name: isReloading
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 234
  description: |-
    The `clientId` property is a transient numerical identifier
    generated at runtime by the data store. It is important
    primarily because newly created objects may not yet have an
    externally generated id.
  itemtype: property
  name: clientId
  access: private
  tagname: ''
  type: "{Number|String}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 245
  description: |-
    All ember models have an id property. This is an identifier
    managed by an external source. These are always coerced to be
    strings before being used internally. Note when declaring the
    attributes for a model it is an error to declare an id
    attribute.

    ```javascript
    var record = store.createRecord(App.Model);
    record.get('id'); // null

    store.find('model', 1).then(function(model) {
      model.get('id'); // '1'
    });
    ```
  itemtype: property
  name: id
  type: "{String}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 266
  itemtype: property
  name: currentState
  access: private
  tagname: ''
  type: "{Object}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 272
  description: |-
    When the record is in the `invalid` state this object will contain
    any errors returned by the adapter. When present the errors hash
    typically contains keys corresponding to the invalid property names
    and values which are an array of error messages.

    ```javascript
    record.get('errors.length'); // 0
    record.set('foo', 'invalid value');
    record.save().then(null, function() {
      record.get('errors').get('foo'); // ['foo should be a number.']
    });
    ```
  itemtype: property
  name: errors
  type: "{Object}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 291
  description: |-
    Create a JSON representation of the record, using the serialization
    strategy of the store's adapter.

       `serialize` takes an optional hash as a parameter, currently
    supported options are:

       - `includeId`: `true` if the record's ID should be included in the
      JSON representation.
  itemtype: method
  name: serialize
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an object whose values are primitive JSON values only
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 310
  description: |-
    Use [DS.JSONSerializer](DS.JSONSerializer.html) to
    get the JSON representation of a record.

    `toJSON` takes an optional hash as a parameter, currently
    supported options are:

    - `includeId`: `true` if the record's ID should be included in the
      JSON representation.
  itemtype: method
  name: toJSON
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: A JSON representation of the object.
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 330
  description: Fired when the record is loaded from the server.
  itemtype: event
  name: didLoad
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 337
  description: Fired when the record is updated.
  itemtype: event
  name: didUpdate
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 344
  description: Fired when the record is created.
  itemtype: event
  name: didCreate
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 351
  description: Fired when the record is deleted.
  itemtype: event
  name: didDelete
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 358
  description: Fired when the record becomes invalid.
  itemtype: event
  name: becameInvalid
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 365
  description: Fired when the record enters the error state.
  itemtype: event
  name: becameError
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 372
  itemtype: property
  name: data
  access: private
  tagname: ''
  type: "{Object}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 406
  itemtype: method
  name: send
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 422
  itemtype: method
  name: transitionTo
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 481
  itemtype: method
  name: loadingData
  access: private
  tagname: ''
  params:
  - name: promise
    description: ''
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 490
  itemtype: method
  name: loadedData
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 498
  itemtype: method
  name: notFound
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 506
  itemtype: method
  name: pushedData
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 514
  description: |-
    Marks the record as deleted but does not save it. You must call
    `save` afterwards if you want to persist it. You might use this
    method if you want to allow the user to still `rollback()` a
    delete after it was made.

    Example

    ```javascript
    App.ModelDeleteRoute = Ember.Route.extend({
      actions: {
        softDelete: function() {
          this.get('model').deleteRecord();
        },
        confirm: function() {
          this.get('model').save();
        },
        undo: function() {
          this.get('model').rollback();
        }
      }
    });
    ```
  itemtype: method
  name: deleteRecord
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 544
  description: |-
    Same as `deleteRecord`, but saves the record immediately.

    Example

    ```javascript
    App.ModelDeleteRoute = Ember.Route.extend({
      actions: {
        delete: function() {
          var controller = this.controller;
          this.get('model').destroyRecord().then(function() {
            controller.transitionToRoute('model.index');
          });
        }
      }
    });
    ```
  itemtype: method
  name: destroyRecord
  return:
    description: |-
      a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 571
  itemtype: method
  name: unloadRecord
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 581
  itemtype: method
  name: clearRelationships
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 596
  itemtype: method
  name: updateRecordArrays
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 605
  description: |-
    Returns an object, whose keys are changed properties, and value is
    an [oldProp, newProp] array.

    Example

    ```javascript
    App.Mascot = DS.Model.extend({
      name: attr('string')
    });

    var person = store.createRecord('person');
    person.changedAttributes(); // {}
    person.set('name', 'Tomster');
    person.changedAttributes(); // {name: [undefined, 'Tomster']}
    ```
  itemtype: method
  name: changedAttributes
  return:
    description: |-
      an object, whose keys are changed properties,
        and value is an [oldProp, newProp] array.
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 639
  itemtype: method
  name: adapterWillCommit
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 647
  description: |-
    If the adapter did not return a hash in response to a commit,
    merge the changed attributes and relationships into the existing
    saved data.
  itemtype: method
  name: adapterDidCommit
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 675
  itemtype: method
  name: adapterDidDirty
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 711
  itemtype: method
  name: updateRecordArraysLater
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 723
  itemtype: method
  name: setupData
  access: private
  tagname: ''
  params:
  - name: data
    description: ''
    type: Object
  - name: partial
    description: |-
      the data should be merged into
        the existing data, not replace it.
    type: Boolean
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 764
  itemtype: method
  name: updateHasMany
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  - name: records
    description: ''
    type: Array
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 775
  itemtype: method
  name: updateBelongsTo
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  - name: record
    description: ''
    type: DS.Model
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 785
  description: |-
    If the model `isDirty` this function will discard any unsaved
    changes

    Example

    ```javascript
    record.get('name'); // 'Untitled Document'
    record.set('name', 'Doc 1');
    record.get('name'); // 'Doc 1'
    record.rollback();
    record.get('name'); // 'Untitled Document'
    ```
  itemtype: method
  name: rollback
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 824
  description: |-
    The goal of this method is to temporarily disable specific observers
    that take action in response to application changes.

    This allows the system to make changes (such as materialization and
    rollback) that should not trigger secondary behavior (such as setting an
    inverse relationship or marking records as dirty).

    The specific implementation will likely change as Ember proper provides
    better infrastructure for suspending groups of observers, and if Array
    observation becomes more unified with regular observers.
  itemtype: method
  name: suspendRelationshipObservers
  access: private
  tagname: ''
  params:
  - name: callback
    description: ''
  - name: binding
    description: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 857
  description: |-
    Save the record and persist any changes to the record to an
    extenal source via the adapter.

    Example

    ```javascript
    record.set('name', 'Tomster');
    record.save().then(function(){
      // Success callback
    }, function() {
      // Error callback
    });
    ```
  itemtype: method
  name: save
  return:
    description: |-
      a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 886
  description: |-
    Reload the record from the adapter.

    This will only work if the record has already finished loading
    and has not yet been modified (`isLoaded` but not `isDirty`,
    or `isSaving`).

    Example

    ```javascript
    App.ModelViewRoute = Ember.Route.extend({
      actions: {
        reload: function() {
          this.get('model').reload();
        }
      }
    });
    ```
  itemtype: method
  name: reload
  return:
    description: |-
      a promise that will be resolved with the record when the
      adapter returns successfully or rejected if the adapter returns
      with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 948
  itemtype: method
  name: adapterDidInvalidate
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 964
  itemtype: method
  name: adapterDidError
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 973
  description: |-
    Override the default event firing from Ember.Evented to
    also call methods with the given name.
  itemtype: method
  name: trigger
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 1002
  description: |-
    Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model
    instances from within the store, but if end users accidentally call `create()`
    (instead of `createRecord()`), we can raise an error.
  itemtype: method
  name: _create
  access: private
  tagname: ''
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/model/model.js"
  line: 1013
  description: |-
    Override the class' `create()` method to raise an error. This
    prevents end users from inadvertently calling `create()` instead
    of `createRecord()`. The store is still able to create instances
    by calling the `_create()` method. To create an instance of a
    `DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).
  itemtype: method
  name: create
  access: private
  tagname: ''
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js"
  line: 27
  itemtype: method
  name: load
  access: private
  tagname: ''
  params:
  - name: data
    description: ''
    type: Array
  class: DS.AdapterPopulatedRecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/filtered_record_array.js"
  line: 20
  description: |-
    The filterFunction is a function used to test records from the store to
    determine if they should be part of the record array.

    Example

    ```javascript
    var allPeople = store.all('person');
    allPeople.mapBy('name'); // ["Tom Dale", "Yehuda Katz", "Trek Glowacki"]

    var people = store.filter('person', function(person) {
      if (person.get('name').match(/Katz$/)) { return true; }
    });
    people.mapBy('name'); // ["Yehuda Katz"]

    var notKatzFilter = function(person) {
      return !person.get('name').match(/Katz$/);
    };
    people.set('filterFunction', notKatzFilter);
    people.mapBy('name'); // ["Tom Dale", "Trek Glowacki"]
    ```
  itemtype: method
  name: filterFunction
  params:
  - name: record
    description: ''
    type: DS.Model
  return:
    description: "`true` if the record should be in the array"
    type: Boolean
  class: DS.FilteredRecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/filtered_record_array.js"
  line: 54
  itemtype: method
  name: updateFilter
  access: private
  tagname: ''
  class: DS.FilteredRecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 52
  description: The property name of the relationship
  itemtype: property
  name: name
  type: String
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 60
  description: The record to which this relationship belongs.
  itemtype: property
  name: owner
  type: DS.Model
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 68
  description: "`true` if the relationship is polymorphic, `false` otherwise."
  itemtype: property
  name: isPolymorphic
  type: Boolean
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 80
  description: |-
    Used for async `hasMany` arrays
    to keep track of when they will resolve.
  itemtype: property
  name: promise
  type: Ember.RSVP.Promise
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 89
  itemtype: method
  name: loadingRecordsCount
  params:
  - name: count
    description: ''
    type: Number
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 98
  itemtype: method
  name: loadedRecord
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 110
  itemtype: method
  name: fetch
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/many_array.js"
  line: 209
  description: Create a child record within the owner
  itemtype: method
  name: createRecord
  access: private
  tagname: ''
  params:
  - name: hash
    description: ''
    type: Object
  return:
    description: record
    type: DS.Model
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 21
  description: The model type contained by this record array.
  itemtype: property
  name: type
  type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 29
  description: |-
    The array of client ids backing the record array. When a
    record is requested from the record array, the record
    for the client id at the same index is materialized, if
    necessary, by the store.
  itemtype: property
  name: content
  access: private
  tagname: ''
  type: Ember.Array
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 41
  description: |-
    The flag to signal a `RecordArray` is currently loading data.

    Example

    ```javascript
    var people = store.all(App.Person);
    people.get('isLoaded'); // true
    ```
  itemtype: property
  name: isLoaded
  type: Boolean
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 55
  description: |-
    The flag to signal a `RecordArray` is currently loading data.

    Example

    ```javascript
    var people = store.all(App.Person);
    people.get('isUpdating'); // false
    people.update();
    people.get('isUpdating'); // true
    ```
  itemtype: property
  name: isUpdating
  type: Boolean
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 72
  description: The store that created this record array.
  itemtype: property
  name: store
  access: private
  tagname: ''
  type: DS.Store
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 81
  description: Retrieves an object from the content by index.
  itemtype: method
  name: objectAtContent
  access: private
  tagname: ''
  params:
  - name: index
    description: ''
    type: Number
  return:
    description: record
    type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 95
  description: |-
    Used to get the latest version of all of the records in this array
    from the adapter.

    Example

    ```javascript
    var people = store.all(App.Person);
    people.get('isUpdating'); // false
    people.update();
    people.get('isUpdating'); // true
    ```
  itemtype: method
  name: update
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 119
  description: Adds a record to the `RecordArray`.
  itemtype: method
  name: addRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 130
  description: Removes a record to the `RecordArray`.
  itemtype: method
  name: removeRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_arrays/record_array.js"
  line: 141
  description: |-
    Saves all of the records in the `RecordArray`.

    Example

    ```javascript
    var messages = store.all(App.Message);
    messages.forEach(function(message) {
      message.set('hasBeenSeen', true);
    });
    messages.save();
    ```
  itemtype: method
  name: save
  return:
    description: promise
    type: DS.PromiseArray
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/belongs_to.js"
  line: 35
  description: |-
    `DS.belongsTo` is used to define One-To-One and One-To-Many
    relationships on a [DS.Model](DS.Model.html).


    `DS.belongsTo` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a
      related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)

    #### One-To-One
    To declare a one-to-one relationship between two models, use
    `DS.belongsTo`:

    ```javascript
    App.User = DS.Model.extend({
      profile: DS.belongsTo('profile')
    });

    App.Profile = DS.Model.extend({
      user: DS.belongsTo('user')
    });
    ```

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:

    ```javascript
    App.Post = DS.Model.extend({
      comments: DS.hasMany('comment')
    });

    App.Comment = DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```
  itemtype: method
  name: belongsTo
  params:
  - name: type
    description: the model type of the relationship
    type: String or DS.Model
  - name: options
    description: a hash of options
    type: Object
  return:
    description: relationship
    type: Ember.computed
  class: DS
  module: ember-data
- file: "../packages/ember-data/lib/system/relationships/belongs_to.js"
  line: 132
  itemtype: method
  name: belongsToWillChange
  access: private
  tagname: ''
  static: 1
  params:
  - name: record
    description: ''
  - name: key
    description: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/belongs_to.js"
  line: 153
  itemtype: method
  name: belongsToDidChange
  access: private
  tagname: ''
  static: 1
  params:
  - name: record
    description: ''
  - name: key
    description: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 20
  description: |-
    This Ember.js hook allows an object to be notified when a property
    is defined.

    In this case, we use it to be notified when an Ember Data user defines a
    belongs-to relationship. In that case, we need to set up observers for
    each one, allowing us to track relationship changes and automatically
    reflect changes in the inverse has-many array.

    This hook passes the class being set up, as well as the key and value
    being defined. So, for example, when the user does this:

    ```javascript
    DS.Model.extend({
      parent: DS.belongsTo('user')
    });
    ```

    This hook would be called with "parent" as the key and the computed
    property returned by `DS.belongsTo` as the value.
  itemtype: method
  name: didDefineProperty
  params:
  - name: proto
    description: ''
  - name: key
    description: ''
  - name: value
    description: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 83
  description: |-
    For a given relationship name, returns the model type of the relationship.

    For example, if you define a model like this:

       ```javascript
    App.Post = DS.Model.extend({
      comments: DS.hasMany('comment')
    });
       ```

    Calling `App.Post.typeForRelationship('comments')` will return `App.Comment`.
  itemtype: method
  name: typeForRelationship
  static: 1
  params:
  - name: name
    description: the name of the relationship
    type: String
  return:
    description: the type of the relationship, or undefined
    type: subclass of DS.Model
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 156
  description: |-
    The model's relationships as a map, keyed on the type of the
    relationship. The value of each entry is an array containing a descriptor
    for each relationship with that type, describing the name of the relationship
    as well as the type.

    For example, given the following model definition:

    ```javascript
    App.Blog = DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),
      posts: DS.hasMany('post')
    });
    ```

    This computed property would return a map describing these
    relationships, like this:

    ```javascript
    var relationships = Ember.get(App.Blog, 'relationships');
    relationships.get(App.User);
    //=> [ { name: 'users', kind: 'hasMany' },
    //     { name: 'owner', kind: 'belongsTo' } ]
    relationships.get(App.Post);
    //=> [ { name: 'posts', kind: 'hasMany' } ]
    ```
  itemtype: property
  name: relationships
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 213
  description: |-
    A hash containing lists of the model's relationships, grouped
    by the relationship kind. For example, given a model with this
    definition:

    ```javascript
    App.Blog = DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    var relationshipNames = Ember.get(App.Blog, 'relationshipNames');
    relationshipNames.hasMany;
    //=> ['users', 'posts']
    relationshipNames.belongsTo;
    //=> ['owner']
    ```
  itemtype: property
  name: relationshipNames
  static: 1
  type: Object
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 254
  description: |-
    An array of types directly related to a model. Each type will be
    included once, regardless of the number of relationships it has with
    the model.

    For example, given a model with this definition:

    ```javascript
    App.Blog = DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    var relatedTypes = Ember.get(App.Blog, 'relatedTypes');
    //=> [ App.User, App.Post ]
    ```
  itemtype: property
  name: relatedTypes
  static: 1
  type: Ember.Array
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 309
  description: |-
    A map whose keys are the relationships of a model and whose values are
    relationship descriptors.

    For example, given a model with this
    definition:

    ```javascript
    App.Blog = DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    var relationshipsByName = Ember.get(App.Blog, 'relationshipsByName');
    relationshipsByName.get('users');
    //=> { key: 'users', kind: 'hasMany', type: App.User }
    relationshipsByName.get('owner');
    //=> { key: 'owner', kind: 'belongsTo', type: App.User }
    ```
  itemtype: property
  name: relationshipsByName
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 365
  description: |-
    A map whose keys are the fields of the model and whose values are strings
    describing the kind of the field. A model's fields are the union of all of its
    attributes and relationships.

    For example:

    ```javascript

    App.Blog = DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post'),

      title: DS.attr('string')
    });

    var fields = Ember.get(App.Blog, 'fields');
    fields.forEach(function(field, kind) {
      console.log(field, kind);
    });

    // prints:
    // users, hasMany
    // owner, belongsTo
    // posts, hasMany
    // title, attribute
    ```
  itemtype: property
  name: fields
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 414
  description: |-
    Given a callback, iterates over each of the relationships in the model,
    invoking the callback with the name of each relationship and its relationship
    descriptor.
  itemtype: method
  name: eachRelationship
  static: 1
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 430
  description: |-
    Given a callback, iterates over each of the types related to a model,
    invoking the callback with the related type's class. Each type will be
    returned just once, regardless of how many different relationships it has
    with a model.
  itemtype: method
  name: eachRelatedType
  static: 1
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/ext.js"
  line: 449
  description: |-
    Given a callback, iterates over each of the relationships in the model,
    invoking the callback with the name of each relationship and its relationship
    descriptor.
  itemtype: method
  name: eachRelationship
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/relationships/has_many.js"
  line: 73
  description: |-
    `DS.hasMany` is used to define One-To-Many and Many-To-Many
    relationships on a [DS.Model](classes/DS.Model.html).

    `DS.hasMany` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a related model.

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:

    ```javascript
    App.Post = DS.Model.extend({
      comments: DS.hasMany('comment')
    });

    App.Comment = DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```

    #### Many-To-Many
    To declare a many-to-many relationship between two models, use
    `DS.hasMany`:

    ```javascript
    App.Post = DS.Model.extend({
      tags: DS.hasMany('tag')
    });

    App.Tag = DS.Model.extend({
      posts: DS.hasMany('post')
    });
    ```

    #### Explicit Inverses

    Ember Data will do its best to discover which relationships map to
    one another. In the one-to-many code above, for example, Ember Data
    can figure out that changing the `comments` relationship should update
    the `post` relationship on the inverse because post is the only
    relationship to that model.

    However, sometimes you may have multiple `belongsTo`/`hasManys` for the
    same type. You can specify which property on the related model is
    the inverse using `DS.hasMany`'s `inverse` option:

    ```javascript
    var belongsTo = DS.belongsTo,
        hasMany = DS.hasMany;

    App.Comment = DS.Model.extend({
      onePost: belongsTo('post'),
      twoPost: belongsTo('post'),
      redPost: belongsTo('post'),
      bluePost: belongsTo('post')
    });

    App.Post = DS.Model.extend({
      comments: hasMany('comment', {
        inverse: 'redPost'
      })
    });
    ```

    You can also specify an inverse on a `belongsTo`, which works how
    you'd expect.
  itemtype: method
  name: hasMany
  params:
  - name: type
    description: the model type of the relationship
    type: String or DS.Model
  - name: options
    description: a hash of options
    type: Object
  return:
    description: relationship
    type: Ember.computed
  class: DS
  module: ember-data
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 102
  description: |-
    If you would like your adapter to use a custom serializer you can
    set the `defaultSerializer` property to be the name of the custom
    serializer.

    Note the `defaultSerializer` serializer has a lower priority then
    a model specific serializer (i.e. `PostSerializer`) or the
    `application` serializer.

    ```javascript
    var DjangoAdapter = DS.Adapter.extend({
      defaultSerializer: 'django'
    });
    ```
  itemtype: property
  name: defaultSerializer
  type: "{String}"
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 121
  description: |-
    The `find()` method is invoked when the store is asked for a record that
    has not previously been loaded. In response to `find()` being called, you
    should query your persistence layer for a record with the given ID. Once
    found, you can asynchronously call the store's `push()` method to push
    the record into the store.

    Here is an example `find` implementation:

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      find: function(store, type, id) {
        var url = [type, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: id
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 155
  description: |-
    The `findAll()` method is called when you call `find` on the store
    without an ID (i.e. `store.find('post')`).

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      findAll: function(store, type, sinceToken) {
        var url = type;
        var query = { since: sinceToken };
        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url, query).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: sinceToken
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 187
  description: |-
    This method is called when you call `find` on the store with a
    query object as the second parameter (i.e. `store.find('person', {
    page: 1 })`).

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      findQuery: function(store, type, query) {
        var url = type;
        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url, query).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: query
    description: ''
    type: Object
  - name: recordArray
    description: ''
    type: DS.AdapterPopulatedRecordArray
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 220
  description: |-
    If the globally unique IDs for your records should be generated on the client,
    implement the `generateIdForRecord()` method. This method will be invoked
    each time you create a new record, and the value returned from it will be
    assigned to the record's `primaryKey`.

    Most traditional REST-like HTTP APIs will not use this method. Instead, the ID
    of the record will be set by the server, and your adapter will update the store
    with the new ID when it calls `didCreateRecord()`. Only implement this method if
    you intend to generate record IDs on the client-side.

    The `generateIdForRecord()` method will be invoked with the requesting store as
    the first parameter and the newly created record as the second parameter:

    ```javascript
    generateIdForRecord: function(store, record) {
      var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();
      return uuid;
    }
    ```
  itemtype: method
  name: generateIdForRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: record
    description: ''
    type: DS.Model
  return:
    description: id
    type: String|Number
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 248
  description: |-
    Proxies to the serializer's `serialize` method.

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      createRecord: function(store, type, record) {
        var data = this.serialize(record, { includeId: true });
        var url = type;

        // ...
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: options
    description: ''
    type: Object
  return:
    description: serialized record
    type: Object
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 273
  description: |-
    Implement this method in a subclass to handle the creation of
    new records.

    Serializes the record and send it to the server.

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      createRecord: function(store, type, record) {
        var data = this.serialize(record, { includeId: true });
        var url = type;

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 312
  description: |-
    Implement this method in a subclass to handle the updating of
    a record.

    Serializes the record update and send it to the server.

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      updateRecord: function(store, type, record) {
        var data = this.serialize(record, { includeId: true });
        var id = record.get('id');
        var url = [type, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'PUT',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 352
  description: |-
    Implement this method in a subclass to handle the deletion of
    a record.

    Sends a delete request for the record to the server.

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      deleteRecord: function(store, type, record) {
        var data = this.serialize(record, { includeId: true });
        var id = record.get('id');
        var url = [type, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'DELETE',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: subclass of DS.Model
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/adapter.js"
  line: 392
  description: |-
    Find multiple records at once.

    By default, it loops over the provided ids and calls `find` on each.
    May be overwritten to improve performance and reduce the number of
    server requests.

    Example

    ```javascript
    App.ApplicationAdapter = DS.Adapter.extend({
      findMany: function(store, type, ids) {
        var url = type;
        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url, {ids: ids}).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the records
    type: subclass of DS.Model
  - name: ids
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 34
  description: |-
    This method is invoked whenever data is loaded into the store by the
    adapter or updated by the adapter, or when a record has changed.

    It updates all record arrays that a record belongs to.

    To avoid thrashing, it only runs at most once per run loop.
  itemtype: method
  name: updateRecordArrays
  params:
  - name: type
    description: ''
    type: Class
  - name: clientId
    description: ''
    type: Number|String
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 91
  description: Update an individual filter.
  itemtype: method
  name: updateRecordArray
  params:
  - name: array
    description: ''
    type: DS.FilteredRecordArray
  - name: filter
    description: ''
    type: Function
  - name: type
    description: ''
    type: Class
  - name: clientId
    description: ''
    type: Number|String
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 120
  description: |-
    This method is invoked if the `filterFunction` property is
    changed on a `DS.FilteredRecordArray`.

    It essentially re-runs the filter from scratch. This same
    method is invoked when the filter is created in th first place.
  itemtype: method
  name: updateFilter
  params:
  - name: array
    description: ''
  - name: type
    description: ''
  - name: filter
    description: ''
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 145
  description: |-
    Create a `DS.ManyArray` for a type and list of record references, and index
    the `ManyArray` under each reference. This allows us to efficiently remove
    records from `ManyArray`s when they are deleted.
  itemtype: method
  name: createManyArray
  params:
  - name: type
    description: ''
    type: Class
  - name: references
    description: ''
    type: Array
  return:
    description: ''
    type: DS.ManyArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 170
  description: Create a `DS.RecordArray` for a type and register it for updates.
  itemtype: method
  name: createRecordArray
  params:
  - name: type
    description: ''
    type: Class
  return:
    description: ''
    type: DS.RecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 190
  description: Create a `DS.FilteredRecordArray` for a type and register it for updates.
  itemtype: method
  name: createFilteredRecordArray
  params:
  - name: type
    description: ''
    type: Class
  - name: filter
    description: ''
    type: Function
  return:
    description: ''
    type: DS.FilteredRecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 212
  description: Create a `DS.AdapterPopulatedRecordArray` for a type with given query.
  itemtype: method
  name: createAdapterPopulatedRecordArray
  params:
  - name: type
    description: ''
    type: Class
  - name: query
    description: ''
    type: Object
  return:
    description: ''
    type: DS.AdapterPopulatedRecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/record_array_manager.js"
  line: 229
  description: |-
    Register a RecordArray for a given type to be backed by
    a filter function. This will cause the array to update
    automatically when records of that type change attribute
    values or states.
  itemtype: method
  name: registerFilteredRecordArray
  params:
  - name: array
    description: ''
    type: DS.RecordArray
  - name: type
    description: ''
    type: Class
  - name: filter
    description: ''
    type: Function
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 92
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 106
  description: |-
    The adapter to use to communicate to a backend server or other persistence layer.

    This can be specified as an instance, class, or string.

    If you want to specify `App.CustomAdapter` as a string, do:

    ```js
    adapter: 'custom'
    ```
  itemtype: property
  name: adapter
  default: DS.RESTAdapter
  type: "{DS.Adapter|String}"
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 123
  description: |-
    Returns a JSON representation of the record using a custom
    type-specific serializer, if one exists.

    The available options are:

    * `includeId`: `true` if the record's ID should be included in
      the JSON representation
  itemtype: method
  name: serialize
  access: private
  tagname: ''
  params:
  - name: record
    description: the record to serialize
    type: DS.Model
  - name: options
    description: an options hash
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 141
  description: |-
    This property returns the adapter, after resolving a possible
    string key.

    If the supplied `adapter` was a class, or a String property
    path resolved to a class, this property will instantiate the
    class.

    This property is cacheable, so the same instance of a specified
    adapter class should be used for the lifetime of the store.
  itemtype: property
  name: defaultAdapter
  access: private
  tagname: ''
  return:
    description: DS.Adapter
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 176
  description: |-
    Create a new record in the current store. The properties passed
    to this method are set on the newly created record.

    To create a new instance of `App.Post`:

    ```js
    store.createRecord('post', {
      title: "Rails is omakase"
    });
    ```
  itemtype: method
  name: createRecord
  params:
  - name: type
    description: ''
    type: String
  - name: properties
    description: |-
      a hash of properties to set on the
        newly created record.
    type: Object
  return:
    description: record
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 223
  description: |-
    If possible, this method asks the adapter to generate an ID for
    a newly created record.
  itemtype: method
  name: _generateId
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String
  return:
    description: if the adapter can generate one, an ID
    type: String
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 246
  description: |-
    For symmetry, a record can be deleted via the store.

    Example

    ```javascript
    var post = store.createRecord('post', {
      title: "Rails is omakase"
    });

    store.deleteRecord(post);
    ```
  itemtype: method
  name: deleteRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 266
  description: |-
    For symmetry, a record can be unloaded via the store. Only
    non-dirty records can be unloaded.

    Example

    ```javascript
    store.find('post', 1).then(function(post) {
      store.unloadRecord(post);
    });
    ```
  itemtype: method
  name: unloadRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 289
  description: |-
    This is the main entry point into finding records. The first parameter to
    this method is the model's name as a string.

    ---

    To find a record by ID, pass the `id` as the second parameter:

    ```javascript
    store.find('person', 1);
    ```

    The `find` method will always return a **promise** that will be resolved
    with the record. If the record was already in the store, the promise will
    be resolved immediately. Otherwise, the store will ask the adapter's `find`
    method to find the necessary data.

    The `find` method will always resolve its promise with the same object for
    a given type and `id`.

    ---

    To find all records for a type, call `find` with no additional parameters:

    ```javascript
    store.find('person');
    ```

    This will ask the adapter's `findAll` method to find the records for the
    given type, and return a promise that will be resolved once the server
    returns the values.

    ---

    To find a record by a query, call `find` with a hash as the second
    parameter:

    ```javascript
    store.find(App.Person, { page: 1 });
    ```

    This will ask the adapter's `findQuery` method to find the records for
    the query, and return a promise that will be resolved once the server
    responds.
  itemtype: method
  name: find
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: Object|String|Integer|null
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 352
  description: This method returns a record for a given type and id combination.
  itemtype: method
  name: findById
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: String|Integer
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 370
  description: |-
    This method makes a series of requests to the adapter's `find` method
    and returns a promise that resolves once they are all loaded.
  access: private
  tagname: ''
  itemtype: method
  name: findByIds
  params:
  - name: type
    description: ''
    type: String
  - name: ids
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 388
  description: |-
    This method is called by `findById` if it discovers that a particular
    type/id pair hasn't been loaded yet to kick off a request to the
    adapter.
  itemtype: method
  name: fetchRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 416
  description: |-
    Get a record by a given type and ID without triggering a fetch.

    This method will synchronously return the record if it's available.
    Otherwise, it will return null.

    ```js
    var post = store.getById('post', 1);
    ```
  itemtype: method
  name: getById
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: String|Integer
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 439
  description: |-
    This method is called by the record's `reload` method.

    This method calls the adapter's `find` method, which returns a promise. When
    **that** promise resolves, `reloadRecord` will resolve the promise returned
    by the record's `reload`.
  itemtype: method
  name: reloadRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 463
  description: |-
    This method takes a list of records, groups the records by type,
    converts the records into IDs, and then invokes the adapter's `findMany`
    method.

    The records are grouped by type to invoke `findMany` on adapters
    for each unique type in records.

    It is used both by a brand new relationship (via the `findMany`
    method) or when the data underlying an existing relationship
    changes.
  itemtype: method
  name: fetchMany
  access: private
  tagname: ''
  params:
  - name: records
    description: ''
    type: Array
  - name: owner
    description: ''
    type: DS.Model
  - name: resolver
    description: ''
    type: Resolver
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 504
  description: Returns true if a record for a given type and ID is already loaded.
  itemtype: method
  name: hasRecordForId
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: String|Integer
  return:
    description: ''
    type: Boolean
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 518
  description: |-
    Returns id record for a given type and ID. If one isn't already loaded,
    it builds a new record and leaves it in the `empty` state.
  itemtype: method
  name: recordForId
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: String|Integer
  return:
    description: record
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 542
  itemtype: method
  name: findMany
  access: private
  tagname: ''
  params:
  - name: owner
    description: ''
    type: DS.Model
  - name: records
    description: ''
    type: Array
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: resolver
    description: ''
    type: Resolver
  return:
    description: records
    type: DS.ManyArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 580
  description: |-
    If a relationship was originally populated by the adapter as a link
    (as opposed to a list of IDs), this method is called when the
    relationship is fetched.

    The link (which is usually a URL) is passed through unchanged, so the
    adapter can make whatever request it wants.

    The usual use-case is for the server to register a URL as a link, and
    then use that URL in the future to make a request for the relationship.
  itemtype: method
  name: findHasMany
  access: private
  tagname: ''
  params:
  - name: owner
    description: ''
    type: DS.Model
  - name: link
    description: ''
    type: Any
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: resolver
    description: ''
    type: Resolver
  return:
    description: ''
    type: DS.ManyArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 610
  itemtype: method
  name: findBelongsTo
  access: private
  tagname: ''
  params:
  - name: owner
    description: ''
    type: DS.Model
  - name: link
    description: ''
    type: Any
  - name: relationship
    description: ''
    type: Relationship
  - name: resolver
    description: ''
    type: Resolver
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 627
  description: |-
    This method delegates a query to the adapter. This is the one place where
    adapter-level semantics are exposed to the application.

    Exposing queries this way seems preferable to creating an abstract query
    language for all server-side queries, and then require all adapters to
    implement them.

    This method returns a promise, which is resolved with a `RecordArray`
    once the server returns.
  itemtype: method
  name: findQuery
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: query
    description: an opaque query to be used by the adapter
    type: Any
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 662
  description: |-
    This method returns an array of all records adapter can find.
    It triggers the adapter's `findAll` method to give it an opportunity to populate
    the array with records of that type.
  itemtype: method
  name: findAll
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  return:
    description: ''
    type: DS.AdapterPopulatedRecordArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 678
  itemtype: method
  name: fetchAll
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: DS.Model
  - name: array
    description: ''
    type: DS.RecordArray
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 697
  itemtype: method
  name: didUpdateAll
  params:
  - name: type
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 706
  description: |-
    This method returns a filtered array that contains all of the known records
    for a given type.

    Note that because it's just a filter, it will have any locally
    created records of the type.

    Also note that multiple calls to `all` for a given type will always
    return the same RecordArray.

    Example

    ```javascript
    var local_posts = store.all(App.Post);
    ```
  itemtype: method
  name: all
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  return:
    description: ''
    type: DS.RecordArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 741
  description: |-
    This method unloads all of the known records for a given type.

    ```javascript
    store.unloadAll(App.Post);
    ```
  itemtype: method
  name: unloadAll
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 764
  description: |-
    Takes a type and filter function, and returns a live RecordArray that
    remains up to date as new records are loaded into the store or created
    locally.

    The callback function takes a materialized record, and returns true
    if the record should be included in the filter and false if it should
    not.

    The filter function is called once on all records for the type when
    it is created, and then once on each newly loaded or created record.

    If any of a record's properties change, or if it changes state, the
    filter function will be invoked again to determine whether it should
    still be in the array.

    Optionally you can pass a query which will be triggered at first. The
    results returned by the server could then appear in the filter if they
    match the filter function.

    Example

    ```javascript
    store.filter(App.Post, {unread: true}, function(post) {
      return post.get('unread');
    }).then(function(unreadPosts) {
      unreadPosts.get('length'); // 5
      var unreadPost = unreadPosts.objectAt(0);
      unreadPost.set('unread', false);
      unreadPosts.get('length'); // 4
    });
    ```
  itemtype: method
  name: filter
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: query
    description: optional query
    type: Object
  - name: filter
    description: ''
    type: Function
  return:
    description: ''
    type: DS.PromiseArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 824
  description: |-
    This method returns if a certain record is already loaded
    in the store. Use this function to know beforehand if a find()
    will result in a request or that it will be a cache hit.

     Example

    ```javascript
    store.recordIsLoaded(App.Post, 1); // false
    store.find(App.Post, 1).then(function() {
      store.recordIsLoaded(App.Post, 1); // true
    });
    ```
  itemtype: method
  name: recordIsLoaded
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: id
    description: ''
    type: String
  return:
    description: ''
    type: Boolean
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 848
  description: This method returns the metadata for a specific type.
  itemtype: method
  name: metadataFor
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  return:
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 864
  description: |-
    If the adapter updates attributes or acknowledges creation
    or deletion, the record will notify the store to update its
    membership in any filters.
    To avoid thrashing, this method is invoked only once per

    run loop per record.
  itemtype: method
  name: dataWasUpdated
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: Class
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 885
  description: |-
    This method is called by `record.save`, and gets passed a
    resolver for the promise that `record.save` returns.

    It schedules saving to happen at the end of the run loop.
  itemtype: method
  name: scheduleSave
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: resolver
    description: ''
    type: Resolver
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 902
  description: |-
    This method is called at the end of the run loop, and
    flushes any records passed into `scheduleSave`
  itemtype: method
  name: flushPendingSave
  access: private
  tagname: ''
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 930
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is resolved.

    If the data provides a server-generated ID, it will
    update the record and the store's indexes.
  itemtype: method
  name: didSaveRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: the in-flight record
    type: DS.Model
  - name: data
    description: optional data (see above)
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 954
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is rejected with a `DS.InvalidError`.
  itemtype: method
  name: recordWasInvalid
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: errors
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 968
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is rejected (with anything other than a `DS.InvalidError`).
  itemtype: method
  name: recordWasError
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 981
  description: |-
    When an adapter's `createRecord`, `updateRecord` or `deleteRecord`
    resolves with data, this method extracts the ID from the supplied
    data.
  itemtype: method
  name: updateId
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: data
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1002
  description: Returns a map of IDs to client IDs for a given type.
  itemtype: method
  name: typeMapFor
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
  return:
    description: typeMap
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1034
  description: This internal method is used by `push`.
  itemtype: method
  name: _load
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: data
    description: ''
    type: Object
  - name: partial
    description: |-
      the data should be merged into
        the existing data, not replace it.
    type: Boolean
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1054
  description: |-
    Returns a model class for a particular key. Used by
    methods that take a type key (like `find`, `createRecord`,
    etc.)
  itemtype: method
  name: modelFor
  params:
  - name: key
    description: ''
    type: String or subclass of DS.Model
  return:
    description: ''
    type: subclass of DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1082
  description: |-
    Push some data for a given type into the store.

    This method expects normalized data:

    * The ID is a key named `id` (an ID is mandatory)
    * The names of attributes are the ones you used in
      your model's `DS.attr`s.
    * Your relationships must be:
      * represented as IDs or Arrays of IDs
      * represented as model instances
      * represented as URLs, under the `links` key

    For this model:

    ```js
    App.Person = DS.Model.extend({
      firstName: DS.attr(),
      lastName: DS.attr(),

      children: DS.hasMany('person')
    });
    ```

    To represent the children as IDs:

    ```js
    {
      id: 1,
      firstName: "Tom",
      lastName: "Dale",
      children: [1, 2, 3]
    }
    ```

    To represent the children relationship as a URL:

    ```js
    {
      id: 1,
      firstName: "Tom",
      lastName: "Dale",
      links: {
        children: "/people/1/children"
      }
    }
    ```

    If you're streaming data or implementing an adapter,
    make sure that you have converted the incoming data
    into this form.

    This method can be used both to push in brand new
    records, as well as to update existing records.
  itemtype: method
  name: push
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: data
    description: ''
    type: Object
  return:
    description: |-
      the record that was created or
        updated.
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1160
  description: |-
    Push some raw data into the store.

    The data will be automatically deserialized using the
    serializer for the `type` param.

    This method can be used both to push in brand new
    records, as well as to update existing records.

    You can push in more than one type of object at once.
    All objects should be in the format expected by the
    serializer.

    ```js
    App.ApplicationSerializer = DS.ActiveModelSerializer;

    var pushData = {
      posts: [
        {id: 1, post_title: "Great post", comment_ids: [2]}
      ],
      comments: [
        {id: 2, comment_body: "Insightful comment"}
      ]
    }

    store.pushPayload('post', pushData);
    ```
  itemtype: method
  name: pushPayload
  params:
  - name: type
    description: ''
    type: String
  - name: payload
    description: ''
    type: Object
  return:
    description: the record that was created or updated.
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1211
  description: |-
    If you have an Array of normalized data to push,
    you can call `pushMany` with the Array, and it will
    call `push` repeatedly for you.
  itemtype: method
  name: pushMany
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: datas
    description: ''
    type: Array
  return:
    description: ''
    type: Array
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1227
  description: |-
    If you have some metadata to set for a type
    you can call `metaForType`.
  itemtype: method
  name: metaForType
  params:
  - name: type
    description: ''
    type: String or subclass of DS.Model
  - name: metadata
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1241
  description: |-
    Build a brand new record for a given type, ID, and
    initial data.
  itemtype: method
  name: buildRecord
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  - name: id
    description: ''
    type: String
  - name: data
    description: ''
    type: Object
  return:
    description: record
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1285
  description: |-
    When a record is destroyed, this un-indexes it and
    removes it from any record arrays so it can be GCed.
  itemtype: method
  name: dematerializeRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1363
  description: Returns the adapter for a given type.
  itemtype: method
  name: adapterFor
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: subclass of DS.Model
  return:
    description: DS.Adapter
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/system/store.js"
  line: 1385
  description: |-
    Returns an instance of the serializer for a given type. For
    example, `serializerFor('person')` will return an instance of
    `App.PersonSerializer`.

    If no `App.PersonSerializer` is found, this method will look
    for an `App.ApplicationSerializer` (the default serializer for
    your entire application).

    If no `App.ApplicationSerializer` is found, it will fall back
    to an instance of `DS.JSONSerializer`.
  itemtype: method
  name: serializerFor
  access: private
  tagname: ''
  params:
  - name: type
    description: the record to serialize
    type: String
  return:
    description: ''
    type: DS.Serializer
  class: DS.Store
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/transforms/base.js"
  line: 35
  description: |-
    When given a deserialized value from a record attribute this
    method must return the serialized value.

    Example

    ```javascript
    serialize: function(deserialized) {
      return Ember.isEmpty(deserialized) ? null : Number(deserialized);
    }
    ```
  itemtype: method
  name: serialize
  params:
  - name: deserialized
    description: The deserialized value
  return:
    description: The serialized value
  class: DS.Transform
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/transforms/base.js"
  line: 53
  description: |-
    When given a serialize value from a JSON object this method must
    return the deserialized value for the record attribute.

    Example

    ```javascript
    deserialize: function(serialized) {
      return empty(serialized) ? null : Number(serialized);
    }
    ```
  itemtype: method
  name: deserialize
  params:
  - name: serialized
    description: The serialized value
  return:
    description: The deserialized value
  class: DS.Transform
  module: ember-data
  namespace: DS
- file: "../packages/ember-data/lib/core.js"
  line: 13
  itemtype: property
  name: VERSION
  type: String
  default: "'VERSION_STRING_PLACEHOLDER'"
  static: 1
  class: DS
  module: ember-data
- file: "../packages/ember-inflector/lib/ext/string.js"
  line: 4
  description: See {{#crossLink "Ember.String/pluralize"}}{{/crossLink}}
  itemtype: method
  name: pluralize
  class: String
  module: ember-data
- file: "../packages/ember-inflector/lib/ext/string.js"
  line: 14
  description: See {{#crossLink "Ember.String/singularize"}}{{/crossLink}}
  itemtype: method
  name: singularize
  class: String
  module: ember-data
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 96
  itemtype: method
  name: plural
  params:
  - name: regex
    description: ''
    type: RegExp
  - name: string
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 105
  itemtype: method
  name: singular
  params:
  - name: regex
    description: ''
    type: RegExp
  - name: string
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 114
  itemtype: method
  name: uncountable
  params:
  - name: regex
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 122
  itemtype: method
  name: irregular
  params:
  - name: singular
    description: ''
    type: String
  - name: plural
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 131
  itemtype: method
  name: pluralize
  params:
  - name: word
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 139
  itemtype: method
  name: singularize
  params:
  - name: word
    description: ''
    type: String
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
- file: "../packages/ember-inflector/lib/system/inflector.js"
  line: 147
  access: protected
  tagname: ''
  itemtype: method
  name: inflect
  params:
  - name: word
    description: ''
    type: String
  - name: typeRules
    description: ''
    type: Object
  - name: irregular
    description: ''
    type: Object
  class: Ember.Inflector
  module: ember-data
  namespace: Ember
warnings:
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_adapter.js:65"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_adapter.js:84"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_serializer.js:18"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_serializer.js:29"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_serializer.js:85"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/activemodel-adapter/lib/system/active_model_serializer.js:97"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:163"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:182"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:206"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:227"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:265"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:306"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:340"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:365"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:392"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:409"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/adapters/rest_adapter.js:475"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/serializers/rest_serializer.js:105"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/serializers/rest_serializer.js:183"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/serializers/rest_serializer.js:278"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/serializers/rest_serializer.js:400"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/serializers/rest_serializer.js:583"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/model/errors.js:57"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/model/errors.js:188"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/model/model.js:291"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/model/model.js:310"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:141"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:176"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:223"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:370"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:388"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:504"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:518"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:678"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:1054"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:1082"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:1241"
- message: 'replacing incorrect tag: returns with return'
  line: " ../packages/ember-data/lib/system/store.js:1363"
- message: |-
    Missing item type
    Does not serialize hasMany relationships by default.
  line: " ../packages/activemodel-adapter/lib/system/active_model_serializer.js:49"
- message: Missing item type
  line: " ../packages/ember-data/lib/system/model/errors.js:68"
