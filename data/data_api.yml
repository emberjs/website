---
project:
  sha: v1.0.0-beta.19.2
files:
  packages/activemodel-adapter/lib/system/active-model-adapter.js:
    name: packages/activemodel-adapter/lib/system/active-model-adapter.js
    modules: {}
    classes:
      DS.ActiveModelAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  packages/activemodel-adapter/lib/system/active-model-serializer.js:
    name: packages/activemodel-adapter/lib/system/active-model-serializer.js
    modules: {}
    classes:
      DS.ActiveModelSerializer: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/adapters/build-url-mixin.js:
    name: packages/ember-data/lib/adapters/build-url-mixin.js
    modules: {}
    classes:
      DS.BuildURLMixin: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/adapters/fixture-adapter.js:
    name: packages/ember-data/lib/adapters/fixture-adapter.js
    modules: {}
    classes:
      DS.FixtureAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/adapters/rest-adapter.js:
    name: packages/ember-data/lib/adapters/rest-adapter.js
    modules: {}
    classes:
      DS.RESTAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/ext/date.js:
    name: packages/ember-data/lib/ext/date.js
    modules: {}
    classes:
      Ember.Date: 1
    fors: {}
    namespaces:
      Ember: 1
  packages/ember-data/lib/initializers/data-adapter.js:
    name: packages/ember-data/lib/initializers/data-adapter.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/initializers/store-injections.js:
    name: packages/ember-data/lib/initializers/store-injections.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/initializers/store.js:
    name: packages/ember-data/lib/initializers/store.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/initializers/transforms.js:
    name: packages/ember-data/lib/initializers/transforms.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/instance-initializers/initialize-store-service.js:
    name: packages/ember-data/lib/instance-initializers/initialize-store-service.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/serializers/embedded-records-mixin.js:
    name: packages/ember-data/lib/serializers/embedded-records-mixin.js
    modules: {}
    classes:
      DS.EmbeddedRecordsMixin: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/serializers/json-serializer.js:
    name: packages/ember-data/lib/serializers/json-serializer.js
    modules: {}
    classes:
      DS.JSONSerializer: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/serializers/rest-serializer.js:
    name: packages/ember-data/lib/serializers/rest-serializer.js
    modules: {}
    classes:
      DS.RESTSerializer: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/debug/debug-adapter.js:
    name: packages/ember-data/lib/system/debug/debug-adapter.js
    modules: {}
    classes:
      DS.DebugAdapter: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/debug/debug-info.js:
    name: packages/ember-data/lib/system/debug/debug-info.js
    modules: {}
    classes: {}
    fors:
      DS.Model: 1
    namespaces: {}
  packages/ember-data/lib/system/model/errors/invalid.js:
    name: packages/ember-data/lib/system/model/errors/invalid.js
    modules: {}
    classes:
      DS.InvalidError: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/model/attributes.js:
    name: packages/ember-data/lib/system/model/attributes.js
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces:
      DS: 1
  packages/ember-data/lib/system/model/errors.js:
    name: packages/ember-data/lib/system/model/errors.js
    modules: {}
    classes:
      DS.Errors: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/model/internal-model.js:
    name: packages/ember-data/lib/system/model/internal-model.js
    modules: {}
    classes:
      DS.InternalModel: 1
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/model/model.js:
    name: packages/ember-data/lib/system/model/model.js
    modules: {}
    classes: {}
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/model/states.js:
    name: packages/ember-data/lib/system/model/states.js
    modules: {}
    classes:
      DS.RootState: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/record-arrays/adapter-populated-record-array.js:
    name: packages/ember-data/lib/system/record-arrays/adapter-populated-record-array.js
    modules: {}
    classes:
      DS.AdapterPopulatedRecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/record-arrays/filtered-record-array.js:
    name: packages/ember-data/lib/system/record-arrays/filtered-record-array.js
    modules: {}
    classes:
      DS.FilteredRecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/record-arrays/record-array.js:
    name: packages/ember-data/lib/system/record-arrays/record-array.js
    modules: {}
    classes:
      DS.RecordArray: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/relationships/belongs-to.js:
    name: packages/ember-data/lib/system/relationships/belongs-to.js
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces: {}
  packages/ember-data/lib/system/relationships/ext.js:
    name: packages/ember-data/lib/system/relationships/ext.js
    modules: {}
    classes:
      DS.Model: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/relationships/has-many.js:
    name: packages/ember-data/lib/system/relationships/has-many.js
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces: {}
  packages/ember-data/lib/system/store/container-instance-cache.js:
    name: packages/ember-data/lib/system/store/container-instance-cache.js
    modules: {}
    classes:
      ContainerInstanceCache: 1
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/adapter.js:
    name: packages/ember-data/lib/system/adapter.js
    modules: {}
    classes:
      DS.Adapter: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/container-proxy.js:
    name: packages/ember-data/lib/system/container-proxy.js
    modules: {}
    classes:
      DS.ContainerProxy: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/debug.js:
    name: packages/ember-data/lib/system/debug.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/many-array.js:
    name: packages/ember-data/lib/system/many-array.js
    modules: {}
    classes:
      DS.ManyArray: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/model.js:
    name: packages/ember-data/lib/system/model.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/normalize-model-name.js:
    name: packages/ember-data/lib/system/normalize-model-name.js
    modules: {}
    classes: {}
    fors:
      DS: 1
    namespaces: {}
  packages/ember-data/lib/system/promise-proxies.js:
    name: packages/ember-data/lib/system/promise-proxies.js
    modules: {}
    classes:
      DS.PromiseArray: 1
      DS.PromiseObject: 1
      DS.PromiseManyArray: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/record-array-manager.js:
    name: packages/ember-data/lib/system/record-array-manager.js
    modules: {}
    classes:
      DS.RecordArrayManager: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/record-arrays.js:
    name: packages/ember-data/lib/system/record-arrays.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/relationships.js:
    name: packages/ember-data/lib/system/relationships.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/system/serializer.js:
    name: packages/ember-data/lib/system/serializer.js
    modules: {}
    classes:
      DS.Serializer: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/snapshot.js:
    name: packages/ember-data/lib/system/snapshot.js
    modules: {}
    classes:
      DS.Snapshot: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/system/store.js:
    name: packages/ember-data/lib/system/store.js
    modules: {}
    classes:
      DS.Store: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/transforms/base.js:
    name: packages/ember-data/lib/transforms/base.js
    modules: {}
    classes:
      DS.Transform: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/transforms/boolean.js:
    name: packages/ember-data/lib/transforms/boolean.js
    modules: {}
    classes:
      DS.BooleanTransform: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/transforms/date.js:
    name: packages/ember-data/lib/transforms/date.js
    modules: {}
    classes:
      DS.DateTransform: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/transforms/number.js:
    name: packages/ember-data/lib/transforms/number.js
    modules: {}
    classes:
      DS.NumberTransform: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/transforms/string.js:
    name: packages/ember-data/lib/transforms/string.js
    modules: {}
    classes:
      DS.StringTransform: 1
    fors: {}
    namespaces:
      DS: 1
  packages/ember-data/lib/adapters.js:
    name: packages/ember-data/lib/adapters.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/core.js:
    name: packages/ember-data/lib/core.js
    modules: {}
    classes:
      DS: 1
    fors: {}
    namespaces: {}
  packages/ember-data/lib/ember-initializer.js:
    name: packages/ember-data/lib/ember-initializer.js
    modules: {}
    classes: {}
    fors: {}
    namespaces: {}
  packages/ember-data/lib/main.js:
    name: packages/ember-data/lib/main.js
    modules:
      ember-data: 1
    classes: {}
    fors: {}
    namespaces: {}
modules:
  ember-data:
    name: ember-data
    submodules: {}
    classes:
      DS.ActiveModelAdapter: 1
      DS.ActiveModelSerializer: 1
      DS.BuildURLMixin: 1
      DS.FixtureAdapter: 1
      DS.RESTAdapter: 1
      Ember.Date: 1
      DS.EmbeddedRecordsMixin: 1
      DS.JSONSerializer: 1
      DS.RESTSerializer: 1
      DS.DebugAdapter: 1
      DS.Model: 1
      DS.InvalidError: 1
      DS: 1
      DS.Errors: 1
      DS.InternalModel: 1
      DS.RootState: 1
      DS.AdapterPopulatedRecordArray: 1
      DS.FilteredRecordArray: 1
      DS.RecordArray: 1
      ContainerInstanceCache: 1
      DS.Adapter: 1
      DS.ContainerProxy: 1
      DS.ManyArray: 1
      DS.PromiseArray: 1
      DS.PromiseObject: 1
      DS.PromiseManyArray: 1
      DS.RecordArrayManager: 1
      DS.Serializer: 1
      DS.Snapshot: 1
      DS.Store: 1
      DS.Transform: 1
      DS.BooleanTransform: 1
      DS.DateTransform: 1
      DS.NumberTransform: 1
      DS.StringTransform: 1
    fors:
      DS.Model: 1
      DS: 1
    namespaces:
      DS: 1
      Ember: 1
    tag: main
    file: packages/ember-data/lib/transforms/string.js
    line: 4
    description: Ember Data
    itemtype: main
classes:
  DS.ActiveModelAdapter:
    name: DS.ActiveModelAdapter
    shortname: DS.ActiveModelAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/activemodel-adapter/lib/system/active-model-adapter.js
    line: 12
    description: |-
      The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate
      with a JSON API that uses an underscored naming convention instead of camelCasing.
      It has been designed to work out of the box with the
      [active\_model\_serializers](http://github.com/rails-api/active_model_serializers)
      Ruby gem. This Adapter expects specific settings using ActiveModel::Serializers,
      `embed :ids, embed_in_root: true` which sideloads the records.

      This adapter extends the DS.RESTAdapter by making consistent use of the camelization,
      decamelization and pluralization methods to normalize the serialized JSON into a
      format that is compatible with a conventional Rails backend and Ember Data.

      ## JSON Structure

      The ActiveModelAdapter expects the JSON returned from your server to follow
      the REST adapter conventions substituting underscored keys for camelcased ones.

      Unlike the DS.RESTAdapter, async relationship keys must be the singular form
      of the relationship name, followed by "_id" for DS.belongsTo relationships,
      or "_ids" for DS.hasMany relationships.

      ### Conventional Names

      Attribute names in your JSON payload should be the underscored versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.FamousPerson = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "famous_person": {
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation": "President"
        }
      }
      ```

      Let's imagine that `Occupation` is just another model:

      ```js
      App.Person = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.belongsTo('occupation')
      });

      App.Occupation = DS.Model.extend({
        name: DS.attr('string'),
        salary: DS.attr('number'),
        people: DS.hasMany('person')
      });
      ```

      The JSON needed to avoid extra server calls, should look like this:

      ```js
      {
        "people": [{
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation_id": 1
        }],

        "occupations": [{
          "id": 1,
          "name": "President",
          "salary": 100000,
          "person_ids": [1]
        }]
      }
      ```
    is_constructor: 1
    extends: DS.RESTAdapter
  DS.ActiveModelSerializer:
    name: DS.ActiveModelSerializer
    shortname: DS.ActiveModelSerializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/activemodel-adapter/lib/system/active-model-serializer.js
    line: 14
    description: |-
      The ActiveModelSerializer is a subclass of the RESTSerializer designed to integrate
      with a JSON API that uses an underscored naming convention instead of camelCasing.
      It has been designed to work out of the box with the
      [active\_model\_serializers](http://github.com/rails-api/active_model_serializers)
      Ruby gem. This Serializer expects specific settings using ActiveModel::Serializers,
      `embed :ids, embed_in_root: true` which sideloads the records.

      This serializer extends the DS.RESTSerializer by making consistent
      use of the camelization, decamelization and pluralization methods to
      normalize the serialized JSON into a format that is compatible with
      a conventional Rails backend and Ember Data.

      ## JSON Structure

      The ActiveModelSerializer expects the JSON returned from your server
      to follow the REST adapter conventions substituting underscored keys
      for camelcased ones.

      ### Conventional Names

      Attribute names in your JSON payload should be the underscored versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```js
      App.FamousPerson = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "famous_person": {
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation": "President"
        }
      }
      ```

      Let's imagine that `Occupation` is just another model:

      ```js
      App.Person = DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.belongsTo('occupation')
      });

      App.Occupation = DS.Model.extend({
        name: DS.attr('string'),
        salary: DS.attr('number'),
        people: DS.hasMany('person')
      });
      ```

      The JSON needed to avoid extra server calls, should look like this:

      ```js
      {
        "people": [{
          "id": 1,
          "first_name": "Barack",
          "last_name": "Obama",
          "occupation_id": 1
        }],

        "occupations": [{
          "id": 1,
          "name": "President",
          "salary": 100000,
          "person_ids": [1]
        }]
      }
      ```
    extends: DS.RESTSerializer
  DS.BuildURLMixin:
    name: DS.BuildURLMixin
    shortname: DS.BuildURLMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for:
    - DS.RESTAdapter
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/adapters/build-url-mixin.js
    line: 3
    description: |-
      WARNING: This interface is likely to change in order to accomodate https://github.com/emberjs/rfcs/pull/4
      ## Using BuildURLMixin
      To use url building, include the mixin when extending an adapter, and call `buildURL` where needed.
        The default behaviour is designed for RESTAdapter.
      ### Example
      ```javascript
        export default DS.Adapter.extend(BuildURLMixin, {
          find: function(store, type, id, snapshot) {
            var url = this.buildURL(type.modelName, id, snapshot, 'find');
            return this.ajax(url, 'GET');
          }
        });
        ```
      ### Attributes
      The `host` and `namespace` attributes will be used if defined, and are optional.
  DS.FixtureAdapter:
    name: DS.FixtureAdapter
    shortname: DS.FixtureAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/adapters/fixture-adapter.js
    line: 12
    description: |-
      `DS.FixtureAdapter` is an adapter that loads records from memory.
      It's primarily used for development and testing. You can also use
      `DS.FixtureAdapter` while working on the API but is not ready to
      integrate yet. It is a fully functioning adapter. All CRUD methods
      are implemented. You can also implement query logic that a remote
      system would do. It's possible to develop your entire application
      with `DS.FixtureAdapter`.

      For information on how to use the `FixtureAdapter` in your
      application please see the [FixtureAdapter
      guide](/guides/models/the-fixture-adapter/).
    extends: DS.Adapter
  DS.RESTAdapter:
    name: DS.RESTAdapter
    shortname: DS.RESTAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/adapters/rest-adapter.js
    line: 18
    description: |-
      The REST adapter allows your store to communicate with an HTTP server by
      transmitting JSON via XHR. Most Ember.js apps that consume a JSON API
      should use the REST adapter.

      This adapter is designed around the idea that the JSON exchanged with
      the server should be conventional.

      ## JSON Structure

      The REST adapter expects the JSON returned from your server to follow
      these conventions.

      ### Object Root

      The JSON payload should be an object that contains the record inside a
      root property. For example, in response to a `GET` request for
      `/posts/1`, the JSON should look like this:

      ```js
      {
        "post": {
          "id": 1,
          "title": "I'm Running to Reform the W3C's Tag",
          "author": "Yehuda Katz"
        }
      }
      ```

      Similarly, in response to a `GET` request for `/posts`, the JSON should
      look like this:

      ```js
      {
        "posts": [
          {
            "id": 1,
            "title": "I'm Running to Reform the W3C's Tag",
            "author": "Yehuda Katz"
          },
          {
            "id": 2,
            "title": "Rails is omakase",
            "author": "D2H"
          }
        ]
      }
      ```

      ### Conventional Names

      Attribute names in your JSON payload should be the camelCased versions of
      the attributes in your Ember.js models.

      For example, if you have a `Person` model:

      ```app/models/person.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        firstName: DS.attr('string'),
        lastName: DS.attr('string'),
        occupation: DS.attr('string')
      });
      ```

      The JSON returned should look like this:

      ```js
      {
        "person": {
          "id": 5,
          "firstName": "Barack",
          "lastName": "Obama",
          "occupation": "President"
        }
      }
      ```

      ## Customization

      ### Endpoint path customization

      Endpoint paths can be prefixed with a `namespace` by setting the namespace
      property on the adapter:

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        namespace: 'api/1'
      });
      ```
      Requests for `App.Person` would now target `/api/1/people/1`.

      ### Host customization

      An adapter can target other hosts by setting the `host` property.

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        host: 'https://api.example.com'
      });
      ```

      ### Headers customization

      Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary
      headers can be set as key/value pairs on the `RESTAdapter`'s `headers`
      object and Ember Data will send them along with each ajax request.


      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        headers: {
          "API_KEY": "secret key",
          "ANOTHER_HEADER": "Some header value"
        }
      });
      ```

      `headers` can also be used as a computed property to support dynamic
      headers. In the example below, the `session` object has been
      injected into an adapter by Ember's container.

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        headers: function() {
          return {
            "API_KEY": this.get("session.authToken"),
            "ANOTHER_HEADER": "Some header value"
          };
        }.property("session.authToken")
      });
      ```

      In some cases, your dynamic headers may require data from some
      object outside of Ember's observer system (for example
      `document.cookie`). You can use the
      [volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)
      function to set the property into a non-cached mode causing the headers to
      be recomputed with every request.

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        headers: function() {
          return {
            "API_KEY": Ember.get(document.cookie.match(/apiKey\=([^;]*)/), "1"),
            "ANOTHER_HEADER": "Some header value"
          };
        }.property().volatile()
      });
      ```
    is_constructor: 1
    extends: DS.Adapter
    uses:
    - DS.BuildURLMixin
  Ember.Date:
    name: Ember.Date
    shortname: Ember.Date
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: Ember
    file: packages/ember-data/lib/ext/date.js
    line: 5
    description: |-
      Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>

      © 2011 Colin Snover <http://zetafleet.com>

      Released under MIT license.
    static: 1
  DS.EmbeddedRecordsMixin:
    name: DS.EmbeddedRecordsMixin
    shortname: DS.EmbeddedRecordsMixin
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/serializers/embedded-records-mixin.js
    line: 4
    description: |-
      ## Using Embedded Records

      `DS.EmbeddedRecordsMixin` supports serializing embedded records.

      To set up embedded records, include the mixin when extending a serializer
      then define and configure embedded (model) relationships.

      Below is an example of a per-type serializer ('post' type).

      ```app/serializers/post.js
      import DS from 'ember-data';

      export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
        attrs: {
          author: { embedded: 'always' },
          comments: { serialize: 'ids' }
        }
      });
      ```
      Note that this use of `{ embedded: 'always' }` is unrelated to
      the `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of
      defining a model while working with the ActiveModelSerializer.  Nevertheless,
      using `{ embedded: 'always' }` as an option to DS.attr is not a valid way to setup
      embedded records.

      The `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:

      ```js
      {
        serialize: 'records',
        deserialize: 'records'
      }
      ```

      ### Configuring Attrs

      A resource's `attrs` option may be set to use `ids`, `records` or false for the
      `serialize`  and `deserialize` settings.

      The `attrs` property can be set on the ApplicationSerializer or a per-type
      serializer.

      In the case where embedded JSON is expected while extracting a payload (reading)
      the setting is `deserialize: 'records'`, there is no need to use `ids` when
      extracting as that is the default behavior without this mixin if you are using
      the vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while
      serializing `serialize: 'records'` is the setting to use. There is an option of
      not embedding JSON in the serialized payload by using `serialize: 'ids'`. If you
      do not want the relationship sent at all, you can use `serialize: false`.


      ### EmbeddedRecordsMixin defaults
      If you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`
      will behave in the following way:

      BelongsTo: `{ serialize: 'id', deserialize: 'id' }`
      HasMany:   `{ serialize: false, deserialize: 'ids' }`

      ### Model Relationships

      Embedded records must have a model defined to be extracted and serialized. Note that
      when defining any relationships on your model such as `belongsTo` and `hasMany`, you
      should not both specify `async:true` and also indicate through the serializer's
      `attrs` attribute that the related model should be embedded for deserialization.
      If a model is declared embedded for deserialization (`embedded: 'always'`,
      `deserialize: 'record'` or `deserialize: 'records'`), then do not use `async:true`.

      To successfully extract and serialize embedded records the model relationships
      must be setup correcty See the
      [defining relationships](/guides/models/defining-models/#toc_defining-relationships)
      section of the **Defining Models** guide page.

      Records without an `id` property are not considered embedded records, model
      instances must have an `id` property to be used with Ember Data.

      ### Example JSON payloads, Models and Serializers

      **When customizing a serializer it is important to grok what the customizations
      are. Please read the docs for the methods this mixin provides, in case you need
      to modify it to fit your specific needs.**

      For example review the docs for each method of this mixin:
      * [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)
      * [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)
      * [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)
  DS.JSONSerializer:
    name: DS.JSONSerializer
    shortname: DS.JSONSerializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/serializers/json-serializer.js
    line: 8
    description: |-
      In Ember Data a Serializer is used to serialize and deserialize
      records when they are transferred in and out of an external source.
      This process involves normalizing property names, transforming
      attribute values and serializing relationships.

      For maximum performance Ember Data recommends you use the
      [RESTSerializer](DS.RESTSerializer.html) or one of its subclasses.

      `JSONSerializer` is useful for simpler or legacy backends that may
      not support the http://jsonapi.org/ spec.
    extends: DS.Serializer
  DS.RESTSerializer:
    name: DS.RESTSerializer
    shortname: DS.RESTSerializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/serializers/rest-serializer.js
    line: 14
    description: |-
      Normally, applications will use the `RESTSerializer` by implementing
      the `normalize` method and individual normalizations under
      `normalizeHash`.

      This allows you to do whatever kind of munging you need, and is
      especially useful if your server is inconsistent and you need to
      do munging differently for many different kinds of responses.

      See the `normalize` documentation for more information.

      ## Across the Board Normalization

      There are also a number of hooks that you might find useful to define
      across-the-board rules for your payload. These rules will be useful
      if your server is consistent, or if you're building an adapter for
      an infrastructure service, like Parse, and want to encode service
      conventions.

      For example, if all of your keys are underscored and all-caps, but
      otherwise consistent with the names you use in your models, you
      can implement across-the-board rules for how to convert an attribute
      name in your model to a key in your JSON.

      ```app/serializers/application.js
      import DS from 'ember-data';

      export default DS.RESTSerializer.extend({
        keyForAttribute: function(attr, method) {
          return Ember.String.underscore(attr).toUpperCase();
        }
      });
      ```

      You can also implement `keyForRelationship`, which takes the name
      of the relationship as the first parameter, the kind of
      relationship (`hasMany` or `belongsTo`) as the second parameter, and
      the method (`serialize` or `deserialize`) as the third parameter.
    extends: DS.JSONSerializer
  DS.DebugAdapter:
    name: DS.DebugAdapter
    shortname: DS.DebugAdapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/debug/debug-adapter.js
    line: 10
    description: Extend `Ember.DataAdapter` with ED specific code.
    extends: Ember.DataAdapter
    access: private
    tagname: ''
  DS.Model:
    name: DS.Model
    shortname: DS.Model
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/relationships/ext.js
    line: 97
    description: |-
      The model class that all Ember Data records descend from.
        This is the public API of Ember Data models. If you are using Ember Data
        in your application, this is the class you should use.
        If you are working on Ember Data internals, you most likely want to be dealing
        with `InternalModel`
    extends: Ember.Object
    uses:
    - Ember.Evented
  DS.InvalidError:
    name: DS.InvalidError
    shortname: DS.InvalidError
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/model/errors/invalid.js
    line: 4
    description: |-
      A `DS.InvalidError` is used by an adapter to signal the external API
      was unable to process a request because the content was not
      semantically correct or meaningful per the API. Usually this means a
      record failed some form of server side validation. When a promise
      from an adapter is rejected with a `DS.InvalidError` the record will
      transition to the `invalid` state and the errors will be set to the
      `errors` property on the record.

      For Ember Data to correctly map errors to their corresponding
      properties on the model, Ember Data expects each error to be
      namespaced under a key that matches the property name. For example
      if you had a Post model that looked like this.

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        title: DS.attr('string'),
        content: DS.attr('string')
      });
      ```

      To show an error from the server related to the `title` and
      `content` properties your adapter could return a promise that
      rejects with a `DS.InvalidError` object that looks like this:

      ```app/adapters/post.js
      import Ember from 'ember';
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        updateRecord: function() {
          // Fictional adapter that always rejects
          return Ember.RSVP.reject(new DS.InvalidError({
            title: ['Must be unique'],
            content: ['Must not be blank'],
          }));
        }
      });
      ```

      Your backend may use different property names for your records the
      store will attempt extract and normalize the errors using the
      serializer's `extractErrors` method before the errors get added to
      the the model. As a result, it is safe for the `InvalidError` to
      wrap the error payload unaltered.

      Example

      ```app/adapters/application.js
      import Ember from 'ember';
      import DS from 'ember-data';

      export default DS.RESTAdapter.extend({
        ajaxError: function(jqXHR) {
          var error = this._super(jqXHR);

          // 422 is used by this fictional server to signal a validation error
          if (jqXHR && jqXHR.status === 422) {
            var jsonErrors = Ember.$.parseJSON(jqXHR.responseText);
            return new DS.InvalidError(jsonErrors);
          } else {
            // The ajax request failed however it is not a result of this
            // record being in an invalid state so we do not return a
            // `InvalidError` object.
            return error;
          }
        }
      });
      ```
  DS:
    name: DS
    shortname: DS
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: ''
    file: packages/ember-data/lib/core.js
    line: 5
    description: All Ember Data methods and functions are defined inside of this namespace.
    static: 1
  DS.Errors:
    name: DS.Errors
    shortname: DS.Errors
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/model/errors.js
    line: 13
    description: |-
      Holds validation errors for a given record organized by attribute names.

      Every DS.Model has an `errors` property that is an instance of
      `DS.Errors`. This can be used to display validation error
      messages returned from the server when a `record.save()` rejects.
      This works automatically with `DS.ActiveModelAdapter`, but you
      can implement [ajaxError](/api/data/classes/DS.RESTAdapter.html#method_ajaxError)
      in other adapters as well.

      For Example, if you had an `User` model that looked like this:

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        username: attr('string'),
        email: attr('string')
      });
      ```
      And you attempted to save a record that did not validate on the backend.

      ```javascript
      var user = store.createRecord('user', {
        username: 'tomster',
        email: 'invalidEmail'
      });
      user.save();
      ```

      Your backend data store might return a response that looks like
      this. This response will be used to populate the error object.

      ```javascript
      {
        "username": ["This username is already taken!"],
        "email": ["Doesn't look like a valid email."]
      }
      ```

      Errors can be displayed to the user by accessing their property name
      to get an array of all the error objects for that property. Each
      error object is a JavaScript object with two keys:

      - `message` A string containing the error message from the backend
      - `attribute` The name of the property associated with this error message

      ```handlebars
      <label>Username: {{input value=username}} </label>
      {{#each model.errors.username as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}

      <label>Email: {{input value=email}} </label>
      {{#each model.errors.email as |error|}}
        <div class="error">
          {{error.message}}
        </div>
      {{/each}}
      ```

      You can also access the special `messages` property on the error
      object to get an array of all the error strings.

      ```handlebars
      {{#each model.errors.messages as |message|}}
        <div class="error">
          {{message}}
        </div>
      {{/each}}
      ```
    extends: Ember.Object
    uses:
    - Ember.Enumerable
    - Ember.Evented
  DS.InternalModel:
    name: DS.InternalModel
    shortname: InternalModel
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/model/internal-model.js
    line: 34
    description: |-
      `InternalModel` is the Model class that we use internally inside Ember Data to represent models.
      Internal ED methods should only deal with `InternalModel` objects. It is a fast, plain Javascript class.

      We expose `DS.Model` to application code, by materializing a `DS.Model` from `InternalModel` lazily, as
      a performance optimization.

      `InternalModel` should never be exposed to application code. At the boundaries of the system, in places
      like `find`, `push`, etc. we convert between Models and InternalModels.

      We need to make sure that the properties from `InternalModel` are correctly exposed/proxied on `Model`
      if they are needed.
  DS.RootState:
    name: DS.RootState
    shortname: DS.RootState
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/model/states.js
    line: 10
    description: |-
      ### State

      Each record has a `currentState` property that explicitly tracks what
      state a record is in at any given time. For instance, if a record is
      newly created and has not yet been sent to the adapter to be saved,
      it would be in the `root.loaded.created.uncommitted` state.  If a
      record has had local modifications made to it that are in the
      process of being saved, the record would be in the
      `root.loaded.updated.inFlight` state. (This state paths will be
      explained in more detail below.)

      Events are sent by the record or its store to the record's
      `currentState` property. How the state reacts to these events is
      dependent on which state it is in. In some states, certain events
      will be invalid and will cause an exception to be raised.

      States are hierarchical and every state is a substate of the
      `RootState`. For example, a record can be in the
      `root.deleted.uncommitted` state, then transition into the
      `root.deleted.inFlight` state. If a child state does not implement
      an event handler, the state manager will attempt to invoke the event
      on all parent states until the root state is reached. The state
      hierarchy of a record is described in terms of a path string. You
      can determine a record's current state by getting the state's
      `stateName` property:

      ```javascript
      record.get('currentState.stateName');
      //=> "root.created.uncommitted"
       ```

      The hierarchy of valid states that ship with ember data looks like
      this:

      ```text
      * root
        * deleted
          * saved
          * uncommitted
          * inFlight
        * empty
        * loaded
          * created
            * uncommitted
            * inFlight
          * saved
          * updated
            * uncommitted
            * inFlight
        * loading
      ```

      The `DS.Model` states are themselves stateless. What that means is
      that, the hierarchical states that each of *those* points to is a
      shared data structure. For performance reasons, instead of each
      record getting its own copy of the hierarchy of states, each record
      points to this global, immutable shared instance. How does a state
      know which record it should be acting on? We pass the record
      instance into the state's event handlers as the first argument.

      The record passed as the first parameter is where you should stash
      state about the record if needed; you should never store data on the state
      object itself.

      ### Events and Flags

      A state may implement zero or more events and flags.

      #### Events

      Events are named functions that are invoked when sent to a record. The
      record will first look for a method with the given name on the
      current state. If no method is found, it will search the current
      state's parent, and then its grandparent, and so on until reaching
      the top of the hierarchy. If the root is reached without an event
      handler being found, an exception will be raised. This can be very
      helpful when debugging new features.

      Here's an example implementation of a state with a `myEvent` event handler:

      ```javascript
      aState: DS.State.create({
        myEvent: function(manager, param) {
          console.log("Received myEvent with", param);
        }
      })
      ```

      To trigger this event:

      ```javascript
      record.send('myEvent', 'foo');
      //=> "Received myEvent with foo"
      ```

      Note that an optional parameter can be sent to a record's `send()` method,
      which will be passed as the second parameter to the event handler.

      Events should transition to a different state if appropriate. This can be
      done by calling the record's `transitionTo()` method with a path to the
      desired state. The state manager will attempt to resolve the state path
      relative to the current state. If no state is found at that path, it will
      attempt to resolve it relative to the current state's parent, and then its
      parent, and so on until the root is reached. For example, imagine a hierarchy
      like this:

          * created
            * uncommitted <-- currentState
            * inFlight
          * updated
            * inFlight

      If we are currently in the `uncommitted` state, calling
      `transitionTo('inFlight')` would transition to the `created.inFlight` state,
      while calling `transitionTo('updated.inFlight')` would transition to
      the `updated.inFlight` state.

      Remember that *only events* should ever cause a state transition. You should
      never call `transitionTo()` from outside a state's event handler. If you are
      tempted to do so, create a new event and send that to the state manager.

      #### Flags

      Flags are Boolean values that can be used to introspect a record's current
      state in a more user-friendly way than examining its state path. For example,
      instead of doing this:

      ```javascript
      var statePath = record.get('stateManager.currentPath');
      if (statePath === 'created.inFlight') {
        doSomething();
      }
      ```

      You can say:

      ```javascript
      if (record.get('isNew') && record.get('isSaving')) {
        doSomething();
      }
      ```

      If your state does not set a value for a given flag, the value will
      be inherited from its parent (or the first place in the state hierarchy
      where it is defined).

      The current set of flags are defined below. If you want to add a new flag,
      in addition to the area below, you will also need to declare it in the
      `DS.Model` class.


       * [isEmpty](DS.Model.html#property_isEmpty)
       * [isLoading](DS.Model.html#property_isLoading)
       * [isLoaded](DS.Model.html#property_isLoaded)
       * [isDirty](DS.Model.html#property_isDirty)
       * [isSaving](DS.Model.html#property_isSaving)
       * [isDeleted](DS.Model.html#property_isDeleted)
       * [isNew](DS.Model.html#property_isNew)
       * [isValid](DS.Model.html#property_isValid)
  DS.AdapterPopulatedRecordArray:
    name: DS.AdapterPopulatedRecordArray
    shortname: DS.AdapterPopulatedRecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/record-arrays/adapter-populated-record-array.js
    line: 16
    description: |-
      Represents an ordered list of records whose order and membership is
      determined by the adapter. For example, a query sent to the adapter
      may trigger a search on the server, whose results would be loaded
      into an instance of the `AdapterPopulatedRecordArray`.
    extends: DS.RecordArray
  DS.FilteredRecordArray:
    name: DS.FilteredRecordArray
    shortname: DS.FilteredRecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/record-arrays/filtered-record-array.js
    line: 9
    description: |-
      Represents a list of records whose membership is determined by the
      store. As records are created, loaded, or modified, the store
      evaluates them to determine if they should be part of the record
      array.
    extends: DS.RecordArray
  DS.RecordArray:
    name: DS.RecordArray
    shortname: DS.RecordArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/record-arrays/record-array.js
    line: 9
    description: |-
      A record array is an array that contains records of a certain type. The record
      array materializes records as needed when they are retrieved for the first
      time. You should not create record arrays yourself. Instead, an instance of
      `DS.RecordArray` or its subclasses will be returned by your application's store
      in response to queries.
    extends: Ember.ArrayProxy
    uses:
    - Ember.Evented
  ContainerInstanceCache:
    name: ContainerInstanceCache
    shortname: ContainerInstanceCache
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: ''
    file: packages/ember-data/lib/system/store/container-instance-cache.js
    line: 3
    description: |-
      The `ContainerInstanceCache` serves as a lazy cache for looking up
      instances of serializers and adapters. It has some additional logic for
      finding the 'fallback' adapter or serializer.

      The 'fallback' adapter or serializer is an adapter or serializer that is looked up
      when the preferred lookup fails. For example, say you try to look up `adapter:post`,
      but there is no entry (app/adapters/post.js in EmberCLI) for `adapter:post` in the registry.

      The `fallbacks` array passed will then be used; the first entry in the fallbacks array
      that exists in the container will then be cached for `adapter:post`. So, the next time you
      look up `adapter:post`, you'll get the `adapter:application` instance (or whatever the fallback
      was if `adapter:application` doesn't exist).
    access: private
    tagname: ''
  DS.Adapter:
    name: DS.Adapter
    shortname: DS.Adapter
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/adapter.js
    line: 9
    description: |-
      An adapter is an object that receives requests from a store and
      translates them into the appropriate action to take against your
      persistence layer. The persistence layer is usually an HTTP API, but
      may be anything, such as the browser's local storage. Typically the
      adapter is not invoked directly instead its functionality is accessed
      through the `store`.

      ### Creating an Adapter

      Create a new subclass of `DS.Adapter` in the `app/adapters` folder:

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
        // ...your code here
      });
      ```

      Model-specific adapters can be created by putting your adapter
      class in an `app/adapters/` + `model-name` + `.js` file of the application.

      ```app/adapters/post.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
        // ...Post-specific adapter code goes here
      });
      ```

      `DS.Adapter` is an abstract base class that you should override in your
      application to customize it for your backend. The minimum set of methods
      that you should implement is:

        * `find()`
        * `createRecord()`
        * `updateRecord()`
        * `deleteRecord()`
        * `findAll()`
        * `findQuery()`

      To improve the network performance of your application, you can optimize
      your adapter by overriding these lower-level methods:

        * `findMany()`


      For an example implementation, see `DS.RESTAdapter`, the
      included REST adapter.
    extends: Ember.Object
  DS.ContainerProxy:
    name: DS.ContainerProxy
    shortname: DS.ContainerProxy
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/container-proxy.js
    line: 1
    description: |-
      This is used internally to enable deprecation of container paths and provide
      a decent message to the user indicating how to fix the issue.
    access: private
    tagname: ''
  DS.ManyArray:
    name: DS.ManyArray
    shortname: DS.ManyArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/many-array.js
    line: 11
    description: |-
      A `ManyArray` is a `MutableArray` that represents the contents of a has-many
      relationship.

      The `ManyArray` is instantiated lazily the first time the relationship is
      requested.

      ### Inverses

      Often, the relationships in Ember Data applications will have
      an inverse. For example, imagine the following models are
      defined:

      ```app/models/post.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        comments: DS.hasMany('comment')
      });
      ```

      ```app/models/comment.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        post: DS.belongsTo('post')
      });
      ```

      If you created a new instance of `App.Post` and added
      a `App.Comment` record to its `comments` has-many
      relationship, you would expect the comment's `post`
      property to be set to the post that contained
      the has-many.

      We call the record to which a relationship belongs the
      relationship's _owner_.
    extends: Ember.Object
    uses:
    - Ember.MutableArray
    - Ember.Evented
  DS.PromiseArray:
    name: DS.PromiseArray
    shortname: DS.PromiseArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/promise-proxies.js
    line: 4
    description: |-
      A `PromiseArray` is an object that acts like both an `Ember.Array`
      and a promise. When the promise is resolved the resulting value
      will be set to the `PromiseArray`'s `content` property. This makes
      it easy to create data bindings with the `PromiseArray` that will be
      updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseArray = DS.PromiseArray.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseArray.get('length'); // 0

      promiseArray.then(function() {
        promiseArray.get('length'); // 100
      });
      ```
    extends: Ember.ArrayProxy
    uses:
    - Ember.PromiseProxyMixin
  DS.PromiseObject:
    name: DS.PromiseObject
    shortname: DS.PromiseObject
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/promise-proxies.js
    line: 35
    description: |-
      A `PromiseObject` is an object that acts like both an `Ember.Object`
      and a promise. When the promise is resolved, then the resulting value
      will be set to the `PromiseObject`'s `content` property. This makes
      it easy to create data bindings with the `PromiseObject` that will
      be updated when the promise resolves.

      For more information see the [Ember.PromiseProxyMixin
      documentation](/api/classes/Ember.PromiseProxyMixin.html).

      Example

      ```javascript
      var promiseObject = DS.PromiseObject.create({
        promise: $.getJSON('/some/remote/data.json')
      });

      promiseObject.get('name'); // null

      promiseObject.then(function() {
        promiseObject.get('name'); // 'Tomster'
      });
      ```
    extends: Ember.ObjectProxy
    uses:
    - Ember.PromiseProxyMixin
  DS.PromiseManyArray:
    name: DS.PromiseManyArray
    shortname: DS.PromiseManyArray
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/promise-proxies.js
    line: 78
    description: |-
      A PromiseManyArray is a PromiseArray that also proxies certain method calls
      to the underlying manyArray.
      Right now we proxy:

        * `reload()`
        * `createRecord()`
        * `on()`
        * `one()`
        * `trigger()`
        * `off()`
        * `has()`
    extends: Ember.ArrayProxy
  DS.RecordArrayManager:
    name: DS.RecordArrayManager
    shortname: DS.RecordArrayManager
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/record-array-manager.js
    line: 18
    access: private
    tagname: ''
    extends: Ember.Object
  DS.Serializer:
    name: DS.Serializer
    shortname: DS.Serializer
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/serializer.js
    line: 5
    description: |-
      `DS.Serializer` is an abstract base class that you should override in your
      application to customize it for your backend. The minimum set of methods
      that you should implement is:

        * `extract()`
        * `serialize()`

      And you can optionally override the following methods:

        * `normalize()`

      For an example implementation, see
      [DS.JSONSerializer](DS.JSONSerializer.html), the included JSON serializer.
    extends: Ember.Object
  DS.Snapshot:
    name: DS.Snapshot
    shortname: DS.Snapshot
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/snapshot.js
    line: 7
    access: private
    tagname: ''
    is_constructor: 1
    params:
    - name: internalModel
      description: The model to create a snapshot from
      type: DS.Model
  DS.Store:
    name: DS.Store
    shortname: DS.Store
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/system/store.js
    line: 136
    description: |-
      The store contains all of the data for records loaded from the server.
      It is also responsible for creating instances of `DS.Model` that wrap
      the individual data for a record, so that they can be bound to in your
      Handlebars templates.

      Define your application's store like this:

      ```app/stores/application.js
      import DS from 'ember-data';

      export default DS.Store.extend({
      });
      ```

      Most Ember.js applications will only have a single `DS.Store` that is
      automatically created by their `Ember.Application`.

      You can retrieve models from the store in several ways. To retrieve a record
      for a specific id, use `DS.Store`'s `find()` method:

      ```javascript
      store.find('person', 123).then(function (person) {
      });
      ```

      By default, the store will talk to your backend using a standard
      REST mechanism. You can customize how the store talks to your
      backend by specifying a custom adapter:

      ```app/adapters/application.js
      import DS from 'ember-data';

      export default DS.Adapter.extend({
      });
      ```

      You can learn more about writing a custom adapter by reading the `DS.Adapter`
      documentation.

      ### Store createRecord() vs. push() vs. pushPayload()

      The store provides multiple ways to create new record objects. They have
      some subtle differences in their use which are detailed below:

      [createRecord](#method_createRecord) is used for creating new
      records on the client side. This will return a new record in the
      `created.uncommitted` state. In order to persist this record to the
      backend you will need to call `record.save()`.

      [push](#method_push) is used to notify Ember Data's store of new or
      updated records that exist in the backend. This will return a record
      in the `loaded.saved` state. The primary use-case for `store#push` is
      to notify Ember Data about record updates (full or partial) that happen
      outside of the normal adapter methods (for example
      [SSE](http://dev.w3.org/html5/eventsource/) or [Web
      Sockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).

      [pushPayload](#method_pushPayload) is a convenience wrapper for
      `store#push` that will deserialize payloads if the
      Serializer implements a `pushPayload` method.

      Note: When creating a new record using any of the above methods
      Ember Data will update `DS.RecordArray`s such as those returned by
      `store#all()`, `store#findAll()` or `store#filter()`. This means any
      data bindings or computed properties that depend on the RecordArray
      will automatically be synced to include the new or updated record
      values.
    extends: Ember.Service
  DS.Transform:
    name: DS.Transform
    shortname: DS.Transform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/transforms/base.js
    line: 1
    description: |-
      The `DS.Transform` class is used to serialize and deserialize model
      attributes when they are saved or loaded from an
      adapter. Subclassing `DS.Transform` is useful for creating custom
      attributes. All subclasses of `DS.Transform` must implement a
      `serialize` and a `deserialize` method.

      Example

      ```app/transforms/temperature.js
      import DS from 'ember-data';

      // Converts centigrade in the JSON to fahrenheit in the app
      export default DS.Transform.extend({
        deserialize: function(serialized) {
          return (serialized *  1.8) + 32;
        },
        serialize: function(deserialized) {
          return (deserialized - 32) / 1.8;
        }
      });
      ```

      Usage

      ```app/models/requirement.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        name: DS.attr('string'),
        temperature: DS.attr('temperature')
      });
      ```
  DS.BooleanTransform:
    name: DS.BooleanTransform
    shortname: DS.BooleanTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/transforms/boolean.js
    line: 3
    description: |-
      The `DS.BooleanTransform` class is used to serialize and deserialize
      boolean attributes on Ember Data record objects. This transform is
      used when `boolean` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        isAdmin: DS.attr('boolean'),
        name: DS.attr('string'),
        email: DS.attr('string')
      });
      ```
    extends: DS.Transform
  DS.DateTransform:
    name: DS.DateTransform
    shortname: DS.DateTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/transforms/date.js
    line: 1
    description: |-
      The `DS.DateTransform` class is used to serialize and deserialize
      date attributes on Ember Data record objects. This transform is used
      when `date` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      ```app/models/score.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        value: DS.attr('number'),
        player: DS.belongsTo('player'),
        date: DS.attr('date')
      });
      ```
    extends: DS.Transform
  DS.NumberTransform:
    name: DS.NumberTransform
    shortname: DS.NumberTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/transforms/number.js
    line: 9
    description: |-
      The `DS.NumberTransform` class is used to serialize and deserialize
      numeric attributes on Ember Data record objects. This transform is
      used when `number` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```app/models/score.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        value: DS.attr('number'),
        player: DS.belongsTo('player'),
        date: DS.attr('date')
      });
      ```
    extends: DS.Transform
  DS.StringTransform:
    name: DS.StringTransform
    shortname: DS.StringTransform
    classitems: []
    plugins: []
    extensions: []
    plugin_for: []
    extension_for: []
    module: ember-data
    namespace: DS
    file: packages/ember-data/lib/transforms/string.js
    line: 4
    description: |-
      The `DS.StringTransform` class is used to serialize and deserialize
      string attributes on Ember Data record objects. This transform is
      used when `string` is passed as the type parameter to the
      [DS.attr](../../data#method_attr) function.

      Usage

      ```app/models/user.js
      import DS from 'ember-data';

      export default DS.Model.extend({
        isAdmin: DS.attr('boolean'),
        name: DS.attr('string'),
        email: DS.attr('string')
      });
      ```
    extends: DS.Transform
classitems:
- file: packages/activemodel-adapter/lib/system/active-model-adapter.js
  line: 105
  description: |-
    The ActiveModelAdapter overrides the `pathForType` method to build
    underscored URLs by decamelizing and pluralizing the object type name.

    ```js
      this.pathForType("famousPerson");
      //=> "famous_people"
    ```
  itemtype: method
  name: pathForType
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: String
  class: DS.ActiveModelAdapter
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-adapter.js
  line: 124
  description: |-
    The ActiveModelAdapter overrides the `ajaxError` method
    to return a DS.InvalidError for all 422 Unprocessable Entity
    responses.

    A 422 HTTP response from the server generally implies that the request
    was well formed but the API was unable to process it because the
    content was not semantically correct or meaningful per the API.

    For more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918
    https://tools.ietf.org/html/rfc4918#section-11.2
  itemtype: method
  name: ajaxError
  params:
  - name: jqXHR
    description: ''
    type: Object
  return:
    description: error
  class: DS.ActiveModelAdapter
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 104
  description: Converts camelCased attributes to underscored when serializing.
  itemtype: method
  name: keyForAttribute
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: String
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 115
  description: |-
    Underscores relationship names and appends "_id" or "_ids" when serializing
    relationship keys.
  itemtype: method
  name: keyForRelationship
  params:
  - name: relationshipModelName
    description: ''
    type: String
  - name: kind
    description: ''
    type: String
  return:
    description: String
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 140
  description: Underscores the JSON root keys when serializing.
  itemtype: method
  name: payloadKeyFromModelName
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: String
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 151
  description: Serializes a polymorphic type as a fully capitalized model name.
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 175
  description: |-
    Add extra step to `DS.RESTSerializer.normalize` so links are normalized.

    If your payload looks like:

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "flagged_comments": "api/comments/flagged" }
      }
    }
    ```

    The normalized version would look like this

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "flaggedComments": "api/comments/flagged" }
      }
    }
    ```
  itemtype: method
  name: normalize
  params:
  - name: typeClass
    description: ''
    type: subclass of DS.Model
  - name: hash
    description: ''
    type: Object
  - name: prop
    description: ''
    type: String
  return:
    description: Object
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 215
  description: Convert `snake_cased` links  to `camelCase`
  itemtype: method
  name: normalizeLinks
  params:
  - name: data
    description: ''
    type: Object
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/activemodel-adapter/lib/system/active-model-serializer.js
  line: 237
  description: |-
    Normalize the polymorphic type from the JSON.

    Normalize:
    ```js
      {
        id: "1"
        minion: { type: "evil_minion", id: "12"}
      }
    ```

    To:
    ```js
      {
        id: "1"
        minion: { type: "evilMinion", id: "12"}
      }
    ```
  params:
  - name: typeClass
    description: ''
    type: Subclass of DS.Model
  itemtype: method
  name: normalizeRelationships
  access: private
  tagname: ''
  class: DS.ActiveModelSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 31
  description: |-
    Builds a URL for a given type and optional ID.

    By default, it pluralizes the type's name (for example, 'post'
    becomes 'posts' and 'person' becomes 'people'). To override the
    pluralization see [pathForType](#method_pathForType).

    If an ID is specified, it adds the ID to the path generated
    for the type, separated by a `/`.

    When called by RESTAdapter.findMany() the `id` and `snapshot` parameters
    will be arrays of ids and snapshots.
  itemtype: method
  name: buildURL
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: single id or array of ids or query
    type: "(String|Array|Object)"
  - name: snapshot
    description: single snapshot or array of snapshots
    type: "(DS.Snapshot|Array)"
  - name: requestType
    description: ''
    type: String
  - name: query
    description: object of query parameters to send for findQuery requests.
    type: Object
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 77
  itemtype: method
  name: _buildURL
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 106
  itemtype: method
  name: urlForFind
  params:
  - name: id
    description: ''
    type: String
  - name: modelName
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 117
  itemtype: method
  name: urlForFindAll
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 126
  itemtype: method
  name: urlForFindQuery
  params:
  - name: query
    description: ''
    type: Object
  - name: modelName
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 136
  itemtype: method
  name: urlForFindMany
  params:
  - name: ids
    description: ''
    type: Array
  - name: modelName
    description: ''
    type: String
  - name: snapshots
    description: ''
    type: Array
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 147
  itemtype: method
  name: urlForFindHasMany
  params:
  - name: id
    description: ''
    type: String
  - name: modelName
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 157
  itemtype: method
  name: urlForFindBelongTo
  params:
  - name: id
    description: ''
    type: String
  - name: modelName
    description: ''
    type: String
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 167
  itemtype: method
  name: urlForCreateRecord
  params:
  - name: modelName
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 177
  itemtype: method
  name: urlForUpdateRecord
  params:
  - name: id
    description: ''
    type: String
  - name: modelName
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 188
  itemtype: method
  name: urlForDeleteRecord
  params:
  - name: id
    description: ''
    type: String
  - name: modelName
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: url
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 199
  itemtype: method
  name: urlPrefix
  access: private
  tagname: ''
  params:
  - name: path
    description: ''
    type: String
  - name: parentURL
    description: ''
    type: String
  return:
    description: urlPrefix
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/build-url-mixin.js
  line: 242
  description: |-
    Determines the pathname for a given type.

    By default, it pluralizes the type's name (for example,
    'post' becomes 'posts' and 'person' becomes 'people').

    ### Pathname customization

    For example if you have an object LineItem with an
    endpoint of "/line_items/".

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      pathForType: function(modelName) {
        var decamelized = Ember.String.decamelize(modelName);
        return Ember.String.pluralize(decamelized);
      }
    });
    ```
  itemtype: method
  name: pathForType
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: path
    type: String
  class: DS.BuildURLMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 35
  description: |-
    If `simulateRemoteResponse` is `true` the `FixtureAdapter` will
    wait a number of milliseconds before resolving promises with the
    fixture values. The wait time can be configured via the `latency`
    property.
  itemtype: property
  name: simulateRemoteResponse
  type: "{Boolean}"
  default: 'true'
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 47
  description: |-
    By default the `FixtureAdapter` will simulate a wait of the
    `latency` milliseconds before resolving promises with the fixture
    values. This behavior can be turned off via the
    `simulateRemoteResponse` property.
  itemtype: property
  name: latency
  type: "{Number}"
  default: '50'
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 59
  description: Implement this method in order to provide data associated with a type
  itemtype: method
  name: fixturesForType
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  return:
    description: ''
    type: Array
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 81
  description: Implement this method in order to query fixtures data
  itemtype: method
  name: queryFixtures
  params:
  - name: fixtures
    description: ''
    type: Array
  - name: query
    description: ''
    type: Object
  - name: typeClass
    description: ''
    type: DS.Model
  return:
    description: ''
    type: "(Promise|Array)"
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 94
  itemtype: method
  name: updateFixtures
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: fixture
    description: ''
    type: Array
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 111
  description: Implement this method in order to provide json for CRUD methods
  itemtype: method
  name: mockJSON
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 123
  itemtype: method
  name: generateIdForRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  return:
    description: id
    type: String
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 132
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: id
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 157
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: ids
    description: ''
    type: Array
  - name: snapshots
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 183
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 200
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: query
    description: ''
    type: Object
  - name: array
    description: ''
    type: DS.AdapterPopulatedRecordArray
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 223
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 240
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/fixture-adapter.js
  line: 257
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.FixtureAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 189
  description: |-
    By default, the RESTAdapter will send the query params sorted alphabetically to the
    server.

    For example:

    ```js
      store.find('posts', {sort: 'price', category: 'pets'});
    ```

    will generate a requests like this `/posts?category=pets&sort=price`, even if the
    parameters were specified in a different order.

    That way the generated URL will be deterministic and that simplifies caching mechanisms
    in the backend.

    Setting `sortQueryParams` to a falsey value will respect the original order.

    In case you want to sort the query parameters with a different criteria, set
    `sortQueryParams` to your custom sort function.

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      sortQueryParams: function(params) {
        var sortedKeys = Object.keys(params).sort().reverse();
        var len = sortedKeys.length, newParams = {};

        for (var i = 0; i < len; i++) {
          newParams[sortedKeys[i]] = params[sortedKeys[i]];
        }
        return newParams;
      }
    });
    ```
  itemtype: method
  name: sortQueryParams
  params:
  - name: obj
    description: ''
    type: Object
  return:
    description: ''
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 245
  description: |-
    By default the RESTAdapter will send each find request coming from a `store.find`
    or from accessing a relationship separately to the server. If your server supports passing
    ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests
    within a single runloop.

    For example, if you have an initial payload of:

    ```javascript
    {
      post: {
        id: 1,
        comments: [1, 2]
      }
    }
    ```

    By default calling `post.get('comments')` will trigger the following requests(assuming the
    comments haven't been loaded before):

    ```
    GET /comments/1
    GET /comments/2
    ```

    If you set coalesceFindRequests to `true` it will instead trigger the following request:

    ```
    GET /comments?ids[]=1&ids[]=2
    ```

    Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`
    relationships accessed within the same runloop. If you set `coalesceFindRequests: true`

    ```javascript
    store.find('comment', 1);
    store.find('comment', 2);
    ```

    will also send a request to: `GET /comments?ids[]=1&ids[]=2`

    Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app
    `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.
  itemtype: property
  name: coalesceFindRequests
  type: "{boolean}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 294
  description: |-
    Endpoint paths can be prefixed with a `namespace` by setting the namespace
    property on the adapter:

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      namespace: 'api/1'
    });
    ```

    Requests for `App.Post` would now target `/api/1/post/`.
  itemtype: property
  name: namespace
  type: "{String}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 312
  description: |-
    An adapter can target other hosts by setting the `host` property.

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      host: 'https://api.example.com'
    });
    ```

    Requests for `App.Post` would now target `https://api.example.com/post/`.
  itemtype: property
  name: host
  type: "{String}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 329
  description: |-
    Some APIs require HTTP headers, e.g. to provide an API
    key. Arbitrary headers can be set as key/value pairs on the
    `RESTAdapter`'s `headers` object and Ember Data will send them
    along with each ajax request. For dynamic headers see [headers
    customization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      headers: {
        "API_KEY": "secret key",
        "ANOTHER_HEADER": "Some header value"
      }
    });
    ```
  itemtype: property
  name: headers
  type: "{Object}"
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 351
  description: |-
    Called by the store in order to fetch the JSON for a given
    type and ID.

    The `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.

    This method performs an HTTP `GET` request with the id provided as part of the query string.
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: id
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 371
  description: |-
    Called by the store in order to fetch a JSON array for all
    of the records for a given type.

    The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: sinceToken
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 397
  description: |-
    Called by the store in order to fetch a JSON array for
    the records that match a particular query.

    The `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.

    The `query` argument is a simple JavaScript object that will be passed directly
    to the server as parameters.
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: query
    description: ''
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 424
  description: |-
    Called by the store in order to fetch several records together if `coalesceFindRequests` is true

    For example, if the original payload looks like:

    ```js
    {
      "id": 1,
      "title": "Rails is omakase",
      "comments": [ 1, 2, 3 ]
    }
    ```

    The IDs will be passed as a URL-encoded Array of IDs, in this form:

    ```
    ids[]=1&ids[]=2&ids[]=3
    ```

    Many servers, such as Rails and PHP, will automatically convert this URL-encoded array
    into an Array for you on the server-side. If you want to encode the
    IDs, differently, just override this (one-line) method.

    The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a
    promise for the resulting payload.
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: ids
    description: ''
    type: Array
  - name: snapshots
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 462
  description: |-
    Called by the store in order to fetch a JSON array for
    the unloaded records in a has-many relationship that were originally
    specified as a URL (inside of `links`).

    For example, if your original payload looks like this:

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "links": { "comments": "/posts/1/comments" }
      }
    }
    ```

    This method will be called with the parent record and `/posts/1/comments`.

    The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.
  itemtype: method
  name: findHasMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: url
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 498
  description: |-
    Called by the store in order to fetch a JSON array for
    the unloaded records in a belongs-to relationship that were originally
    specified as a URL (inside of `links`).

    For example, if your original payload looks like this:

    ```js
    {
      "person": {
        "id": 1,
        "name": "Tom Dale",
        "links": { "group": "/people/1/group" }
      }
    }
    ```

    This method will be called with the parent record and `/people/1/group`.

    The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.
  itemtype: method
  name: findBelongsTo
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: url
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 533
  description: |-
    Called by the store when a newly created record is
    saved via the `save` method on a model record instance.

    The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request
    to a URL computed by `buildURL`.

    See `serialize` for information on how to customize the serialized form
    of a record.
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 559
  description: |-
    Called by the store when an existing record is saved
    via the `save` method on a model record instance.

    The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request
    to a URL computed by `buildURL`.

    See `serialize` for information on how to customize the serialized form
    of a record.
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 587
  description: |-
    Called by the store when a record is deleted.

    The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 624
  description: |-
    Organize records into groups, each of which is to be passed to separate
    calls to `findMany`.

    This implementation groups together records that have the same base URL but
    differing ids. For example `/comments/1` and `/comments/2` will be grouped together
    because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`

    It also supports urls where ids are passed as a query param, such as `/comments?id=1`
    but not those where there is more than 1 query param such as `/comments?id=2&name=David`
    Currently only the query param of `id` is supported. If you need to support others, please
    override this or the `_stripIDFromURL` method.

    It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`
    and `/posts/2/comments/3`
  itemtype: method
  name: groupRecordsForFindMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: snapshots
    description: ''
    type: Array
  return:
    description: |-
      an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    type: Array
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 691
  description: |-
    Takes an ajax response, and returns an error payload.

    Returning a `DS.InvalidError` from this method will cause the
    record to transition into the `invalid` state and make the
    `errors` object available on the record. When returning an
    `InvalidError` the store will attempt to normalize the error data
    returned from the server using the serializer's `extractErrors`
    method.

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.RESTAdapter.extend({
      ajaxError: function(jqXHR) {
        var error = this._super(jqXHR);

        if (jqXHR && jqXHR.status === 422) {
          var jsonErrors = Ember.$.parseJSON(jqXHR.responseText);

          return new DS.InvalidError(jsonErrors);
        } else {
          return error;
        }
      }
    });
    ```

    Note: As a correctness optimization, the default implementation of
    the `ajaxError` method strips out the `then` method from jquery's
    ajax response (jqXHR). This is important because the jqXHR's
    `then` method fulfills the promise with itself resulting in a
    circular "thenable" chain which may cause problems for some
    promise libraries.
  itemtype: method
  name: ajaxError
  params:
  - name: jqXHR
    description: ''
    type: Object
  - name: responseText
    description: ''
    type: Object
  - name: errorThrown
    description: ''
    type: Object
  return:
    description: jqXHR
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 751
  description: |-
    Takes an ajax response, and returns the json payload.

    By default this hook just returns the jsonPayload passed to it.
    You might want to override it in two cases:

    1. Your API might return useful results in the request headers.
    If you need to access these, you can override this hook to copy them
    from jqXHR to the payload object so they can be processed in you serializer.

    2. Your API might return errors as successful responses with status code
    200 and an Errors text or object. You can return a DS.InvalidError from
    this hook and it will automatically reject the promise and put your record
    into the invalid state.
  itemtype: method
  name: ajaxSuccess
  params:
  - name: jqXHR
    description: ''
    type: Object
  - name: jsonPayload
    description: ''
    type: Object
  return:
    description: jsonPayload
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 776
  description: |-
    Takes a URL, an HTTP method and a hash of data, and makes an
    HTTP request.

    When the server responds with a payload, Ember Data will call into `extractSingle`
    or `extractArray` (depending on whether the original query was for one record or
    many records).

    By default, `ajax` method has the following behavior:

    * It sets the response `dataType` to `"json"`
    * If the HTTP method is not `"GET"`, it sets the `Content-Type` to be
      `application/json; charset=utf-8`
    * If the HTTP method is not `"GET"`, it stringifies the data passed in. The
      data is the serialized record in the case of a save.
    * Registers success and failure handlers.
  itemtype: method
  name: ajax
  access: private
  tagname: ''
  params:
  - name: url
    description: ''
    type: String
  - name: type
    description: The request type GET, POST, PUT, DELETE etc.
    type: String
  - name: options
    description: ''
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/adapters/rest-adapter.js
  line: 823
  itemtype: method
  name: ajaxOptions
  access: private
  tagname: ''
  params:
  - name: url
    description: ''
    type: String
  - name: type
    description: The request type GET, POST, PUT, DELETE etc.
    type: String
  - name: options
    description: ''
    type: Object
  return:
    description: ''
    type: Object
  class: DS.RESTAdapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/ext/date.js
  line: 21
  itemtype: method
  name: parse
  params:
  - name: date
    description: ''
    type: Date
  return:
    description: timestamp
    type: Number
  class: Ember.Date
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/initializers/data-adapter.js
  line: 3
  description: |-
    Configures a registry with injections on Ember applications
    for the Ember-Data store. Accepts an optional namespace argument.
  itemtype: method
  name: initializeStoreInjections
  params:
  - name: registry
    description: ''
    type: Ember.Registry
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/initializers/store-injections.js
  line: 1
  description: |-
    Configures a registry with injections on Ember applications
    for the Ember-Data store. Accepts an optional namespace argument.
  itemtype: method
  name: initializeStoreInjections
  params:
  - name: registry
    description: ''
    type: Ember.Registry
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/initializers/store.js
  line: 5
  description: |-
    Configures a registry for use with an Ember-Data
    store. Accepts an optional namespace argument.
  itemtype: method
  name: initializeStore
  params:
  - name: registry
    description: ''
    type: Ember.Registry
  - name: application
    description: an application namespace
    type: Object
    optional: true
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/initializers/transforms.js
  line: 8
  description: |-
    Configures a registry for use with Ember-Data
    transforms.
  itemtype: method
  name: initializeTransforms
  params:
  - name: registry
    description: ''
    type: Ember.Registry
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/instance-initializers/initialize-store-service.js
  line: 2
  description: |-
    Configures a registry for use with an Ember-Data
    store.
  itemtype: method
  name: initializeStore
  params:
  - name: applicationOrRegistry
    description: ''
    type: Ember.ApplicationInstance
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: Ember
- file: packages/ember-data/lib/serializers/embedded-records-mixin.js
  line: 96
  description: |-
    Normalize the record and recursively normalize/extract all the embedded records
    while pushing them into the store as they are encountered

    A payload with an attr configured for embedded records needs to be extracted:

    ```js
    {
      "post": {
        "id": "1"
        "title": "Rails is omakase",
        "comments": [{
          "id": "1",
          "body": "Rails is unagi"
        }, {
          "id": "2",
          "body": "Omakase O_o"
        }]
      }
    }
    ```
  itemtype: method
  name: normalize
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: hash
    description: to be normalized
    type: Object
  - name: prop
    description: the hash has been referenced by
    type: String
  return:
    description: the normalized hash
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/embedded-records-mixin.js
  line: 137
  description: |-
    Serialize `belongsTo` relationship when it is configured as an embedded object.

    This example of an author model belongs to a post model:

    ```js
    Post = DS.Model.extend({
      title:    DS.attr('string'),
      body:     DS.attr('string'),
      author:   DS.belongsTo('author')
    });

    Author = DS.Model.extend({
      name:     DS.attr('string'),
      post:     DS.belongsTo('post')
    });
    ```

    Use a custom (type) serializer for the post model to configure embedded author

    ```app/serializers/post.js
    import DS from 'ember-data;

    export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
      attrs: {
        author: {embedded: 'always'}
      }
    })
    ```

    A payload with an attribute configured for embedded records can serialize
    the records together under the root attribute's payload:

    ```js
    {
      "post": {
        "id": "1"
        "title": "Rails is omakase",
        "author": {
          "id": "2"
          "name": "dhh"
        }
      }
    }
    ```
  itemtype: method
  name: serializeBelongsTo
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/embedded-records-mixin.js
  line: 216
  description: |-
    Serialize `hasMany` relationship when it is configured as embedded objects.

    This example of a post model has many comments:

    ```js
    Post = DS.Model.extend({
      title:    DS.attr('string'),
      body:     DS.attr('string'),
      comments: DS.hasMany('comment')
    });

    Comment = DS.Model.extend({
      body:     DS.attr('string'),
      post:     DS.belongsTo('post')
    });
    ```

    Use a custom (type) serializer for the post model to configure embedded comments

    ```app/serializers/post.js
    import DS from 'ember-data;

    export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
      attrs: {
        comments: {embedded: 'always'}
      }
    })
    ```

    A payload with an attribute configured for embedded records can serialize
    the records together under the root attribute's payload:

    ```js
    {
      "post": {
        "id": "1"
        "title": "Rails is omakase",
        "body": "I want this for my ORM, I want that for my template language..."
        "comments": [{
          "id": "1",
          "body": "Rails is unagi"
        }, {
          "id": "2",
          "body": "Omakase O_o"
        }]
      }
    }
    ```

    The attrs options object can use more specific instruction for extracting and
    serializing. When serializing, an option to embed `ids` or `records` can be set.
    When extracting the only option is `records`.

    So `{embedded: 'always'}` is shorthand for:
    `{serialize: 'records', deserialize: 'records'}`

    To embed the `ids` for a related object (using a hasMany relationship):

    ```app/serializers/post.js
    import DS from 'ember-data;

    export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {
      attrs: {
        comments: {serialize: 'ids', deserialize: 'records'}
      }
    })
    ```

    ```js
    {
      "post": {
        "id": "1"
        "title": "Rails is omakase",
        "body": "I want this for my ORM, I want that for my template language..."
        "comments": ["1", "2"]
      }
    }
    ```
  itemtype: method
  name: serializeHasMany
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/embedded-records-mixin.js
  line: 327
  description: |-
    When serializing an embedded record, modify the property (in the json payload)
    that refers to the parent record (foreign key for relationship).

    Serializing a `belongsTo` relationship removes the property that refers to the
    parent record

    Serializing a `hasMany` relationship does not remove the property that refers to
    the parent record.
  itemtype: method
  name: removeEmbeddedForeignKey
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: embeddedSnapshot
    description: ''
    type: DS.Snapshot
  - name: relationship
    description: ''
    type: Object
  - name: json
    description: ''
    type: Object
  class: DS.EmbeddedRecordsMixin
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 25
  description: |-
    The primaryKey is used when serializing and deserializing
    data. Ember Data always uses the `id` property to store the id of
    the record. The external source may not always follow this
    convention. In these cases it is useful to override the
    primaryKey property to match the primaryKey of your external
    store.

    Example

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      primaryKey: '_id'
    });
    ```
  itemtype: property
  name: primaryKey
  type: "{String}"
  default: "'id'"
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 49
  description: |-
    The `attrs` object can be used to declare a simple mapping between
    property names on `DS.Model` records and payload keys in the
    serialized JSON object representing the record. An object with the
    property `key` can also be used to designate the attribute's key on
    the response payload.

    Example

    ```app/models/person.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      firstName: DS.attr('string'),
      lastName: DS.attr('string'),
      occupation: DS.attr('string'),
      admin: DS.attr('boolean')
    });
    ```

    ```app/serializers/person.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      attrs: {
        admin: 'is_admin',
        occupation: {key: 'career'}
      }
    });
    ```

    You can also remove attributes by setting the `serialize` key to
    false in your mapping object.

    Example

    ```app/serializers/person.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      attrs: {
        admin: {serialize: false},
        occupation: {key: 'career'}
      }
    });
    ```

    When serialized:

    ```javascript
    {
      "firstName": "Harry",
      "lastName": "Houdini",
      "career": "magician"
    }
    ```

    Note that the `admin` is now not included in the payload.
  itemtype: property
  name: attrs
  type: "{Object}"
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 113
  description: |-
    Given a subclass of `DS.Model` and a JSON object this method will
    iterate through each attribute of the `DS.Model` and invoke the
    `DS.Transform#deserialize` method on the matching property of the
    JSON object.  This method is typically called after the
    serializer's `normalize` method.
  itemtype: method
  name: applyTransforms
  access: private
  tagname: ''
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: data
    description: The data to transform
    type: Object
  return:
    description: data The transformed data object
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 137
  description: |-
    Normalizes a part of the JSON payload returned by
    the server. You should override this method, munge the hash
    and call super if you have generic normalization to do.

    It takes the type of the record that is being normalized
    (as a DS.Model class), the property where the hash was
    originally found, and the hash to normalize.

    You can use this method, for example, to normalize underscored keys to camelized
    or other general-purpose normalizations.

    Example

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      normalize: function(typeClass, hash) {
        var fields = Ember.get(typeClass, 'fields');
        fields.forEach(function(field) {
          var payloadField = Ember.String.underscore(field);
          if (field === payloadField) { return; }

          hash[field] = hash[payloadField];
          delete hash[payloadField];
        });
        return this._super.apply(this, arguments);
      }
    });
    ```
  itemtype: method
  name: normalize
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: hash
    description: ''
    type: Object
  return:
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 186
  description: |-
    You can use this method to normalize all payloads, regardless of whether they
    represent single records or an array.

    For example, you might want to remove some extraneous data from the payload:

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      normalizePayload: function(payload) {
        delete payload.version;
        delete payload.status;
        return payload;
      }
    });
    ```
  itemtype: method
  name: normalizePayload
  params:
  - name: payload
    description: ''
    type: Object
  return:
    description: the normalized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 212
  itemtype: method
  name: normalizeAttributes
  access: private
  tagname: ''
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 231
  itemtype: method
  name: normalizeRelationships
  access: private
  tagname: ''
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 250
  itemtype: method
  name: normalizeUsingDeclaredMapping
  access: private
  tagname: ''
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 271
  itemtype: method
  name: normalizeId
  access: private
  tagname: ''
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 284
  itemtype: method
  name: normalizeErrors
  access: private
  tagname: ''
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 295
  description: |-
    Looks up the property key that was set by the custom `attr` mapping
    passed to the serializer.
  itemtype: method
  name: _getMappedKey
  access: private
  tagname: ''
  params:
  - name: key
    description: ''
    type: String
  return:
    description: key
    type: String
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 322
  description: |-
    Check attrs.key.serialize property to inform if the `key`
    can be serialized
  itemtype: method
  name: _canSerialize
  access: private
  tagname: ''
  params:
  - name: key
    description: ''
    type: String
  return:
    description: true if the key can be serialized
    type: Boolean
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 338
  description: |-
    Called when a record is saved in order to convert the
    record into JSON.

    By default, it creates a JSON object with a key for
    each attribute and belongsTo relationship.

    For example, consider this model:

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      title: DS.attr(),
      body: DS.attr(),

      author: DS.belongsTo('user')
    });
    ```

    The default serialization would create a JSON object like:

    ```javascript
    {
      "title": "Rails is unagi",
      "body": "Rails? Omakase? O_O",
      "author": 12
    }
    ```

    By default, attributes are passed through as-is, unless
    you specified an attribute type (`DS.attr('date')`). If
    you specify a transform, the JavaScript value will be
    serialized when inserted into the JSON hash.

    By default, belongs-to relationships are converted into
    IDs when inserted into the JSON hash.

    ## IDs

    `serialize` takes an options hash with a single option:
    `includeId`. If this option is `true`, `serialize` will,
    by default include the ID in the JSON object it builds.

    The adapter passes in `includeId: true` when serializing
    a record for `createRecord`, but not for `updateRecord`.

    ## Customization

    Your server may expect a different JSON format than the
    built-in serialization format.

    In that case, you can implement `serialize` yourself and
    return a JSON hash of your choosing.

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serialize: function(snapshot, options) {
        var json = {
          POST_TTL: snapshot.attr('title'),
          POST_BDY: snapshot.attr('body'),
          POST_CMS: snapshot.hasMany('comments', { ids: true })
        }

        if (options.includeId) {
          json.POST_ID_ = snapshot.id;
        }

        return json;
      }
    });
    ```

    ## Customizing an App-Wide Serializer

    If you want to define a serializer for your entire
    application, you'll probably want to use `eachAttribute`
    and `eachRelationship` on the record.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serialize: function(snapshot, options) {
        var json = {};

        snapshot.eachAttribute(function(name) {
          json[serverAttributeName(name)] = snapshot.attr(name);
        })

        snapshot.eachRelationship(function(name, relationship) {
          if (relationship.kind === 'hasMany') {
            json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
          }
        });

        if (options.includeId) {
          json.ID_ = snapshot.id;
        }

        return json;
      }
    });

    function serverAttributeName(attribute) {
      return attribute.underscore().toUpperCase();
    }

    function serverHasManyName(name) {
      return serverAttributeName(name.singularize()) + "_IDS";
    }
    ```

    This serializer will generate JSON that looks like this:

    ```javascript
    {
      "TITLE": "Rails is omakase",
      "BODY": "Yep. Omakase.",
      "COMMENT_IDS": [ 1, 2, 3 ]
    }
    ```

    ## Tweaking the Default JSON

    If you just want to do some small tweaks on the default JSON,
    you can call super first and make the tweaks on the returned
    JSON.

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serialize: function(snapshot, options) {
        var json = this._super.apply(this, arguments);

        json.subject = json.title;
        delete json.title;

        return json;
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: options
    description: ''
    type: Object
  return:
    description: json
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 515
  description: |-
    You can use this method to customize how a serialized record is added to the complete
    JSON hash to be sent to the server. By default the JSON Serializer does not namespace
    the payload and just sends the raw serialized JSON object.
    If your server expects namespaced keys, you should consider using the RESTSerializer.
    Otherwise you can override this method to customize how the record is added to the hash.

    For example, your server may expect underscored root objects.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      serializeIntoHash: function(data, type, snapshot, options) {
        var root = Ember.String.decamelize(type.modelName);
        data[root] = this.serialize(snapshot, options);
      }
    });
    ```
  itemtype: method
  name: serializeIntoHash
  params:
  - name: hash
    description: ''
    type: Object
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: options
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 545
  description: |-
    `serializeAttribute` can be used to customize how `DS.attr`
    properties are serialized

    For example if you wanted to ensure all your attributes were always
    serialized as properties on an `attributes` object you could
    write:

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serializeAttribute: function(snapshot, json, key, attributes) {
        json.attributes = json.attributes || {};
        this._super(snapshot, json.attributes, key, attributes);
      }
    });
    ```
  itemtype: method
  name: serializeAttribute
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: key
    description: ''
    type: String
  - name: attribute
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 592
  description: |-
    `serializeBelongsTo` can be used to customize how `DS.belongsTo`
    properties are serialized.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serializeBelongsTo: function(snapshot, json, relationship) {
        var key = relationship.key;

        var belongsTo = snapshot.belongsTo(key);

        key = this.keyForRelationship ? this.keyForRelationship(key, "belongsTo", "serialize") : key;

        json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();
      }
    });
    ```
  itemtype: method
  name: serializeBelongsTo
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 645
  description: |-
    `serializeHasMany` can be used to customize how `DS.hasMany`
    properties are serialized.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serializeHasMany: function(snapshot, json, relationship) {
        var key = relationship.key;
        if (key === 'comments') {
          return;
        } else {
          this._super.apply(this, arguments);
        }
      }
    });
    ```
  itemtype: method
  name: serializeHasMany
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 693
  description: |-
    You can use this method to customize how polymorphic objects are
    serialized. Objects are considered to be polymorphic if
    `{polymorphic: true}` is pass as the second argument to the
    `DS.belongsTo` function.

    Example

    ```app/serializers/comment.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serializePolymorphicType: function(snapshot, json, relationship) {
        var key = relationship.key,
            belongsTo = snapshot.belongsTo(key);
        key = this.keyForAttribute ? this.keyForAttribute(key, "serialize") : key;

        if (Ember.isNone(belongsTo)) {
          json[key + "_type"] = null;
        } else {
          json[key + "_type"] = belongsTo.modelName;
        }
      }
    });
    ```
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 728
  description: |-
    The `extract` method is used to deserialize payload data from the
    server. By default the `JSONSerializer` does not push the records
    into the store. However records that subclass `JSONSerializer`
    such as the `RESTSerializer` may push records into the store as
    part of the extract call.

    This method delegates to a more specific extract method based on
    the `requestType`.

    To override this method with a custom one, make sure to call
    `return this._super(store, type, payload, id, requestType)` with your
    pre-processed data.

    Here's an example of using `extract` manually:

    ```javascript
    socket.on('message', function(message) {
      var data = message.data;
      var typeClass = store.modelFor(message.modelName);
      var serializer = store.serializerFor(typeClass.modelName);
      var record = serializer.extract(store, typeClass, data, data.id, 'single');

      store.push(message.modelName, record);
    });
    ```
  itemtype: method
  name: extract
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 770
  description: |-
    `extractFindAll` is a hook into the extract method used when a
    call is made to `DS.Store#findAll`. By default this method is an
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 786
  description: |-
    `extractFindQuery` is a hook into the extract method used when a
    call is made to `DS.Store#findQuery`. By default this method is an
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 802
  description: |-
    `extractFindMany` is a hook into the extract method used when a
    call is made to `DS.Store#findMany`. By default this method is
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 818
  description: |-
    `extractFindHasMany` is a hook into the extract method used when a
    call is made to `DS.Store#findHasMany`. By default this method is
    alias for [extractArray](#method_extractArray).
  itemtype: method
  name: extractFindHasMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 835
  description: |-
    `extractCreateRecord` is a hook into the extract method used when a
    call is made to `DS.Model#save` and the record is new. By default
    this method is alias for [extractSave](#method_extractSave).
  itemtype: method
  name: extractCreateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 851
  description: |-
    `extractUpdateRecord` is a hook into the extract method used when
    a call is made to `DS.Model#save` and the record has been updated.
    By default this method is alias for [extractSave](#method_extractSave).
  itemtype: method
  name: extractUpdateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 867
  description: |-
    `extractDeleteRecord` is a hook into the extract method used when
    a call is made to `DS.Model#save` and the record has been deleted.
    By default this method is alias for [extractSave](#method_extractSave).
  itemtype: method
  name: extractDeleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 884
  description: |-
    `extractFind` is a hook into the extract method used when
    a call is made to `DS.Store#find`. By default this method is
    alias for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractFind
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 900
  description: |-
    `extractFindBelongsTo` is a hook into the extract method used when
    a call is made to `DS.Store#findBelongsTo`. By default this method is
    alias for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractFindBelongsTo
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 916
  description: |-
    `extractSave` is a hook into the extract method used when a call
    is made to `DS.Model#save`. By default this method is alias
    for [extractSingle](#method_extractSingle).
  itemtype: method
  name: extractSave
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 933
  description: |-
    `extractSingle` is used to deserialize a single record returned
    from the adapter.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      extractSingle: function(store, typeClass, payload) {
        payload.comments = payload._embedded.comment;
        delete payload._embedded;

        return this._super(store, typeClass, payload);
      },
    });
    ```
  itemtype: method
  name: extractSingle
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: json The deserialized payload
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 965
  description: |-
    `extractArray` is used to deserialize an array of records
    returned from the adapter.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      extractArray: function(store, typeClass, payload) {
        return payload.map(function(json) {
          return this.extractSingle(store, typeClass, json);
        }, this);
      }
    });
    ```
  itemtype: method
  name: extractArray
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: arrayPayload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: array An array of deserialized objects
    type: Array
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 1000
  description: |-
    `extractMeta` is used to deserialize any meta information in the
    adapter payload. By default Ember Data expects meta information to
    be located on the `meta` property of the payload object.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      extractMeta: function(store, typeClass, payload) {
        if (payload && payload._pagination) {
          store.setMetadataFor(typeClass, payload._pagination);
          delete payload._pagination;
        }
      }
    });
    ```
  itemtype: method
  name: extractMeta
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 1032
  description: |-
    `extractErrors` is used to extract model errors when a call is made
    to `DS.Model#save` which fails with an `InvalidError`. By default
    Ember Data expects error information to be located on the `errors`
    property of the payload object.

    Example

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      extractErrors: function(store, typeClass, payload, id) {
        if (payload && typeof payload === 'object' && payload._problems) {
          payload = payload._problems;
          this.normalizeErrors(typeClass, payload);
        }
        return payload;
      }
    });
    ```
  itemtype: method
  name: extractErrors
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  return:
    description: json The deserialized errors
    type: Object
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 1069
  description: |-
    `keyForAttribute` can be used to define rules for how to convert an
    attribute name in your model to a key in your JSON.

    Example

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      keyForAttribute: function(attr, method) {
        return Ember.String.underscore(attr).toUpperCase();
      }
    });
    ```
  itemtype: method
  name: keyForAttribute
  params:
  - name: key
    description: ''
    type: String
  - name: method
    description: ''
    type: String
  return:
    description: normalized key
    type: String
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 1094
  description: |-
    `keyForRelationship` can be used to define a custom key when
    serializing and deserializing relationship properties. By default
    `JSONSerializer` does not provide an implementation of this method.

    Example

     ```app/serializers/post.js
     import DS from 'ember-data';

     export default DS.JSONSerializer.extend({
       keyForRelationship: function(key, relationship, method) {
         return 'rel_' + Ember.String.underscore(key);
       }
     });
     ```
  itemtype: method
  name: keyForRelationship
  params:
  - name: key
    description: ''
    type: String
  - name: typeClass
    description: ''
    type: String
  - name: method
    description: ''
    type: String
  return:
    description: normalized key
    type: String
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/json-serializer.js
  line: 1124
  itemtype: method
  name: transformFor
  access: private
  tagname: ''
  params:
  - name: attributeType
    description: ''
    type: String
  - name: skipAssertion
    description: ''
    type: Boolean
  return:
    description: transform
    type: DS.Transform
  class: DS.JSONSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 58
  description: |-
    If you want to do normalizations specific to some part of the payload, you
    can specify those under `normalizeHash`.

    For example, given the following json where the the `IDs` under
    `"comments"` are provided as `_id` instead of `id`.

    ```javascript
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2 ]
      },
      "comments": [{
        "_id": 1,
        "body": "FIRST"
      }, {
        "_id": 2,
        "body": "Rails is unagi"
      }]
    }
    ```

    You use `normalizeHash` to normalize just the comments:

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      normalizeHash: {
        comments: function(hash) {
          hash.id = hash._id;
          delete hash._id;
          return hash;
        }
      }
    });
    ```

    The key under `normalizeHash` is usually just the original key
    that was in the original payload. However, key names will be
    impacted by any modifications done in the `normalizePayload`
    method. The `DS.RESTSerializer`'s default implementation makes no
    changes to the payload keys.
  itemtype: property
  name: normalizeHash
  type: "{Object}"
  default: undefined
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 109
  description: |-
    Normalizes a part of the JSON payload returned by
    the server. You should override this method, munge the hash
    and call super if you have generic normalization to do.

    It takes the type of the record that is being normalized
    (as a DS.Model class), the property where the hash was
    originally found, and the hash to normalize.

    For example, if you have a payload that looks like this:

    ```js
    {
      "post": {
        "id": 1,
        "title": "Rails is omakase",
        "comments": [ 1, 2 ]
      },
      "comments": [{
        "id": 1,
        "body": "FIRST"
      }, {
        "id": 2,
        "body": "Rails is unagi"
      }]
    }
    ```

    The `normalize` method will be called three times:

    * With `App.Post`, `"posts"` and `{ id: 1, title: "Rails is omakase", ... }`
    * With `App.Comment`, `"comments"` and `{ id: 1, body: "FIRST" }`
    * With `App.Comment`, `"comments"` and `{ id: 2, body: "Rails is unagi" }`

    You can use this method, for example, to normalize underscored keys to camelized
    or other general-purpose normalizations.

    If you want to do normalizations specific to some part of the payload, you
    can specify those under `normalizeHash`.

    For example, if the `IDs` under `"comments"` are provided as `_id` instead of
    `id`, you can specify how to normalize just the comments:

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      normalizeHash: {
        comments: function(hash) {
          hash.id = hash._id;
          delete hash._id;
          return hash;
        }
      }
    });
    ```

    The key under `normalizeHash` is just the original key that was in the original
    payload.
  itemtype: method
  name: normalize
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: hash
    description: ''
    type: Object
  - name: prop
    description: ''
    type: String
  return:
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 191
  description: |-
    Called when the server has returned a payload representing
    a single record, such as in response to a `find` or `save`.

    It is your opportunity to clean up the server's response into the normalized
    form expected by Ember Data.

    If you want, you can just restructure the top-level of your payload, and
    do more fine-grained normalization in the `normalize` method.

    For example, if you have a payload like this in response to a request for
    post 1:

    ```js
    {
      "id": 1,
      "title": "Rails is omakase",

      "_embedded": {
        "comment": [{
          "_id": 1,
          "comment_title": "FIRST"
        }, {
          "_id": 2,
          "comment_title": "Rails is unagi"
        }]
      }
    }
    ```

    You could implement a serializer that looks like this to get your payload
    into shape:

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      // First, restructure the top-level so it's organized by type
      extractSingle: function(store, typeClass, payload, id) {
        var comments = payload._embedded.comment;
        delete payload._embedded;

        payload = { comments: comments, post: payload };
        return this._super(store, typeClass, payload, id);
      },

      normalizeHash: {
        // Next, normalize individual comments, which (after `extract`)
        // are now located under `comments`
        comments: function(hash) {
          hash.id = hash._id;
          hash.title = hash.comment_title;
          delete hash._id;
          delete hash.comment_title;
          return hash;
        }
      }
    })
    ```

    When you call super from your own implementation of `extractSingle`, the
    built-in implementation will find the primary record in your normalized
    payload and push the remaining records into the store.

    The primary record is the single hash found under `post` or the first
    element of the `posts` array.

    The primary record has special meaning when the record is being created
    for the first time or updated (`createRecord` or `updateRecord`). In
    particular, it will update the properties of the record that was saved.
  itemtype: method
  name: extractSingle
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: primaryTypeClass
    description: ''
    type: DS.Model
  - name: rawPayload
    description: ''
    type: Object
  - name: recordId
    description: ''
    type: String
  return:
    description: the primary response to the original request
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 317
  description: |-
    Called when the server has returned a payload representing
    multiple records, such as in response to a `findAll` or `findQuery`.

    It is your opportunity to clean up the server's response into the normalized
    form expected by Ember Data.

    If you want, you can just restructure the top-level of your payload, and
    do more fine-grained normalization in the `normalize` method.

    For example, if you have a payload like this in response to a request for
    all posts:

    ```js
    {
      "_embedded": {
        "post": [{
          "id": 1,
          "title": "Rails is omakase"
        }, {
          "id": 2,
          "title": "The Parley Letter"
        }],
        "comment": [{
          "_id": 1,
          "comment_title": "Rails is unagi",
          "post_id": 1
        }, {
          "_id": 2,
          "comment_title": "Don't tread on me",
          "post_id": 2
        }]
      }
    }
    ```

    You could implement a serializer that looks like this to get your payload
    into shape:

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      // First, restructure the top-level so it's organized by type
      // and the comments are listed under a post's `comments` key.
      extractArray: function(store, type, payload) {
        var posts = payload._embedded.post;
        var comments = [];
        var postCache = {};

        posts.forEach(function(post) {
          post.comments = [];
          postCache[post.id] = post;
        });

        payload._embedded.comment.forEach(function(comment) {
          comments.push(comment);
          postCache[comment.post_id].comments.push(comment);
          delete comment.post_id;
        });

        payload = { comments: comments, posts: posts };

        return this._super(store, type, payload);
      },

      normalizeHash: {
        // Next, normalize individual comments, which (after `extract`)
        // are now located under `comments`
        comments: function(hash) {
          hash.id = hash._id;
          hash.title = hash.comment_title;
          delete hash._id;
          delete hash.comment_title;
          return hash;
        }
      }
    })
    ```

    When you call super from your own implementation of `extractArray`, the
    built-in implementation will find the primary array in your normalized
    payload and push the remaining records into the store.

    The primary array is the array found under `posts`.

    The primary record has special meaning when responding to `findQuery`
    or `findHasMany`. In particular, the primary array will become the
    list of records in the record array that kicked off the request.

    If your primary array contains secondary (embedded) records of the same type,
    you cannot place these into the primary array `posts`. Instead, place the
    secondary items into an underscore prefixed property `_posts`, which will
    push these items into the store and will not affect the resulting query.
  itemtype: method
  name: extractArray
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: primaryTypeClass
    description: ''
    type: DS.Model
  - name: rawPayload
    description: ''
    type: Object
  return:
    description: |-
      The primary array that was returned in response
        to the original query.
    type: Array
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 466
  description: |-
    This method allows you to push a payload containing top-level
    collections of records organized per type.

    ```js
    {
      "posts": [{
        "id": "1",
        "title": "Rails is omakase",
        "author", "1",
        "comments": [ "1" ]
      }],
      "comments": [{
        "id": "1",
        "body": "FIRST"
      }],
      "users": [{
        "id": "1",
        "name": "@d2h"
      }]
    }
    ```

    It will first normalize the payload, so you can use this to push
    in data streaming in from your server structured the same way
    that fetches and saves are structured.
  itemtype: method
  name: pushPayload
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: rawPayload
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 518
  description: |-
    This method is used to convert each JSON root key in the payload
    into a modelName that it can use to look up the appropriate model for
    that part of the payload.

    For example, your server may send a model name that does not correspond with
    the name of the model in your app. Let's take a look at an example model,
    and an example payload:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
    });
    ```

    ```javascript
      {
        "blog/post": {
          "id": "1
        }
      }
    ```

    Ember Data is going to normalize the payload's root key for the modelName. As a result,
    it will try to look up the "blog/post" model. Since we don't have a model called "blog/post"
    (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error
    because it cannot find the "blog/post" model.

    Since we want to remove this namespace, we can define a serializer for the application that will
    remove "blog/" from the payload key whenver it's encountered by Ember Data:

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      modelNameFromPayloadKey: function(payloadKey) {
        if (payloadKey === 'blog/post') {
          return this._super(payloadKey.replace('blog/', ''));
        } else {
         return this._super(payloadKey);
        }
      }
    });
    ```

    After refreshing, Ember Data will appropriately look up the "post" model.

    By default the modelName for a model is its
    name in dasherized form. This means that a payload key like "blogPost" would be
    normalized to "blog-post" when Ember Data looks up the model. Usually, Ember Data
    can use the correct inflection to do this for you. Most of the time, you won't
    need to override `modelNameFromPayloadKey` for this purpose.
  itemtype: method
  name: modelNameFromPayloadKey
  params:
  - name: key
    description: ''
    type: String
  return:
    description: the model's modelName
    type: String
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 582
  description: |-
    Called when a record is saved in order to convert the
    record into JSON.

    By default, it creates a JSON object with a key for
    each attribute and belongsTo relationship.

    For example, consider this model:

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      title: DS.attr(),
      body: DS.attr(),

      author: DS.belongsTo('user')
    });
    ```

    The default serialization would create a JSON object like:

    ```js
    {
      "title": "Rails is unagi",
      "body": "Rails? Omakase? O_O",
      "author": 12
    }
    ```

    By default, attributes are passed through as-is, unless
    you specified an attribute type (`DS.attr('date')`). If
    you specify a transform, the JavaScript value will be
    serialized when inserted into the JSON hash.

    By default, belongs-to relationships are converted into
    IDs when inserted into the JSON hash.

    ## IDs

    `serialize` takes an options hash with a single option:
    `includeId`. If this option is `true`, `serialize` will,
    by default include the ID in the JSON object it builds.

    The adapter passes in `includeId: true` when serializing
    a record for `createRecord`, but not for `updateRecord`.

    ## Customization

    Your server may expect a different JSON format than the
    built-in serialization format.

    In that case, you can implement `serialize` yourself and
    return a JSON hash of your choosing.

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      serialize: function(snapshot, options) {
        var json = {
          POST_TTL: snapshot.attr('title'),
          POST_BDY: snapshot.attr('body'),
          POST_CMS: snapshot.hasMany('comments', { ids: true })
        }

        if (options.includeId) {
          json.POST_ID_ = snapshot.id;
        }

        return json;
      }
    });
    ```

    ## Customizing an App-Wide Serializer

    If you want to define a serializer for your entire
    application, you'll probably want to use `eachAttribute`
    and `eachRelationship` on the record.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      serialize: function(snapshot, options) {
        var json = {};

        snapshot.eachAttribute(function(name) {
          json[serverAttributeName(name)] = snapshot.attr(name);
        })

        snapshot.eachRelationship(function(name, relationship) {
          if (relationship.kind === 'hasMany') {
            json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });
          }
        });

        if (options.includeId) {
          json.ID_ = snapshot.id;
        }

        return json;
      }
    });

    function serverAttributeName(attribute) {
      return attribute.underscore().toUpperCase();
    }

    function serverHasManyName(name) {
      return serverAttributeName(name.singularize()) + "_IDS";
    }
    ```

    This serializer will generate JSON that looks like this:

    ```js
    {
      "TITLE": "Rails is omakase",
      "BODY": "Yep. Omakase.",
      "COMMENT_IDS": [ 1, 2, 3 ]
    }
    ```

    ## Tweaking the Default JSON

    If you just want to do some small tweaks on the default JSON,
    you can call super first and make the tweaks on the returned
    JSON.

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      serialize: function(snapshot, options) {
        var json = this._super(snapshot, options);

        json.subject = json.title;
        delete json.title;

        return json;
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: options
    description: ''
    type: Object
  return:
    description: json
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 737
  description: |-
    You can use this method to customize the root keys serialized into the JSON.
    By default the REST Serializer sends the modelName of a model, which is a camelized
    version of the name.

    For example, your server may expect underscored root objects.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      serializeIntoHash: function(data, type, record, options) {
        var root = Ember.String.decamelize(type.modelName);
        data[root] = this.serialize(record, options);
      }
    });
    ```
  itemtype: method
  name: serializeIntoHash
  params:
  - name: hash
    description: ''
    type: Object
  - name: typeClass
    description: ''
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: options
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 766
  description: |-
    You can use `payloadKeyFromModelName` to override the root key for an outgoing
    request. By default, the RESTSerializer returns a camelized version of the
    model's name.

    For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer
    will send it to the server with `tacoParty` as the root key in the JSON payload:

    ```js
    {
      "tacoParty": {
        "id": "1",
        "location": "Matthew Beale's House"
      }
    }
    ```

    For example, your server may expect dasherized root objects:

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.RESTSerializer.extend({
      payloadKeyFromModelName: function(modelName) {
        return Ember.String.dasherize(modelName);
      }
    });
    ```

    Given a `TacoParty' model, calling `save` on a tacoModel would produce an outgoing
    request like:

    ```js
    {
      "taco-party": {
        "id": "1",
        "location": "Matthew Beale's House"
      }
    }
    ```
  itemtype: method
  name: payloadKeyFromModelName
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: String
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 815
  description: Deprecated. Use modelNameFromPayloadKey instead
  itemtype: method
  name: typeForRoot
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: String
  deprecated: true
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/serializers/rest-serializer.js
  line: 828
  description: |-
    You can use this method to customize how polymorphic objects are serialized.
    By default the JSON Serializer creates the key by appending `Type` to
    the attribute and value from the model's camelcased model name.
  itemtype: method
  name: serializePolymorphicType
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: json
    description: ''
    type: Object
  - name: relationship
    description: ''
    type: Object
  class: DS.RESTSerializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/debug/debug-info.js
  line: 5
  description: |-
    Provides info about the model for debugging purposes
    by grouping the properties into more semantic groups.

    Meant to be used by debugging tools such as the Chrome Ember Extension.

    - Groups all attributes in "Attributes" group.
    - Groups all belongsTo relationships in "Belongs To" group.
    - Groups all hasMany relationships in "Has Many" group.
    - Groups all flags in "Flags" group.
    - Flags relationship CPs as expensive properties.
  itemtype: method
  name: _debugInfo
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/attributes.js
  line: 19
  description: |-
    A map whose keys are the attributes of the model (properties
    described by DS.attr) and whose values are the meta object for the
    property.

    Example

    ```app/models/person.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      firstName: attr('string'),
      lastName: attr('string'),
      birthday: attr('date')
    });
    ```

    ```javascript
    import Ember from 'ember';
    import Person from 'app/models/person';

    var attributes = Ember.get(Person, 'attributes')

    attributes.forEach(function(name, meta) {
      console.log(name, meta);
    });

    // prints:
    // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
    // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
    // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
    ```
  itemtype: property
  name: attributes
  static: 1
  type: "{Ember.Map}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/attributes.js
  line: 72
  description: |-
    A map whose keys are the attributes of the model (properties
    described by DS.attr) and whose values are type of transformation
    applied to each attribute. This map does not include any
    attributes that do not have an transformation type.

    Example

    ```app/models/person.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      firstName: attr(),
      lastName: attr('string'),
      birthday: attr('date')
    });
    ```

    ```javascript
    import Ember from 'ember';
    import Person from 'app/models/person';

    var transformedAttributes = Ember.get(Person, 'transformedAttributes')

    transformedAttributes.forEach(function(field, type) {
      console.log(field, type);
    });

    // prints:
    // lastName string
    // birthday date
    ```
  itemtype: property
  name: transformedAttributes
  static: 1
  type: "{Ember.Map}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/attributes.js
  line: 122
  description: |-
    Iterates through the attributes of the model, calling the passed function on each
    attribute.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(name, meta);
    ```

    - `name` the name of the current property in the iteration
    - `meta` the meta object for the attribute property in the iteration

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context.

    Example

    ```javascript
    import DS from 'ember-data';

    var Person = DS.Model.extend({
      firstName: attr('string'),
      lastName: attr('string'),
      birthday: attr('date')
    });

    Person.eachAttribute(function(name, meta) {
      console.log(name, meta);
    });

    // prints:
    // firstName {type: "string", isAttribute: true, options: Object, parentType: function, name: "firstName"}
    // lastName {type: "string", isAttribute: true, options: Object, parentType: function, name: "lastName"}
    // birthday {type: "date", isAttribute: true, options: Object, parentType: function, name: "birthday"}
       ```
  itemtype: method
  name: eachAttribute
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Object
    optional: true
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/attributes.js
  line: 171
  description: |-
    Iterates through the transformedAttributes of the model, calling
    the passed function on each attribute. Note the callback will not be
    called for any attributes that do not have an transformation type.

    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(name, type);
    ```

    - `name` the name of the current property in the iteration
    - `type` a string containing the name of the type of transformed
      applied to the attribute

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context.

    Example

    ```javascript
    import DS from 'ember-data';

    var Person = DS.Model.extend({
      firstName: attr(),
      lastName: attr('string'),
      birthday: attr('date')
    });

    Person.eachTransformedAttribute(function(name, type) {
      console.log(name, type);
    });

    // prints:
    // lastName string
    // birthday date
       ```
  itemtype: method
  name: eachTransformedAttribute
  params:
  - name: callback
    description: The callback to execute
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Object
    optional: true
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/attributes.js
  line: 253
  description: |-
    `DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).
    By default, attributes are passed through as-is, however you can specify an
    optional type to have the value automatically transformed.
    Ember Data ships with four basic transform types: `string`, `number`,
    `boolean` and `date`. You can define your own transforms by subclassing
    [DS.Transform](/api/data/classes/DS.Transform.html).

    Note that you cannot use `attr` to define an attribute of `id`.

    `DS.attr` takes an optional hash as a second parameter, currently
    supported options are:

    - `defaultValue`: Pass a string or a function to be called to set the attribute
                      to a default value if none is supplied.

    Example

    ```app/models/user.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      username: DS.attr('string'),
      email: DS.attr('string'),
      verified: DS.attr('boolean', {defaultValue: false})
    });
    ```

    Default value can also be a function. This is useful it you want to return
    a new object for each attribute.

    ```app/models/user.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      username: attr('string'),
      email: attr('string'),
      settings: attr({defaultValue: function() {
        return {};
      }})
    });
    ```
  itemtype: method
  name: attr
  params:
  - name: type
    description: the attribute type
    type: String
  - name: options
    description: a hash of options
    type: Object
  return:
    description: ''
    type: Attribute
  class: DS
  module: ember-data
- file: packages/ember-data/lib/system/model/errors.js
  line: 94
  description: Register with target handler
  itemtype: method
  name: registerHandlers
  params:
  - name: target
    description: ''
    type: Object
  - name: becameInvalid
    description: ''
    type: Function
  - name: becameValid
    description: ''
    type: Function
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 107
  itemtype: property
  name: errorsByAttributeName
  type: "{Ember.MapWithDefault}"
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 134
  description: |-
    Returns errors for a given attribute

    ```javascript
    var user = store.createRecord('user', {
      username: 'tomster',
      email: 'invalidEmail'
    });
    user.save().catch(function(){
      user.get('errors').errorsFor('email'); // returns:
      // [{attribute: "email", message: "Doesn't look like a valid email."}]
    });
    ```
  itemtype: method
  name: errorsFor
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: ''
    type: Array
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 156
  description: |-
    An array containing all of the error messages for this
    record. This is useful for displaying all errors to the user.

    ```handlebars
    {{#each model.errors.messages as |message|}}
      <div class="error">
        {{message}}
      </div>
    {{/each}}
    ```
  itemtype: property
  name: messages
  type: "{Array}"
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 173
  itemtype: property
  name: content
  type: "{Array}"
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 182
  itemtype: method
  name: unknownProperty
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 192
  itemtype: method
  name: nextObject
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 200
  description: Total number of errors.
  itemtype: property
  name: length
  type: "{Number}"
  readonly: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 209
  itemtype: property
  name: isEmpty
  type: "{Boolean}"
  readonly: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 216
  description: |-
    Adds error messages to a given attribute and sends
    `becameInvalid` event to the record.

    Example:

    ```javascript
    if (!user.get('username') {
      user.get('errors').add('username', 'This field is required');
    }
    ```
  itemtype: method
  name: add
  params:
  - name: attribute
    description: ''
    type: String
  - name: messages
    description: ''
    type: "(Array|String)"
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 246
  itemtype: method
  name: _findOrCreateMessages
  access: private
  tagname: ''
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 261
  description: |-
    Removes all error messages from the given attribute and sends
    `becameValid` event to the record if there no more errors left.

    Example:

    ```app/models/user.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      email: DS.attr('string'),
      twoFactorAuth: DS.attr('boolean'),
      phone: DS.attr('string')
    });
    ```

    ```app/routes/user/edit.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        save: function(user) {
           if (!user.get('twoFactorAuth')) {
             user.get('errors').remove('phone');
           }
           user.save();
         }
      }
    });
    ```
  itemtype: method
  name: remove
  params:
  - name: attribute
    description: ''
    type: String
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 309
  description: |-
    Removes all error messages and sends `becameValid` event
    to the record.

    Example:

    ```app/routes/user/edit.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        retrySave: function(user) {
           user.get('errors').clear();
           user.save();
         }
      }
    });
    ```
  itemtype: method
  name: clear
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/errors.js
  line: 339
  description: |-
    Checks if there is error messages for the given attribute.

    ```app/routes/user/edit.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        save: function(user) {
           if (user.get('errors').has('email')) {
             return alert('Please update your email before attempting to save.');
           }
           user.save();
         }
      }
    });
    ```
  itemtype: method
  name: has
  params:
  - name: attribute
    description: ''
    type: String
  return:
    description: true if there some errors on given attribute
    type: Boolean
  class: DS.Errors
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 219
  itemtype: method
  name: createSnapshot
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 227
  itemtype: method
  name: loadingData
  access: private
  tagname: ''
  params:
  - name: promise
    description: ''
    type: Promise
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 236
  itemtype: method
  name: loadedData
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 245
  itemtype: method
  name: notFound
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 253
  itemtype: method
  name: pushedData
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 266
  itemtype: method
  name: adapterWillCommit
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 274
  itemtype: method
  name: adapterDidDirty
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 283
  itemtype: method
  name: send
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 355
  itemtype: method
  name: transitionTo
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 441
  itemtype: method
  name: clearRelationships
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 482
  description: |-
    When a find request is triggered on the store, the user can optionally pass in
    attributes and relationships to be preloaded. These are meant to behave as if they
    came back from the server, except the user obtained them out of band and is informing
    the store of their existence. The most common use case is for supporting client side
    nested URLs, such as `/posts/1/comments/2` so the user can do
    `store.find('comment', 2, {post:1})` without having to fetch the post.

    Preloaded data can be attributes and relationships passed in either as IDs or as actual
    models.
  itemtype: method
  name: _preloadData
  access: private
  tagname: ''
  params:
  - name: preload
    description: ''
    type: Object
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 552
  itemtype: method
  name: updateRecordArrays
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 580
  description: |-
    If the adapter did not return a hash in response to a commit,
    merge the changed attributes and relationships into the existing
    saved data.
  itemtype: method
  name: adapterDidCommit
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 607
  itemtype: method
  name: updateRecordArraysLater
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 635
  itemtype: method
  name: adapterDidInvalidate
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/internal-model.js
  line: 647
  itemtype: method
  name: adapterDidError
  access: private
  tagname: ''
  class: DS.InternalModel
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 37
  description: |-
    If this property is `true` the record is in the `empty`
    state. Empty is the first state all records enter after they have
    been created. Most records created by the store will quickly
    transition to the `loading` state if data needs to be fetched from
    the server or the `created` state if the record is created on the
    client. A record can also enter the empty state if the adapter is
    unable to locate the record.
  itemtype: property
  name: isEmpty
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 51
  description: |-
    If this property is `true` the record is in the `loading` state. A
    record enters this state when the store asks the adapter for its
    data. It remains in this state until the adapter provides the
    requested data.
  itemtype: property
  name: isLoading
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 62
  description: |-
    If this property is `true` the record is in the `loaded` state. A
    record enters this state when its data is populated. Most of a
    record's lifecycle is spent inside substates of the `loaded`
    state.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('isLoaded'); // true

    store.find('model', 1).then(function(model) {
      model.get('isLoaded'); // true
    });
    ```
  itemtype: property
  name: isLoaded
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 84
  description: |-
    If this property is `true` the record is in the `dirty` state. The
    record has local changes that have not yet been saved by the
    adapter. This includes records that have been created (but not yet
    saved) or deleted.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('isDirty'); // true

    store.find('model', 1).then(function(model) {
      model.get('isDirty'); // false
      model.set('foo', 'some value');
      model.get('isDirty'); // true
    });
    ```
  itemtype: property
  name: isDirty
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 108
  description: |-
    If this property is `true` the record is in the `saving` state. A
    record enters the saving state when `save` is called, but the
    adapter has not yet acknowledged that the changes have been
    persisted to the backend.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('isSaving'); // false
    var promise = record.save();
    record.get('isSaving'); // true
    promise.then(function() {
      record.get('isSaving'); // false
    });
    ```
  itemtype: property
  name: isSaving
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 131
  description: |-
    If this property is `true` the record is in the `deleted` state
    and has been marked for deletion. When `isDeleted` is true and
    `isDirty` is true, the record is deleted locally but the deletion
    was not yet persisted. When `isSaving` is true, the change is
    in-flight. When both `isDirty` and `isSaving` are false, the
    change has persisted.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('isDeleted');    // false
    record.deleteRecord();

    // Locally deleted
    record.get('isDeleted');    // true
    record.get('isDirty');      // true
    record.get('isSaving');     // false

    // Persisting the deletion
    var promise = record.save();
    record.get('isDeleted');    // true
    record.get('isSaving');     // true

    // Deletion Persisted
    promise.then(function() {
      record.get('isDeleted');  // true
      record.get('isSaving');   // false
      record.get('isDirty');    // false
    });
    ```
  itemtype: property
  name: isDeleted
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 169
  description: |-
    If this property is `true` the record is in the `new` state. A
    record will be in the `new` state when it has been created on the
    client and the adapter has not yet report that it was successfully
    saved.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('isNew'); // true

    record.save().then(function(model) {
      model.get('isNew'); // false
    });
    ```
  itemtype: property
  name: isNew
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 191
  description: |-
    If this property is `true` the record is in the `valid` state.

    A record will be in the `valid` state when the adapter did not report any
    server-side validation failures.
  itemtype: property
  name: isValid
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 202
  description: |-
    If the record is in the dirty state this property will report what
    kind of change has caused it to move into the dirty
    state. Possible values are:

    - `created` The record has been created by the client and not yet saved to the adapter.
    - `updated` The record has been updated by the client and not yet saved to the adapter.
    - `deleted` The record has been deleted by the client and not yet saved to the adapter.

    Example

    ```javascript
    var record = store.createRecord('model');
    record.get('dirtyType'); // 'created'
    ```
  itemtype: property
  name: dirtyType
  type: "{String}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 224
  description: |-
    If `true` the adapter reported that it was unable to save local
    changes to the backend for any reason other than a server-side
    validation error.

    Example

    ```javascript
    record.get('isError'); // false
    record.set('foo', 'valid value');
    record.save().then(null, function() {
      record.get('isError'); // true
    });
    ```
  itemtype: property
  name: isError
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 245
  description: |-
    If `true` the store is attempting to reload the record form the adapter.

    Example

    ```javascript
    record.get('isReloading'); // false
    record.reload();
    record.get('isReloading'); // true
    ```
  itemtype: property
  name: isReloading
  type: "{Boolean}"
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 262
  description: |-
    All ember models have an id property. This is an identifier
    managed by an external source. These are always coerced to be
    strings before being used internally. Note when declaring the
    attributes for a model it is an error to declare an id
    attribute.

    ```javascript
    var record = store.createRecord('model');
    record.get('id'); // null

    store.find('model', 1).then(function(model) {
      model.get('id'); // '1'
    });
    ```
  itemtype: property
  name: id
  type: "{String}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 283
  itemtype: property
  name: currentState
  access: private
  tagname: ''
  type: "{Object}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 289
  description: |-
    When the record is in the `invalid` state this object will contain
    any errors returned by the adapter. When present the errors hash
    contains keys corresponding to the invalid property names
    and values which are arrays of Javascript objects with two keys:

    - `message` A string containing the error message from the backend
    - `attribute` The name of the property associated with this error message

    ```javascript
    record.get('errors.length'); // 0
    record.set('foo', 'invalid value');
    record.save().catch(function() {
      record.get('errors').get('foo');
      // [{message: 'foo should be a number.', attribute: 'foo'}]
    });
    ```

    The `errors` property us useful for displaying error messages to
    the user.

    ```handlebars
    <label>Username: {{input value=username}} </label>
    {{#each model.errors.username as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}
    <label>Email: {{input value=email}} </label>
    {{#each model.errors.email as |error|}}
      <div class="error">
        {{error.message}}
      </div>
    {{/each}}
    ```


    You can also access the special `messages` property on the error
    object to get an array of all the error strings.

    ```handlebars
    {{#each model.errors.messages as |message|}}
      <div class="error">
        {{message}}
      </div>
    {{/each}}
    ```
  itemtype: property
  name: errors
  type: "{DS.Errors}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 344
  description: |-
    Create a JSON representation of the record, using the serialization
    strategy of the store's adapter.

       `serialize` takes an optional hash as a parameter, currently
    supported options are:

       - `includeId`: `true` if the record's ID should be included in the
      JSON representation.
  itemtype: method
  name: serialize
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an object whose values are primitive JSON values only
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 362
  description: |-
    Use [DS.JSONSerializer](DS.JSONSerializer.html) to
    get the JSON representation of a record.

    `toJSON` takes an optional hash as a parameter, currently
    supported options are:

    - `includeId`: `true` if the record's ID should be included in the
      JSON representation.
  itemtype: method
  name: toJSON
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: A JSON representation of the object.
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 384
  description: |-
    Fired when the record is ready to be interacted with,
    that is either loaded from the server or created locally.
  itemtype: event
  name: ready
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 392
  description: Fired when the record is loaded from the server.
  itemtype: event
  name: didLoad
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 399
  description: Fired when the record is updated.
  itemtype: event
  name: didUpdate
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 406
  description: Fired when a new record is commited to the server.
  itemtype: event
  name: didCreate
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 413
  description: Fired when the record is deleted.
  itemtype: event
  name: didDelete
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 420
  description: Fired when the record becomes invalid.
  itemtype: event
  name: becameInvalid
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 427
  description: Fired when the record enters the error state.
  itemtype: event
  name: becameError
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 434
  description: Fired when the record is rolled back.
  itemtype: event
  name: rolledBack
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 441
  itemtype: property
  name: data
  access: private
  tagname: ''
  type: "{Object}"
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 449
  itemtype: method
  name: send
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  - name: context
    description: ''
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 459
  itemtype: method
  name: transitionTo
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 469
  description: |-
    Marks the record as deleted but does not save it. You must call
    `save` afterwards if you want to persist it. You might use this
    method if you want to allow the user to still `rollback()` a
    delete after it was made.

    Example

    ```app/routes/model/delete.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        softDelete: function() {
          this.controller.get('model').deleteRecord();
        },
        confirm: function() {
          this.controller.get('model').save();
        },
        undo: function() {
          this.controller.get('model').rollback();
        }
      }
    });
    ```
  itemtype: method
  name: deleteRecord
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 501
  description: |-
    Same as `deleteRecord`, but saves the record immediately.

    Example

    ```app/routes/model/delete.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        delete: function() {
          var controller = this.controller;
          controller.get('model').destroyRecord().then(function() {
            controller.transitionToRoute('model.index');
          });
        }
      }
    });
    ```
  itemtype: method
  name: destroyRecord
  return:
    description: |-
      a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 530
  itemtype: method
  name: unloadRecord
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 539
  itemtype: method
  name: _notifyProperties
  access: private
  tagname: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 553
  description: |-
    Returns an object, whose keys are changed properties, and value is
    an [oldProp, newProp] array.

    Example

    ```app/models/mascot.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      name: attr('string')
    });
    ```

    ```javascript
    var mascot = store.createRecord('mascot');
    mascot.changedAttributes(); // {}
    mascot.set('name', 'Tomster');
    mascot.changedAttributes(); // {name: [undefined, 'Tomster']}
    ```
  itemtype: method
  name: changedAttributes
  return:
    description: |-
      an object, whose keys are changed properties,
        and value is an [oldProp, newProp] array.
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 593
  itemtype: method
  name: adapterDidDirty
  access: private
  tagname: |-
    adapterDidDirty: function() {
    this.send('becomeDirty');
    this.updateRecordArraysLater();
      },
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 609
  description: |-
    If the model `isDirty` this function will discard any unsaved
    changes. If the model `isNew` it will be removed from the store.

    Example

    ```javascript
    record.get('name'); // 'Untitled Document'
    record.set('name', 'Doc 1');
    record.get('name'); // 'Doc 1'
    record.rollback();
    record.get('name'); // 'Untitled Document'
    ```
  itemtype: method
  name: rollback
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 641
  description: |-
    Save the record and persist any changes to the record to an
    external source via the adapter.

    Example

    ```javascript
    record.set('name', 'Tomster');
    record.save().then(function() {
      // Success callback
    }, function() {
      // Error callback
    });
    ```
  itemtype: method
  name: save
  return:
    description: |-
      a promise that will be resolved when the adapter returns
      successfully or rejected if the adapter returns with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 668
  description: |-
    Reload the record from the adapter.

    This will only work if the record has already finished loading
    and has not yet been modified (`isLoaded` but not `isDirty`,
    or `isSaving`).

    Example

    ```app/routes/model/view.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      actions: {
        reload: function() {
          this.controller.get('model').reload().then(function(model) {
            // do something with the reloaded model
          });
        }
      }
    });
    ```
  itemtype: method
  name: reload
  return:
    description: |-
      a promise that will be resolved with the record when the
      adapter returns successfully or rejected if the adapter returns
      with an error.
    type: Promise
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 706
  description: |-
    Override the default event firing from Ember.Evented to
    also call methods with the given name.
  itemtype: method
  name: trigger
  access: private
  tagname: ''
  params:
  - name: name
    description: ''
    type: String
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 755
  description: |-
    Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model
    instances from within the store, but if end users accidentally call `create()`
    (instead of `createRecord()`), we can raise an error.
  itemtype: method
  name: _create
  access: private
  tagname: ''
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 766
  description: |-
    Override the class' `create()` method to raise an error. This
    prevents end users from inadvertently calling `create()` instead
    of `createRecord()`. The store is still able to create instances
    by calling the `_create()` method. To create an instance of a
    `DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).
  itemtype: method
  name: create
  access: private
  tagname: ''
  static: 1
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/model/model.js
  line: 781
  description: |-
    Represents the model's class name as a string. This can be used to look up the model through
    DS.Store's modelFor method.

    `modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.
    For example:

    ```javascript
    store.modelFor('post').modelName; // 'post'
    store.modelFor('blog-post').modelName; // 'blog-post'
    ```

    The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload
    keys to underscore (instead of dasherized), you might use the following code:

    ```javascript
    export default var PostSerializer = DS.RESTSerializer.extend({
      payloadKeyFromModelName: function(modelName) {
        return Ember.String.underscore(modelName);
      }
    });
    ```
  itemtype: property
  name: ''
  type: String
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/adapter-populated-record-array.js
  line: 34
  itemtype: method
  name: load
  access: private
  tagname: ''
  params:
  - name: data
    description: ''
    type: Array
  class: DS.AdapterPopulatedRecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/filtered-record-array.js
  line: 20
  description: |-
    The filterFunction is a function used to test records from the store to
    determine if they should be part of the record array.

    Example

    ```javascript
    var allPeople = store.all('person');
    allPeople.mapBy('name'); // ["Tom Dale", "Yehuda Katz", "Trek Glowacki"]

    var people = store.filter('person', function(person) {
      if (person.get('name').match(/Katz$/)) { return true; }
    });
    people.mapBy('name'); // ["Yehuda Katz"]

    var notKatzFilter = function(person) {
      return !person.get('name').match(/Katz$/);
    };
    people.set('filterFunction', notKatzFilter);
    people.mapBy('name'); // ["Tom Dale", "Trek Glowacki"]
    ```
  itemtype: method
  name: filterFunction
  params:
  - name: record
    description: ''
    type: DS.Model
  return:
    description: "`true` if the record should be in the array"
    type: Boolean
  class: DS.FilteredRecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/filtered-record-array.js
  line: 54
  itemtype: method
  name: updateFilter
  access: private
  tagname: ''
  class: DS.FilteredRecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 23
  description: The model type contained by this record array.
  itemtype: property
  name: type
  type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 31
  description: |-
    The array of client ids backing the record array. When a
    record is requested from the record array, the record
    for the client id at the same index is materialized, if
    necessary, by the store.
  itemtype: property
  name: content
  access: private
  tagname: ''
  type: Ember.Array
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 43
  description: |-
    The flag to signal a `RecordArray` is finished loading data.

    Example

    ```javascript
    var people = store.all('person');
    people.get('isLoaded'); // true
    ```
  itemtype: property
  name: isLoaded
  type: Boolean
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 57
  description: |-
    The flag to signal a `RecordArray` is currently loading data.

    Example

    ```javascript
    var people = store.all('person');
    people.get('isUpdating'); // false
    people.update();
    people.get('isUpdating'); // true
    ```
  itemtype: property
  name: isUpdating
  type: Boolean
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 74
  description: The store that created this record array.
  itemtype: property
  name: store
  access: private
  tagname: ''
  type: DS.Store
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 83
  description: Retrieves an object from the content by index.
  itemtype: method
  name: objectAtContent
  access: private
  tagname: ''
  params:
  - name: index
    description: ''
    type: Number
  return:
    description: record
    type: DS.Model
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 97
  description: |-
    Used to get the latest version of all of the records in this array
    from the adapter.

    Example

    ```javascript
    var people = store.all('person');
    people.get('isUpdating'); // false
    people.update();
    people.get('isUpdating'); // true
    ```
  itemtype: method
  name: update
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 121
  description: Adds an internal model to the `RecordArray` without duplicates
  itemtype: method
  name: addInternalModel
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  - name: an
    description: optional index to insert at
    type: Number
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 138
  description: Removes an internalModel to the `RecordArray`.
  itemtype: method
  name: removeInternalModel
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 149
  description: |-
    Saves all of the records in the `RecordArray`.

    Example

    ```javascript
    var messages = store.all('message');
    messages.forEach(function(message) {
      message.set('hasBeenSeen', true);
    });
    messages.save();
    ```
  itemtype: method
  name: save
  return:
    description: promise
    type: DS.PromiseArray
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-arrays/record-array.js
  line: 187
  itemtype: method
  name: _unregisterFromManager
  access: private
  tagname: ''
  class: DS.RecordArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/belongs-to.js
  line: 6
  description: |-
    `DS.belongsTo` is used to define One-To-One and One-To-Many
    relationships on a [DS.Model](/api/data/classes/DS.Model.html).


    `DS.belongsTo` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a
      related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)

    #### One-To-One
    To declare a one-to-one relationship between two models, use
    `DS.belongsTo`:

    ```app/models/user.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      profile: DS.belongsTo('profile')
    });
    ```

    ```app/models/profile.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      user: DS.belongsTo('user')
    });
    ```

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
    ```

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```

    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the key name.

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      post: DS.belongsTo()
    });
    ```

    will lookup for a Post type.
  itemtype: method
  name: belongsTo
  params:
  - name: modelName
    description: "(optional) type of the relationship"
    type: String
  - name: options
    description: "(optional) a hash of options"
    type: Object
  return:
    description: relationship
    type: Ember.computed
  class: DS
  module: ember-data
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 103
  description: |-
    This Ember.js hook allows an object to be notified when a property
    is defined.

    In this case, we use it to be notified when an Ember Data user defines a
    belongs-to relationship. In that case, we need to set up observers for
    each one, allowing us to track relationship changes and automatically
    reflect changes in the inverse has-many array.

    This hook passes the class being set up, as well as the key and value
    being defined. So, for example, when the user does this:

    ```javascript
    DS.Model.extend({
      parent: DS.belongsTo('user')
    });
    ```

    This hook would be called with "parent" as the key and the computed
    property returned by `DS.belongsTo` as the value.
  itemtype: method
  name: didDefineProperty
  params:
  - name: proto
    description: ''
    type: Object
  - name: key
    description: ''
    type: String
  - name: value
    description: ''
    type: Ember.ComputedProperty
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 162
  description: |-
    For a given relationship name, returns the model type of the relationship.

    For example, if you define a model like this:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
       ```

    Calling `App.Post.typeForRelationship('comments')` will return `App.Comment`.
  itemtype: method
  name: typeForRelationship
  static: 1
  params:
  - name: name
    description: the name of the relationship
    type: String
  - name: store
    description: an instance of DS.Store
    type: Store
  return:
    description: the type of the relationship, or undefined
    type: DS.Model
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 192
  description: |-
    Find the relationship which is the inverse of the one asked for.

    For example, if you define models like this:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      comments: DS.hasMany('message')
    });
    ```

    ```app/models/message.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      owner: DS.belongsTo('post')
    });
    ```

    App.Post.inverseFor('comments') -> {type: App.Message, name:'owner', kind:'belongsTo'}
    App.Message.inverseFor('owner') -> {type: App.Post, name:'comments', kind:'hasMany'}
  itemtype: method
  name: inverseFor
  static: 1
  params:
  - name: name
    description: the name of the relationship
    type: String
  return:
    description: the inverse relationship, or null
    type: Object
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 322
  description: |-
    The model's relationships as a map, keyed on the type of the
    relationship. The value of each entry is an array containing a descriptor
    for each relationship with that type, describing the name of the relationship
    as well as the type.

    For example, given the following model definition:

    ```app/models/blog.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),
      posts: DS.hasMany('post')
    });
    ```

    This computed property would return a map describing these
    relationships, like this:

    ```javascript
    import Ember from 'ember';
    import Blog from 'app/models/blog';

    var relationships = Ember.get(Blog, 'relationships');
    relationships.get(App.User);
    //=> [ { name: 'users', kind: 'hasMany' },
    //     { name: 'owner', kind: 'belongsTo' } ]
    relationships.get(App.Post);
    //=> [ { name: 'posts', kind: 'hasMany' } ]
    ```
  itemtype: property
  name: relationships
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 363
  description: |-
    A hash containing lists of the model's relationships, grouped
    by the relationship kind. For example, given a model with this
    definition:

    ```app/models/blog.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    import Ember from 'ember';
    import Blog from 'app/models/blog';

    var relationshipNames = Ember.get(Blog, 'relationshipNames');
    relationshipNames.hasMany;
    //=> ['users', 'posts']
    relationshipNames.belongsTo;
    //=> ['owner']
    ```
  itemtype: property
  name: relationshipNames
  static: 1
  type: Object
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 412
  description: |-
    An array of types directly related to a model. Each type will be
    included once, regardless of the number of relationships it has with
    the model.

    For example, given a model with this definition:

    ```app/models/blog.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    import Ember from 'ember';
    import Blog from 'app/models/blog';

    var relatedTypes = Ember.get(Blog, 'relatedTypes');
    //=> [ App.User, App.Post ]
    ```
  itemtype: property
  name: relatedTypes
  static: 1
  type: Ember.Array
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 447
  description: |-
    A map whose keys are the relationships of a model and whose values are
    relationship descriptors.

    For example, given a model with this
    definition:

    ```app/models/blog.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post')
    });
    ```

    This property would contain the following:

    ```javascript
    import Ember from 'ember';
    import Blog from 'app/models/blog';

    var relationshipsByName = Ember.get(Blog, 'relationshipsByName');
    relationshipsByName.get('users');
    //=> { key: 'users', kind: 'hasMany', type: App.User }
    relationshipsByName.get('owner');
    //=> { key: 'owner', kind: 'belongsTo', type: App.User }
    ```
  itemtype: property
  name: relationshipsByName
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 485
  description: |-
    A map whose keys are the fields of the model and whose values are strings
    describing the kind of the field. A model's fields are the union of all of its
    attributes and relationships.

    For example:

    ```app/models/blog.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      users: DS.hasMany('user'),
      owner: DS.belongsTo('user'),

      posts: DS.hasMany('post'),

      title: DS.attr('string')
    });
    ```

    ```js
    import Ember from 'ember';
    import Blog from 'app/models/blog';

    var fields = Ember.get(Blog, 'fields');
    fields.forEach(function(kind, field) {
      console.log(field, kind);
    });

    // prints:
    // users, hasMany
    // owner, belongsTo
    // posts, hasMany
    // title, attribute
    ```
  itemtype: property
  name: fields
  static: 1
  type: Ember.Map
  readonly: ''
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 540
  description: |-
    Given a callback, iterates over each of the relationships in the model,
    invoking the callback with the name of each relationship and its relationship
    descriptor.
  itemtype: method
  name: eachRelationship
  static: 1
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 556
  description: |-
    Given a callback, iterates over each of the types related to a model,
    invoking the callback with the related type's class. Each type will be
    returned just once, regardless of how many different relationships it has
    with a model.
  itemtype: method
  name: eachRelatedType
  static: 1
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/ext.js
  line: 596
  description: |-
    Given a callback, iterates over each of the relationships in the model,
    invoking the callback with the name of each relationship and its relationship
    descriptor.


    The callback method you provide should have the following signature (all
    parameters are optional):

    ```javascript
    function(name, descriptor);
    ```

    - `name` the name of the current property in the iteration
    - `descriptor` the meta object that describes this relationship

    The relationship descriptor argument is an object with the following properties.

       - **key** <span class="type">String</span> the name of this relationship on the Model
       - **kind** <span class="type">String</span> "hasMany" or "belongsTo"
       - **options** <span class="type">Object</span> the original options hash passed when the relationship was declared
       - **parentType** <span class="type">DS.Model</span> the type of the Model that owns this relationship
       - **type** <span class="type">DS.Model</span> the type of the related Model

    Note that in addition to a callback, you can also pass an optional target
    object that will be set as `this` on the context.

    Example

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.JSONSerializer.extend({
      serialize: function(record, options) {
        var json = {};

        record.eachRelationship(function(name, descriptor) {
          if (descriptor.kind === 'hasMany') {
            var serializedHasManyName = name.toUpperCase() + '_IDS';
            json[name.toUpperCase()] = record.get(name).mapBy('id');
          }
        });

        return json;
      }
    });
    ```
  itemtype: method
  name: eachRelationship
  params:
  - name: callback
    description: the callback to invoke
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Any
  class: DS.Model
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/relationships/has-many.js
  line: 9
  description: |-
    `DS.hasMany` is used to define One-To-Many and Many-To-Many
    relationships on a [DS.Model](/api/data/classes/DS.Model.html).

    `DS.hasMany` takes an optional hash as a second parameter, currently
    supported options are:

    - `async`: A boolean value used to explicitly declare this to be an async relationship.
    - `inverse`: A string used to identify the inverse property on a related model.

    #### One-To-Many
    To declare a one-to-many relationship between two models, use
    `DS.belongsTo` in combination with `DS.hasMany`, like this:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      comments: DS.hasMany('comment')
    });
    ```

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      post: DS.belongsTo('post')
    });
    ```

    #### Many-To-Many
    To declare a many-to-many relationship between two models, use
    `DS.hasMany`:

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      tags: DS.hasMany('tag')
    });
    ```

    ```app/models/tag.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      posts: DS.hasMany('post')
    });
    ```

    You can avoid passing a string as the first parameter. In that case Ember Data
    will infer the type from the singularized key name.

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      tags: DS.hasMany()
    });
    ```

    will lookup for a Tag type.

    #### Explicit Inverses

    Ember Data will do its best to discover which relationships map to
    one another. In the one-to-many code above, for example, Ember Data
    can figure out that changing the `comments` relationship should update
    the `post` relationship on the inverse because post is the only
    relationship to that model.

    However, sometimes you may have multiple `belongsTo`/`hasManys` for the
    same type. You can specify which property on the related model is
    the inverse using `DS.hasMany`'s `inverse` option:

    ```app/models/comment.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      onePost: DS.belongsTo('post'),
      twoPost: DS.belongsTo('post'),
      redPost: DS.belongsTo('post'),
      bluePost: DS.belongsTo('post')
    });
    ```

    ```app/models/post.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      comments: DS.hasMany('comment', {
        inverse: 'redPost'
      })
    });
    ```

    You can also specify an inverse on a `belongsTo`, which works how
    you'd expect.
  itemtype: method
  name: hasMany
  params:
  - name: type
    description: "(optional) type of the relationship"
    type: String
  - name: options
    description: "(optional) a hash of options"
    type: Object
  return:
    description: relationship
    type: Ember.computed
  class: DS
  module: ember-data
- file: packages/ember-data/lib/system/adapter.js
  line: 67
  description: |-
    If you would like your adapter to use a custom serializer you can
    set the `defaultSerializer` property to be the name of the custom
    serializer.

    Note the `defaultSerializer` serializer has a lower priority than
    a model specific serializer (i.e. `PostSerializer`) or the
    `application` serializer.

    ```app/adapters/django.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      defaultSerializer: 'django'
    });
    ```
  itemtype: property
  name: defaultSerializer
  type: "{String}"
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 89
  description: |-
    The `find()` method is invoked when the store is asked for a record that
    has not previously been loaded. In response to `find()` being called, you
    should query your persistence layer for a record with the given ID. Once
    found, you can asynchronously call the store's `push()` method to push
    the record into the store.

    Here is an example `find` implementation:

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      find: function(store, type, id, snapshot) {
        var url = [type.modelName, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: find
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: id
    description: ''
    type: String
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 126
  description: |-
    The `findAll()` method is called when you call `find` on the store
    without an ID (i.e. `store.find('post')`).

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      findAll: function(store, type, sinceToken) {
        var url = type;
        var query = { since: sinceToken };
        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url, query).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  access: private
  tagname: ''
  itemtype: method
  name: findAll
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: sinceToken
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 160
  description: |-
    This method is called when you call `find` on the store with a
    query object as the second parameter (i.e. `store.find('person', {
    page: 1 })`).

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      findQuery: function(store, type, query) {
        var url = type;
        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.getJSON(url, query).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  access: private
  tagname: ''
  itemtype: method
  name: findQuery
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: ''
    type: DS.Model
  - name: query
    description: ''
    type: Object
  - name: recordArray
    description: ''
    type: DS.AdapterPopulatedRecordArray
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 195
  description: |-
    If the globally unique IDs for your records should be generated on the client,
    implement the `generateIdForRecord()` method. This method will be invoked
    each time you create a new record, and the value returned from it will be
    assigned to the record's `primaryKey`.

    Most traditional REST-like HTTP APIs will not use this method. Instead, the ID
    of the record will be set by the server, and your adapter will update the store
    with the new ID when it calls `didCreateRecord()`. Only implement this method if
    you intend to generate record IDs on the client-side.

    The `generateIdForRecord()` method will be invoked with the requesting store as
    the first parameter and the newly created record as the second parameter:

    ```javascript
    generateIdForRecord: function(store, inputProperties) {
      var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();
      return uuid;
    }
    ```
  itemtype: method
  name: generateIdForRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: DS.Model
  - name: inputProperties
    description: |-
      a hash of properties to set on the
        newly created record.
    type: Object
  return:
    description: id
    type: "(String|Number)"
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 225
  description: |-
    Proxies to the serializer's `serialize` method.

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      createRecord: function(store, type, snapshot) {
        var data = this.serialize(snapshot, { includeId: true });
        var url = type;

        // ...
      }
    });
    ```
  itemtype: method
  name: serialize
  params:
  - name: snapshot
    description: ''
    type: DS.Snapshot
  - name: options
    description: ''
    type: Object
  return:
    description: serialized snapshot
    type: Object
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 252
  description: |-
    Implement this method in a subclass to handle the creation of
    new records.

    Serializes the record and send it to the server.

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      createRecord: function(store, type, snapshot) {
        var data = this.serialize(snapshot, { includeId: true });
        var url = type;

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: createRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 293
  description: |-
    Implement this method in a subclass to handle the updating of
    a record.

    Serializes the record update and send it to the server.

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      updateRecord: function(store, type, snapshot) {
        var data = this.serialize(snapshot, { includeId: true });
        var id = snapshot.id;
        var url = [type, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'PUT',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: updateRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 335
  description: |-
    Implement this method in a subclass to handle the deletion of
    a record.

    Sends a delete request for the record to the server.

    Example

    ```app/adapters/application.js
    import DS from 'ember-data';

    export default DS.Adapter.extend({
      deleteRecord: function(store, type, snapshot) {
        var data = this.serialize(snapshot, { includeId: true });
        var id = snapshot.id;
        var url = [type, id].join('/');

        return new Ember.RSVP.Promise(function(resolve, reject) {
          jQuery.ajax({
            type: 'DELETE',
            url: url,
            dataType: 'json',
            data: data
          }).then(function(data) {
            Ember.run(null, resolve, data);
          }, function(jqXHR) {
            jqXHR.then = null; // tame jQuery's ill mannered promises
            Ember.run(null, reject, jqXHR);
          });
        });
      }
    });
    ```
  itemtype: method
  name: deleteRecord
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the record
    type: DS.Model
  - name: snapshot
    description: ''
    type: DS.Snapshot
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 377
  description: |-
    By default the store will try to coalesce all `fetchRecord` calls within the same runloop
    into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.
    You can opt out of this behaviour by either not implementing the findMany hook or by setting
    coalesceFindRequests to false
  itemtype: property
  name: coalesceFindRequests
  type: "{boolean}"
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 388
  description: Find multiple records at once if coalesceFindRequests is true
  itemtype: method
  name: findMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: type
    description: the DS.Model class of the records
    type: DS.Model
  - name: ids
    description: ''
    type: Array
  - name: snapshots
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/adapter.js
  line: 399
  description: |-
    Organize records into groups, each of which is to be passed to separate
    calls to `findMany`.

    For example, if your api has nested URLs that depend on the parent, you will
    want to group records by their parent.

    The default implementation returns the records as a single group.
  itemtype: method
  name: groupRecordsForFindMany
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: snapshots
    description: ''
    type: Array
  return:
    description: |-
      an array of arrays of records, each of which is to be
                        loaded separately by `findMany`.
    type: Array
  class: DS.Adapter
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 95
  description: "`true` if the relationship is polymorphic, `false` otherwise."
  itemtype: property
  name: isPolymorphic
  type: Boolean
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 103
  description: The loading state of this array
  itemtype: property
  name: isLoaded
  type: Boolean
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 110
  description: The relationship which manages this array.
  itemtype: property
  name: relationship
  type: ManyRelationship
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 160
  description: |-
    Used for async `hasMany` arrays
    to keep track of when they will resolve.
  itemtype: property
  name: promise
  type: Ember.RSVP.Promise
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 169
  itemtype: method
  name: loadingRecordsCount
  params:
  - name: count
    description: ''
    type: Number
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 178
  itemtype: method
  name: loadedRecord
  access: private
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 190
  itemtype: method
  name: reload
  access: public
  tagname: ''
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 198
  description: |-
    Saves all of the records in the `ManyArray`.

    Example

    ```javascript
    store.find('inbox', 1).then(function(inbox) {
      inbox.get('messages').then(function(messages) {
        messages.forEach(function(message) {
          message.set('isRead', true);
        });
        messages.save()
      });
    });
    ```
  itemtype: method
  name: save
  return:
    description: promise
    type: DS.PromiseArray
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 227
  description: Create a child record within the owner
  itemtype: method
  name: createRecord
  access: private
  tagname: ''
  params:
  - name: hash
    description: ''
    type: Object
  return:
    description: record
    type: DS.Model
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 248
  itemtype: method
  name: addRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  deprecated: true
  deprecationMessage: Use `addObject()` instead
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/many-array.js
  line: 258
  itemtype: method
  name: removeRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  deprecated: true
  deprecationMessage: Use `removeObject()` instead
  class: DS.ManyArray
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/normalize-model-name.js
  line: 1
  description: |-
    All modelNames are dasherized internally. Changing this function may
    require changes to other normalization hooks (such as typeForRoot).
  itemtype: method
  name: normalizeModelName
  access: public
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: if the adapter can generate one, an ID
    type: String
  class: DS
  module: ember-data
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 45
  description: |-
    This method is invoked whenever data is loaded into the store by the
    adapter or updated by the adapter, or when a record has changed.

    It updates all record arrays that a record belongs to.

    To avoid thrashing, it only runs at most once per run loop.
  itemtype: method
  name: updateRecordArrays
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 105
  description: Update an individual filter.
  itemtype: method
  name: updateRecordArray
  params:
  - name: array
    description: ''
    type: DS.FilteredRecordArray
  - name: filter
    description: ''
    type: Function
  - name: typeClass
    description: ''
    type: DS.Model
  - name: record
    description: ''
    type: InternalModel
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 136
  description: |-
    This method is invoked if the `filterFunction` property is
    changed on a `DS.FilteredRecordArray`.

    It essentially re-runs the filter from scratch. This same
    method is invoked when the filter is created in th first place.
  itemtype: method
  name: updateFilter
  params:
  - name: array
    description: ''
    type: Array
  - name: modelName
    description: ''
    type: String
  - name: filter
    description: ''
    type: Function
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 162
  description: Create a `DS.RecordArray` for a type and register it for updates.
  itemtype: method
  name: createRecordArray
  params:
  - name: typeClass
    description: ''
    type: Class
  return:
    description: ''
    type: DS.RecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 183
  description: Create a `DS.FilteredRecordArray` for a type and register it for updates.
  itemtype: method
  name: createFilteredRecordArray
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: filter
    description: ''
    type: Function
  - name: query
    description: "(optional"
    type: Object
  return:
    description: ''
    type: DS.FilteredRecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 207
  description: Create a `DS.AdapterPopulatedRecordArray` for a type with given query.
  itemtype: method
  name: createAdapterPopulatedRecordArray
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: query
    description: ''
    type: Object
  return:
    description: ''
    type: DS.AdapterPopulatedRecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 229
  description: |-
    Register a RecordArray for a given type to be backed by
    a filter function. This will cause the array to update
    automatically when records of that type change attribute
    values or states.
  itemtype: method
  name: registerFilteredRecordArray
  params:
  - name: array
    description: ''
    type: DS.RecordArray
  - name: typeClass
    description: ''
    type: DS.Model
  - name: filter
    description: ''
    type: Function
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/record-array-manager.js
  line: 247
  description: |-
    Unregister a FilteredRecordArray.
    So manager will not update this array.
  itemtype: method
  name: unregisterFilteredRecordArray
  params:
  - name: array
    description: ''
    type: DS.RecordArray
  class: DS.RecordArrayManager
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/serializer.js
  line: 26
  description: |-
    The `store` property is the application's `store` that contains all records.
    It's injected as a service.
    It can be used to push records from a non flat data structure server
    response.
  itemtype: property
  name: store
  type: "{DS.Store}"
  access: public
  tagname: ''
  class: DS.Serializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/serializer.js
  line: 37
  description: |-
    The `extract` method is used to deserialize the payload received from your
    data source into the form that Ember Data expects.
  itemtype: method
  name: extract
  params:
  - name: store
    description: ''
    type: DS.Store
  - name: typeClass
    description: ''
    type: DS.Model
  - name: payload
    description: ''
    type: Object
  - name: id
    description: ''
    type: "(String|Number)"
  - name: requestType
    description: ''
    type: String
  return:
    description: ''
    type: Object
  class: DS.Serializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/serializer.js
  line: 51
  description: |-
    The `serialize` method is used when a record is saved in order to convert
    the record into the form that your external data source expects.

    `serialize` takes an optional `options` hash with a single option:

    - `includeId`: If this is `true`, `serialize` should include the ID
      in the serialized object it builds.
  itemtype: method
  name: serialize
  params:
  - name: record
    description: ''
    type: DS.Model
  - name: options
    description: ''
    type: Object
    optional: true
  return:
    description: ''
    type: Object
  class: DS.Serializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/serializer.js
  line: 67
  description: |-
    The `normalize` method is used to convert a payload received from your
    external data source into the normalized form `store.push()` expects. You
    should override this method, munge the hash and return the normalized
    payload.
  itemtype: method
  name: normalize
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: hash
    description: ''
    type: Object
  return:
    description: ''
    type: Object
  class: DS.Serializer
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 66
  description: |-
    The id of the snapshot's underlying record

    Example

    ```javascript
    // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
    postSnapshot.id; // => '1'
    ```
  itemtype: property
  name: id
  type: "{String}"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 81
  description: |-
    The underlying record for this snapshot. Can be used to access methods and
    properties defined on the record.

    Example

    ```javascript
    var json = snapshot.record.toJSON();
    ```
  itemtype: property
  name: record
  type: "{DS.Model}"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 96
  description: The type of the underlying record for this snapshot, as a DS.Model.
  itemtype: property
  name: type
  type: "{DS.Model}"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 104
  description: The name of the type of the underlying record for this snapshot, as
    a string.
  itemtype: property
  name: modelName
  type: "{String}"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 112
  description: |-
    Returns the value of an attribute.

    Example

    ```javascript
    // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
    postSnapshot.attr('author'); // => 'Tomster'
    postSnapshot.attr('title'); // => 'Ember.js rocks'
    ```

    Note: Values are loaded eagerly and cached when the snapshot is created.
  itemtype: method
  name: attr
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The attribute value or undefined
    type: Object
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 136
  description: |-
    Returns all attributes and their corresponding values.

    Example

    ```javascript
    // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
    postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }
    ```
  itemtype: method
  name: attributes
  return:
    description: All attributes of the current snapshot
    type: Object
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 153
  description: |-
    Returns all changed attributes and their old and new values.

    Example

    ```javascript
    // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
    postModel.set('title', 'Ember.js rocks!');
    postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }
    ```
  itemtype: method
  name: changedAttributes
  return:
    description: All changed attributes of the current snapshot
    type: Object
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 178
  description: |-
    Returns the current value of a belongsTo relationship.

    `belongsTo` takes an optional hash of options as a second parameter,
    currently supported options are:

       - `id`: set to `true` if you only want the ID of the related record to be
      returned.

    Example

    ```javascript
    // store.push('post', { id: 1, title: 'Hello World' });
    // store.createRecord('comment', { body: 'Lorem ipsum', post: post });
    commentSnapshot.belongsTo('post'); // => DS.Snapshot
    commentSnapshot.belongsTo('post', { id: true }); // => '1'

    // store.push('comment', { id: 1, body: 'Lorem ipsum' });
    commentSnapshot.belongsTo('post'); // => undefined
    ```

    Calling `belongsTo` will return a new Snapshot as long as there's any known
    data for the relationship available, such as an ID. If the relationship is
    known but unset, `belongsTo` will return `null`. If the contents of the
    relationship is unknown `belongsTo` will return `undefined`.

    Note: Relationships are loaded lazily and cached upon first access.
  itemtype: method
  name: belongsTo
  params:
  - name: keyName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
    optional: true
  return:
    description: |-
      A snapshot or ID of a known
        relationship or null if the relationship is known but unset. undefined
        will be returned if the contents of the relationship is unknown.
    type: "(DS.Snapshot|String|null|undefined)"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 255
  description: |-
    Returns the current value of a hasMany relationship.

    `hasMany` takes an optional hash of options as a second parameter,
    currently supported options are:

       - `ids`: set to `true` if you only want the IDs of the related records to be
      returned.

    Example

    ```javascript
    // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });
    postSnapshot.hasMany('comments'); // => [DS.Snapshot, DS.Snapshot]
    postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']

    // store.push('post', { id: 1, title: 'Hello World' });
    postSnapshot.hasMany('comments'); // => undefined
    ```

    Note: Relationships are loaded lazily and cached upon first access.
  itemtype: method
  name: hasMany
  params:
  - name: keyName
    description: ''
    type: String
  - name: options
    description: ''
    type: Object
    optional: true
  return:
    description: |-
      An array of snapshots or IDs of a known
        relationship or an empty array if the relationship is known but unset.
        undefined will be returned if the contents of the relationship is unknown.
    type: "(Array|undefined)"
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 327
  description: |-
    Iterates through all the attributes of the model, calling the passed
    function on each attribute.

    Example

    ```javascript
    snapshot.eachAttribute(function(name, meta) {
      // ...
    });
    ```
  itemtype: method
  name: eachAttribute
  params:
  - name: callback
    description: the callback to execute
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Object
    optional: true
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 347
  description: |-
    Iterates through all the relationships of the model, calling the passed
    function on each relationship.

    Example

    ```javascript
    snapshot.eachRelationship(function(name, relationship) {
      // ...
    });
    ```
  itemtype: method
  name: eachRelationship
  params:
  - name: callback
    description: the callback to execute
    type: Function
  - name: binding
    description: the value to which the callback's `this` should be bound
    type: Object
    optional: true
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 367
  itemtype: method
  name: get
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The property value
    type: Object
  deprecated: true
  deprecationMessage: Use [attr](#method_attr), [belongsTo](#method_belongsTo) or
    [hasMany](#method_hasMany) instead
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 396
  itemtype: method
  name: serialize
  params:
  - name: options
    description: ''
    type: Object
  return:
    description: an object whose values are primitive JSON values only
    type: Object
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 405
  itemtype: method
  name: unknownProperty
  params:
  - name: keyName
    description: ''
    type: String
  return:
    description: The property value
    type: Object
  deprecated: true
  deprecationMessage: Use [attr](#method_attr), [belongsTo](#method_belongsTo) or
    [hasMany](#method_hasMany) instead
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/snapshot.js
  line: 415
  itemtype: method
  name: _createSnapshot
  access: private
  tagname: ''
  class: DS.Snapshot
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 211
  itemtype: method
  name: init
  access: private
  tagname: ''
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 228
  description: |-
    The adapter to use to communicate to a backend server or other persistence layer.

    This can be specified as an instance, class, or string.

    If you want to specify `app/adapters/custom.js` as a string, do:

    ```js
    adapter: 'custom'
    ```
  itemtype: property
  name: adapter
  default: DS.RESTAdapter
  type: "{(DS.Adapter|String)}"
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 245
  description: |-
    Returns a JSON representation of the record using a custom
    type-specific serializer, if one exists.

    The available options are:

    * `includeId`: `true` if the record's ID should be included in
      the JSON representation
  itemtype: method
  name: serialize
  access: private
  tagname: ''
  params:
  - name: record
    description: the record to serialize
    type: DS.Model
  - name: options
    description: an options hash
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 264
  description: |-
    This property returns the adapter, after resolving a possible
    string key.

    If the supplied `adapter` was a class, or a String property
    path resolved to a class, this property will instantiate the
    class.

    This property is cacheable, so the same instance of a specified
    adapter class should be used for the lifetime of the store.
  itemtype: property
  name: defaultAdapter
  access: private
  tagname: ''
  return:
    description: DS.Adapter
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 293
  description: |-
    Create a new record in the current store. The properties passed
    to this method are set on the newly created record.

    To create a new instance of `App.Post`:

    ```js
    store.createRecord('post', {
      title: "Rails is omakase"
    });
    ```
  itemtype: method
  name: createRecord
  params:
  - name: modelName
    description: ''
    type: String
  - name: inputProperties
    description: |-
      a hash of properties to set on the
        newly created record.
    type: Object
  return:
    description: record
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 345
  description: |-
    If possible, this method asks the adapter to generate an ID for
    a newly created record.
  itemtype: method
  name: _generateId
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  - name: properties
    description: from the new record
    type: Object
  return:
    description: if the adapter can generate one, an ID
    type: String
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 369
  description: |-
    For symmetry, a record can be deleted via the store.

    Example

    ```javascript
    var post = store.createRecord('post', {
      title: "Rails is omakase"
    });

    store.deleteRecord(post);
    ```
  itemtype: method
  name: deleteRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 389
  description: |-
    For symmetry, a record can be unloaded via the store. Only
    non-dirty records can be unloaded.

    Example

    ```javascript
    store.find('post', 1).then(function(post) {
      store.unloadRecord(post);
    });
    ```
  itemtype: method
  name: unloadRecord
  params:
  - name: record
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 412
  description: |-
    This is the main entry point into finding records. The first parameter to
    this method is the model's name as a string.

    ---

    To find a record by ID, pass the `id` as the second parameter:

    ```javascript
    store.find('person', 1);
    ```

    The `find` method will always return a **promise** that will be resolved
    with the record. If the record was already in the store, the promise will
    be resolved immediately. Otherwise, the store will ask the adapter's `find`
    method to find the necessary data.

    The `find` method will always resolve its promise with the same object for
    a given type and `id`.

    ---

    You can optionally `preload` specific attributes and relationships that you know of
    by passing them as the third argument to find.

    For example, if your Ember route looks like `/posts/1/comments/2` and your API route
    for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment
    without fetching the post you can pass in the post to the `find` call:

    ```javascript
    store.find('comment', 2, {post: 1});
    ```

    If you have access to the post model you can also pass the model itself:

    ```javascript
    store.find('post', 1).then(function (myPostModel) {
      store.find('comment', 2, {post: myPostModel});
    });
    ```

    This way, your adapter's `find` or `buildURL` method will be able to look up the
    relationship on the record and construct the nested URL without having to first
    fetch the post.

    ---

    To find all records for a type, call `find` with no additional parameters:

    ```javascript
    store.find('person');
    ```

    This will ask the adapter's `findAll` method to find the records for the
    given type, and return a promise that will be resolved once the server
    returns the values. The promise will resolve into all records of this type
    present in the store, even if the server only returns a subset of them.

    ---

    To find a record by a query, call `find` with a hash as the second
    parameter:

    ```javascript
    store.find('person', { page: 1 });
    ```

    By passing an object `{page: 1}` as an argument to the find method, it
    delegates to the adapter's findQuery method. The adapter then makes
    a call to the server, transforming the object `{page: 1}` as parameters
    that are sent along, and will return a RecordArray when the promise
    resolves.

    Exposing queries this way seems preferable to creating an abstract query
    language for all server-side queries, and then require all adapters to
    implement them.

    The call made to the server, using a Rails backend, will look something like this:

    ```
    Started GET "/api/v1/person?page=1"
    Processing by Api::V1::PersonsController#index as HTML
    Parameters: {"page"=>"1"}
    ```

    If you do something like this:

    ```javascript
    store.find('person', {ids: [1, 2, 3]});
    ```

    The call to the server, using a Rails backend, will look something like this:

    ```
    Started GET "/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3"
    Processing by Api::V1::PersonsController#index as HTML
    Parameters: {"ids"=>["1", "2", "3"]}
    ```
  itemtype: method
  name: find
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: "(Object|String|Integer|null)"
  - name: preload
    description: "- optional set of attributes and relationships passed in either
      as IDs or as actual models"
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 534
  description: |-
    This method returns a fresh record for a given type and id combination.

    If a record is available for the given type/id combination, then
    it will fetch this record from the store and call `reload()` on it.
    That will fire a request to server and return a promise that will
    resolve once the record has been reloaded.
    If there's no record corresponding in the store it will simply call
    `store.find`.

    Example

    ```app/routes/post.js
    import Ember from 'ember';

    export default Ember.Route.extend({
      model: function(params) {
        return this.store.fetchById('post', params.post_id);
      }
    });
    ```
  itemtype: method
  name: fetchById
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: "(String|Integer)"
  - name: preload
    description: "- optional set of attributes and relationships passed in either
      as IDs or as actual models"
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 571
  description: |-
    This method returns a fresh collection from the server, regardless of if there is already records
    in the store or not.
  itemtype: method
  name: fetchAll
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 586
  itemtype: method
  name: fetch
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: "(String|Integer)"
  - name: preload
    description: "- optional set of attributes and relationships passed in either
      as IDs or as actual models"
    type: Object
  return:
    description: promise
    type: Promise
  deprecated: true
  deprecationMessage: Use [fetchById](#method_fetchById) instead
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 600
  description: This method returns a record for a given type and id combination.
  itemtype: method
  name: findById
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: "(String|Integer)"
  - name: preload
    description: "- optional set of attributes and relationships passed in either
      as IDs or as actual models"
    type: Object
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 633
  description: |-
    This method makes a series of requests to the adapter's `find` method
    and returns a promise that resolves once they are all loaded.
  access: private
  tagname: ''
  itemtype: method
  name: findByIds
  params:
  - name: modelName
    description: ''
    type: String
  - name: ids
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 652
  description: |-
    This method is called by `findById` if it discovers that a particular
    type/id pair hasn't been loaded yet to kick off a request to the
    adapter.
  itemtype: method
  name: fetchRecord
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: model
    type: InternalModel
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 800
  description: |-
    Get a record by a given type and ID without triggering a fetch.

    This method will synchronously return the record if it is available in the store,
    otherwise it will return `null`. A record is available if it has been fetched earlier, or
    pushed manually into the store.

    _Note: This is an synchronous method and does not return a promise._

    ```js
    var post = store.getById('post', 1);

    post.get('id'); // 1
    ```
  itemtype: method
  name: getById
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: String|Integer
  return:
    description: record
    type: DS.Model|null
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 829
  description: |-
    This method is called by the record's `reload` method.

    This method calls the adapter's `find` method, which returns a promise. When
    **that** promise resolves, `reloadRecord` will resolve the promise returned
    by the record's `reload`.
  itemtype: method
  name: reloadRecord
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: DS.Model
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 853
  description: Returns true if a record for a given type and ID is already loaded.
  itemtype: method
  name: hasRecordForId
  params:
  - name: modelName
    description: ''
    type: "(String|DS.Model)"
  - name: inputId
    description: ''
    type: "(String|Integer)"
  return:
    description: ''
    type: Boolean
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 869
  description: |-
    Returns id record for a given type and ID. If one isn't already loaded,
    it builds a new record and leaves it in the `empty` state.
  itemtype: method
  name: recordForId
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: "(String|Integer)"
  return:
    description: record
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 899
  itemtype: method
  name: findMany
  access: private
  tagname: ''
  params:
  - name: internalModels
    description: ''
    type: Array
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 913
  description: |-
    If a relationship was originally populated by the adapter as a link
    (as opposed to a list of IDs), this method is called when the
    relationship is fetched.

    The link (which is usually a URL) is passed through unchanged, so the
    adapter can make whatever request it wants.

    The usual use-case is for the server to register a URL as a link, and
    then use that URL in the future to make a request for the relationship.
  itemtype: method
  name: findHasMany
  access: private
  tagname: ''
  params:
  - name: owner
    description: ''
    type: DS.Model
  - name: link
    description: ''
    type: Any
  - name: relationship
    description: ''
    type: "(Relationship)"
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 940
  itemtype: method
  name: findBelongsTo
  access: private
  tagname: ''
  params:
  - name: owner
    description: ''
    type: DS.Model
  - name: link
    description: ''
    type: Any
  - name: relationship
    description: ''
    type: Relationship
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 957
  description: |-
    This method delegates a query to the adapter. This is the one place where
    adapter-level semantics are exposed to the application.

    Exposing queries this way seems preferable to creating an abstract query
    language for all server-side queries, and then require all adapters to
    implement them.

    This method returns a promise, which is resolved with a `RecordArray`
    once the server returns.
  itemtype: method
  name: findQuery
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  - name: query
    description: an opaque query to be used by the adapter
    type: Any
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 988
  description: |-
    This method returns an array of all records adapter can find.
    It triggers the adapter's `findAll` method to give it an opportunity to populate
    the array with records of that type.
  itemtype: method
  name: findAll
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: DS.AdapterPopulatedRecordArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1003
  itemtype: method
  name: _fetchAll
  access: private
  tagname: ''
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  - name: array
    description: ''
    type: DS.RecordArray
  return:
    description: promise
    type: Promise
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1022
  itemtype: method
  name: didUpdateAll
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  access: private
  tagname: ''
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1032
  description: |-
    This method returns a filtered array that contains all of the
    known records for a given type in the store.

    Note that because it's just a filter, the result will contain any
    locally created records of the type, however, it will not make a
    request to the backend to retrieve additional records. If you
    would like to request all the records from the backend please use
    [store.find](#method_find).

    Also note that multiple calls to `all` for a given type will always
    return the same `RecordArray`.

    Example

    ```javascript
    var localPosts = store.all('post');
    ```
  itemtype: method
  name: all
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: DS.RecordArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1072
  description: |-
    This method unloads all records in the store.

    Optionally you can pass a type which unload all records for a given type.

    ```javascript
    store.unloadAll();
    store.unloadAll('post');
    ```
  itemtype: method
  name: unloadAll
  params:
  - name: modelName
    description: ''
    type: String=
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1115
  description: |-
    Takes a type and filter function, and returns a live RecordArray that
    remains up to date as new records are loaded into the store or created
    locally.

    The filter function takes a materialized record, and returns true
    if the record should be included in the filter and false if it should
    not.

    Example

    ```javascript
    store.filter('post', function(post) {
      return post.get('unread');
    });
    ```

    The filter function is called once on all records for the type when
    it is created, and then once on each newly loaded or created record.

    If any of a record's properties change, or if it changes state, the
    filter function will be invoked again to determine whether it should
    still be in the array.

    Optionally you can pass a query, which is the equivalent of calling
    [find](#method_find) with that same query, to fetch additional records
    from the server. The results returned by the server could then appear
    in the filter if they match the filter function.

    The query itself is not used to filter records, it's only sent to your
    server for you to be able to do server-side filtering. The filter
    function will be applied on the returned results regardless.

    Example

    ```javascript
    store.filter('post', { unread: true }, function(post) {
      return post.get('unread');
    }).then(function(unreadPosts) {
      unreadPosts.get('length'); // 5
      var unreadPost = unreadPosts.objectAt(0);
      unreadPost.set('unread', false);
      unreadPosts.get('length'); // 4
    });
    ```
  itemtype: method
  name: filter
  params:
  - name: modelName
    description: ''
    type: String
  - name: query
    description: optional query
    type: Object
  - name: filter
    description: ''
    type: Function
  return:
    description: ''
    type: DS.PromiseArray
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1196
  description: |-
    This method returns if a certain record is already loaded
    in the store. Use this function to know beforehand if a find()
    will result in a request or that it will be a cache hit.

     Example

    ```javascript
    store.recordIsLoaded('post', 1); // false
    store.find('post', 1).then(function() {
      store.recordIsLoaded('post', 1); // true
    });
    ```
  itemtype: method
  name: recordIsLoaded
  params:
  - name: modelName
    description: ''
    type: String
  - name: id
    description: ''
    type: String
  return:
    description: ''
    type: Boolean
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1220
  description: This method returns the metadata for a specific type.
  itemtype: method
  name: metadataFor
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1233
  description: This method sets the metadata for a specific type.
  itemtype: method
  name: setMetadataFor
  params:
  - name: modelName
    description: ''
    type: String
  - name: metadata
    description: metadata to set
    type: Object
  return:
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1251
  description: |-
    If the adapter updates attributes the record will notify
    the store to update its  membership in any filters.
    To avoid thrashing, this method is invoked only once per
    run loop per record.
  itemtype: method
  name: dataWasUpdated
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: Class
  - name: internalModel
    description: ''
    type: InternalModel
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1270
  description: |-
    This method is called by `record.save`, and gets passed a
    resolver for the promise that `record.save` returns.

    It schedules saving to happen at the end of the run loop.
  itemtype: method
  name: scheduleSave
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  - name: resolver
    description: ''
    type: Resolver
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1289
  description: |-
    This method is called at the end of the run loop, and
    flushes any records passed into `scheduleSave`
  itemtype: method
  name: flushPendingSave
  access: private
  tagname: ''
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1321
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is resolved.

    If the data provides a server-generated ID, it will
    update the record and the store's indexes.
  itemtype: method
  name: didSaveRecord
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: the in-flight internal model
    type: InternalModel
  - name: data
    description: optional data (see above)
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1346
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is rejected with a `DS.InvalidError`.
  itemtype: method
  name: recordWasInvalid
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  - name: errors
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1360
  description: |-
    This method is called once the promise returned by an
    adapter's `createRecord`, `updateRecord` or `deleteRecord`
    is rejected (with anything other than a `DS.InvalidError`).
  itemtype: method
  name: recordWasError
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1373
  description: |-
    When an adapter's `createRecord`, `updateRecord` or `deleteRecord`
    resolves with data, this method extracts the ID from the supplied
    data.
  itemtype: method
  name: updateId
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  - name: data
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1394
  description: Returns a map of IDs to client IDs for a given type.
  itemtype: method
  name: typeMapFor
  access: private
  tagname: ''
  params:
  - name: typeClass
    description: ''
    type: DS.Model
  return:
    description: typeMap
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1425
  description: This internal method is used by `push`.
  itemtype: method
  name: _load
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: "(String|DS.Model)"
  - name: data
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1477
  description: |-
    Returns a model class for a particular key. Used by
    methods that take a type key (like `find`, `createRecord`,
    etc.)
  itemtype: method
  name: modelFor
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: ''
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1527
  description: |-
    Push some data for a given type into the store.

    This method expects normalized data:

    * The ID is a key named `id` (an ID is mandatory)
    * The names of attributes are the ones you used in
      your model's `DS.attr`s.
    * Your relationships must be:
      * represented as IDs or Arrays of IDs
      * represented as model instances
      * represented as URLs, under the `links` key

    For this model:

    ```app/models/person.js
    import DS from 'ember-data';

    export default DS.Model.extend({
      firstName: DS.attr(),
      lastName: DS.attr(),

      children: DS.hasMany('person')
    });
    ```

    To represent the children as IDs:

    ```js
    {
      id: 1,
      firstName: "Tom",
      lastName: "Dale",
      children: [1, 2, 3]
    }
    ```

    To represent the children relationship as a URL:

    ```js
    {
      id: 1,
      firstName: "Tom",
      lastName: "Dale",
      links: {
        children: "/people/1/children"
      }
    }
    ```

    If you're streaming data or implementing an adapter, make sure
    that you have converted the incoming data into this form. The
    store's [normalize](#method_normalize) method is a convenience
    helper for converting a json payload into the form Ember Data
    expects.

    ```js
    store.push('person', store.normalize('person', data));
    ```

    This method can be used both to push in brand new
    records, as well as to update existing records.
  itemtype: method
  name: push
  params:
  - name: modelName
    description: ''
    type: String
  - name: data
    description: ''
    type: Object
  return:
    description: |-
      the record that was created or
        updated.
    type: DS.Model
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1649
  description: |-
    Push some raw data into the store.

    This method can be used both to push in brand new
    records, as well as to update existing records. You
    can push in more than one type of object at once.
    All objects should be in the format expected by the
    serializer.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.ActiveModelSerializer;
    ```

    ```js
    var pushData = {
      posts: [
        {id: 1, post_title: "Great post", comment_ids: [2]}
      ],
      comments: [
        {id: 2, comment_body: "Insightful comment"}
      ]
    }

    store.pushPayload(pushData);
    ```

    By default, the data will be deserialized using a default
    serializer (the application serializer if it exists).

    Alternatively, `pushPayload` will accept a model type which
    will determine which serializer will process the payload.
    However, the serializer itself (processing this data via
    `normalizePayload`) will not know which model it is
    deserializing.

    ```app/serializers/application.js
    import DS from 'ember-data';

    export default DS.ActiveModelSerializer;
    ```

    ```app/serializers/post.js
    import DS from 'ember-data';

    export default DS.JSONSerializer;
    ```

    ```js
    store.pushPayload('comment', pushData); // Will use the application serializer
    store.pushPayload('post', pushData); // Will use the post serializer
    ```
  itemtype: method
  name: pushPayload
  params:
  - name: modelName
    description: Optionally, a model type used to determine which serializer will
      be used
    type: String
  - name: inputPayload
    description: ''
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1725
  description: |-
    `normalize` converts a json payload into the normalized form that
    [push](#method_push) expects.

    Example

    ```js
    socket.on('message', function(message) {
      var modelName = message.model;
      var data = message.data;
      store.push(modelName, store.normalize(modelName, data));
    });
    ```
  itemtype: method
  name: normalize
  params:
  - name: modelName
    description: The name of the model type for this payload
    type: String
  - name: payload
    description: ''
    type: Object
  return:
    description: The normalized payload
    type: Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1751
  itemtype: method
  name: update
  params:
  - name: modelName
    description: ''
    type: String
  - name: data
    description: ''
    type: Object
  return:
    description: the record that was updated.
    type: DS.Model
  deprecated: true
  deprecationMessage: Use [push](#method_push) instead
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1764
  description: |-
    If you have an Array of normalized data to push,
    you can call `pushMany` with the Array, and it will
    call `push` repeatedly for you.
  itemtype: method
  name: pushMany
  params:
  - name: modelName
    description: ''
    type: String
  - name: datas
    description: ''
    type: Array
  return:
    description: ''
    type: Array
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1786
  itemtype: method
  name: metaForType
  params:
  - name: modelName
    description: ''
    type: String
  - name: metadata
    description: ''
    type: Object
  deprecated: true
  deprecationMessage: Use [setMetadataFor](#method_setMetadataFor) instead
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1798
  description: |-
    Build a brand new record for a given type, ID, and
    initial data.
  itemtype: method
  name: buildRecord
  access: private
  tagname: ''
  params:
  - name: type
    description: ''
    type: DS.Model
  - name: id
    description: ''
    type: String
  - name: data
    description: ''
    type: Object
  return:
    description: internal model
    type: InternalModel
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1840
  itemtype: method
  name: dematerializeRecord
  access: private
  tagname: ''
  params:
  - name: record
    description: ''
    type: DS.Model
  deprecated: true
  deprecationMessage: Use [unloadRecord](#method_unloadRecord) instead
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1851
  description: |-
    When a record is destroyed, this un-indexes it and
    removes it from any record arrays so it can be GCed.
  itemtype: method
  name: _dematerializeRecord
  access: private
  tagname: ''
  params:
  - name: internalModel
    description: ''
    type: InternalModel
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1878
  description: |-
    Returns an instance of the adapter for a given type. For
    example, `adapterFor('person')` will return an instance of
    `App.PersonAdapter`.

    If no `App.PersonAdapter` is found, this method will look
    for an `App.ApplicationAdapter` (the default adapter for
    your entire application).

    If no `App.ApplicationAdapter` is found, it will return
    the value of the `defaultAdapter`.
  itemtype: method
  name: adapterFor
  access: private
  tagname: ''
  params:
  - name: modelName
    description: ''
    type: String
  return:
    description: DS.Adapter
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1917
  description: |-
    Returns an instance of the serializer for a given type. For
    example, `serializerFor('person')` will return an instance of
    `App.PersonSerializer`.

    If no `App.PersonSerializer` is found, this method will look
    for an `App.ApplicationSerializer` (the default serializer for
    your entire application).

    if no `App.ApplicationSerializer` is found, it will attempt
    to get the `defaultSerializer` from the `PersonAdapter`
    (`adapterFor('person')`).

    If a serializer cannot be found on the adapter, it will fall back
    to an instance of `DS.JSONSerializer`.
  itemtype: method
  name: serializerFor
  access: private
  tagname: ''
  params:
  - name: modelName
    description: the record to serialize
    type: String
  return:
    description: ''
    type: DS.Serializer
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/system/store.js
  line: 1958
  description: |-
    Retrieve a particular instance from the
    container cache. If not found, creates it and
    placing it in the cache.

    Enabled a store to manage local instances of
    adapters and serializers.
  itemtype: method
  name: retrieveManagedInstance
  access: private
  tagname: ''
  params:
  - name: modelName
    description: the object modelName
    type: String
  - name: name
    description: the object name
    type: String
  - name: fallbacks
    description: the fallback objects to lookup if the lookup for modelName or 'application'
      fails
    type: Array
  return:
    description: ''
    type: Ember.Object
  class: DS.Store
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/transforms/base.js
  line: 39
  description: |-
    When given a deserialized value from a record attribute this
    method must return the serialized value.

    Example

    ```javascript
    serialize: function(deserialized) {
      return Ember.isEmpty(deserialized) ? null : Number(deserialized);
    }
    ```
  itemtype: method
  name: serialize
  params:
  - name: deserialized
    description: The deserialized value
  return:
    description: The serialized value
  class: DS.Transform
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/transforms/base.js
  line: 57
  description: |-
    When given a serialize value from a JSON object this method must
    return the deserialized value for the record attribute.

    Example

    ```javascript
    deserialize: function(serialized) {
      return empty(serialized) ? null : Number(serialized);
    }
    ```
  itemtype: method
  name: deserialize
  params:
  - name: serialized
    description: The serialized value
  return:
    description: The deserialized value
  class: DS.Transform
  module: ember-data
  namespace: DS
- file: packages/ember-data/lib/core.js
  line: 12
  itemtype: property
  name: VERSION
  type: String
  default: "'VERSION_STRING_PLACEHOLDER'"
  static: 1
  class: DS
  module: ember-data
warnings: []
